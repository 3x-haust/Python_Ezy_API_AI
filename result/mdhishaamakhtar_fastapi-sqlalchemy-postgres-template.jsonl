{"repo_info": {"repo_name": "fastapi-sqlalchemy-postgres-template", "repo_owner": "mdhishaamakhtar", "repo_url": "https://github.com/mdhishaamakhtar/fastapi-sqlalchemy-postgres-template"}}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/test_posts.py", "content": "import pytest\nfrom fastapi import status\nfrom fastapi.testclient import TestClient\n\nfrom main import app\n\nclient = TestClient(app)\n\ninitial_post_title = \"Hello\"\ninitial_post_description = \"World\"\nchanged_post_description = \"From the other side\"\n\n\n@pytest.mark.dependency()\ndef test_create_post(request):\n    response = client.post(\n        \"/posts/create\",\n        json={\"title\": initial_post_title, \"description\": initial_post_description},\n    )\n    assert response.status_code == status.HTTP_201_CREATED\n    assert response.json()[\"title\"] == \"Hello\"\n    assert response.json()[\"description\"] == \"World\"\n    request.config.cache.set(\"post_id\", response.json()[\"id\"])\n\n\n@pytest.mark.dependency(depends=[\"test_create_post\"])\ndef test_get_all_posts():\n    response = client.get(\"/posts/list/all\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() is not None\n\n\n@pytest.mark.dependency(depends=[\"test_create_post\"])\ndef test_get_one_post(request):\n    post_id = request.config.cache.get(\"post_id\", None)\n    response = client.get(f\"/posts/get/{post_id}\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json()[\"id\"] == post_id\n    assert response.json()[\"title\"] == initial_post_title\n    assert (\n        response.json()[\"description\"] == initial_post_description\n        or changed_post_description\n    )\n\n\n@pytest.mark.dependency(depends=[\"test_create_post\", \"test_get_one_post\"])\ndef test_patch_post(request):\n    post_id = request.config.cache.get(\"post_id\", None)\n    response = client.patch(\n        \"/posts/update\",\n        json={\n            \"id\": post_id,\n            \"title\": initial_post_title,\n            \"description\": changed_post_description,\n        },\n    )\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json()[\"id\"] == post_id\n    assert response.json()[\"title\"] == initial_post_title\n    assert response.json()[\"description\"] == changed_post_description\n\n\n@pytest.mark.dependency(\n    depends=[\n        \"test_create_post\",\n        \"test_get_one_post\",\n        \"test_patch_post\",\n        \"test_get_all_posts\",\n    ]\n)\ndef test_delete_post(request):\n    post_id = request.config.cache.get(\"post_id\", None)\n    response = client.delete(f\"/posts/delete/{post_id}\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json()[\"detail\"] == \"Post Deleted\"\n"}
{"type": "source_file", "path": "main.py", "content": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\nfrom routes.posts import router\nfrom schemas.models import HealthResponse\n\napp = FastAPI()\n\norigins = [\"*\"]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\napp.include_router(router=router, prefix=\"/posts\")\n\n\n@app.get(\"/\", response_model=HealthResponse)\nasync def health():\n    return HealthResponse(status=\"Ok\")\n"}
{"type": "source_file", "path": "database/__init__.py", "content": ""}
{"type": "source_file", "path": "routes/__init__.py", "content": ""}
{"type": "source_file", "path": "schemas/__init__.py", "content": ""}
{"type": "source_file", "path": "database/models.py", "content": "import uuid\n\nfrom sqlalchemy import Column, String\nfrom sqlalchemy.dialects.postgresql import UUID\n\nfrom database.connection import Base, engine\n\n\nclass Posts(Base):\n    __tablename__ = \"posts\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, index=True)\n    title = Column(String)\n    description = Column(String)\n\n\nBase.metadata.create_all(engine)\n"}
{"type": "source_file", "path": "routes/posts.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\n\nfrom database.connection import get_db\nfrom schemas.models import DeletePostResponse, Post, UpdatePost\nfrom utils.post_crud import (\n    post_create,\n    post_delete,\n    post_get_one,\n    post_update,\n    posts_get_all,\n)\n\nrouter = APIRouter(tags=[\"posts\"])\n\n\n@router.post(\"/create\", status_code=status.HTTP_201_CREATED, response_model=Post)\ndef create_post(post: Post, db: Session = Depends(get_db)):\n    return post_create(db=db, post=post)\n\n\n@router.get(\"/list/all\", status_code=status.HTTP_200_OK, response_model=List[Post])\ndef get_all_posts(db: Session = Depends(get_db)):\n    return posts_get_all(db=db)\n\n\n@router.get(\"/get/{id}\", status_code=status.HTTP_200_OK, response_model=Post)\ndef get_one_post(id, db: Session = Depends(get_db)):\n    return post_get_one(db=db, id=id)\n\n\n@router.delete(\n    \"/delete/{id}\", status_code=status.HTTP_200_OK, response_model=DeletePostResponse\n)\ndef delete_post(id, db: Session = Depends(get_db)):\n    delete_status = post_delete(db=db, id=id)\n    if delete_status.detail == \"Doesnt Exist\":\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Post Not Found\"\n        )\n    else:\n        return delete_status\n\n\n@router.patch(\"/update\", status_code=status.HTTP_200_OK, response_model=Post)\ndef update_post(post: UpdatePost, db: Session = Depends(get_db)):\n    return post_update(db=db, post=post)\n"}
{"type": "source_file", "path": "schemas/models.py", "content": "from typing import Optional\nfrom uuid import UUID\n\nfrom pydantic import BaseModel\n\n\nclass HealthResponse(BaseModel):\n    status: str\n\n\nclass Post(BaseModel):\n    id: Optional[UUID]\n    title: str\n    description: str\n\n    class Config:\n        orm_mode = True\n\n\nclass DeletePostResponse(BaseModel):\n    detail: str\n\n\nclass UpdatePost(BaseModel):\n    id: UUID\n    title: str\n    description: str\n\n    class Config:\n        orm_mode = True\n"}
{"type": "source_file", "path": "database/connection.py", "content": "from decouple import config\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = config(\"DATABASE_URL\")\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n"}
{"type": "source_file", "path": "utils/__init__.py", "content": ""}
{"type": "source_file", "path": "utils/post_crud.py", "content": "from uuid import UUID\n\nfrom sqlalchemy.orm import Session\n\nfrom database.models import Posts\nfrom schemas.models import DeletePostResponse, Post, UpdatePost\n\n\ndef post_create(db: Session, post: Post):\n    db_post = Posts(title=post.title, description=post.description)\n    db.add(db_post)\n    db.commit()\n    db.refresh(db_post)\n    return db_post\n\n\ndef posts_get_all(db: Session):\n    return db.query(Posts).all()\n\n\ndef post_get_one(db: Session, id: UUID):\n    return db.query(Posts).filter_by(id=id).one()\n\n\ndef post_update(db: Session, post: UpdatePost):\n    update_query = {Posts.title: post.title, Posts.description: post.description}\n    db.query(Posts).filter_by(id=post.id).update(update_query)\n    db.commit()\n    return db.query(Posts).filter_by(id=post.id).one()\n\n\ndef post_delete(db: Session, id: UUID):\n    post = db.query(Posts).filter_by(id=id).all()\n    if not post:\n        return DeletePostResponse(detail=\"Doesnt Exist\")\n    db.query(Posts).filter_by(id=id).delete()\n    db.commit()\n    return DeletePostResponse(detail=\"Post Deleted\")\n"}
