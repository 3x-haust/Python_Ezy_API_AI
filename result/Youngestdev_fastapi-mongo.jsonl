{"repo_info": {"repo_name": "fastapi-mongo", "repo_owner": "Youngestdev", "repo_url": "https://github.com/Youngestdev/fastapi-mongo"}}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/test_mock_authen.py", "content": "from fastapi.testclient import TestClient\nfrom httpx import AsyncClient\nimport pytest\n\nfrom app import app, token_listener\nfrom tests.conftest import mock_no_authentication\n\n\nclass TestMockAuthentication:\n    @classmethod\n    def setup_class(cls):\n        mock_no_authentication()\n\n    @pytest.mark.anyio\n    async def test_api_processed_jobs(self, client_test: AsyncClient):\n        response = await client_test.get(\"student\")\n\n        assert response.status_code == 200\n"}
{"type": "test_file", "path": "tests/test_mock_database.py", "content": "import asyncio\nfrom beanie import init_beanie\nfrom fastapi.testclient import TestClient\nfrom httpx import AsyncClient\nimport pytest\n\nfrom models.admin import Admin\nfrom models.student import Student\nfrom tests.conftest import mock_no_authentication\n\n\nclass TestMockAuthentication:\n    @classmethod\n    def setup_class(cls):\n        mock_no_authentication()\n\n    @pytest.mark.anyio\n    async def test_mock_databases(self, client_test: AsyncClient):\n        # generate data\n        await Admin(\n            fullname=\"admin\", email=\"admin@admin.com\", password=\"admin\"\n        ).create()\n\n        await Student(\n            fullname=\"student\",\n            email=\"student@student.com\",\n            course_of_study=\"computer science\",\n            year=2021,\n            gpa=4.0,\n        ).create()\n\n        response = await client_test.get(\"student\")\n\n        assert response.status_code == 200\n\n    @pytest.mark.anyio\n    async def test_mock_database(self, client_test: AsyncClient):\n        await Admin(\n            fullname=\"admin\", email=\"admin@admin.com\", password=\"admin\"\n        ).create()\n\n        await Student(\n            fullname=\"student\",\n            email=\"student@student.com\",\n            course_of_study=\"computer science\",\n            year=2021,\n            gpa=4.0,\n        ).create()\n\n        response = await client_test.get(\"student\")\n\n        assert response.status_code == 200\n"}
{"type": "test_file", "path": "tests/conftest.py", "content": "\"\"\"Tests fixtures.\"\"\"\nfrom beanie import init_beanie\nimport pytest\nfrom asgi_lifespan import LifespanManager\nfrom httpx import AsyncClient\n\nfrom app import app\nfrom mongomock_motor import AsyncMongoMockClient\nfrom config.config import initiate_database\n\nimport models as models\nfrom app import app, token_listener\n\n\nasync def mock_database():\n    client = AsyncMongoMockClient()\n    await init_beanie(\n        database=client[\"database_name\"],\n        recreate_views=True,\n        document_models=models.__all__,\n    )\n\n\ndef mock_no_authentication():\n    app.dependency_overrides[token_listener] = lambda: {}\n\n\n@pytest.fixture\nasync def client_test(mocker):\n    \"\"\"\n    Create an instance of the client.\n    :return: yield HTTP client.\n    \"\"\"\n\n    mocker.patch(\"config.config.initiate_database\", return_value=await mock_database())\n\n    async with LifespanManager(app):\n        async with AsyncClient(\n            app=app, base_url=\"http://test\", follow_redirects=True\n        ) as ac:\n            yield ac\n\n\n@pytest.fixture\ndef anyio_backend():\n    return \"asyncio\"\n"}
{"type": "source_file", "path": "config/__init__.py", "content": ""}
{"type": "source_file", "path": "auth/admin.py", "content": "from fastapi import HTTPException, Depends, status\nfrom fastapi.security import HTTPBasicCredentials, HTTPBasic\nfrom passlib.context import CryptContext\n\nfrom database.database import admin_collection\n\nsecurity = HTTPBasic()\nhash_helper = CryptContext(schemes=[\"bcrypt\"])\n\n\nasync def validate_login(credentials: HTTPBasicCredentials = Depends(security)):\n    admin = admin_collection.find_one({\"email\": credentials.username})\n    if admin:\n        password = hash_helper.verify(credentials.password, admin[\"password\"])\n        if not password:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Incorrect email or password\",\n            )\n        return True\n    raise HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Incorrect email or password\"\n    )\n"}
{"type": "source_file", "path": "app.py", "content": "from fastapi import FastAPI, Depends\n\nfrom auth.jwt_bearer import JWTBearer\nfrom config.config import initiate_database\nfrom routes.admin import router as AdminRouter\nfrom routes.student import router as StudentRouter\n\napp = FastAPI()\n\ntoken_listener = JWTBearer()\n\n\n@app.on_event(\"startup\")\nasync def start_database():\n    await initiate_database()\n\n\n@app.get(\"/\", tags=[\"Root\"])\nasync def read_root():\n    return {\"message\": \"Welcome to this fantastic app.\"}\n\n\napp.include_router(AdminRouter, tags=[\"Administrator\"], prefix=\"/admin\")\napp.include_router(StudentRouter,tags=[\"Students\"],prefix=\"/student\",dependencies=[Depends(token_listener)],)\n"}
{"type": "source_file", "path": "auth/jwt_handler.py", "content": "import time\nfrom typing import Dict\n\nimport jwt\n\nfrom config.config import Settings\n\n\ndef token_response(token: str):\n    return {\"access_token\": token}\n\n\nsecret_key = Settings().secret_key\n\n\ndef sign_jwt(user_id: str) -> Dict[str, str]:\n    # Set the expiry time.\n    payload = {\"user_id\": user_id, \"expires\": time.time() + 2400}\n    return token_response(jwt.encode(payload, secret_key, algorithm=\"HS256\"))\n\n\ndef decode_jwt(token: str) -> dict:\n    decoded_token = jwt.decode(token.encode(), secret_key, algorithms=[\"HS256\"])\n    return decoded_token if decoded_token[\"expires\"] >= time.time() else {}\n"}
{"type": "source_file", "path": "__init__.py", "content": ""}
{"type": "source_file", "path": "models/student.py", "content": "from typing import Optional, Any\n\nfrom beanie import Document\nfrom pydantic import BaseModel, EmailStr\n\n\nclass Student(Document):\n    fullname: str\n    email: EmailStr\n    course_of_study: str\n    year: int\n    gpa: float\n\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"fullname\": \"Abdulazeez Abdulazeez Adeshina\",\n                \"email\": \"abdul@school.com\",\n                \"course_of_study\": \"Water resources engineering\",\n                \"year\": 4,\n                \"gpa\": \"3.76\",\n            }\n        }\n\n    class Settings:\n        name = \"student\"\n"}
{"type": "source_file", "path": "main.py", "content": "import uvicorn\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"app:app\", host=\"0.0.0.0\", port=8080, reload=True)\n"}
{"type": "source_file", "path": "config/config.py", "content": "from typing import Optional\n\nfrom beanie import init_beanie\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom pydantic_settings import BaseSettings\nimport models as models\n\n\nclass Settings(BaseSettings):\n    # database configurations\n    DATABASE_URL: Optional[str] = None\n\n    # JWT\n    secret_key: str = \"secret\"\n    algorithm: str = \"HS256\"\n\n    class Config:\n        env_file = \".env.dev\"\n        from_attributes = True\n\n\nasync def initiate_database():\n    client = AsyncIOMotorClient(Settings().DATABASE_URL)\n    await init_beanie(\n        database=client.get_default_database(), document_models=models.__all__\n    )\n"}
{"type": "source_file", "path": "models/admin.py", "content": "from beanie import Document\nfrom fastapi.security import HTTPBasicCredentials\nfrom pydantic import BaseModel, EmailStr\n\n\nclass Admin(Document):\n    fullname: str\n    email: EmailStr\n    password: str\n\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"fullname\": \"Abdulazeez Abdulazeez Adeshina\",\n                \"email\": \"abdul@youngest.dev\",\n                \"password\": \"3xt3m#\",\n            }\n        }\n\n    class Settings:\n        name = \"admin\"\n\n\nclass AdminSignIn(HTTPBasicCredentials):\n    class Config:\n        json_schema_extra = {\n            \"example\": {\"username\": \"abdul@youngest.dev\", \"password\": \"3xt3m#\"}\n        }\n\n\nclass AdminData(BaseModel):\n    fullname: str\n    email: EmailStr\n\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"fullname\": \"Abdulazeez Abdulazeez Adeshina\",\n                \"email\": \"abdul@youngest.dev\",\n            }\n        }\n"}
{"type": "source_file", "path": "auth/jwt_bearer.py", "content": "from fastapi import Request, HTTPException\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\n\nfrom .jwt_handler import decode_jwt\n\n\ndef verify_jwt(jwtoken: str) -> bool:\n    isTokenValid: bool = False\n\n    payload = decode_jwt(jwtoken)\n    if payload:\n        isTokenValid = True\n    return isTokenValid\n\n\nclass JWTBearer(HTTPBearer):\n    def __init__(self, auto_error: bool = True):\n        super(JWTBearer, self).__init__(auto_error=auto_error)\n\n    async def __call__(self, request: Request):\n        credentials: HTTPAuthorizationCredentials = await super(\n            JWTBearer, self\n        ).__call__(request)\n        print(\"Credentials :\", credentials)\n        if credentials:\n            if not credentials.scheme == \"Bearer\":\n                raise HTTPException(\n                    status_code=403, detail=\"Invalid authentication token\"\n                )\n\n            if not verify_jwt(credentials.credentials):\n                raise HTTPException(\n                    status_code=403, detail=\"Invalid token or expired token\"\n                )\n\n            return credentials.credentials\n        else:\n            raise HTTPException(status_code=403, detail=\"Invalid authorization token\")\n"}
{"type": "source_file", "path": "models/__init__.py", "content": "from models.admin import Admin\nfrom models.student import Student\n\n__all__ = [Student, Admin]\n"}
{"type": "source_file", "path": "database/database.py", "content": "from typing import List, Union\n\nfrom beanie import PydanticObjectId\n\nfrom models.admin import Admin\nfrom models.student import Student\n\nadmin_collection = Admin\nstudent_collection = Student\n\n\nasync def add_admin(new_admin: Admin) -> Admin:\n    admin = await new_admin.create()\n    return admin\n\n\nasync def retrieve_students() -> List[Student]:\n    students = await student_collection.all().to_list()\n    return students\n\n\nasync def add_student(new_student: Student) -> Student:\n    student = await new_student.create()\n    return student\n\n\nasync def retrieve_student(id: PydanticObjectId) -> Student:\n    student = await student_collection.get(id)\n    if student:\n        return student\n\n\nasync def delete_student(id: PydanticObjectId) -> bool:\n    student = await student_collection.get(id)\n    if student:\n        await student.delete()\n        return True\n\n\nasync def update_student_data(id: PydanticObjectId, data: dict) -> Union[bool, Student]:\n    des_body = {k: v for k, v in data.items() if v is not None}\n    update_query = {\"$set\": {field: value for field, value in des_body.items()}}\n    student = await student_collection.get(id)\n    if student:\n        await student.update(update_query)\n        return student\n    return False\n"}
{"type": "source_file", "path": "routes/admin.py", "content": "from fastapi import Body, APIRouter, HTTPException\nfrom passlib.context import CryptContext\n\nfrom auth.jwt_handler import sign_jwt\nfrom database.database import add_admin\nfrom models.admin import Admin\nfrom schemas.admin import AdminData, AdminSignIn\n\nrouter = APIRouter()\n\nhash_helper = CryptContext(schemes=[\"bcrypt\"])\n\n\n@router.post(\"/login\")\nasync def admin_login(admin_credentials: AdminSignIn = Body(...)):\n    admin_exists = await Admin.find_one(Admin.email == admin_credentials.username)\n    if admin_exists:\n        password = hash_helper.verify(admin_credentials.password, admin_exists.password)\n        if password:\n            return sign_jwt(admin_credentials.username)\n\n        raise HTTPException(status_code=403, detail=\"Incorrect email or password\")\n\n    raise HTTPException(status_code=403, detail=\"Incorrect email or password\")\n\n\n@router.post(\"\", response_model=AdminData)\nasync def admin_signup(admin: Admin = Body(...)):\n    admin_exists = await Admin.find_one(Admin.email == admin.email)\n    if admin_exists:\n        raise HTTPException(\n            status_code=409, detail=\"Admin with email supplied already exists\"\n        )\n\n    admin.password = hash_helper.encrypt(admin.password)\n    new_admin = await add_admin(admin)\n    return new_admin\n"}
{"type": "source_file", "path": "schemas/student.py", "content": "from pydantic import BaseModel, EmailStr\nfrom typing import Optional, Any\n\nclass UpdateStudentModel(BaseModel):\n    fullname: Optional[str]\n    email: Optional[EmailStr]\n    course_of_study: Optional[str]\n    year: Optional[int]\n    gpa: Optional[float]\n\n    class Collection:\n        name = \"student\"\n\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"fullname\": \"Abdulazeez Abdulazeez\",\n                \"email\": \"abdul@school.com\",\n                \"course_of_study\": \"Water resources and environmental engineering\",\n                \"year\": 4,\n                \"gpa\": \"5.0\",\n            }\n        }\n\nclass Response(BaseModel):\n    status_code: int\n    response_type: str\n    description: str\n    data: Optional[Any]\n\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"status_code\": 200,\n                \"response_type\": \"success\",\n                \"description\": \"Operation successful\",\n                \"data\": \"Sample data\",\n            }\n        }\n"}
{"type": "source_file", "path": "routes/student.py", "content": "from fastapi import APIRouter, Body\n\nfrom database.database import *\nfrom models.student import Student\nfrom schemas.student import Response, UpdateStudentModel\n\n\nrouter = APIRouter()\n\n\n@router.get(\"/\", response_description=\"Students retrieved\", response_model=Response)\nasync def get_students():\n    students = await retrieve_students()\n    return {\n        \"status_code\": 200,\n        \"response_type\": \"success\",\n        \"description\": \"Students data retrieved successfully\",\n        \"data\": students,\n    }\n\n\n@router.get(\"/{id}\", response_description=\"Student data retrieved\", response_model=Response)\nasync def get_student_data(id: PydanticObjectId):\n    student = await retrieve_student(id)\n    if student:\n        return {\n            \"status_code\": 200,\n            \"response_type\": \"success\",\n            \"description\": \"Student data retrieved successfully\",\n            \"data\": student,\n        }\n    return {\n        \"status_code\": 404,\n        \"response_type\": \"error\",\n        \"description\": \"Student doesn't exist\",\n    }\n\n\n@router.post(\n    \"/\",\n    response_description=\"Student data added into the database\",\n    response_model=Response,\n)\nasync def add_student_data(student: Student = Body(...)):\n    new_student = await add_student(student)\n    return {\n        \"status_code\": 200,\n        \"response_type\": \"success\",\n        \"description\": \"Student created successfully\",\n        \"data\": new_student,\n    }\n\n\n@router.delete(\"/{id}\", response_description=\"Student data deleted from the database\")\nasync def delete_student_data(id: PydanticObjectId):\n    deleted_student = await delete_student(id)\n    if deleted_student:\n        return {\n            \"status_code\": 200,\n            \"response_type\": \"success\",\n            \"description\": \"Student with ID: {} removed\".format(id),\n            \"data\": deleted_student,\n        }\n    return {\n        \"status_code\": 404,\n        \"response_type\": \"error\",\n        \"description\": \"Student with id {0} doesn't exist\".format(id),\n        \"data\": False,\n    }\n\n\n@router.put(\"/{id}\", response_model=Response)\nasync def update_student(id: PydanticObjectId, req: UpdateStudentModel = Body(...)):\n    updated_student = await update_student_data(id, req.dict())\n    if updated_student:\n        return {\n            \"status_code\": 200,\n            \"response_type\": \"success\",\n            \"description\": \"Student with ID: {} updated\".format(id),\n            \"data\": updated_student,\n        }\n    return {\n        \"status_code\": 404,\n        \"response_type\": \"error\",\n        \"description\": \"An error occurred. Student with ID: {} not found\".format(id),\n        \"data\": False,\n    }\n"}
{"type": "source_file", "path": "schemas/admin.py", "content": "from pydantic import BaseModel\nfrom fastapi.security import HTTPBasicCredentials\nfrom pydantic import EmailStr\n\nclass AdminSignIn(HTTPBasicCredentials):\n    class Config:\n        json_schema_extra = {\n            \"example\": {\"username\": \"abdul@youngest.dev\", \"password\": \"3xt3m#\"}\n        }\n\n\nclass AdminData(BaseModel):\n    fullname: str\n    email: EmailStr\n\n    class Config:\n        json_schema_extra = {\n            \"example\": {\n                \"fullname\": \"Abdulazeez Abdulazeez Adeshina\",\n                \"email\": \"abdul@youngest.dev\",\n            }\n        }\n"}
