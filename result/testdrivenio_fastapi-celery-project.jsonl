{"repo_info": {"repo_name": "fastapi-celery-project", "repo_owner": "testdrivenio", "repo_url": "https://github.com/testdrivenio/fastapi-celery-project"}}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/tdd/test_tasks.py", "content": "import os\n\nfrom PIL import Image\n\nfrom project.tdd.models import Member\nfrom project.tdd.tasks import generate_avatar_thumbnail\n\n\ndef test_task_generate_avatar_thumbnail(db_session, settings, member):\n    # init state\n    assert member.avatar\n    assert not member.avatar_thumbnail\n\n    generate_avatar_thumbnail(member.id)\n    member = db_session.get(Member, member.id)\n\n    assert member.avatar_thumbnail\n\n    thumbnail_full_path = os.path.join(\n        settings.UPLOADS_DEFAULT_DEST,\n        member.avatar_thumbnail\n    )\n    im = Image.open(thumbnail_full_path)\n\n    assert im.height == 100\n    assert im.width == 100\n"}
{"type": "test_file", "path": "tests/users/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/tdd/test_views.py", "content": "import os\nfrom unittest import mock\n\nfrom project.tdd import tasks\nfrom project.tdd.models import Member\n\n\ndef test_post(client, db_session, settings, member_factory, monkeypatch):\n    mock_generate_avatar_thumbnail_delay = mock.MagicMock(name=\"generate_avatar_thumbnail\")\n    monkeypatch.setattr(tasks.generate_avatar_thumbnail, \"delay\", mock_generate_avatar_thumbnail_delay)\n\n    fake_member = member_factory.build()\n\n    avatar_full_path = os.path.join(\n        settings.UPLOADS_DEFAULT_DEST,\n        fake_member.avatar\n    )\n\n    files = {\"upload_file\": open(avatar_full_path, \"rb\")}\n\n    data = {\n        \"username\": fake_member.username,\n        \"email\": fake_member.email,\n    }\n\n    response = client.post(\n        \"/tdd/member_signup/\",\n        data=data,\n        files=files,\n    )\n    assert response.status_code == 200\n\n    member = db_session.query(Member).filter_by(username=fake_member.username).first()\n    assert member\n    assert member.avatar\n    mock_generate_avatar_thumbnail_delay.assert_called_with(\n        member.id\n    )\n"}
{"type": "test_file", "path": "tests/tdd/test_models.py", "content": "def test_model(db_session, member):\n    assert member.username\n    assert member.avatar\n    assert not member.avatar_thumbnail\n"}
{"type": "test_file", "path": "tests/users/test_tasks.py", "content": "from unittest import mock\n\nimport pytest\nimport requests\nfrom celery.exceptions import Retry\n\nfrom project.users.tasks import task_add_subscribe\n\n\ndef test_post_succeed(db_session, monkeypatch, user):\n    mock_requests_post = mock.MagicMock()\n    monkeypatch.setattr(requests, \"post\", mock_requests_post)\n\n    task_add_subscribe(user.id)\n\n    mock_requests_post.assert_called_with(\n        \"https://httpbin.org/delay/5\",\n        data={\"email\": user.email}\n    )\n\n\ndef test_exception(db_session, monkeypatch, user):\n    mock_requests_post = mock.MagicMock()\n    monkeypatch.setattr(requests, \"post\", mock_requests_post)\n\n    mock_task_add_subscribe_retry = mock.MagicMock()\n    monkeypatch.setattr(task_add_subscribe, \"retry\", mock_task_add_subscribe_retry)\n\n    mock_task_add_subscribe_retry.side_effect = Retry()\n    mock_requests_post.side_effect = Exception()\n\n    with pytest.raises(Retry):\n        task_add_subscribe(user.id)"}
{"type": "test_file", "path": "tests/users/test_views.py", "content": "import requests\nfrom unittest import mock\nfrom project.users import users_router, tasks\nfrom project.users.models import User\n\n\ndef test_pytest_setup(client, db_session):\n    # test view\n    response = client.get(users_router.url_path_for('form_example_get'))\n    assert response.status_code == 200\n\n    # test db\n    user = User(username=\"test\", email=\"test@example.com\")\n    with db_session.begin():\n        db_session.add(user)\n    assert user.id\n\n\ndef test_view_with_eager_mode(client, db_session, settings, monkeypatch):\n    mock_requests_post = mock.MagicMock()\n    monkeypatch.setattr(requests, \"post\", mock_requests_post)\n\n    monkeypatch.setattr(settings, \"CELERY_TASK_ALWAYS_EAGER\", True, raising=False)\n\n    user_name = \"michaelyin\"\n    user_email = f\"{user_name}@accordbox.com\"\n    response = client.post(\n        users_router.url_path_for('user_subscribe'),\n        json={\"email\": user_email, \"username\": user_name},\n    )\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"send task to Celery successfully\",\n    }\n\n    mock_requests_post.assert_called_with(\n        \"https://httpbin.org/delay/5\",\n        data={\"email\": user_email}\n    )\n\n\ndef test_user_subscribe_view(client, db_session, settings, monkeypatch, user_factory):\n    user = user_factory.build()\n\n    task_add_subscribe = mock.MagicMock(name=\"task_add_subscribe\")\n    task_add_subscribe.return_value = mock.MagicMock(task_id=\"task_id\")\n    monkeypatch.setattr(tasks.task_add_subscribe, \"delay\", task_add_subscribe)\n\n    response = client.post(\n        users_router.url_path_for('user_subscribe'),\n        json={\"email\": user.email, \"username\": user.username}\n    )\n\n    assert response.status_code == 200\n    assert response.json() == {\n        \"message\": \"send task to Celery successfully\",\n    }\n\n    # query from the db again\n    user = db_session.query(User).filter_by(username=user.username).first()\n    task_add_subscribe.assert_called_with(\n        user.id\n    )"}
{"type": "test_file", "path": "tests/conftest.py", "content": "import os\n\nimport pytest\n\nos.environ[\"FASTAPI_CONFIG\"] = \"testing\"  # noqa\n\nfrom pytest_factoryboy import register\nfrom project.users.factories import UserFactory\nfrom project.tdd.factories import MemberFactory\n\nregister(UserFactory)\nregister(MemberFactory)\n\n@pytest.fixture\ndef settings():\n    from project.config import settings as _settings\n    return _settings\n\n\n@pytest.fixture\ndef app(settings):\n    from project import create_app\n\n    app = create_app()\n    return app\n\n\n@pytest.fixture()\ndef db_session(app):\n    from project.database import Base, engine, SessionLocal\n\n    Base.metadata.create_all(bind=engine)\n    session = SessionLocal()\n    yield session\n    session.close()\n    Base.metadata.drop_all(bind=engine)\n\n\n@pytest.fixture()\ndef client(app):\n    from fastapi.testclient import TestClient\n\n    yield TestClient(app)\n\n\n@pytest.fixture(autouse=True)\ndef tmp_upload_dir(tmpdir, settings):\n    settings.UPLOADS_DEFAULT_DEST = tmpdir.mkdir(\"tmp\")\n"}
{"type": "test_file", "path": "tests/test_celery_utils.py", "content": "from unittest import mock\n\nimport pytest\n\nfrom project.celery_utils import custom_celery_task\nfrom project.database import db_context\nfrom project.users.models import User\n\n\n# tasks\n\n@custom_celery_task()\ndef successful_task(user_id):\n    with db_context() as session:\n        user = session.get(User, user_id)\n        user.username = \"test\"\n        session.commit()\n\n\n@custom_celery_task()\ndef throwing_no_retry_task():\n    raise TypeError\n\n\n@custom_celery_task()\ndef throwing_retry_task():\n    raise Exception\n\n\n# tests\n\ndef test_custom_celery_task(db_session, settings, user, monkeypatch):\n    monkeypatch.setattr(settings, \"CELERY_TASK_ALWAYS_EAGER\", True, raising=False)\n\n    successful_task.delay(user.id)\n\n    assert db_session.get(User, user.id).username == \"test\"\n\n\ndef test_throwing_no_retry_task(settings, monkeypatch):\n    \"\"\"\n    If the exception is in EXCEPTION_BLOCK_LIST, should not retry the task\n    \"\"\"\n    monkeypatch.setattr(settings, \"CELERY_TASK_ALWAYS_EAGER\", True, raising=False)\n    monkeypatch.setattr(settings, \"CELERY_TASK_EAGER_PROPAGATES\", True, raising=False)\n\n    with mock.patch(\"celery.app.task.Task.retry\") as mock_retry:\n        with pytest.raises(TypeError):\n            throwing_no_retry_task.delay()\n\n        mock_retry.assert_not_called()\n\n\ndef test_throwing_retry_task(settings, monkeypatch):\n    monkeypatch.setattr(settings, \"CELERY_TASK_ALWAYS_EAGER\", True, raising=False)\n    monkeypatch.setattr(settings, \"CELERY_TASK_EAGER_PROPAGATES\", True, raising=False)\n\n    with mock.patch(\"celery.app.task.Task.retry\") as mock_retry:\n        with pytest.raises(Exception):\n            throwing_retry_task.delay()\n\n        mock_retry.assert_called()\n        # assert \"countdown\" in mock_retry.call_args.kwargs\n        assert \"countdown\" in mock_retry.call_args[1]\n"}
{"type": "test_file", "path": "tests/tdd/__init__.py", "content": ""}
{"type": "source_file", "path": "alembic/versions/6c61e0875de3_.py", "content": "\"\"\"empty message\n\nRevision ID: 6c61e0875de3\nRevises: b48ac95a682c\nCreate Date: 2024-01-27 08:34:18.170471\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '6c61e0875de3'\ndown_revision: Union[str, None] = 'b48ac95a682c'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('members',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('username', sa.String(length=128), nullable=False),\n    sa.Column('email', sa.String(length=128), nullable=False),\n    sa.Column('avatar', sa.String(length=256), nullable=False),\n    sa.Column('avatar_thumbnail', sa.String(length=256), nullable=True),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('email'),\n    sa.UniqueConstraint('username')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('members')\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "project/tdd/factories.py", "content": "import os\n\nimport factory\nfrom factory import LazyAttribute, Faker\nfrom PIL import Image\n\nfrom project.config import settings\nfrom project.database import SessionLocal\nfrom project.tdd.models import Member\n\n\nclass MemberFactory(factory.alchemy.SQLAlchemyModelFactory):\n    class Meta:\n        model = Member\n        sqlalchemy_session = SessionLocal()\n        sqlalchemy_get_or_create = (\"username\",)\n        sqlalchemy_session_persistence = \"commit\"\n\n    username = Faker(\"user_name\")\n    email = LazyAttribute(lambda o: \"%s@example.com\" % o.username)\n\n    @factory.lazy_attribute\n    def avatar(self):\n\n        width = 300\n        height = 300\n        color = \"blue\"\n        image_format = \"JPEG\"\n        image_palette = \"RGB\"\n\n        with Image.new(image_palette, (width, height), color) as thumb:\n            filename = f\"{self.username}.jpg\"\n            full_path = os.path.join(\n                settings.UPLOADS_DEFAULT_DEST,\n                filename\n            )\n            thumb.save(full_path, format=image_format)\n\n        return filename\n"}
{"type": "source_file", "path": "project/database.py", "content": "from contextlib import contextmanager\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker, declarative_base\n\nfrom project.config import settings\n\n# https://fastapi.tiangolo.com/tutorial/sql-databases/#create-the-sqlalchemy-engine\nengine = create_engine(\n    settings.DATABASE_URL, connect_args=settings.DATABASE_CONNECT_DICT\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\n\ndef get_db_session():\n    session = SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()\n\n\ndb_context = contextmanager(get_db_session)"}
{"type": "source_file", "path": "project/tdd/views.py", "content": "import os\n\nfrom fastapi import FastAPI, File, UploadFile, Depends, Form\nfrom sqlalchemy.orm import Session\n\nfrom . import tdd_router\nfrom project.database import get_db_session\nfrom project.config import settings\nfrom project.tdd.models import Member\nfrom project.tdd.tasks import generate_avatar_thumbnail\n\n\n@tdd_router.post(\"/member_signup/\")\ndef member_signup(\n        username: str = Form(...),\n        email: str = Form(...),\n        upload_file: UploadFile = File(...),\n        session: Session = Depends(get_db_session)\n):\n    \"\"\"\n    https://stackoverflow.com/questions/63580229/how-to-save-uploadfile-in-fastapi\n    https://github.com/encode/starlette/issues/446\n    \"\"\"\n    file_location = os.path.join(\n        settings.UPLOADS_DEFAULT_DEST,\n        upload_file.filename,\n    )\n    with open(file_location, \"wb\") as file_object:\n        file_object.write(upload_file.file.read())\n\n    try:\n        member = Member(\n            username=username,\n            email=email,\n            avatar=upload_file.filename,\n        )\n        session.add(member)\n        session.commit()\n        member_id = member.id\n    except Exception as e:\n        session.rollback()\n        raise\n\n    generate_avatar_thumbnail.delay(member_id)\n    return {\"message\": \"Sign up successful\"}\n"}
{"type": "source_file", "path": "alembic/env.py", "content": "from logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\n\nfrom alembic import context\n\nfrom project import create_app\nfrom project.config import settings\nfrom project.database import Base\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nconfig.set_main_option(\"sqlalchemy.url\", str(settings.DATABASE_URL))\n\nfastapi_app = create_app()\n\ntarget_metadata = Base.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"}
{"type": "source_file", "path": "project/tdd/tasks.py", "content": "import os\n\nfrom celery import shared_task\nfrom PIL import Image\n\nfrom project.config import settings\nfrom project.database import db_context\nfrom project.tdd.models import Member\n\n\n@shared_task(name=\"generate_avatar_thumbnail\")\ndef generate_avatar_thumbnail(member_pk):\n    with db_context() as session:\n        member = session.get(Member, member_pk)\n\n        full_path = os.path.join(\n            settings.UPLOADS_DEFAULT_DEST,\n            member.avatar\n        )\n\n        thumbnail_path = f\"{member.id}-avatar-thumbnail.jpg\"\n        thumbnail_full_path = os.path.join(\n            settings.UPLOADS_DEFAULT_DEST,\n            thumbnail_path\n        )\n\n        im = Image.open(full_path)\n        size = (100, 100)\n        im.thumbnail(size)\n        im.save(thumbnail_full_path, \"JPEG\")\n\n        member.avatar_thumbnail = thumbnail_path\n        session.add(member)\n        session.commit()\n"}
{"type": "source_file", "path": "project/celery_utils.py", "content": "import functools\n\nfrom celery import current_app as current_celery_app, shared_task\nfrom celery.result import AsyncResult\nfrom celery.utils.time import get_exponential_backoff_interval\nfrom project.config import settings\n\n\ndef create_celery():\n    celery_app = current_celery_app\n    celery_app.config_from_object(settings, namespace=\"CELERY\")\n\n    return celery_app\n\n\ndef get_task_info(task_id):\n    \"\"\"\n    return task info according to the task_id\n    \"\"\"\n    task = AsyncResult(task_id)\n    state = task.state\n\n    if state == \"FAILURE\":\n        error = str(task.result)\n        response = {\n            \"state\": task.state,\n            \"error\": error,\n        }\n    else:\n        response = {\n            \"state\": task.state,\n        }\n    return response\n\n\nclass custom_celery_task:\n\n    EXCEPTION_BLOCK_LIST = (\n        IndexError,\n        KeyError,\n        TypeError,\n        UnicodeDecodeError,\n        ValueError,\n    )\n\n    def __init__(self, *args, **kwargs):\n        self.task_args = args\n        self.task_kwargs = kwargs\n\n    def __call__(self, func):\n        @functools.wraps(func)\n        def wrapper_func(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except self.EXCEPTION_BLOCK_LIST:\n                # do not retry for those exceptions\n                raise\n            except Exception as e:\n                # here we add Exponential Backoff just like Celery\n                countdown = self._get_retry_countdown(task_func)\n                raise task_func.retry(exc=e, countdown=countdown)\n\n        task_func = shared_task(*self.task_args, **self.task_kwargs)(wrapper_func)\n        return task_func\n\n    def _get_retry_countdown(self, task_func):\n        retry_backoff = int(\n            max(1.0, float(self.task_kwargs.get('retry_backoff', True)))\n        )\n        retry_backoff_max = int(\n            self.task_kwargs.get('retry_backoff_max', 600)\n        )\n        retry_jitter = self.task_kwargs.get(\n            'retry_jitter', True\n        )\n\n        countdown = get_exponential_backoff_interval(\n            factor=retry_backoff,\n            retries=task_func.request.retries,\n            maximum=retry_backoff_max,\n            full_jitter=retry_jitter\n        )\n\n        return countdown\n"}
{"type": "source_file", "path": "main.py", "content": "from project import create_app\n\napp = create_app()\ncelery = app.celery_app\n"}
{"type": "source_file", "path": "project/tdd/__init__.py", "content": "from fastapi import APIRouter\n\ntdd_router = APIRouter(\n    prefix=\"/tdd\",\n)\n\nfrom . import views, models # noqa\n"}
{"type": "source_file", "path": "project/__init__.py", "content": "from contextlib import asynccontextmanager\nfrom broadcaster import Broadcast\nfrom fastapi import FastAPI\n\nfrom project.config import settings\n\nbroadcast = Broadcast(settings.WS_MESSAGE_QUEUE)\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await broadcast.connect()\n    yield\n    await broadcast.disconnect()\n\n\ndef create_app() -> FastAPI:\n    app = FastAPI(lifespan=lifespan)\n\n    from project.logging import configure_logging\n    configure_logging()\n\n    # do this before loading routes\n    from project.celery_utils import create_celery\n    app.celery_app = create_celery()\n\n    from project.users import users_router\n    app.include_router(users_router)\n\n    from project.tdd import tdd_router\n    app.include_router(tdd_router)\n\n    from project.ws import ws_router\n    app.include_router(ws_router)\n\n    from project.ws.views import register_socketio_app\n    register_socketio_app(app)\n\n    @app.get(\"/\")\n    async def root():\n        return {\"message\": \"Hello World\"}\n\n    return app\n"}
{"type": "source_file", "path": "project/users/views.py", "content": "import logging\nimport random\nfrom string import ascii_lowercase\n\nimport requests\nfrom celery.result import AsyncResult\nfrom fastapi import FastAPI, Request, Body, Depends\nfrom fastapi.responses import JSONResponse\nfrom fastapi.templating import Jinja2Templates\nfrom sqlalchemy.orm import Session\n\nfrom . import users_router\nfrom .schemas import UserBody\nfrom .tasks import sample_task, task_process_notification, task_send_welcome_email, task_add_subscribe\nfrom .models import User\nfrom project.database import get_db_session\n\n\nlogger = logging.getLogger(__name__)\ntemplates = Jinja2Templates(directory=\"project/users/templates\")\n\n\ndef random_username():\n    username = \"\".join([random.choice(ascii_lowercase) for i in range(5)])\n    return username\n\n\ndef api_call(email: str):\n    # used for testing a failed api call\n    if random.choice([0, 1]):\n        raise Exception(\"random processing error\")\n\n    # used for simulating a call to a third-party api\n    requests.post(\"https://httpbin.org/delay/5\")\n\n\n@users_router.get(\"/form/\")\ndef form_example_get(request: Request):\n    return templates.TemplateResponse(\"form.html\", {\"request\": request})\n\n\n@users_router.post(\"/form/\")\ndef form_example_post(user_body: UserBody):\n    task = sample_task.delay(user_body.email)\n    return JSONResponse({\"task_id\": task.task_id})\n\n\n@users_router.get(\"/task_status/\")\ndef task_status(task_id: str):\n    task = AsyncResult(task_id)\n    state = task.state\n\n    if state == 'FAILURE':\n        error = str(task.result)\n        response = {\n            'state': state,\n            'error': error,\n        }\n    else:\n        response = {\n            'state': state,\n        }\n    return JSONResponse(response)\n\n\n@users_router.post(\"/webhook_test/\")\ndef webhook_test():\n    if not random.choice([0, 1]):\n        # mimic an error\n        raise Exception()\n\n    # blocking process\n    requests.post(\"https://httpbin.org/delay/5\")\n    return \"pong\"\n\n\n@users_router.post(\"/webhook_test_async/\")\ndef webhook_test_async():\n    task = task_process_notification.delay()\n    print(task.id)\n    return \"pong\"\n\n\n@users_router.get(\"/form_ws/\")\ndef form_ws_example(request: Request):\n    return templates.TemplateResponse(\"form_ws.html\", {\"request\": request})\n\n\n@users_router.get(\"/form_socketio/\")\ndef form_socketio_example(request: Request):\n    return templates.TemplateResponse(\"form_socketio.html\", {\"request\": request})\n\n\n@users_router.get(\"/transaction_celery/\")\ndef transaction_celery(session: Session = Depends(get_db_session)):\n    username = random_username()\n    user = User(\n        username=f'{username}',\n        email=f'{username}@test.com',\n    )\n    with session.begin():\n        session.add(user)\n\n    logger.info(f\"user {user.id} {user.username} is persistent now\")\n    task_send_welcome_email.delay(user.id)\n    return {\"message\": \"done\"}\n\n\n@users_router.post(\"/user_subscribe/\")\ndef user_subscribe(\n        user_body: UserBody,\n        session: Session = Depends(get_db_session)\n):\n    with session.begin():\n        user = session.query(User).filter_by(\n            username=user_body.username\n        ).first()\n        if not user:\n            user = User(\n                username=user_body.username,\n                email=user_body.email,\n            )\n            session.add(user)\n    task_add_subscribe.delay(user.id)\n    return {\"message\": \"send task to Celery successfully\"}\n"}
{"type": "source_file", "path": "project/users/models.py", "content": "from sqlalchemy import Column, Integer, String\n\nfrom project.database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    username = Column(String(128), unique=True, nullable=False)\n    email = Column(String(128), unique=True, nullable=False)\n\n    def __init__(self, username, email, *args, **kwargs):\n        self.username = username\n        self.email = email\n"}
{"type": "source_file", "path": "project/users/factories.py", "content": "import factory\nfrom factory import LazyAttribute, Faker\n\nfrom project.database import SessionLocal\nfrom project.users.models import User\n\n\nclass UserFactory(factory.alchemy.SQLAlchemyModelFactory):\n    class Meta:\n        model = User\n        sqlalchemy_session = SessionLocal()\n        sqlalchemy_get_or_create = (\"username\",)\n        sqlalchemy_session_persistence = \"commit\"\n\n    username = Faker(\"user_name\")\n    email = LazyAttribute(lambda o: \"%s@example.com\" % o.username)\n"}
{"type": "source_file", "path": "project/users/__init__.py", "content": "from fastapi import APIRouter\n\nusers_router = APIRouter(\n    prefix=\"/users\",\n)\n\nfrom . import views, models, tasks\n"}
{"type": "source_file", "path": "project/users/schemas.py", "content": "from pydantic import BaseModel\n\n\nclass UserBody(BaseModel):\n\n    username: str\n    email: str\n"}
{"type": "source_file", "path": "project/ws/__init__.py", "content": "from fastapi import APIRouter\n\nws_router = APIRouter()\n\nfrom . import views # noqa"}
{"type": "source_file", "path": "project/users/tasks.py", "content": "import random\nimport logging\n\nimport requests\nfrom asgiref.sync import async_to_sync\nfrom celery import shared_task\nfrom celery.signals import task_postrun\nfrom celery.utils.log import get_task_logger\nfrom celery.signals import after_setup_logger\nfrom project.database import db_context\nfrom project.celery_utils import custom_celery_task\n\n\nlogger = get_task_logger(__name__)\n\n\n@shared_task\ndef divide(x, y):\n    # from celery.contrib import rdb\n    # rdb.set_trace()\n\n    import time\n    time.sleep(5)\n    return x / y\n\n\n@shared_task()\ndef sample_task(email):\n    from project.users.views import api_call\n\n    api_call(email)\n\n\n@custom_celery_task(max_retries=3)\ndef task_process_notification():\n    if not random.choice([0, 1]):\n        # mimic random error\n        raise Exception()\n\n    requests.post(\"https://httpbin.org/delay/5\")\n\n\n@task_postrun.connect\ndef task_postrun_handler(task_id, **kwargs):\n    from project.ws.views import update_celery_task_status\n    async_to_sync(update_celery_task_status)(task_id)\n\n    from project.ws.views import update_celery_task_status_socketio\n    update_celery_task_status_socketio(task_id)\n\n\n@shared_task(name=\"task_schedule_work\")\ndef task_schedule_work():\n    logger.info(\"task_schedule_work run\")\n\n\n@shared_task(name=\"default:dynamic_example_one\")\ndef dynamic_example_one():\n    logger.info(\"Example One\")\n\n\n@shared_task(name=\"low_priority:dynamic_example_two\")\ndef dynamic_example_two():\n    logger.info(\"Example Two\")\n\n\n@shared_task(name=\"high_priority:dynamic_example_three\")\ndef dynamic_example_three():\n    logger.info(\"Example Three\")\n\n\n@shared_task()\ndef task_send_welcome_email(user_pk):\n    from project.users.models import User\n\n    with db_context() as session:\n        user = session.get(User, user_pk)\n        logger.info(f'send email to {user.email} {user.id}')\n\n\n@shared_task()\ndef task_test_logger():\n    logger.info(\"test\")\n\n\n@after_setup_logger.connect()\ndef on_after_setup_logger(logger, **kwargs):\n    formatter = logger.handlers[0].formatter\n    file_handler = logging.FileHandler('celery.log')\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n\n\n@shared_task(bind=True)\ndef task_add_subscribe(self, user_pk):\n    with db_context() as session:\n        try:\n            from project.users.models import User\n\n            user = session.get(User, user_pk)\n            requests.post(\n                \"https://httpbin.org/delay/5\",\n                data={\"email\": user.email},\n            )\n        except Exception as exc:\n            raise self.retry(exc=exc)\n"}
{"type": "source_file", "path": "project/asgi.py", "content": "from project import create_app\n\napp = create_app()\ncelery = app.celery_app"}
{"type": "source_file", "path": "project/logging.py", "content": "import logging\nimport logging.config\n\n\ndef configure_logging():\n    logging_dict = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,\n        \"formatters\": {\n            \"verbose\": {\n                \"format\": \"[%(asctime)s: %(levelname)s] [%(pathname)s:%(lineno)d] %(message)s\",\n            },\n        },\n        \"handlers\": {\n            \"console\": {\n                \"class\": \"logging.StreamHandler\",\n                \"formatter\": \"verbose\",\n            },\n        },\n        \"root\": {\n            \"handlers\": [\"console\"],\n            \"level\": \"INFO\",\n        },\n        \"loggers\": {\n            \"project\": {\n                \"handlers\": [\"console\"],\n                \"propagate\": False,\n            },\n            \"uvicorn.access\": {\n                \"propagate\": True,\n            },\n        },\n    }\n\n    logging.config.dictConfig(logging_dict)\n"}
{"type": "source_file", "path": "project/ws/views.py", "content": "import json\n\nimport socketio\nfrom fastapi import FastAPI, WebSocket\nfrom socketio.asyncio_namespace import AsyncNamespace\n\nfrom . import ws_router\nfrom project import broadcast\nfrom project.celery_utils import get_task_info\nfrom project.config import settings\n\n\n@ws_router.websocket(\"/ws/task_status/{task_id}\")\nasync def ws_task_status(websocket: WebSocket):\n    await websocket.accept()\n\n    task_id = websocket.scope[\"path_params\"][\"task_id\"]\n\n    async with broadcast.subscribe(channel=task_id) as subscriber:\n        # just in case the task already finish\n        data = get_task_info(task_id)\n        await websocket.send_json(data)\n\n        async for event in subscriber:\n            await websocket.send_json(json.loads(event.message))\n\n\nasync def update_celery_task_status(task_id: str):\n    \"\"\"\n    This function is called by Celery worker in task_postrun signal handler\n    \"\"\"\n    await broadcast.connect()\n    await broadcast.publish(\n        channel=task_id,\n        message=json.dumps(get_task_info(task_id))  # RedisProtocol.publish expect str\n    )\n    await broadcast.disconnect()\n\n\nclass TaskStatusNameSpace(AsyncNamespace):\n\n    async def on_join(self, sid, data):\n        self.enter_room(sid=sid, room=data[\"task_id\"])\n        # just in case the task already finish\n        await self.emit(\"status\", get_task_info(data[\"task_id\"]), room=data[\"task_id\"])\n\n\ndef register_socketio_app(app: FastAPI):\n    mgr = socketio.AsyncRedisManager(\n        settings.WS_MESSAGE_QUEUE\n    )\n    # https://python-socketio.readthedocs.io/en/latest/server.html#uvicorn-daphne-and-other-asgi-servers\n    # https://github.com/tiangolo/fastapi/issues/129#issuecomment-714636723\n    sio = socketio.AsyncServer(\n        async_mode=\"asgi\",\n        client_manager=mgr,\n        logger=True,\n        engineio_logger=True\n    )\n    sio.register_namespace(TaskStatusNameSpace(\"/task_status\"))\n    asgi = socketio.ASGIApp(\n        socketio_server=sio,\n    )\n    app.mount(\"/ws\", asgi)\n\n\ndef update_celery_task_status_socketio(task_id):\n    \"\"\"\n    This function would be called in Celery worker\n    https://python-socketio.readthedocs.io/en/latest/server.html#emitting-from-external-processes\n    \"\"\"\n    # connect to the redis queue as an external process\n    external_sio = socketio.RedisManager(settings.WS_MESSAGE_QUEUE, write_only=True)\n    # emit an event\n    external_sio.emit(\"status\", get_task_info(task_id), room=task_id, namespace=\"/task_status\")\n"}
{"type": "source_file", "path": "project/config.py", "content": "import os\nimport pathlib\nfrom functools import lru_cache\nfrom kombu import Queue\n\n\ndef route_task(name, args, kwargs, options, task=None, **kw):\n    if \":\" in name:\n        queue, _ = name.split(\":\")\n        return {\"queue\": queue}\n    return {\"queue\": \"default\"}\n\n\nclass BaseConfig:\n    BASE_DIR: pathlib.Path = pathlib.Path(__file__).parent.parent\n\n    DATABASE_URL: str = os.environ.get(\"DATABASE_URL\", f\"sqlite:///{BASE_DIR}/db.sqlite3\")\n    DATABASE_CONNECT_DICT: dict = {}\n\n    CELERY_BROKER_URL: str = os.environ.get(\"CELERY_BROKER_URL\", \"redis://127.0.0.1:6379/0\")\n    CELERY_RESULT_BACKEND: str = os.environ.get(\"CELERY_RESULT_BACKEND\", \"redis://127.0.0.1:6379/0\")\n\n    WS_MESSAGE_QUEUE: str = os.environ.get(\"WS_MESSAGE_QUEUE\", \"redis://127.0.0.1:6379/0\")\n\n    CELERY_BEAT_SCHEDULE: dict = {\n        # \"task-schedule-work\": {\n        #     \"task\": \"task_schedule_work\",\n        #     \"schedule\": 5.0,  # five seconds\n        # },\n    }\n\n    CELERY_TASK_DEFAULT_QUEUE: str = \"default\"\n\n    # Force all queues to be explicitly listed in `CELERY_TASK_QUEUES` to help prevent typos\n    CELERY_TASK_CREATE_MISSING_QUEUES: bool = False\n\n    CELERY_TASK_QUEUES: list = (\n        # need to define default queue here or exception would be raised\n        Queue(\"default\"),\n\n        Queue(\"high_priority\"),\n        Queue(\"low_priority\"),\n    )\n\n    CELERY_TASK_ROUTES = (route_task,)\n\n    UPLOADS_DEFAULT_DEST: str = str(BASE_DIR / \"upload\")\n\n\nclass DevelopmentConfig(BaseConfig):\n    pass\n\n\nclass ProductionConfig(BaseConfig):\n    pass\n\n\nclass TestingConfig(BaseConfig):\n    # https://fastapi.tiangolo.com/advanced/testing-database/\n    DATABASE_URL: str = \"sqlite:///./test.db\"\n    DATABASE_CONNECT_DICT: dict = {\"check_same_thread\": False}\n\n\n@lru_cache()\ndef get_settings():\n    config_cls_dict = {\n        \"development\": DevelopmentConfig,\n        \"production\": ProductionConfig,\n        \"testing\": TestingConfig\n    }\n\n    config_name = os.environ.get(\"FASTAPI_CONFIG\", \"development\")\n    config_cls = config_cls_dict[config_name]\n    return config_cls()\n\n\nsettings = get_settings()\n"}
{"type": "source_file", "path": "alembic/versions/399011ac3c75_.py", "content": "\"\"\"empty message\n\nRevision ID: 399011ac3c75\nRevises: \nCreate Date: 2024-01-04 15:58:51.354365\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '399011ac3c75'\ndown_revision: Union[str, None] = None\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "project/tdd/models.py", "content": "from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\n\nfrom project.database import Base\n\n\nclass Member(Base):\n\n    __tablename__ = \"members\"\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    username = Column(String(128), unique=True, nullable=False)\n    email = Column(String(128), unique=True, nullable=False)\n\n    avatar = Column(String(256), nullable=False)\n    avatar_thumbnail = Column(String(256), nullable=True)"}
{"type": "source_file", "path": "alembic/versions/b48ac95a682c_.py", "content": "\"\"\"empty message\n\nRevision ID: b48ac95a682c\nRevises: 399011ac3c75\nCreate Date: 2024-01-04 16:01:47.893843\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'b48ac95a682c'\ndown_revision: Union[str, None] = '399011ac3c75'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('username', sa.String(length=128), nullable=False),\n    sa.Column('email', sa.String(length=128), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('email'),\n    sa.UniqueConstraint('username')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('users')\n    # ### end Alembic commands ###\n"}
