{"repo_info": {"repo_name": "mawaqit-api", "repo_owner": "mrsofiane", "repo_url": "https://github.com/mrsofiane/mawaqit-api"}}
{"type": "test_file", "path": "tests/test_main.py", "content": "from fastapi.testclient import TestClient\n\nfrom main import app\n\nclient = TestClient(app)\nAPI_ROOT= \"/api/v1\"\n\n\ndef test_read_root():\n    response = client.get(API_ROOT)\n    assert response.status_code == 200\n    assert response.json() == {\n        \"Greetings\": \"Hello and Welcome to this Api, this api use the mawaqit.net as data source of prayers time in more than 8000 masjid, this api can be used to fetch data in json, you can find our docs on /docs. \"}\n\n\ndef test_get_prayer_times():\n    response = client.get(f\"{API_ROOT}/assalam-argenteuil/prayer-times\")\n    r_json = response.json()\n    assert response.status_code == 200\n    assert len(r_json) == 6\n\ndef test_get_year_calendar():\n    response = client.get(f\"{API_ROOT}/assalam-argenteuil/calendar\")\n    r_json = response.json()\n    assert response.status_code == 200\n    assert len(r_json[\"calendar\"]) == 12\n\ndef test_get_month_calendar():\n    response = client.get(f\"{API_ROOT}/assalam-argenteuil/calendar/1\")\n    r_json = response.json()\n    assert response.status_code == 200\n    assert len(r_json) == 31"}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "source_file", "path": "controllers/__init__.py", "content": ""}
{"type": "source_file", "path": "main.py", "content": "from fastapi import FastAPI\nfrom controllers.mawaqitController import router as mawaqitRouter\n\ndef create_app() -> FastAPI:\n    app = FastAPI(title='Mawaqit Api', debug=False, read_root=\"/\")\n    return app\n\napp = create_app()\napp.include_router(router=mawaqitRouter)"}
{"type": "source_file", "path": "models/models.py", "content": "from pydantic import BaseModel\n\nclass PrayerTimes(BaseModel):\n    fajr: str\n    sunset: str\n    dohr: str\n    asr: str\n    maghreb: str\n    icha: str\n\n"}
{"type": "source_file", "path": "config/redisClient.py", "content": "import os\nfrom redis import Redis\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Read the environment variable USE_REDIS\nUSE_REDIS = os.getenv('USE_REDIS', 'False').lower() == 'true'\n\n# Get Redis uri configuration from environment variables\nREDIS_URI = os.getenv('REDIS_URI', 'redis://localhost:6379')\n\n# Conditionally initialize Redis client\nif USE_REDIS:\n    redisClient = Redis.from_url(REDIS_URI)\nelse:\n    redisClient = None"}
{"type": "source_file", "path": "models/__init__.py", "content": ""}
{"type": "source_file", "path": "controllers/mawaqitController.py", "content": "from fastapi import APIRouter\nfrom fastapi.encoders import jsonable_encoder\n\nfrom typing import List\n\nimport scraping.script as script\nimport models.models as models\n\nrouter = APIRouter(prefix=\"/api/v1\")\n\n@router.get(\"/\", summary=\"Greetings\",)\ndef read_root():\n    return {\"Greetings\": \"Hello and Welcome to this Api, this api use the mawaqit.net as data source of prayers time in more than 8000 masjid, this api can be used to fetch data in json, you can find our docs on /docs. \"}\n\n@router.get(\"/{masjid_id}/\", status_code=200, summary=\"get the raw data from mawaqit website\")\ndef get_raw_data(masjid_id: str):\n    r = script.fetch_mawaqit(masjid_id)\n    return {\"rawdata\": r}\n\n\n@router.get(\"/{masjid_id}/prayer-times\", status_code=200, summary=\"get the prayer times of the current day\", response_model=models.PrayerTimes)\ndef get_prayer_times(masjid_id: str):\n    prayer_times = script.get_prayer_times_of_the_day(masjid_id)\n    return prayer_times\n\n\n@router.get(\"/{masjid_id}/calendar\", status_code=200, summary=\"get the year calendar of the prayer times\")\ndef get_year_calendar(masjid_id: str):\n    r = script.get_calendar(masjid_id)\n    return {\"calendar\": r}\n\n\n@router.get(\"/{masjid_id}/calendar/{month_number}\", status_code=200, summary=\"get the month calendar of the prayer times\", response_model=List[models.PrayerTimes])\ndef get_month_calendar(masjid_id: str, month_number: int):\n    month_dict = script.get_month(masjid_id, month_number)\n    return jsonable_encoder(month_dict)"}
{"type": "source_file", "path": "scraping/script.py", "content": "import requests\nfrom bs4 import BeautifulSoup\nfrom fastapi import HTTPException\nfrom config.redisClient import redisClient\nfrom redis.exceptions import RedisError\n\n\nimport json\nimport re\nimport models.models as models\n\n\ndef fetch_mawaqit(masjid_id:str):\n    WEEK_IN_SECONDS = 604800\n    retrieved_data = None\n\n    # Check if Redis client is initialized\n    if redisClient is not None:\n        try:\n            retrieved_data = redisClient.get(masjid_id)\n        except RedisError:\n            print(\"Error when reading from cache\")\n\n        if retrieved_data:\n            return json.loads(retrieved_data)\n\n    r = requests.get(f\"https://mawaqit.net/fr/{masjid_id}\")\n    if r.status_code == 200:\n        soup = BeautifulSoup(r.text, 'html.parser')\n        script = soup.find('script', string=re.compile(r'var confData = (.*?);', re.DOTALL))\n        if script:\n            mawaqit = re.search(r'var confData = (.*?);', script.string, re.DOTALL)\n            if mawaqit:\n                conf_data_json = mawaqit.group(1)\n                conf_data = json.loads(conf_data_json)\n                # Store data in Redis if client is initialized\n                if redisClient is not None:\n                    redisClient.set(masjid_id, json.dumps(conf_data), ex=WEEK_IN_SECONDS)\n                return conf_data\n            else:\n                raise HTTPException(status_code=500, detail=f\"Failed to extract confData JSON for {masjid_id}\")\n        else:\n            print(\"Script containing confData not found.\")\n            raise HTTPException(status_code=500, detail=f\"Script containing confData not found for {masjid_id}\")\n    if r.status_code == 404:\n        raise HTTPException(status_code=404, detail=f\"{masjid_id} not found\") \n\ndef get_prayer_times_of_the_day(masjid_id):\n    confData = fetch_mawaqit(masjid_id)\n    times = confData[\"times\"]\n    sunset = confData[\"shuruq\"]\n    prayer_time = models.PrayerTimes(fajr=times[0], sunset=sunset, dohr=times[1], asr=times[2], maghreb=times[3], icha=times[4])\n    prayer_dict = prayer_time.dict()\n    return prayer_dict\n\ndef get_calendar(masjid_id):\n    confData = fetch_mawaqit(masjid_id)\n    return confData[\"calendar\"]\n\ndef get_month(masjid_id, month_number):\n    if month_number < 1 or month_number > 12:\n        raise HTTPException(status_code=400, detail=f\"Month number should be between 1 and 12\")\n    confData = fetch_mawaqit(masjid_id)\n    month = confData[\"calendar\"][month_number - 1]\n    prayer_times_list = [\n        models.PrayerTimes( \n            fajr=prayer[0],\n            sunset=prayer[1],\n            dohr=prayer[2],\n            asr=prayer[3],\n            maghreb=prayer[4],\n            icha=prayer[5]\n        )\n        for prayer in month.values()\n    ]\n    return prayer_times_list"}
{"type": "source_file", "path": "scraping/__init__.py", "content": ""}
