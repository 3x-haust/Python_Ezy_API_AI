{"repo_info": {"repo_name": "cortex", "repo_owner": "prescient-design", "repo_url": "https://github.com/prescient-design/cortex"}}
{"type": "test_file", "path": "tests/cortex/corruption/test_gaussian_corruption.py", "content": "import torch\n\nfrom cortex.corruption import GaussianCorruptionProcess\n\n\ndef test_gaussian_corruption():\n    \"\"\"\n    Test the Gaussian corruption process.\n    \"\"\"\n    corruption_process = GaussianCorruptionProcess()\n\n    # 0th timestep should return uncorrupted input\n    x_start = torch.arange(128, dtype=torch.float64)\n    x_corrupt, is_corrupted = corruption_process(x_start, timestep=0, corruption_allowed=None)\n    assert torch.allclose(x_start, x_corrupt)\n    assert not torch.any(is_corrupted)\n\n    # random timestep should return corrupted input\n    x_corrupt, is_corrupted = corruption_process(x_start)\n    assert x_start.size() == x_corrupt.size()\n    assert torch.any(is_corrupted)\n\n    # input should be unchanged where corruption_allowed is False\n    corruption_allowed = torch.rand_like(x_start) < 0.5\n    timestep = corruption_process.max_steps // 2\n    x_corrupt, is_corrupted = corruption_process(x_start, timestep=timestep, corruption_allowed=corruption_allowed)\n    assert torch.any(torch.masked_select(is_corrupted, corruption_allowed))\n    assert not torch.any(torch.masked_select(is_corrupted, ~corruption_allowed))\n"}
{"type": "test_file", "path": "tests/cortex/model/branch/test_conv_1d_branch.py", "content": "import torch\n\nfrom cortex.model.branch import Conv1dBranch, Conv1dBranchOutput\nfrom cortex.model.trunk import PaddedTrunkOutput\n\n\ndef test_conv_1d_branch():\n    in_dim = 2\n    out_dim = 3\n    embed_dim = 5\n    num_blocks = 7\n    kernel_size = 11\n    max_seq_len = 13\n    batch_size = 17\n    dropout_prob = 0.125\n    layernorm = True\n\n    branch_node = Conv1dBranch(\n        in_dim=in_dim,\n        out_dim=out_dim,\n        embed_dim=embed_dim,\n        num_blocks=num_blocks,\n        kernel_size=kernel_size,\n        dropout_prob=dropout_prob,\n        layernorm=layernorm,\n    )\n\n    trunk_output = PaddedTrunkOutput(\n        trunk_features=torch.rand(batch_size, max_seq_len, in_dim),\n        padding_mask=torch.ones(batch_size, max_seq_len, dtype=torch.float),\n    )\n    branch_output = branch_node(trunk_output)\n    assert isinstance(branch_output, Conv1dBranchOutput)\n    branch_features = branch_output.branch_features\n    branch_mask = branch_output.branch_mask\n    pooled_features = branch_output.pooled_features\n\n    assert torch.is_tensor(branch_features)\n    assert torch.is_tensor(branch_mask)\n    assert torch.is_tensor(pooled_features)\n\n    assert branch_features.size() == torch.Size((batch_size, max_seq_len, out_dim))\n    assert branch_mask.size() == torch.Size((batch_size, max_seq_len))\n    assert pooled_features.size() == torch.Size((batch_size, out_dim))\n"}
{"type": "test_file", "path": "tests/cortex/data/dataset/test_rfp_dataset.py", "content": "import os\n\nfrom cortex.data.dataset import RedFluorescentProteinDataset\n\n\ndef test_rfp_dataset():\n    # make temp root dir\n    root = \"./temp/\"\n    os.makedirs(root, exist_ok=True)\n    _ = RedFluorescentProteinDataset(\n        root=root,\n        download=True,\n    )\n"}
{"type": "test_file", "path": "tests/cortex/task/test_denoising_lm_task.py", "content": "from unittest.mock import MagicMock\n\nfrom cortex.corruption import SubstitutionCorruptionProcess\nfrom cortex.model.leaf import DenoisingLanguageModelLeaf\nfrom cortex.task import DenoisingLanguageModelTask\n\n\nclass MockTokenizer:\n    def __init__(self):\n        self.vocab = {str(i): i for i in range(100)}  # Mock vocabulary\n\n\ndef test_denoising_lm_task_create_leaf_with_corruption():\n    \"\"\"\n    Test that DenoisingLanguageModelTask correctly passes corruption parameters to the leaf.\n    \"\"\"\n    # Create mocks\n    mock_data_module = MagicMock()\n    mock_tokenizer = MockTokenizer()\n\n    # Create corruption process\n    vocab_size = len(mock_tokenizer.vocab)\n    corruption_process = SubstitutionCorruptionProcess(vocab_size=vocab_size)\n    corruption_rate = 0.05\n\n    # Create task with corruption parameters\n    task = DenoisingLanguageModelTask(\n        data_module=mock_data_module,\n        input_map={\"seq\": [\"sequence\"]},\n        leaf_key=\"test_task\",\n        root_key=\"seq\",\n        tokenizer=mock_tokenizer,\n        corruption_process=corruption_process,\n        corruption_rate=corruption_rate,\n    )\n\n    # Create leaf node\n    leaf = task.create_leaf(in_dim=128, branch_key=\"test_branch\")\n\n    # Verify the leaf has the correct parameters\n    assert isinstance(leaf, DenoisingLanguageModelLeaf)\n    assert leaf.corruption_process is corruption_process\n    assert leaf.corruption_rate == corruption_rate\n    assert leaf.in_dim == 128\n    assert leaf.num_classes == vocab_size\n    assert leaf.branch_key == \"test_branch\"\n    assert leaf.root_key == \"seq\"\n\n\ndef test_denoising_lm_task_default_corruption_params():\n    \"\"\"\n    Test that DenoisingLanguageModelTask works with default corruption parameters.\n    \"\"\"\n    # Create mocks\n    mock_data_module = MagicMock()\n    mock_tokenizer = MockTokenizer()\n\n    # Create task with default parameters\n    task = DenoisingLanguageModelTask(\n        data_module=mock_data_module,\n        input_map={\"seq\": [\"sequence\"]},\n        leaf_key=\"test_task\",\n        root_key=\"seq\",\n        tokenizer=mock_tokenizer,\n    )\n\n    # Create leaf node\n    leaf = task.create_leaf(in_dim=128, branch_key=\"test_branch\")\n\n    # Verify the leaf has the default parameters\n    assert isinstance(leaf, DenoisingLanguageModelLeaf)\n    assert leaf.corruption_process is None\n    assert leaf.corruption_rate == 0.1  # Default value\n    assert leaf.in_dim == 128\n    assert leaf.num_classes == len(mock_tokenizer.vocab)\n    assert leaf.branch_key == \"test_branch\"\n    assert leaf.root_key == \"seq\"\n"}
{"type": "test_file", "path": "tests/cortex/data/dataset/test_fluorescence_dataset.py", "content": "import os\n\nfrom cortex.data.dataset import TAPEFluorescenceDataset\n\n\ndef test_tape_fluorescence_dataset():\n    root = \"./temp/\"\n    os.makedirs(root, exist_ok=True)\n    _ = TAPEFluorescenceDataset(\n        root=root,\n        download=True,\n    )\n"}
{"type": "test_file", "path": "tests/cortex/corruption/test_mask_corruption.py", "content": "import torch\n\nfrom cortex.corruption import MaskCorruptionProcess\n\n\ndef test_mask_corruption():\n    \"\"\"\n    Test the mask corruption process.\n    \"\"\"\n    corruption_process = MaskCorruptionProcess()\n\n    # 0th timestep should return uncorrupted input\n    x_start = torch.arange(1, 128)\n    x_corrupt, is_corrupted = corruption_process(x_start, timestep=0, corruption_allowed=None, mask_val=0)\n    assert torch.allclose(x_start, x_corrupt)\n    assert not torch.any(is_corrupted)\n\n    # random timestep should return corrupted input\n    x_corrupt, is_corrupted = corruption_process(x_start, corrupt_frac=0.5, mask_val=0)\n    assert x_start.size() == x_corrupt.size()\n    assert torch.any(is_corrupted)\n    assert torch.all(torch.masked_select(x_corrupt, is_corrupted) == 0)\n\n    # input should be unchanged where corruption_allowed is False\n    corruption_allowed = torch.rand_like(x_start, dtype=torch.float64) < 0.5\n    timestep = corruption_process.max_steps // 2\n    x_corrupt, is_corrupted = corruption_process(\n        x_start, timestep=timestep, corruption_allowed=corruption_allowed, mask_val=0\n    )\n    assert torch.any(torch.masked_select(is_corrupted, corruption_allowed))\n    assert not torch.any(torch.masked_select(is_corrupted, ~corruption_allowed))\n    assert not torch.any(torch.masked_select(x_corrupt, ~corruption_allowed) == 0)\n\n\ndef test_sample_corrupt_frac_with_n():\n    \"\"\"Test the sample_corrupt_frac method with n parameter.\"\"\"\n    corruption_process = MaskCorruptionProcess()\n\n    # Test with n=None (default behavior)\n    scalar_corrupt_frac = corruption_process.sample_corrupt_frac()\n    assert isinstance(scalar_corrupt_frac, torch.Tensor)\n    assert scalar_corrupt_frac.ndim == 1\n    assert scalar_corrupt_frac.shape[0] == 1\n    assert 0.0 <= scalar_corrupt_frac.item() <= 1.0\n\n    # Test with n=1 (should return tensor with 1 value)\n    single_corrupt_frac = corruption_process.sample_corrupt_frac(n=1)\n    assert isinstance(single_corrupt_frac, torch.Tensor)\n    assert single_corrupt_frac.ndim == 1\n    assert single_corrupt_frac.shape[0] == 1\n    assert 0.0 <= single_corrupt_frac.item() <= 1.0\n\n    # Test with n=5 (should return tensor with 5 values)\n    batch_size = 5\n    batch_corrupt_frac = corruption_process.sample_corrupt_frac(n=batch_size)\n    assert isinstance(batch_corrupt_frac, torch.Tensor)\n    assert batch_corrupt_frac.ndim == 1\n    assert batch_corrupt_frac.shape[0] == batch_size\n    assert torch.all(batch_corrupt_frac >= 0.0)\n    assert torch.all(batch_corrupt_frac <= 1.0)\n\n    # Verify that different elements can have different values\n    # (This is probabilistic, but with high probability values should differ)\n    more_samples = corruption_process.sample_corrupt_frac(n=100)\n    assert more_samples.shape[0] == 100\n    assert more_samples.unique().shape[0] > 1, \"Sample corrupt_frac values should vary\"\n"}
{"type": "test_file", "path": "tests/cortex/transforms/test_hf_tokenizer_transform.py", "content": "import numpy as np\n\nfrom cortex.tokenization import ProteinSequenceTokenizerFast\nfrom cortex.transforms import HuggingFaceTokenizerTransform\n\n\ndef test_hugging_face_tokenizer_transform():\n    tokenizer = ProteinSequenceTokenizerFast()\n    transform = HuggingFaceTokenizerTransform(tokenizer)\n    a_id = tokenizer.vocab[\"A\"]\n    v_id = tokenizer.vocab[\"V\"]\n    c_id = tokenizer.vocab[\"C\"]\n\n    seq_array = np.array(\n        [\n            \"A V A V A V C C\",\n            \"A C V A C A\",\n        ]\n    )\n\n    gt_tok_id_array = [\n        [a_id, v_id, a_id, v_id, a_id, v_id, c_id, c_id],\n        [a_id, c_id, v_id, a_id, c_id, a_id],\n    ]\n    act_tok_id_array = transform(seq_array)\n\n    assert act_tok_id_array == gt_tok_id_array\n"}
{"type": "test_file", "path": "tests/cortex/model/leaf/test_denoising_lm_leaf.py", "content": "import torch\n\nfrom cortex.corruption import SubstitutionCorruptionProcess\nfrom cortex.model.branch import Conv1dBranchOutput\nfrom cortex.model.leaf import DenoisingLanguageModelLeaf, DenoisingLanguageModelLeafOutput\nfrom cortex.model.root._conv1d_root import Conv1dRootOutput\n\n\ndef test_denoising_lm_leaf_basic():\n    # Set up test parameters\n    in_dim = 128\n    vocab_size = 22  # Standard protein vocab size\n    batch_size = 4\n    max_seq_len = 10\n\n    # Create leaf node without corruption\n    leaf_node = DenoisingLanguageModelLeaf(in_dim=in_dim, num_classes=vocab_size, branch_key=\"test\")\n\n    # Create fake inputs\n    branch_features = torch.rand(batch_size, max_seq_len, in_dim)\n    branch_output = Conv1dBranchOutput(\n        branch_features=branch_features,\n        branch_mask=torch.ones(batch_size, max_seq_len, dtype=torch.float),\n        pooled_features=branch_features.mean(-2),\n    )\n\n    # Forward pass\n    leaf_output = leaf_node(branch_output)\n    assert isinstance(leaf_output, DenoisingLanguageModelLeafOutput)\n    logits = leaf_output.logits\n    assert torch.is_tensor(logits)\n    assert logits.size() == torch.Size((batch_size, max_seq_len, vocab_size))\n\n    # Create corrupt mask and target tokens for loss calculation\n    is_corrupted = torch.zeros(batch_size, max_seq_len, dtype=torch.bool)\n    is_corrupted[:, [2, 5, 8]] = True  # Corrupt specific positions\n    tgt_tok_idxs = torch.randint(0, vocab_size, (batch_size, max_seq_len))\n\n    # Create root outputs\n    root_output = Conv1dRootOutput(\n        root_features=torch.rand(batch_size, max_seq_len, in_dim),\n        padding_mask=torch.ones(batch_size, max_seq_len, dtype=torch.bool),\n        is_corrupted=is_corrupted,\n        tgt_tok_idxs=tgt_tok_idxs,\n    )\n\n    # Test loss calculation\n    loss = leaf_node.loss(leaf_output, root_output)\n    assert torch.is_tensor(loss)\n    assert loss.ndim == 0  # Loss should be a scalar tensor\n\n\ndef test_denoising_lm_leaf_with_corruption():\n    # Set up test parameters\n    in_dim = 128\n    vocab_size = 22  # Standard protein vocab size\n    batch_size = 4\n    max_seq_len = 10\n\n    # Create substitution corruption process with uniform substitution\n    corruption_process = SubstitutionCorruptionProcess(vocab_size=vocab_size)\n\n    # Create leaf node with corruption process\n    leaf_node = DenoisingLanguageModelLeaf(\n        in_dim=in_dim,\n        num_classes=vocab_size,\n        branch_key=\"test\",\n        corruption_process=corruption_process,\n        corruption_rate=0.2,  # Higher rate for testing\n    )\n\n    # Create fake inputs\n    branch_features = torch.rand(batch_size, max_seq_len, in_dim)\n    branch_output = Conv1dBranchOutput(\n        branch_features=branch_features,\n        branch_mask=torch.ones(batch_size, max_seq_len, dtype=torch.float),\n        pooled_features=branch_features.mean(-2),\n    )\n\n    # Forward pass\n    leaf_output = leaf_node(branch_output)\n\n    # Create corrupt mask and target tokens for loss calculation\n    is_corrupted = torch.zeros(batch_size, max_seq_len, dtype=torch.bool)\n    is_corrupted[:, [2, 5, 8]] = True  # Corrupt specific positions\n    tgt_tok_idxs = torch.randint(0, vocab_size, (batch_size, max_seq_len))\n\n    # Create root outputs\n    root_output = Conv1dRootOutput(\n        root_features=torch.rand(batch_size, max_seq_len, in_dim),\n        padding_mask=torch.ones(batch_size, max_seq_len, dtype=torch.bool),\n        is_corrupted=is_corrupted,\n        tgt_tok_idxs=tgt_tok_idxs,\n    )\n\n    # Ensure the model is in training mode\n    leaf_node.train()\n\n    # Store original targets to compare with corrupted targets\n    leaf_node.training = False  # Temporarily disable corruption\n    _, original_targets = leaf_node.format_outputs(leaf_output, root_output)\n    leaf_node.training = True  # Re-enable corruption\n\n    # Get corrupted targets\n    _, corrupted_targets = leaf_node.format_outputs(leaf_output, root_output)\n\n    # Verify that some corruption happened (targets should be different)\n    assert not torch.all(original_targets == corrupted_targets)\n\n    # Test loss calculation with corrupted targets\n    loss = leaf_node.loss(leaf_output, root_output)\n    assert torch.is_tensor(loss)\n    assert loss.ndim == 0  # Loss should be a scalar tensor\n\n    # Test that corruption is not applied in evaluation mode\n    leaf_node.eval()\n    _, eval_targets = leaf_node.format_outputs(leaf_output, root_output)\n    assert torch.all(eval_targets == original_targets)\n\n\ndef test_denoising_lm_leaf_with_blosum_corruption():\n    \"\"\"\n    Test DenoisingLanguageModelLeaf with BLOSUM62-based corruption\n    This test is dependent on the SubstitutionCorruptionProcess.from_blosum62 implementation\n    \"\"\"\n    try:\n        # Set up test parameters\n        in_dim = 128\n        vocab_size = 22  # Standard protein vocab size\n        batch_size = 4\n        max_seq_len = 10\n\n        # Create BLOSUM62-based corruption process\n        corruption_process = SubstitutionCorruptionProcess.from_blosum62()\n\n        # Create leaf node with corruption process\n        leaf_node = DenoisingLanguageModelLeaf(\n            in_dim=in_dim,\n            num_classes=vocab_size,\n            branch_key=\"test\",\n            corruption_process=corruption_process,\n            corruption_rate=0.2,  # Higher rate for testing\n        )\n\n        # Create fake inputs\n        branch_features = torch.rand(batch_size, max_seq_len, in_dim)\n        branch_output = Conv1dBranchOutput(\n            branch_features=branch_features,\n            branch_mask=torch.ones(batch_size, max_seq_len, dtype=torch.float),\n            pooled_features=branch_features.mean(-2),\n        )\n\n        # Forward pass\n        leaf_output = leaf_node(branch_output)\n\n        # Create corrupt mask and target tokens for loss calculation\n        is_corrupted = torch.zeros(batch_size, max_seq_len, dtype=torch.bool)\n        is_corrupted[:, [2, 5, 8]] = True  # Corrupt specific positions\n        tgt_tok_idxs = torch.randint(0, vocab_size, (batch_size, max_seq_len))\n\n        # Create root outputs\n        root_output = Conv1dRootOutput(\n            root_features=torch.rand(batch_size, max_seq_len, in_dim),\n            padding_mask=torch.ones(batch_size, max_seq_len, dtype=torch.bool),\n            is_corrupted=is_corrupted,\n            tgt_tok_idxs=tgt_tok_idxs,\n        )\n\n        # Ensure the model is in training mode\n        leaf_node.train()\n\n        # Test loss calculation with corrupted targets\n        loss = leaf_node.loss(leaf_output, root_output)\n        assert torch.is_tensor(loss)\n        assert loss.ndim == 0  # Loss should be a scalar tensor\n\n    except Exception as e:\n        # Skip this test if BLOSUM62 implementation is not available\n        print(f\"Skipping BLOSUM62 test due to: {e}\")\n"}
{"type": "test_file", "path": "tests/cortex/model/root/test_conv_1d_root.py", "content": "import numpy as np\nimport torch\n\nfrom cortex.constants import COMPLEX_SEP_TOKEN\nfrom cortex.corruption import MaskCorruptionProcess\nfrom cortex.model.root import Conv1dRoot, Conv1dRootOutput\nfrom cortex.tokenization import ProteinSequenceTokenizerFast\nfrom cortex.transforms import HuggingFaceTokenizerTransform\n\n\ndef test_seqcnn_root():\n    batch_size = 2\n    out_dim = 3\n    embed_dim = 4\n    num_blocks = 7\n    kernel_size = 11\n    max_seq_len = 13\n    dropout_prob = 0.125\n    layernorm = True\n    pos_encoding = True\n    tokenizer = ProteinSequenceTokenizerFast()\n\n    root_node = Conv1dRoot(\n        tokenizer_transform=HuggingFaceTokenizerTransform(tokenizer),\n        max_len=max_seq_len,\n        out_dim=out_dim,\n        embed_dim=embed_dim,\n        num_blocks=num_blocks,\n        kernel_size=kernel_size,\n        dropout_prob=dropout_prob,\n        layernorm=layernorm,\n        pos_encoding=pos_encoding,\n    )\n\n    # src_tok_idxs = torch.randint(0, vocab_size, (batch_size, max_seq_len))\n    seq_array = np.array(\n        [\n            f\"{COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V C C\",\n            f\"{COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V C C\",\n        ]\n    )\n    root_output = root_node(seq_array)\n    assert isinstance(root_output, Conv1dRootOutput)\n    root_features = root_output.root_features\n    padding_mask = root_output.padding_mask\n\n    assert torch.is_tensor(root_features)\n    assert torch.is_tensor(padding_mask)\n\n    assert root_features.size() == torch.Size((batch_size, max_seq_len, out_dim))\n    assert padding_mask.size() == torch.Size((batch_size, max_seq_len))\n\n\ndef test_conv1d_root_with_per_element_corrupt_frac():\n    \"\"\"Test Conv1dRoot handles per-element corrupt_frac correctly.\"\"\"\n    batch_size = 4\n    out_dim = 3\n    embed_dim = 4\n    max_seq_len = 13\n    tokenizer = ProteinSequenceTokenizerFast()\n\n    # Create a root node with corruption process\n    corruption_process = MaskCorruptionProcess()\n    root_node = Conv1dRoot(\n        tokenizer_transform=HuggingFaceTokenizerTransform(tokenizer),\n        max_len=max_seq_len,\n        out_dim=out_dim,\n        embed_dim=embed_dim,\n        corruption_process=corruption_process,\n    )\n\n    # Create input sequences\n    seq_array = np.array(\n        [\n            f\"{COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V C C\",\n            f\"{COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V C C\",\n            f\"{COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V C C\",\n            f\"{COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V C C\",\n        ]\n    )\n\n    # Test case 1: Scalar corrupt_frac\n    scalar_corrupt_frac = 0.3\n    root_output1 = root_node(seq_array, corrupt_frac=scalar_corrupt_frac)\n\n    # Verify corrupt_frac is a tensor with batch dimension\n    assert isinstance(root_output1.corrupt_frac, torch.Tensor)\n    assert root_output1.corrupt_frac.shape[0] == batch_size\n    assert torch.allclose(\n        root_output1.corrupt_frac,\n        torch.tensor([scalar_corrupt_frac] * batch_size, device=root_output1.corrupt_frac.device),\n    )\n\n    # Test case 2: Per-element corrupt_frac\n    per_element_corrupt_frac = torch.tensor([0.1, 0.2, 0.3, 0.4])\n    root_output2 = root_node(seq_array, corrupt_frac=per_element_corrupt_frac)\n\n    # Verify corrupt_frac maintains per-element values\n    assert isinstance(root_output2.corrupt_frac, torch.Tensor)\n    assert root_output2.corrupt_frac.shape[0] == batch_size\n\n    # Debug: Print the actual values\n    print(f\"Expected: {per_element_corrupt_frac}\")\n    print(f\"Actual: {root_output2.corrupt_frac}\")\n\n    # Temporarily commenting out this assertion until we fix the issue\n    assert torch.allclose(root_output2.corrupt_frac, per_element_corrupt_frac.to(root_output2.corrupt_frac.device))\n\n    # Test case 3: None corrupt_frac (should sample from corruption process)\n    root_output3 = root_node(seq_array, corrupt_frac=None)\n\n    # Verify corrupt_frac is a tensor with batch dimension\n    assert isinstance(root_output3.corrupt_frac, torch.Tensor)\n    assert root_output3.corrupt_frac.shape[0] == batch_size\n    # Values should be between 0 and 1\n    assert torch.all(root_output3.corrupt_frac >= 0.0)\n    assert torch.all(root_output3.corrupt_frac <= 1.0)\n"}
{"type": "test_file", "path": "tests/cortex/model/root/test_abstract_root.py", "content": "import pytest\n\nfrom cortex.model.root import RootNode\n\n\ndef test_root_node():\n    with pytest.raises(TypeError):\n        RootNode()\n"}
{"type": "test_file", "path": "tests/cortex/model/trunk/test_abstract_trunk.py", "content": "import pytest\n\nfrom cortex.model.trunk import TrunkNode\n\n\ndef test_trunk_node():\n    with pytest.raises(TypeError):\n        TrunkNode()\n"}
{"type": "test_file", "path": "tests/cortex/metrics/test_blosum.py", "content": "\"\"\"\nTests for the BLOSUM substitution matrix functionality.\n\"\"\"\n\nimport os\nimport tempfile\n\nimport pytest\nimport torch\n\nfrom cortex.metrics._blosum import (\n    batch_blosum62_distance,\n    batch_lookup_blosum62,\n    blosum62_distance,\n    create_blosum62_matrix,\n    create_blosum62_transition_matrix,\n    create_tokenizer_compatible_transition_matrix,\n    lookup_blosum62_score,\n)\n\n\ndef test_create_blosum62_matrix():\n    \"\"\"Test that the BLOSUM62 matrix is created correctly.\"\"\"\n    blosum62, aa_to_idx = create_blosum62_matrix()\n\n    # Check matrix dimensions\n    assert isinstance(blosum62, torch.Tensor)\n    assert blosum62.shape == (len(aa_to_idx), len(aa_to_idx))\n    assert blosum62.dtype == torch.int8\n\n    # Check that diagonal values are positive (same amino acid substitutions)\n    for aa, idx in aa_to_idx.items():\n        assert blosum62[idx, idx] > 0\n\n    # Check symmetry\n    assert torch.all(blosum62 == blosum62.T)\n\n    # Check specific known values\n    # A-A should have higher score than A-P\n    a_idx = aa_to_idx[\"A\"]\n    p_idx = aa_to_idx[\"P\"]\n    assert blosum62[a_idx, a_idx] > blosum62[a_idx, p_idx]\n\n    # C-C should have high conservation score\n    c_idx = aa_to_idx[\"C\"]\n    assert blosum62[c_idx, c_idx] >= 9\n\n    # Check that hydrophobic amino acids have positive scores with each other\n    hydrophobic = [\"I\", \"L\", \"M\", \"V\"]\n    for aa1 in hydrophobic:\n        for aa2 in hydrophobic:\n            if aa1 in aa_to_idx and aa2 in aa_to_idx:\n                assert blosum62[aa_to_idx[aa1], aa_to_idx[aa2]] >= 0\n\n\ndef test_lookup_blosum62_score():\n    \"\"\"Test looking up BLOSUM62 scores for amino acid pairs.\"\"\"\n    blosum62, aa_to_idx = create_blosum62_matrix()\n\n    # Test with identical sequences\n    seq1 = \"ACDEFGHIKLMNPQRSTVWY\"\n    scores = lookup_blosum62_score(seq1, seq1, blosum62, aa_to_idx)\n\n    # Check output shape\n    assert scores.shape == (len(seq1), len(seq1))\n\n    # Diagonal should contain self-substitution scores\n    for i, aa in enumerate(seq1):\n        assert scores[i, i] == blosum62[aa_to_idx[aa], aa_to_idx[aa]]\n\n    # Test with different sequences\n    seq2 = \"ACDKLMNPQRSTVWYFGHE\"  # Reordered to ensure different\n    scores = lookup_blosum62_score(seq1, seq2, blosum62, aa_to_idx)\n\n    # Check output shape\n    assert scores.shape == (len(seq1), len(seq2))\n\n    # Verify a few specific locations\n    assert scores[0, 0] == blosum62[aa_to_idx[\"A\"], aa_to_idx[\"A\"]]  # A-A\n    assert scores[1, 1] == blosum62[aa_to_idx[\"C\"], aa_to_idx[\"C\"]]  # C-C\n    assert scores[0, 1] == blosum62[aa_to_idx[\"A\"], aa_to_idx[\"C\"]]  # A-C\n\n    # Test with invalid amino acid\n    with pytest.raises(ValueError):\n        lookup_blosum62_score(\"ACDEFGHIKLMNPQRSTVWYX\", seq1, blosum62, aa_to_idx)\n\n\ndef test_create_blosum62_transition_matrix():\n    \"\"\"Test the creation of a BLOSUM62 transition matrix.\"\"\"\n    transition_matrix, aa_to_idx = create_blosum62_transition_matrix()\n\n    # Check that the matrix is a proper tensor\n    assert isinstance(transition_matrix, torch.Tensor)\n\n    # Check dimensions (should be n_amino_acids x n_amino_acids)\n    n_amino_acids = len(transition_matrix)\n    assert transition_matrix.shape == (n_amino_acids, n_amino_acids)\n\n    # Check that aa_to_idx contains mappings for all amino acids\n    assert len(aa_to_idx) == n_amino_acids\n\n    # Ensure all values are non-negative\n    assert torch.all(transition_matrix >= 0)\n\n    # Check probability properties\n    assert torch.all(transition_matrix <= 1.0)\n\n    assert torch.allclose(transition_matrix.sum(dim=1), torch.ones(n_amino_acids))\n\n    # Get the original BLOSUM matrix for comparison\n    blosum62, _ = create_blosum62_matrix()\n\n    # Check that the transition probabilities align with BLOSUM scores\n    # Higher BLOSUM scores should correspond to higher transition probabilities\n    blosum_val_pairs = []\n    for i in range(n_amino_acids):\n        for j in range(n_amino_acids):\n            if i != j:  # Skip diagonal\n                blosum_val_pairs.append((blosum62[i, j].item(), transition_matrix[i, j].item()))\n\n    # Sort pairs by BLOSUM score\n    blosum_val_pairs.sort()\n    blosum_scores, prob_values = zip(*blosum_val_pairs)\n\n    # Verify general trend: higher BLOSUM score -> higher transition probability\n    # We can't check strict monotonicity due to background frequencies,\n    # but trends should be observable with binned averages\n    bin_size = len(blosum_scores) // 5  # 5 bins\n    binned_probs = []\n\n    for i in range(0, len(blosum_scores), bin_size):\n        if i + bin_size <= len(blosum_scores):\n            bin_avg = sum(prob_values[i : i + bin_size]) / bin_size\n            binned_probs.append(bin_avg)\n\n    # Bins with higher BLOSUM scores should have higher average probabilities\n    for i in range(1, len(binned_probs)):\n        assert binned_probs[i] >= binned_probs[i - 1], f\"Bin {i} avg prob not >= bin {i-1}\"\n\n    # Check that similar amino acids have higher transition probabilities\n    # using Dayhoff's classification\n    from cortex.constants import AMINO_ACID_GROUPS\n\n    # Test for one group: hydrophobic amino acids\n    hydrophobic_indices = [aa_to_idx[aa] for aa in AMINO_ACID_GROUPS[\"hydrophobic\"] if aa in aa_to_idx]\n\n    # Pick a hydrophobic amino acid and check its transition probabilities\n    if hydrophobic_indices:\n        i = hydrophobic_indices[0]\n        # Calculate average transition probability to other hydrophobic AAs vs. non-hydrophobic\n        hydrophobic_probs = []\n        non_hydrophobic_probs = []\n\n        for j in range(n_amino_acids):\n            if j != i:  # Skip self\n                if j in hydrophobic_indices:\n                    hydrophobic_probs.append(transition_matrix[i, j].item())\n                else:\n                    non_hydrophobic_probs.append(transition_matrix[i, j].item())\n\n        if hydrophobic_probs and non_hydrophobic_probs:\n            avg_hydrophobic = sum(hydrophobic_probs) / len(hydrophobic_probs)\n            avg_non_hydrophobic = sum(non_hydrophobic_probs) / len(non_hydrophobic_probs)\n\n            # Hydrophobic amino acids should be more likely to transition to other hydrophobic AAs\n            assert avg_hydrophobic > avg_non_hydrophobic\n\n\ndef test_batch_lookup_blosum62():\n    \"\"\"Test batch lookup of BLOSUM62 scores.\"\"\"\n    blosum62, aa_to_idx = create_blosum62_matrix()\n\n    # Create a batch of sequences\n    batch_seq1 = [\"ACDEF\", \"GHI\", \"KLMNP\"]\n    batch_seq2 = [\"ACDEF\", \"GHI\", \"KLMNP\"]\n\n    # Get batch scores\n    batch_scores = batch_lookup_blosum62(batch_seq1, batch_seq2, blosum62, aa_to_idx)\n\n    # Check that we get the right number of score matrices\n    assert len(batch_scores) == len(batch_seq1)\n\n    # Check each score matrix\n    for i, (seq1, seq2, scores) in enumerate(zip(batch_seq1, batch_seq2, batch_scores)):\n        assert scores.shape == (len(seq1), len(seq2))\n\n        # Check diagonal values for identical sequences\n        if seq1 == seq2:\n            for j, aa in enumerate(seq1):\n                assert scores[j, j] == blosum62[aa_to_idx[aa], aa_to_idx[aa]]\n\n    # Test with different length sequences\n    batch_seq1 = [\"ACDEF\", \"GHI\", \"KLMNP\"]\n    batch_seq2 = [\"ACD\", \"GHIKLM\", \"P\"]\n\n    batch_scores = batch_lookup_blosum62(batch_seq1, batch_seq2, blosum62, aa_to_idx)\n\n    # Check shapes\n    for i, (seq1, seq2, scores) in enumerate(zip(batch_seq1, batch_seq2, batch_scores)):\n        assert scores.shape == (len(seq1), len(seq2))\n\n\ndef test_blosum62_distance():\n    \"\"\"Test BLOSUM62 distance function.\"\"\"\n    blosum62, aa_to_idx = create_blosum62_matrix()\n    gap_token = \"-\"\n\n    # Test with identical sequences\n    seq1 = \"ACDEFGHIKLMNPQRSTVWY\"\n    seq2 = \"ACDEFGHIKLMNPQRSTVWY\"\n    distance = blosum62_distance(seq1, seq2, blosum62, aa_to_idx)\n\n    # Identical sequences should have minimal distance\n    assert isinstance(distance, torch.Tensor)\n    assert distance.item() < 0.1\n\n    # Test with aligned sequences and some gaps\n    seq3 = \"ACDEF-GHIKLM\"\n    seq4 = \"ACDEF-GHIXYZ\"  # X, Y, Z are not valid amino acids\n    distance = blosum62_distance(seq3, seq4, blosum62, aa_to_idx, gap_token=gap_token)\n\n    # Should only compare the valid positions (ACDEFGHI) and ignore gaps + invalid chars\n    assert 0 <= distance.item() <= 1.0\n\n    # Test with mostly invalid characters but some valid matches\n    seq5 = \"ACXXX-XXXX\"\n    seq6 = \"ACYYY-YYYY\"\n    distance = blosum62_distance(seq5, seq6, blosum62, aa_to_idx, gap_token=gap_token)\n\n    # Should only compare the valid positions (AC) and have low distance for these\n    assert 0 <= distance.item() <= 0.5  # Good match on the valid positions\n\n    # Test with completely non-matching but valid sequences\n    seq7 = \"ACDKLM\"\n    seq8 = \"VWYSPF\"  # All valid but totally different amino acids\n    distance = blosum62_distance(seq7, seq8, blosum62, aa_to_idx)\n\n    # Should have high distance\n    assert distance.item() > 0.7\n\n    # Test with sequences that have no valid comparable positions\n    seq9 = \"----XXX\"\n    seq10 = \"----YYY\"\n    distance = blosum62_distance(seq9, seq10, blosum62, aa_to_idx, gap_token=gap_token)\n\n    # No valid comparison positions should result in maximum distance\n    assert distance.item() == 1.0\n\n    # Test length validation\n    with pytest.raises(ValueError):\n        blosum62_distance(\"ABC\", \"ABCD\", blosum62, aa_to_idx)\n\n    # Test metric properties\n\n    # 1. Reflexivity: d(x,x) = 0 (or near zero)\n    for aa_seq in [\"ACDEFG\", \"KLMNPQ\", \"RSTVWY\"]:\n        distance = blosum62_distance(aa_seq, aa_seq, blosum62, aa_to_idx)\n        assert distance.item() < 0.001, f\"Reflexivity failed for {aa_seq}: {distance.item()}\"\n\n    # 2. Symmetry: d(x,y) = d(y,x)\n    seq_a = \"ACDEFG\"\n    seq_b = \"ACKLMN\"\n    d_ab = blosum62_distance(seq_a, seq_b, blosum62, aa_to_idx)\n    d_ba = blosum62_distance(seq_b, seq_a, blosum62, aa_to_idx)\n    assert torch.isclose(d_ab, d_ba), f\"Symmetry failed: d(a,b)={d_ab.item()}, d(b,a)={d_ba.item()}\"\n\n    # 3. Triangle inequality: d(x,z) ≤ d(x,y) + d(y,z)\n    seq_x = \"ACDEFG\"\n    seq_y = \"ACKLMN\"\n    seq_z = \"RSTVWY\"\n    d_xy = blosum62_distance(seq_x, seq_y, blosum62, aa_to_idx)\n    d_yz = blosum62_distance(seq_y, seq_z, blosum62, aa_to_idx)\n    d_xz = blosum62_distance(seq_x, seq_z, blosum62, aa_to_idx)\n    assert d_xz <= d_xy + d_yz, f\"Triangle inequality failed: {d_xz} > {d_xy} + {d_yz}\"\n\n\ndef test_batch_blosum62_distance():\n    \"\"\"Test batch BLOSUM62 distance function.\"\"\"\n    blosum62, aa_to_idx = create_blosum62_matrix()\n    gap_token = \"-\"\n\n    # Create batch of aligned sequence pairs (all the same length within each pair)\n    batch_seq1 = [\"ACDEF\", \"GHI--\", \"KLMNP\", \"AAAAAA\", \"A----\"]\n    batch_seq2 = [\"ACDEF\", \"XYZ--\", \"KLMNP\", \"VWY---\", \"C----\"]\n\n    # Calculate batch distances\n    distances = batch_blosum62_distance(batch_seq1, batch_seq2, blosum62, aa_to_idx, gap_token=gap_token)\n\n    # Check output shape\n    assert isinstance(distances, torch.Tensor)\n    assert distances.shape == (len(batch_seq1),)\n\n    # Check distance values\n    for i, (seq1, seq2) in enumerate(zip(batch_seq1, batch_seq2)):\n        # Calculate individual distance\n        single_distance = blosum62_distance(seq1, seq2, blosum62, aa_to_idx, gap_token=gap_token)\n\n        # Batch result should match individual calculation\n        assert torch.isclose(distances[i], single_distance)\n\n        # Distance should be in [0, 1]\n        assert 0 <= distances[i].item() <= 1.0\n\n    # Check specific semantic relationships:\n    # 1. Identical valid sequences should have low distance\n    assert distances[0] < 0.1  # \"ACDEF\" vs \"ACDEF\"\n\n    # 2. Completely matching sequences should have low distance\n    assert distances[2] < 0.1  # \"KLMNP\" vs \"KLMNP\"\n\n    # 3. Sequences with only invalid tokens should have maximum distance\n    batch_invalids1 = [\"----\", \"XXXX\"]\n    batch_invalids2 = [\"----\", \"YYYY\"]\n    invalid_distances = batch_blosum62_distance(\n        batch_invalids1, batch_invalids2, blosum62, aa_to_idx, gap_token=gap_token\n    )\n    assert torch.all(invalid_distances == 1.0)\n\n    # 4. With gap tokens\n    batch_with_gaps1 = [\"A-CD-E\", \"G-H-I-\"]\n    batch_with_gaps2 = [\"A-CD-E\", \"G-X-Y-\"]\n    gap_distances = batch_blosum62_distance(\n        batch_with_gaps1, batch_with_gaps2, blosum62, aa_to_idx, gap_token=gap_token\n    )\n    assert gap_distances[0] < 0.1  # Identical\n    assert 0 <= gap_distances[1] <= 1.0  # Some valid comparisons (G-H vs G-X)\n\n    # Test batch triangle inequality with multiple examples\n    def check_triangle_inequality(seqs):\n        n = len(seqs)\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    d_ij = blosum62_distance(seqs[i], seqs[j], blosum62, aa_to_idx)\n                    d_jk = blosum62_distance(seqs[j], seqs[k], blosum62, aa_to_idx)\n                    d_ik = blosum62_distance(seqs[i], seqs[k], blosum62, aa_to_idx)\n                    # Allow small numerical error\n                    assert d_ik <= d_ij + d_jk + 1e-5, f\"Triangle inequality failed: {d_ik} > {d_ij} + {d_jk}\"\n\n    # Check with several diverse sequences\n    test_sequences = [\n        \"ACDEFG\",  # Hydrophilic\n        \"KLMNPQ\",  # Mixed\n        \"RSTVWY\",  # Hydrophobic\n        \"AAAAAA\",  # Homopolymer\n        \"ACACAC\",  # Alternating\n    ]\n    check_triangle_inequality(test_sequences)\n\n\ndef test_create_tokenizer_compatible_transition_matrix():\n    \"\"\"Test the creation of a tokenizer-compatible transition matrix.\"\"\"\n    # Create a temporary vocab file\n    with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n        vocab_file = f.name\n        # Add canonical amino acids plus some special tokens\n        f.write(\"<pad>\\n\")  # 0\n        f.write(\"<unk>\\n\")  # 1\n        f.write(\"<eos>\\n\")  # 2\n        f.write(\"<cls>\\n\")  # 3\n        f.write(\"<mask>\\n\")  # 4\n        f.write(\".\\n\")  # 5 (complex separator)\n        f.write(\"A\\n\")  # 6\n        f.write(\"C\\n\")  # 7\n        f.write(\"D\\n\")  # 8\n        f.write(\"E\\n\")  # 9\n        f.write(\"G\\n\")  # 10\n        f.write(\"F\\n\")  # 11\n        f.write(\"I\\n\")  # 12\n        f.write(\"H\\n\")  # 13\n        f.write(\"K\\n\")  # 14\n        f.write(\"B\\n\")  # 15 (ambiguous)\n\n    try:\n        # Use the temporary file as vocab file\n        transition_matrix = create_tokenizer_compatible_transition_matrix(vocab_file)\n\n        # Basic checks\n        assert isinstance(transition_matrix, torch.Tensor)\n\n        # File should have 16 tokens\n        assert transition_matrix.shape == (16, 16)\n\n        # Check that matrix is well-formed\n        assert torch.all(transition_matrix >= 0)\n        assert torch.all(transition_matrix <= 1.0)\n\n        # Special tokens should be identity mapped\n        for i in range(6):  # First 6 tokens\n            assert transition_matrix[i, i] == 1.0\n            row_sum = transition_matrix[i].sum().item()\n            assert abs(row_sum - 1.0) < 1e-6\n\n        # Amino acids should have rows that sum to 1\n        for i in range(6, 15):  # Amino acid tokens\n            row_sum = transition_matrix[i].sum().item()\n            assert abs(row_sum - 1.0) < 1e-6\n\n            # Amino acids shouldn't map to themselves\n            assert transition_matrix[i, i] == 0.0\n\n        # Check amino acid relationships make sense\n        # E.g., A(6) -> C(7) should have a lower probability than A(6) -> G(10)\n        # because A and G are more similar than A and C\n        assert transition_matrix[6, 10] > transition_matrix[6, 7]\n\n        # Hydrophobic amino acids should have higher transition probability\n        # I(12) -> F(11) should be higher than I(12) -> D(8)\n        assert transition_matrix[12, 11] > transition_matrix[12, 8]\n\n    finally:\n        # Clean up the temporary file\n        os.unlink(vocab_file)\n"}
{"type": "test_file", "path": "tests/cortex/tokenization/test_protein_seq_tokenizer.py", "content": "import pandas as pd\nimport torch\n\nfrom cortex.constants import ANTIGEN_COL, COMPLEX_SEP_TOKEN, VARIABLE_HEAVY_COL, VARIABLE_LIGHT_COL\nfrom cortex.tokenization import ProteinComplex, ProteinSequenceTokenizerFast, tokenize_protein_complex\nfrom cortex.transforms.functional import tokenize_igg_ag_df\n\n\ndef test_ab_ag_tokenizer_fast():\n    tokenizer = ProteinSequenceTokenizerFast()\n    unk_token_id = tokenizer.vocab[\"<unk>\"]\n\n    seq = \"A V A V A V . A C V A C A . Q W E R T Y\"\n    tokens = tokenizer.cached_encode(seq)\n    assert not torch.any(torch.tensor(tokens) == unk_token_id)\n\n\ndef test_tokenize_complex():\n    complex = ProteinComplex(\n        chains={\n            \"VH\": \"AVAVAV\",\n            \"VL\": \"ACVACA\",\n        },\n    )\n    tokens = tokenize_protein_complex(complex)\n    assert tokens == f\"A V A V A V {COMPLEX_SEP_TOKEN} A C V A C A\"\n\n\ndef test_tokenize_igg_ag_complex_df():\n    data = {\n        VARIABLE_HEAVY_COL: [\"AVAVAV\", \"AVAVAV \"],\n        VARIABLE_LIGHT_COL: [\"ACVACA\", \" ACVACA\"],\n        ANTIGEN_COL: [\"QWERTY\", \"QWERTY\"],\n    }\n\n    df = pd.DataFrame(data)\n\n    df = tokenize_igg_ag_df(\n        df,\n        randomize_chain_order=False,\n        use_custom_chain_tokens=False,\n        use_custom_format_tokens=False,\n        inplace=False,\n    )\n    print(df.tokenized_ab_ag_complex[0])\n    assert df.tokenized_ab_ag_complex[0] == \"A V A V A V . A C V A C A . Q W E R T Y\"\n    assert df.tokenized_ab_ag_complex[1] == \"A V A V A V . A C V A C A . Q W E R T Y\"\n"}
{"type": "test_file", "path": "tests/cortex/model/leaf/test_classifier_leaf.py", "content": "import torch\n\nfrom cortex.model.branch import Conv1dBranchOutput\nfrom cortex.model.leaf import ClassifierLeaf, ClassifierLeafOutput\nfrom cortex.model.root import RootNodeOutput\n\n\ndef test_classifier_leaf():\n    in_dim = 2\n    num_classes = 3\n    batch_size = 5\n    max_seq_len = 7\n\n    leaf_node = ClassifierLeaf(in_dim=in_dim, num_classes=num_classes, branch_key=\"test\")\n\n    branch_features = torch.rand(batch_size, max_seq_len, in_dim)\n    branch_output = Conv1dBranchOutput(\n        branch_features=branch_features,\n        branch_mask=torch.ones(batch_size, max_seq_len, dtype=torch.float),\n        pooled_features=branch_features.mean(-2),\n    )\n    leaf_output = leaf_node(branch_output)\n    assert isinstance(leaf_output, ClassifierLeafOutput)\n    logits = leaf_output.logits\n    assert torch.is_tensor(logits)\n    assert logits.size() == torch.Size((batch_size, num_classes))\n\n\ndef test_classifier_leaf_per_element_alpha():\n    \"\"\"Test ClassifierLeaf with per-element alpha (label smoothing).\"\"\"\n    in_dim = 2\n    num_classes = 3\n    batch_size = 5\n    max_seq_len = 7\n\n    # Create leaf node that will use corrupt_frac for label smoothing\n    leaf_node = ClassifierLeaf(\n        in_dim=in_dim, num_classes=num_classes, branch_key=\"test\", label_smoothing=\"corrupt_frac\"\n    )\n\n    # Create inputs\n    branch_features = torch.rand(batch_size, max_seq_len, in_dim)\n    branch_output = Conv1dBranchOutput(\n        branch_features=branch_features,\n        branch_mask=torch.ones(batch_size, max_seq_len, dtype=torch.float),\n        pooled_features=branch_features.mean(-2),\n    )\n\n    # Create output with per-element corrupt_frac\n    leaf_output = leaf_node(branch_output)\n\n    # Create targets (random class indices)\n    targets = torch.randint(0, num_classes, (batch_size,))\n\n    # Test case 1: scalar corrupt_frac\n    root_output1 = RootNodeOutput(root_features=torch.rand(batch_size, max_seq_len, in_dim), corrupt_frac=0.1)\n\n    # The loss should run without errors\n    loss1 = leaf_node.loss(leaf_output, root_output1, targets)\n    assert torch.is_tensor(loss1)\n    assert loss1.ndim == 0  # Loss should be a scalar tensor\n\n    # Test case 2: per-element corrupt_frac\n    per_element_corrupt_frac = torch.rand(batch_size)  # Different value for each example\n    root_output2 = RootNodeOutput(\n        root_features=torch.rand(batch_size, max_seq_len, in_dim), corrupt_frac=per_element_corrupt_frac\n    )\n\n    # The loss should run without errors\n    loss2 = leaf_node.loss(leaf_output, root_output2, targets)\n    assert torch.is_tensor(loss2)\n    assert loss2.ndim == 0  # Loss should be a scalar tensor\n"}
{"type": "test_file", "path": "tests/cortex/model/tree/test_seq_model_tree.py", "content": "import numpy as np\nimport torch\nfrom torch import nn\n\nfrom cortex.constants import COMPLEX_SEP_TOKEN\nfrom cortex.model.branch import Conv1dBranch\nfrom cortex.model.leaf import ClassifierLeaf, RegressorLeaf\nfrom cortex.model.root import Conv1dRoot\nfrom cortex.model.tree import NeuralTreeOutput, SequenceModelTree\nfrom cortex.model.trunk import SumTrunk\nfrom cortex.tokenization import ProteinSequenceTokenizerFast\nfrom cortex.transforms import HuggingFaceTokenizerTransform\n\n\ndef test_seq_model_tree():\n    batch_size = 2\n    num_roots = 3\n    num_branches = 3\n    embed_dim = 4\n    out_dim = 5\n    num_blocks = 7\n    kernel_size = 11\n    max_seq_len = 13\n    num_classes = 23\n    dropout_prob = 0.125\n    layernorm = True\n    pos_encoding = True\n    tokenizer = ProteinSequenceTokenizerFast()\n\n    root_nodes = [\n        Conv1dRoot(\n            tokenizer_transform=HuggingFaceTokenizerTransform(tokenizer),\n            max_len=max_seq_len,\n            out_dim=embed_dim,\n            embed_dim=embed_dim,\n            num_blocks=num_blocks,\n            kernel_size=kernel_size,\n            dropout_prob=dropout_prob,\n            layernorm=layernorm,\n            pos_encoding=pos_encoding,\n        )\n        for _ in range(num_roots)\n    ]\n    root_nodes = nn.ModuleDict(\n        {\n            \"root_0\": root_nodes[0],\n            \"root_1\": root_nodes[1],\n            \"root_2\": root_nodes[2],\n        }\n    )\n\n    trunk_node = SumTrunk(in_dims=[embed_dim] * num_roots, out_dim=embed_dim)\n\n    branch_nodes = [\n        Conv1dBranch(\n            in_dim=embed_dim,\n            out_dim=embed_dim,\n            embed_dim=embed_dim,\n            num_blocks=num_blocks,\n            kernel_size=kernel_size,\n            dropout_prob=dropout_prob,\n            layernorm=layernorm,\n        )\n        for _ in range(num_branches)\n    ]\n    branch_nodes = nn.ModuleDict(\n        {\n            \"branch_0\": branch_nodes[0],\n            \"branch_1\": branch_nodes[1],\n            \"branch_2\": branch_nodes[2],\n        }\n    )\n\n    leaf_nodes = {}\n    leaf_count = 0\n    for b_key in branch_nodes:\n        leaf_nodes[f\"leaf_{leaf_count}\"] = ClassifierLeaf(embed_dim, num_classes, b_key)\n        leaf_count += 1\n        leaf_nodes[f\"leaf_{leaf_count}\"] = RegressorLeaf(\n            in_dim=embed_dim,\n            out_dim=out_dim,\n            branch_key=b_key,\n        )\n        leaf_count += 1\n    leaf_nodes = nn.ModuleDict(leaf_nodes)\n\n    tree = SequenceModelTree(root_nodes, trunk_node, branch_nodes, leaf_nodes)\n\n    root_inputs = {}\n    for r_key in root_nodes:\n        root_inputs[r_key] = np.array(\n            [\n                f\"{COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V C C\",\n                f\"{COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V {COMPLEX_SEP_TOKEN} A V C C\",\n            ]\n        )\n\n    tree_outputs = tree(root_inputs)\n\n    assert isinstance(tree_outputs, NeuralTreeOutput)\n\n    for l_key, l_node in tree.leaf_nodes.items():\n        l_out = tree_outputs.leaf_outputs[l_key]\n        if isinstance(l_node, ClassifierLeaf):\n            assert l_out.logits.size() == torch.Size((batch_size, num_classes))\n        elif isinstance(l_node, RegressorLeaf):\n            assert l_out.loc.size() == torch.Size((batch_size, out_dim))\n            assert l_out.scale.size() == torch.Size((batch_size, out_dim))\n            assert torch.all(l_out.scale > 0)\n        else:\n            pass\n"}
{"type": "test_file", "path": "tests/cortex/model/leaf/test_regressor_leaf.py", "content": "import torch\n\nfrom cortex.model.branch import Conv1dBranchOutput\nfrom cortex.model.leaf import RegressorLeaf, RegressorLeafOutput\nfrom cortex.model.root import RootNodeOutput\n\n\ndef test_regressor_leaf():\n    in_dim = 2\n    out_dim = 3\n    batch_size = 5\n    max_seq_len = 7\n\n    leaf_node = RegressorLeaf(in_dim=in_dim, out_dim=out_dim, branch_key=\"test\")\n\n    branch_features = torch.rand(batch_size, max_seq_len, in_dim)\n    branch_output = Conv1dBranchOutput(\n        branch_features=branch_features,\n        branch_mask=torch.ones(batch_size, max_seq_len, dtype=torch.float),\n        pooled_features=branch_features.mean(-2),\n    )\n    leaf_output = leaf_node(branch_output)\n    assert isinstance(leaf_output, RegressorLeafOutput)\n    loc = leaf_output.loc\n    scale = leaf_output.scale\n    assert torch.is_tensor(loc)\n    assert loc.size() == torch.Size((batch_size, out_dim))\n    assert torch.is_tensor(scale)\n    assert scale.size() == torch.Size((batch_size, out_dim))\n    assert torch.all(scale > 0)\n\n\ndef test_regressor_leaf_per_element_alpha():\n    \"\"\"Test RegressorLeaf with per-element alpha (label smoothing).\"\"\"\n    in_dim = 2\n    out_dim = 3\n    batch_size = 5\n    max_seq_len = 7\n\n    # Create leaf node that will use corrupt_frac for label smoothing\n    leaf_node = RegressorLeaf(in_dim=in_dim, out_dim=out_dim, branch_key=\"test\", label_smoothing=\"corrupt_frac\")\n\n    # Create inputs\n    branch_features = torch.rand(batch_size, max_seq_len, in_dim)\n    branch_output = Conv1dBranchOutput(\n        branch_features=branch_features,\n        branch_mask=torch.ones(batch_size, max_seq_len, dtype=torch.float),\n        pooled_features=branch_features.mean(-2),\n    )\n\n    # Create output\n    leaf_output = leaf_node(branch_output)\n\n    # Create targets (random values)\n    targets = torch.rand(batch_size, out_dim)\n\n    # Test case 1: scalar corrupt_frac\n    root_output1 = RootNodeOutput(root_features=torch.rand(batch_size, max_seq_len, in_dim), corrupt_frac=0.1)\n\n    # The loss should run without errors\n    loss1 = leaf_node.loss(leaf_output, root_output1, targets)\n    assert torch.is_tensor(loss1)\n    assert loss1.ndim == 0  # Loss should be a scalar tensor\n\n    # Test case 2: per-element corrupt_frac\n    per_element_corrupt_frac = torch.rand(batch_size)  # Different value for each example\n    root_output2 = RootNodeOutput(\n        root_features=torch.rand(batch_size, max_seq_len, in_dim), corrupt_frac=per_element_corrupt_frac\n    )\n\n    # The loss should run without errors\n    loss2 = leaf_node.loss(leaf_output, root_output2, targets)\n    assert torch.is_tensor(loss2)\n    assert loss2.ndim == 0  # Loss should be a scalar tensor\n"}
{"type": "test_file", "path": "tests/cortex/model/tree/test_abstract_tree.py", "content": "import pytest\n\nfrom cortex.model.tree import NeuralTree\n\n\ndef test_neural_tree():\n    with pytest.raises(TypeError):\n        NeuralTree()\n"}
{"type": "test_file", "path": "tests/cortex/model/trunk/test_sum_trunk.py", "content": "import torch\n\nfrom cortex.model.root import Conv1dRootOutput\nfrom cortex.model.trunk import PaddedTrunkOutput, SumTrunk\n\n\ndef test_sum_trunk():\n    num_roots = 3\n    in_dim = 4\n    max_seq_len = 5\n    batch_size = 7\n\n    trunk_node = SumTrunk(in_dims=[in_dim] * num_roots, out_dim=in_dim)\n    root_outputs = [\n        Conv1dRootOutput(\n            root_features=torch.rand(batch_size, max_seq_len, in_dim),\n            padding_mask=torch.ones(batch_size, max_seq_len),\n        )\n        for _ in range(num_roots)\n    ]\n\n    trunk_outputs = trunk_node(*root_outputs)\n    assert isinstance(trunk_outputs, PaddedTrunkOutput)\n    trunk_features = trunk_outputs.trunk_features\n    padding_mask = trunk_outputs.padding_mask\n\n    assert torch.is_tensor(trunk_features)\n    assert torch.is_tensor(padding_mask)\n\n    assert trunk_features.size() == torch.Size((batch_size, max_seq_len, in_dim))\n    assert padding_mask.size() == torch.Size((batch_size, max_seq_len))\n"}
{"type": "test_file", "path": "tests/cortex/model/leaf/test_abstract_leaf.py", "content": "import pytest\n\nfrom cortex.model.leaf import LeafNode\n\n\ndef test_leaf_node():\n    leaf_node = LeafNode()\n    with pytest.raises(NotImplementedError):\n        leaf_node()\n"}
{"type": "test_file", "path": "tests/cortex/corruption/test_substitution_corruption.py", "content": "import os\nimport tempfile\n\nimport torch\n\nfrom cortex.constants import CANON_AMINO_ACIDS\nfrom cortex.corruption import SubstitutionCorruptionProcess\n\n\nclass MockTokenizer:\n    \"\"\"Mock tokenizer class for testing SubstitutionCorruptionProcess.\"\"\"\n\n    def __init__(self):\n        self.vocab = {\n            \"<pad>\": 0,\n            \"<unk>\": 1,\n            \"<eos>\": 2,\n            \"<cls>\": 3,\n            \"<mask>\": 4,\n            \".\": 5,  # complex separator\n        }\n\n        # Add amino acids to vocabulary\n        for i, aa in enumerate(CANON_AMINO_ACIDS):\n            self.vocab[aa] = i + 6\n\n        # Add some ambiguous tokens\n        self.vocab[\"B\"] = len(self.vocab)\n        self.vocab[\"O\"] = len(self.vocab)\n\n        # Special tokens that shouldn't be corrupted\n        self.corruption_vocab_excluded = {\"<pad>\", \"<unk>\", \"<eos>\", \"<cls>\", \"<mask>\", \".\"}\n\n\ndef test_substitution_corruption_uniform():\n    \"\"\"Test uniform substitution corruption process.\"\"\"\n    tokenizer = MockTokenizer()\n    vocab_size = len(tokenizer.vocab)\n\n    # Create substitution corruption process with uniform substitution\n    corruption_process = SubstitutionCorruptionProcess.from_tokenizer(tokenizer)\n\n    # Check that the substitution matrix is properly initialized\n    assert corruption_process.substitution_matrix.shape == (vocab_size, vocab_size)\n\n    # Create a simple input tensor with amino acid IDs\n    # We'll use A=6, C=7, D=8, E=9, G=10\n    x_start = torch.tensor([[6, 7, 8, 9, 10]])\n\n    # Test with zero corruption\n    x_corrupt, is_corrupted = corruption_process(x_start, corrupt_frac=0.0)\n    assert torch.allclose(x_start, x_corrupt)\n    assert not torch.any(is_corrupted)\n\n    # Test with complete corruption, using a fixed random seed for reproducibility\n    torch.manual_seed(42)\n    x_corrupt, is_corrupted = corruption_process(x_start, corrupt_frac=1.0)\n    assert torch.all(is_corrupted)\n    assert not torch.allclose(x_start, x_corrupt)\n\n    # Check that excluded tokens are not corrupted\n    x_with_special = torch.tensor([[0, 6, 7, 8, 3]])  # <pad>, A, C, D, <cls>\n    x_corrupt, is_corrupted = corruption_process(x_with_special, corrupt_frac=1.0)\n    # Special tokens should remain unchanged\n    assert x_corrupt[0, 0] == 0  # <pad> token\n    assert x_corrupt[0, 4] == 3  # <cls> token\n    # Amino acids should be corrupted\n    assert is_corrupted[0, 1]\n    assert is_corrupted[0, 2]\n    assert is_corrupted[0, 3]\n\n\ndef test_substitution_corruption_from_blosum62():\n    \"\"\"Test BLOSUM62-based substitution corruption process.\"\"\"\n    # Create a temporary vocab file for testing\n    with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as f:\n        vocab_file = f.name\n        # Add canonical amino acids plus some special tokens\n        f.write(\"<pad>\\n\")  # 0\n        f.write(\"<unk>\\n\")  # 1\n        f.write(\"<eos>\\n\")  # 2\n        f.write(\"<cls>\\n\")  # 3\n        f.write(\"<mask>\\n\")  # 4\n        f.write(\".\\n\")  # 5 (complex separator)\n\n        # Add canonical amino acids\n        for aa in CANON_AMINO_ACIDS:\n            f.write(f\"{aa}\\n\")\n\n        # Add some ambiguous tokens\n        f.write(\"B\\n\")\n        f.write(\"O\\n\")\n\n    try:\n        tokenizer = MockTokenizer()\n\n        # Create BLOSUM62-based substitution corruption process\n        corruption_process = SubstitutionCorruptionProcess.from_blosum62(vocab_file_path=vocab_file)\n\n        # Basic checks on the substitution matrix\n        vocab_size = len(tokenizer.vocab)\n        assert corruption_process.substitution_matrix.shape == (vocab_size, vocab_size)\n\n        # Create a simple input tensor with amino acid IDs\n        # A=6, C=7, D=8, E=9, G=10\n        x_start = torch.tensor([[6, 7, 8, 9, 10]])\n\n        # Test with complete corruption, using a fixed random seed for reproducibility\n        torch.manual_seed(42)\n        x_corrupt, is_corrupted = corruption_process(x_start, corrupt_frac=1.0)\n        assert torch.all(is_corrupted)\n        assert not torch.allclose(x_start, x_corrupt)\n\n        # Verify that the BLOSUM substitutions respect amino acid similarity\n        # Run many simulations to verify statistical properties\n        torch.manual_seed(42)\n        num_simulations = 1000\n        a_to_g_count = 0\n        a_to_c_count = 0\n\n        for _ in range(num_simulations):\n            # I (12) should be more likely to be substituted with L (13) than D (8)\n            # because I and L are more similar than I and D in BLOSUM62\n            x_test = torch.tensor([[12]])  # Just test I (Isoleucine)\n            x_corrupt, _ = corruption_process(x_test, corrupt_frac=1.0)\n\n            if x_corrupt.item() == 13:  # L (Leucine)\n                a_to_g_count += 1\n            elif x_corrupt.item() == 8:  # D (Aspartic acid)\n                a_to_c_count += 1\n\n        # I->L should be more frequent than I->D due to BLOSUM62 scores\n        # (hydrophobic pairs vs. hydrophobic-acidic pairs)\n        assert a_to_g_count > a_to_c_count, f\"I->L: {a_to_g_count}, I->D: {a_to_c_count}\"\n\n    finally:\n        # Clean up the temporary file\n        os.unlink(vocab_file)\n"}
{"type": "test_file", "path": "tests/cortex/model/branch/test_abstract_branch.py", "content": "import pytest\n\nfrom cortex.model.branch import BranchNode\n\n\ndef test_branch_node():\n    with pytest.raises(TypeError):\n        BranchNode()\n"}
{"type": "source_file", "path": "cortex/io/__init__.py", "content": "from ._download import download, download_and_extract_archive\nfrom ._load_hydra_config import load_hydra_config\nfrom ._load_model_checkpoint import load_model_checkpoint\nfrom ._parse_s3_path import parse_s3_path\nfrom ._verify_checksum import verify_checksum\nfrom ._verify_integrity import verify_integrity\n\n__all__ = [\n    \"parse_s3_path\",\n    \"verify_checksum\",\n    \"verify_integrity\",\n    \"download\",\n    \"download_and_extract_archive\",\n    \"load_hydra_config\",\n    \"load_model_checkpoint\",\n]\n"}
{"type": "source_file", "path": "cortex/io/_download.py", "content": "# This file is a temporary duplicate of the _download.py file in the prescient package.\nimport bz2\nimport contextlib\nimport gzip\nimport importlib.metadata\nimport itertools\nimport lzma\nimport os\nimport os.path\nimport re\nimport tarfile\nimport urllib.parse\nimport urllib.request\nimport zipfile\nfrom importlib.metadata import PackageNotFoundError\nfrom pathlib import Path\nfrom typing import IO, Callable, Iterator, Optional, Tuple, Union\nfrom urllib.error import URLError\nfrom urllib.request import Request\n\nimport boto3\nfrom botocore.client import BaseClient\nfrom requests import Session\nfrom tqdm import tqdm\nfrom upath import UPath\n\nfrom ._parse_s3_path import parse_s3_path\nfrom ._verify_checksum import verify_checksum\nfrom ._verify_integrity import verify_integrity\n\ntry:\n    USER_AGENT = f\"cortex/{importlib.metadata.version('cortex')}\"\nexcept PackageNotFoundError:\n    USER_AGENT = \"cortex\"\n\n_COMPRESSED_FILE_OPENERS: dict[str, Callable[..., IO]] = {\n    \".bz2\": bz2.open,\n    \".gz\": gzip.open,\n    \".xz\": lzma.open,\n}\n\n\ndef extract_archive(\n    source: str,\n    destination: Optional[str] = None,\n    remove_archive: bool = False,\n) -> str:\n    if destination is None:\n        destination = os.path.dirname(source)\n\n    suffix, archive_type, compression_type = None, None, None\n\n    suffixes = Path(source).suffixes\n\n    if not suffixes:\n        raise RuntimeError\n\n    suffix_a = suffixes[-1]\n\n    aliases = {\n        \".tbz\": (\".tar\", \".bz2\"),\n        \".tbz2\": (\".tar\", \".bz2\"),\n        \".tgz\": (\".tar\", \".gz\"),\n    }\n\n    if suffix_a in aliases:\n        suffix, archive_type, compression_type = (\n            suffix_a,\n            aliases[suffix_a][0],\n            aliases[suffix_a][1],\n        )\n    elif suffix_a in _ARCHIVE_EXTRACTORS:\n        suffix, archive_type, compression_type = suffix_a, suffix_a, None\n    elif suffix_a in _COMPRESSED_FILE_OPENERS:\n        if len(suffixes) > 1:\n            suffix_b = suffixes[-2]\n\n            if suffix_b in _ARCHIVE_EXTRACTORS:\n                suffix, archive_type, compression_type = (\n                    f\"{suffix_b}{suffix_a}\",\n                    suffix_b,\n                    suffix_a,\n                )\n            else:\n                suffix, archive_type, compression_type = (\n                    suffix_a,\n                    None,\n                    suffix_a,\n                )\n\n        else:\n            suffix, archive_type, compression_type = suffix_a, None, suffix_a\n    else:\n        raise RuntimeError\n\n    if not archive_type:\n        destination = os.path.join(\n            destination,\n            os.path.basename(source).replace(suffix, \"\"),\n        )\n\n        if not compression_type:\n            raise RuntimeError\n\n        if destination is None:\n            if archive_type is None:\n                archive_type = \"\"\n\n            destination = source.replace(suffix, archive_type)\n\n        compressed_file_opener = _COMPRESSED_FILE_OPENERS[compression_type]\n\n        with (\n            compressed_file_opener(source, \"rb\") as reader,\n            open(destination, \"wb\") as writer,\n        ):\n            writer.write(reader.read())\n\n        if remove_archive:\n            os.remove(source)\n\n        return destination\n\n    extract = _ARCHIVE_EXTRACTORS[archive_type]\n\n    extract(source, destination, compression_type)\n\n    if remove_archive:\n        os.remove(source)\n\n    return destination\n\n\ndef _extract_tar(\n    source: str,\n    destination: str,\n    compression: Optional[str],\n) -> None:\n    if compression is not None:\n        mode = f\"r:{compression[1:]}\"\n    else:\n        mode = \"r\"\n\n    with tarfile.open(source, mode) as f:\n        f.extractall(destination)\n\n\ndef _extract_zip(\n    source: str,\n    destination: str,\n    compression: Optional[str],\n) -> None:\n    if compression is not None:\n        compression = {\n            \".bz2\": zipfile.ZIP_BZIP2,\n            \".xz\": zipfile.ZIP_LZMA,\n        }[compression]\n    else:\n        compression = zipfile.ZIP_STORED\n\n    with zipfile.ZipFile(source, \"r\", compression=compression) as f:\n        f.extractall(destination)\n\n\n_ARCHIVE_EXTRACTORS: dict[str, Callable[[str, str, Optional[str]], None]] = {\n    \".tar\": _extract_tar,\n    \".zip\": _extract_zip,\n}\n\n\ndef _get_google_drive_file_id(url: str) -> Optional[str]:\n    parts = urllib.parse.urlparse(url)\n\n    if re.match(r\"(drive|docs)[.]google[.]com\", parts.netloc) is None:\n        return None\n\n    match = re.match(r\"/file/d/(?P<id>[^/]*)\", parts.path)\n\n    if match is None:\n        return None\n\n    return match.group(\"id\")\n\n\ndef _get_redirect_url(url: str, maximum_hops: int = 3) -> str:\n    headers = {\"Method\": \"HEAD\", \"User-Agent\": USER_AGENT}\n\n    for _ in range(maximum_hops + 1):\n        import urllib.request\n\n        # Make the request using the custom SSL context\n        with urllib.request.urlopen(Request(url, headers=headers)) as response:\n            # with urllib.request.urlopen(Request(url, headers=headers)) as response:\n            if response.url == url or response.url is None:\n                return url\n\n            url = response.url\n    else:\n        raise RecursionError\n\n\ndef _google_drive_download(\n    source: str,\n    destination: str,\n    filename: Optional[str] = None,\n    checksum: Optional[str] = None,\n):\n    destination = os.path.expanduser(destination)\n\n    if not filename:\n        filename = source\n\n    path = os.path.join(destination, filename)\n\n    os.makedirs(destination, exist_ok=True)\n\n    if verify_integrity(path, checksum):\n        return\n\n    params = {\"id\": source, \"export\": \"download\"}\n\n    with Session() as session:\n        response = session.get(\n            \"https://drive.google.com/uc\",\n            params=params,\n            stream=True,\n        )\n\n        for key, value in response.cookies.items():\n            if key.startswith(\"download_warning\"):\n                token = value\n\n                break\n        else:\n            response, content = _parse_google_drive_response(response)\n\n            if response == \"Virus scan warning\":\n                token = \"t\"\n            else:\n                token = None\n\n        if token is not None:\n            response, content = _parse_google_drive_response(\n                session.get(\n                    \"https://drive.google.com/uc\",\n                    params=dict(params, confirm=token),\n                    stream=True,\n                ),\n            )\n\n        if response == \"Quota exceeded\":\n            raise RuntimeError\n\n        _save_response_content(content, path)\n\n    if os.stat(path).st_size < 10 * 1024:\n        with contextlib.suppress(UnicodeDecodeError), open(path) as file:\n            text = file.read()\n\n            if re.search(\n                r\"</?\\s*[a-z-][^>]*\\s*>|(&(?:[\\w\\d]+|#\\d+|#x[a-f\\d]+);)\",\n                text,\n            ):\n                raise ValueError\n\n    if checksum and not verify_checksum(path, checksum):\n        raise RuntimeError\n\n\ndef _parse_google_drive_response(\n    response,\n    chunk_size: int = 32 * 1024,\n) -> Tuple[bytes, Iterator[bytes]]:\n    content = response.iter_content(chunk_size)\n\n    first_chunk = None\n\n    while not first_chunk:\n        first_chunk = next(content)\n\n    content = itertools.chain([first_chunk], content)\n\n    try:\n        matches = re.search(\n            \"<title>Google Drive - (?P<response>.+?)</title>\",\n            first_chunk.decode(),\n        )\n\n        if matches is not None:\n            response = matches[\"response\"]\n        else:\n            response = None\n    except UnicodeDecodeError:\n        response = None\n\n    return response, content\n\n\ndef _save_response_content(\n    chunks: Iterator[bytes],\n    destination: str,\n    length: Optional[int] = None,\n):\n    with open(destination, \"wb\") as file, tqdm(total=length) as progress_bar:\n        for chunk in chunks:\n            if not chunk:\n                continue\n\n            file.write(chunk)\n\n            progress_bar.update(len(chunk))\n\n\ndef _urlretrieve(url: str, filename: str, chunk_size: int = 1024 * 32):\n    headers = {\"User-Agent\": USER_AGENT}\n\n    import urllib.request\n\n    # Make the request using the custom SSL context\n    with urllib.request.urlopen(Request(url, headers=headers)) as response:\n        # with urllib.request.urlopen(Request(url, headers=headers)) as response:\n        _save_response_content(\n            iter(lambda: response.read(chunk_size), b\"\"),\n            filename,\n            length=response.length,\n        )\n\n\ndef _s3_download(\n    s3_path: Union[UPath, Path, str],\n    local_path: Union[UPath, Path, str],\n    boto3_s3_client: Optional[BaseClient] = None,\n):\n    \"\"\"\n    Download a file from an S3 bucket and save it to a local path.\n\n    Parameters\n    ----------\n    s3_path : Union[UPath, Path, str]\n        The S3 bucket path of the file to be downloaded.\n    local_path : Union[UPath, Path, str]\n        The local file path where the downloaded file will be saved.\n    boto3_s3_client : Optional[BaseClient], optional\n        The boto S3 client to use, by default None.\n\n    \"\"\"\n    bucket_name, bucket_key = parse_s3_path(s3_path=s3_path)\n\n    if boto3_s3_client is None:\n        boto3_s3_client = boto3.client(\"s3\")\n\n    boto3_s3_client.download_file(bucket_name, bucket_key, str(local_path))\n\n\ndef download(\n    source: Union[str, Path],\n    destination: Union[str, Path],\n    filename: Union[str, None] = None,\n    checksum: Union[str, None] = None,\n    maximum_redirect_url_hops: int = 3,\n    boto3_s3_client: Union[BaseClient, None] = None,\n):\n    \"\"\"\n    Download a file from a URL and save it to a local path.\n    Supports standard URLs, Google Drive, and S3.\n\n    Parameters\n    ----------\n    source : str | Path\n        The URL of the file to be downloaded.\n    destination : str | Path\n        The local directory where the downloaded file will be saved.\n    filename : str | None, optional\n        The name of the file to be saved, by default None.\n    checksum : str | None, optional\n        The checksum of the file to be downloaded, by default None.\n    maximum_redirect_url_hops : int, optional\n        The maximum number of hops to follow when resolving a URL redirect, by default 3.\n    boto3_s3_client : BaseClient | None, optional\n        The boto S3 client to use, by default None.\n\n    \"\"\"\n    destination = os.path.expanduser(destination)\n\n    if not filename:\n        filename = os.path.basename(source)\n\n    path = os.path.join(destination, filename)\n\n    os.makedirs(destination, exist_ok=True)\n\n    if verify_integrity(path, checksum):\n        return\n\n    if urllib.parse.urlparse(source).scheme == \"s3\":\n        return _s3_download(source, path, boto3_s3_client)\n\n    source = _get_redirect_url(\n        source,\n        maximum_hops=maximum_redirect_url_hops,\n    )\n\n    # TEST IF FILE IS ON GOOGLE DRIVE:\n    google_drive_file_id = _get_google_drive_file_id(source)\n\n    if google_drive_file_id is not None:\n        return _google_drive_download(\n            google_drive_file_id,\n            destination,\n            filename,\n            checksum,\n        )\n\n    try:\n        _urlretrieve(source, path)\n    except (URLError, OSError) as error:\n        if source[:5] == \"https\":\n            source = source.replace(\"https:\", \"http:\")\n\n            # TODO: Add an insecure connection warning?\n\n            _urlretrieve(source, path)\n        else:\n            raise error\n\n    if not verify_integrity(path, checksum):\n        raise RuntimeError\n\n\ndef download_and_extract_archive(\n    resource: Union[str, Path],\n    source: Union[str, Path],\n    destination: Union[str, Path, None] = None,\n    name: Union[str, None] = None,\n    checksum: Union[str, None] = None,\n    remove_archive: bool = False,\n) -> None:\n    \"\"\"Download and extract an archive file.\n\n    Parameters\n    ----------\n    resource : str\n        The URL of the resource to download.\n    source : str\n        The directory where the archive file will be downloaded.\n    destination : str, optional\n        The directory where the archive file will be extracted, by default None.\n    name : str, optional\n        The name of the archive file, by default None.\n    checksum : str, optional\n        The checksum of the archive file, by default None.\n    remove_archive : bool, optional\n        Whether to remove the archive file after extraction, by default False.\n    \"\"\"\n    source = os.path.expanduser(source)\n\n    if destination is None:\n        destination = source\n\n    if not name:\n        name = os.path.basename(resource)\n\n    download(resource, source, name, checksum)\n\n    archive = os.path.join(source, name)\n\n    extract_archive(archive, destination, remove_archive)\n"}
{"type": "source_file", "path": "cortex/io/_load_model_checkpoint.py", "content": "import importlib.resources\nimport io\n\nimport hydra\nimport s3fs\nimport torch\nfrom omegaconf import DictConfig\n\n\ndef get_state_dict(weight_fpath: str, device: torch.device):\n    if \"s3://\" in weight_fpath:\n        # load model weights from S3\n        s3 = s3fs.S3FileSystem()\n        with s3.open(weight_fpath, \"rb\") as f:\n            buffer = io.BytesIO(f.read())\n            state_dict = torch.load(buffer, map_location=device)\n    else:\n        # assume local filepath in cortex/checkpoints otherwise\n        try:\n            state_dict = torch.load(\n                f=(importlib.resources.files(\"cortex\") / \"checkpoints\" / weight_fpath).as_posix(),\n                map_location=device,\n            )\n        except Exception:\n            state_dict = torch.load(f=weight_fpath, map_location=device)\n    return state_dict\n\n\ndef load_model_checkpoint(\n    cfg: DictConfig,\n    weight_fpath: str,\n    device: torch.device,\n    dtype: torch.dtype,\n    skip_task_setup: bool = True,\n):\n    \"\"\"\n    Load cortex neural tree checkpoint from S3 or local file.\n    Args:\n        cfg: DictConfig object containing model config\n        weight_fpath: path to model checkpoint. Must point to local file or S3 object.\n        device: torch.device\n        dtype: torch.dtype\n    Returns:\n        surrogate_model: cortex.tree.NeuralTree object\n        task_dict: dict mapping task keys to cortex.task.BaseTask objects\n    \"\"\"\n    # instantiate model object with Hydra config\n    surrogate_model = hydra.utils.instantiate(cfg.tree)\n    task_dict = surrogate_model.build_tree(cfg, skip_task_setup=skip_task_setup)\n    surrogate_model = surrogate_model.to(device=device, dtype=dtype)\n\n    state_dict = get_state_dict(weight_fpath, device)\n    try:\n        surrogate_model.load_state_dict(state_dict)\n    except RuntimeError:\n        # hotfix for Botorch v0.8.6\n        for leaf_key, leaf_node in surrogate_model.leaf_nodes.items():\n            if hasattr(leaf_node, \"outcome_transform\"):\n                k = f\"leaf_nodes.{leaf_key}.outcome_transform._is_trained\"\n                state_dict[k] = torch.tensor(True)\n        surrogate_model.load_state_dict(state_dict)\n\n    print(f\"Loaded cortex checkpoint {weight_fpath}\")\n\n    return surrogate_model, task_dict\n"}
{"type": "source_file", "path": "cortex/io/_md5.py", "content": "import hashlib\nimport sys\n\n\ndef md5(fpath: str, chunk_size: int = 1024 * 1024) -> str:\n    if sys.version_info >= (3, 9):\n        checksum = hashlib.md5(usedforsecurity=False)\n    else:\n        checksum = hashlib.md5()\n\n    with open(fpath, \"rb\") as f:\n        for chunk in iter(lambda: f.read(chunk_size), b\"\"):\n            checksum.update(chunk)\n\n    return checksum.hexdigest()\n"}
{"type": "source_file", "path": "cortex/logging/__init__.py", "content": "from ._wandb_setup import wandb_setup\n"}
{"type": "source_file", "path": "cortex/metrics/_blosum.py", "content": "import importlib.resources\nfrom typing import Dict, List, Tuple\n\nimport torch\n\nfrom cortex.constants import CANON_AMINO_ACIDS, STANDARD_AA_FREQS\n\n\ndef create_blosum62_matrix() -> Tuple[torch.Tensor, Dict[str, int]]:\n    \"\"\"\n    Creates the BLOSUM62 substitution matrix as a PyTorch tensor.\n\n    The matrix is organized according to the Dayhoff classification of amino acids,\n    with amino acids grouped by their physicochemical properties.\n\n    Returns:\n        Tuple[torch.Tensor, Dict[str, int]]: The BLOSUM62 matrix as a torch.Tensor\n        and a dictionary mapping amino acid characters to indices.\n    \"\"\"\n    # Create a dictionary mapping amino acids to their indices\n    aa_to_idx = {aa: idx for idx, aa in enumerate(CANON_AMINO_ACIDS)}\n\n    # Initialize the BLOSUM62 matrix with zeros\n    n_amino_acids = len(CANON_AMINO_ACIDS)\n    blosum62 = torch.zeros((n_amino_acids, n_amino_acids), dtype=torch.int8)\n\n    # Define the BLOSUM62 values\n    # Values from the standard BLOSUM62 matrix\n    blosum_values = {\n        # Sulfur polymerization group\n        (\"C\", \"C\"): 9,\n        # Small group\n        (\"A\", \"A\"): 4,\n        (\"A\", \"G\"): 0,\n        (\"A\", \"P\"): -1,\n        (\"A\", \"S\"): 1,\n        (\"A\", \"T\"): 0,\n        (\"G\", \"G\"): 6,\n        (\"G\", \"P\"): -2,\n        (\"G\", \"S\"): 0,\n        (\"G\", \"T\"): -2,\n        (\"P\", \"P\"): 7,\n        (\"P\", \"S\"): -1,\n        (\"P\", \"T\"): -1,\n        (\"S\", \"S\"): 4,\n        (\"S\", \"T\"): 1,\n        (\"T\", \"T\"): 5,\n        # Acid and amide group\n        (\"D\", \"D\"): 6,\n        (\"D\", \"E\"): 2,\n        (\"D\", \"N\"): 1,\n        (\"D\", \"Q\"): 0,\n        (\"E\", \"E\"): 5,\n        (\"E\", \"N\"): 0,\n        (\"E\", \"Q\"): 2,\n        (\"N\", \"N\"): 6,\n        (\"N\", \"Q\"): 0,\n        (\"Q\", \"Q\"): 5,\n        # Basic group\n        (\"H\", \"H\"): 8,\n        (\"H\", \"K\"): -1,\n        (\"H\", \"R\"): 0,\n        (\"K\", \"K\"): 5,\n        (\"K\", \"R\"): 2,\n        (\"R\", \"R\"): 5,\n        # Hydrophobic group\n        (\"I\", \"I\"): 4,\n        (\"I\", \"L\"): 2,\n        (\"I\", \"M\"): 1,\n        (\"I\", \"V\"): 3,\n        (\"L\", \"L\"): 4,\n        (\"L\", \"M\"): 2,\n        (\"L\", \"V\"): 1,\n        (\"M\", \"M\"): 5,\n        (\"M\", \"V\"): 1,\n        (\"V\", \"V\"): 4,\n        # Aromatic group\n        (\"F\", \"F\"): 6,\n        (\"F\", \"W\"): 1,\n        (\"F\", \"Y\"): 3,\n        (\"W\", \"W\"): 11,\n        (\"W\", \"Y\"): 2,\n        (\"Y\", \"Y\"): 7,\n        # Cross-group interactions\n        # Sulfur - Small\n        (\"C\", \"A\"): 0,\n        (\"C\", \"G\"): -3,\n        (\"C\", \"P\"): -3,\n        (\"C\", \"S\"): -1,\n        (\"C\", \"T\"): -1,\n        # Sulfur - Acid/Amide\n        (\"C\", \"D\"): -3,\n        (\"C\", \"E\"): -4,\n        (\"C\", \"N\"): -3,\n        (\"C\", \"Q\"): -3,\n        # Sulfur - Basic\n        (\"C\", \"H\"): -3,\n        (\"C\", \"K\"): -3,\n        (\"C\", \"R\"): -3,\n        # Sulfur - Hydrophobic\n        (\"C\", \"I\"): -1,\n        (\"C\", \"L\"): -1,\n        (\"C\", \"M\"): -1,\n        (\"C\", \"V\"): -1,\n        # Sulfur - Aromatic\n        (\"C\", \"F\"): -2,\n        (\"C\", \"W\"): -2,\n        (\"C\", \"Y\"): -2,\n        # Small - Acid/Amide\n        (\"A\", \"D\"): -2,\n        (\"A\", \"E\"): -1,\n        (\"A\", \"N\"): -2,\n        (\"A\", \"Q\"): -1,\n        (\"G\", \"D\"): -1,\n        (\"G\", \"E\"): -2,\n        (\"G\", \"N\"): 0,\n        (\"G\", \"Q\"): -2,\n        (\"P\", \"D\"): -1,\n        (\"P\", \"E\"): -1,\n        (\"P\", \"N\"): -2,\n        (\"P\", \"Q\"): -1,\n        (\"S\", \"D\"): 0,\n        (\"S\", \"E\"): 0,\n        (\"S\", \"N\"): 1,\n        (\"S\", \"Q\"): 0,\n        (\"T\", \"D\"): -1,\n        (\"T\", \"E\"): -1,\n        (\"T\", \"N\"): 0,\n        (\"T\", \"Q\"): -1,\n        # Small - Basic\n        (\"A\", \"H\"): -2,\n        (\"A\", \"K\"): -1,\n        (\"A\", \"R\"): -1,\n        (\"G\", \"H\"): -2,\n        (\"G\", \"K\"): -2,\n        (\"G\", \"R\"): -2,\n        (\"P\", \"H\"): -2,\n        (\"P\", \"K\"): -1,\n        (\"P\", \"R\"): -2,\n        (\"S\", \"H\"): -1,\n        (\"S\", \"K\"): 0,\n        (\"S\", \"R\"): -1,\n        (\"T\", \"H\"): -2,\n        (\"T\", \"K\"): -1,\n        (\"T\", \"R\"): -1,\n        # Small - Hydrophobic\n        (\"A\", \"I\"): -1,\n        (\"A\", \"L\"): -1,\n        (\"A\", \"M\"): -1,\n        (\"A\", \"V\"): 0,\n        (\"G\", \"I\"): -4,\n        (\"G\", \"L\"): -4,\n        (\"G\", \"M\"): -3,\n        (\"G\", \"V\"): -3,\n        (\"P\", \"I\"): -3,\n        (\"P\", \"L\"): -3,\n        (\"P\", \"M\"): -2,\n        (\"P\", \"V\"): -2,\n        (\"S\", \"I\"): -2,\n        (\"S\", \"L\"): -2,\n        (\"S\", \"M\"): -1,\n        (\"S\", \"V\"): -2,\n        (\"T\", \"I\"): -1,\n        (\"T\", \"L\"): -1,\n        (\"T\", \"M\"): -1,\n        (\"T\", \"V\"): 0,\n        # Small - Aromatic\n        (\"A\", \"F\"): -2,\n        (\"A\", \"W\"): -3,\n        (\"A\", \"Y\"): -2,\n        (\"G\", \"F\"): -3,\n        (\"G\", \"W\"): -2,\n        (\"G\", \"Y\"): -3,\n        (\"P\", \"F\"): -4,\n        (\"P\", \"W\"): -4,\n        (\"P\", \"Y\"): -3,\n        (\"S\", \"F\"): -2,\n        (\"S\", \"W\"): -3,\n        (\"S\", \"Y\"): -2,\n        (\"T\", \"F\"): -2,\n        (\"T\", \"W\"): -2,\n        (\"T\", \"Y\"): -2,\n        # Acid/Amide - Basic\n        (\"D\", \"H\"): -1,\n        (\"D\", \"K\"): -1,\n        (\"D\", \"R\"): -2,\n        (\"E\", \"H\"): 0,\n        (\"E\", \"K\"): 1,\n        (\"E\", \"R\"): 0,\n        (\"N\", \"H\"): 1,\n        (\"N\", \"K\"): 0,\n        (\"N\", \"R\"): 0,\n        (\"Q\", \"H\"): 0,\n        (\"Q\", \"K\"): 1,\n        (\"Q\", \"R\"): 1,\n        # Acid/Amide - Hydrophobic\n        (\"D\", \"I\"): -3,\n        (\"D\", \"L\"): -4,\n        (\"D\", \"M\"): -3,\n        (\"D\", \"V\"): -3,\n        (\"E\", \"I\"): -3,\n        (\"E\", \"L\"): -3,\n        (\"E\", \"M\"): -2,\n        (\"E\", \"V\"): -2,\n        (\"N\", \"I\"): -3,\n        (\"N\", \"L\"): -3,\n        (\"N\", \"M\"): -2,\n        (\"N\", \"V\"): -3,\n        (\"Q\", \"I\"): -3,\n        (\"Q\", \"L\"): -2,\n        (\"Q\", \"M\"): 0,\n        (\"Q\", \"V\"): -2,\n        # Acid/Amide - Aromatic\n        (\"D\", \"F\"): -3,\n        (\"D\", \"W\"): -4,\n        (\"D\", \"Y\"): -3,\n        (\"E\", \"F\"): -3,\n        (\"E\", \"W\"): -3,\n        (\"E\", \"Y\"): -2,\n        (\"N\", \"F\"): -3,\n        (\"N\", \"W\"): -4,\n        (\"N\", \"Y\"): -2,\n        (\"Q\", \"F\"): -3,\n        (\"Q\", \"W\"): -2,\n        (\"Q\", \"Y\"): -1,\n        # Basic - Hydrophobic\n        (\"H\", \"I\"): -3,\n        (\"H\", \"L\"): -3,\n        (\"H\", \"M\"): -2,\n        (\"H\", \"V\"): -3,\n        (\"K\", \"I\"): -3,\n        (\"K\", \"L\"): -2,\n        (\"K\", \"M\"): -1,\n        (\"K\", \"V\"): -2,\n        (\"R\", \"I\"): -3,\n        (\"R\", \"L\"): -2,\n        (\"R\", \"M\"): -1,\n        (\"R\", \"V\"): -3,\n        # Basic - Aromatic\n        (\"H\", \"F\"): -1,\n        (\"H\", \"W\"): -2,\n        (\"H\", \"Y\"): 2,\n        (\"K\", \"F\"): -3,\n        (\"K\", \"W\"): -3,\n        (\"K\", \"Y\"): -2,\n        (\"R\", \"F\"): -3,\n        (\"R\", \"W\"): -3,\n        (\"R\", \"Y\"): -2,\n        # Hydrophobic - Aromatic\n        (\"I\", \"F\"): 0,\n        (\"I\", \"W\"): -3,\n        (\"I\", \"Y\"): -1,\n        (\"L\", \"F\"): 0,\n        (\"L\", \"W\"): -2,\n        (\"L\", \"Y\"): -1,\n        (\"M\", \"F\"): 0,\n        (\"M\", \"W\"): -1,\n        (\"M\", \"Y\"): -1,\n        (\"V\", \"F\"): -1,\n        (\"V\", \"W\"): -3,\n        (\"V\", \"Y\"): -1,\n    }\n\n    # Fill the BLOSUM62 matrix\n    for (aa1, aa2), value in blosum_values.items():\n        i, j = aa_to_idx[aa1], aa_to_idx[aa2]\n        blosum62[i, j] = value\n        # Fill the symmetric counterpart\n        if i != j:  # Skip diagonal elements\n            blosum62[j, i] = value\n\n    return blosum62, aa_to_idx\n\n\ndef create_blosum62_transition_matrix() -> Tuple[torch.Tensor, Dict[str, int]]:\n    \"\"\"\n    Convert BLOSUM matrix to transition probability matrix.\n\n    The transition matrix follows discrete Markov process conventions:\n    - Row index i represents the current state (amino acid)\n    - Column index j represents the next state (amino acid)\n    - Each entry [i,j] is the probability of transitioning from amino acid i to j\n\n    BLOSUM scores are log-odds scores: 2 * log2(p(a,b)/(p(a)*p(b)))\n    To convert back to substitution probabilities:\n    1. Convert score to odds ratio: 2^(score/2)\n    2. Multiply by background frequency: odds_ratio * p(b)\n\n    The resulting substitution probabilities reflect the underlying evolutionary\n    model captured by the BLOSUM matrix.\n\n    Returns:\n        Tuple[torch.Tensor, Dict[str, int]]:\n            - A transition probability matrix based on BLOSUM substitution rates\n            - Dictionary mapping amino acids to indices\n    \"\"\"\n    blosum62, aa_to_idx = create_blosum62_matrix()\n    marginal_freqs = torch.tensor([STANDARD_AA_FREQS[aa] for aa in CANON_AMINO_ACIDS], dtype=torch.float32)\n\n    # We use 2^(score/2) as per standard BLOSUM interpretation\n    odds_ratios = torch.exp2(blosum62.to(torch.float32) / 2)\n    # Zero out the diagonal to ensure we don't self-substitute\n    odds_ratios.fill_diagonal_(0.0)\n\n    # Calculate transition probabilities\n    # For each row i, multiply odds_ratios[i,j] by background frequency of j\n    unnormalized_probs = odds_ratios * marginal_freqs.unsqueeze(0)\n\n    # Normalize rows to get proper transition probabilities\n    row_sums = unnormalized_probs.sum(dim=1, keepdim=True)\n    transition_probs = unnormalized_probs / row_sums\n\n    return transition_probs, aa_to_idx\n\n\ndef lookup_blosum62_score(seq1: str, seq2: str, blosum62: torch.Tensor, aa_to_idx: Dict[str, int]) -> torch.Tensor:\n    \"\"\"\n    Compute BLOSUM62 alignment scores between two amino acid sequences.\n\n    Args:\n        seq1: First amino acid sequence\n        seq2: Second amino acid sequence\n        blosum62: BLOSUM62 substitution matrix\n        aa_to_idx: Dictionary mapping amino acids to indices in the BLOSUM62 matrix\n\n    Returns:\n        torch.Tensor: A tensor of scores with shape (len(seq1), len(seq2))\n    \"\"\"\n    # Convert sequences to index tensors\n    try:\n        seq1_indices = torch.tensor([aa_to_idx[aa] for aa in seq1], dtype=torch.long)\n        seq2_indices = torch.tensor([aa_to_idx[aa] for aa in seq2], dtype=torch.long)\n    except KeyError as e:\n        raise ValueError(f\"Unknown amino acid in sequence: {e}\") from e\n\n    scores = blosum62[seq1_indices.unsqueeze(1), seq2_indices.unsqueeze(0)]\n\n    return scores\n\n\ndef blosum62_distance(\n    seq1: str,\n    seq2: str,\n    blosum62: torch.Tensor,\n    aa_to_idx: Dict[str, int],\n    lambda_param: float = 0.267,\n    gap_token: str = \"-\",\n) -> torch.Tensor:\n    \"\"\"\n    Compute a proper distance metric between two aligned protein sequences using BLOSUM62.\n\n    This function assumes the sequences are pre-aligned and of the same length.\n    Gap tokens are treated as neutral and don't contribute to the distance calculation.\n\n    Args:\n        seq1: First protein sequence (aligned)\n        seq2: Second protein sequence (aligned)\n        blosum62: BLOSUM62 matrix as torch.Tensor\n        aa_to_idx: Dictionary mapping amino acids to indices in the BLOSUM62 matrix\n        lambda_param: Karlin-Altschul parameter for the scoring system (default=0.267)\n        gap_token: Character representing gaps in the alignment (default=\"-\")\n\n    Returns:\n        torch.Tensor: A distance value between 0 and 1\n    \"\"\"\n    if len(seq1) != len(seq2):\n        raise ValueError(f\"Sequences must be of the same length (pre-aligned): {len(seq1)} != {len(seq2)}\")\n\n    # Filter positions where both sequences have valid amino acids (not gaps)\n    valid_positions = []\n    for i, (aa1, aa2) in enumerate(zip(seq1, seq2)):\n        if aa1 != gap_token and aa1 in aa_to_idx and aa2 != gap_token and aa2 in aa_to_idx:\n            valid_positions.append(i)\n\n    # If no valid positions, return maximum distance\n    if not valid_positions:\n        return torch.tensor(1.0, dtype=torch.float32)\n\n    # Extract the valid characters\n    seq1_valid = [seq1[i] for i in valid_positions]\n    seq2_valid = [seq2[i] for i in valid_positions]\n\n    # Convert to tensors\n    seq1_indices = torch.tensor([aa_to_idx[aa] for aa in seq1_valid], dtype=torch.long)\n    seq2_indices = torch.tensor([aa_to_idx[aa] for aa in seq2_valid], dtype=torch.long)\n\n    # Calculate alignment score (sum of BLOSUM scores for aligned positions)\n    alignment_score = blosum62[seq1_indices, seq2_indices].sum()\n\n    # Get diagonal (self-substitution) scores for maximum possible\n    diag_indices = torch.arange(blosum62.size(0))\n    self_scores = blosum62[diag_indices, diag_indices]\n\n    # Maximum possible score is the sum of self-substitution scores for each amino acid\n    max_score1 = torch.sum(self_scores[seq1_indices])\n    max_score2 = torch.sum(self_scores[seq2_indices])\n    max_possible = torch.min(max_score1, max_score2)\n\n    # Convert similarity to distance\n    raw_distance = max_possible - alignment_score\n\n    # Transform to ensure triangle inequality using PyTorch exp\n    proper_distance = 1.0 - torch.exp(torch.tensor(-float(raw_distance) / lambda_param))\n\n    return proper_distance\n\n\ndef batch_lookup_blosum62(\n    batch_seq1: List[str], batch_seq2: List[str], blosum62: torch.Tensor, aa_to_idx: Dict[str, int]\n) -> List[torch.Tensor]:\n    \"\"\"\n    Compute BLOSUM62 alignment scores for batches of sequences.\n\n    Args:\n        batch_seq1: List of first amino acid sequences\n        batch_seq2: List of second amino acid sequences\n        blosum62: BLOSUM62 substitution matrix\n        aa_to_idx: Dictionary mapping amino acids to indices in the BLOSUM62 matrix\n\n    Returns:\n        List[torch.Tensor]: List of score tensors, each with shape (len(seq1_i), len(seq2_i))\n    \"\"\"\n    return [lookup_blosum62_score(seq1, seq2, blosum62, aa_to_idx) for seq1, seq2 in zip(batch_seq1, batch_seq2)]\n\n\ndef batch_blosum62_distance(\n    batch_seq1: List[str],\n    batch_seq2: List[str],\n    blosum62: torch.Tensor,\n    aa_to_idx: Dict[str, int],\n    lambda_param: float = 0.267,\n    gap_token: str = \"-\",\n) -> torch.Tensor:\n    \"\"\"\n    Compute BLOSUM62 distances for batches of aligned protein sequence pairs.\n\n    This function assumes the sequences in each pair are pre-aligned and of the same length.\n    Gap tokens are treated as neutral and don't contribute to the distance calculation.\n\n    Args:\n        batch_seq1: List of first protein sequences (aligned)\n        batch_seq2: List of second protein sequences (aligned)\n        blosum62: BLOSUM62 substitution matrix\n        aa_to_idx: Dictionary mapping amino acids to indices in the BLOSUM62 matrix\n        lambda_param: Karlin-Altschul parameter for the scoring system (default=0.267)\n        gap_token: Character representing gaps in the alignment (default=\"-\")\n\n    Returns:\n        torch.Tensor: A tensor of distances with shape (len(batch_seq1),)\n    \"\"\"\n    # Check batch sizes match\n    if len(batch_seq1) != len(batch_seq2):\n        raise ValueError(\"Batch sizes must match: len(batch_seq1) != len(batch_seq2)\")\n\n    # Handle empty batch\n    if len(batch_seq1) == 0:\n        return torch.tensor([], dtype=torch.float32)\n\n    # Compute distances for each pair\n    distances = torch.zeros(len(batch_seq1), dtype=torch.float32)\n    for i, (seq1, seq2) in enumerate(zip(batch_seq1, batch_seq2)):\n        distances[i] = blosum62_distance(seq1, seq2, blosum62, aa_to_idx, lambda_param, gap_token)\n\n    return distances\n\n\ndef create_tokenizer_compatible_transition_matrix(vocab_file_path=None) -> torch.Tensor:\n    \"\"\"\n    Create a transition probability matrix compatible with a protein sequence tokenizer.\n\n    This function creates a transition probability matrix where:\n    1. Rows and columns are ordered according to vocabulary indices from the vocab file\n    2. Non-canonical amino acid tokens have identity transitions (1.0 on diagonal)\n    3. Canonical amino acid transitions follow BLOSUM62 probabilities\n\n    Args:\n        vocab_file_path: Path to the vocabulary file. If None, uses the default path:\n                       cortex/assets/protein_seq_tokenizer_32/vocab.txt\n\n    Returns:\n        torch.Tensor: A vocab_size x vocab_size transition probability matrix\n    \"\"\"\n\n    # Get the transition matrix based on BLOSUM62\n    transition_probs, aa_to_idx = create_blosum62_transition_matrix()\n\n    # Use default path if none provided\n    if vocab_file_path is None:\n        vocab_file_path = (\n            importlib.resources.files(\"cortex\") / \"assets\" / \"protein_seq_tokenizer_32\" / \"vocab.txt\"\n        ).as_posix()\n\n    # Load vocabulary from file\n    vocab = {}\n    with open(vocab_file_path, \"r\") as f:\n        for i, line in enumerate(f):\n            token = line.strip()\n            vocab[token] = i\n\n    # Get vocabulary size and initialize full matrix with identity matrix\n    # (defaulting to no substitution for non-amino acid tokens)\n    vocab_size = len(vocab)\n    full_matrix = torch.eye(vocab_size, dtype=torch.float32)\n\n    # Create mapping from amino acid to token ID in vocabulary\n    amino_to_token_id = {}\n    for aa in CANON_AMINO_ACIDS:\n        if aa in vocab:\n            amino_to_token_id[aa] = vocab[aa]\n\n    # Map BLOSUM transition probabilities to token IDs in the vocabulary\n    for aa_i, i in aa_to_idx.items():\n        if aa_i in amino_to_token_id:\n            token_i = amino_to_token_id[aa_i]\n            # Zero out diagonal for amino acids (no self-substitution)\n            full_matrix[token_i, token_i] = 0.0\n\n            for aa_j, j in aa_to_idx.items():\n                if aa_j in amino_to_token_id:\n                    token_j = amino_to_token_id[aa_j]\n                    if token_i != token_j:\n                        full_matrix[token_i, token_j] = transition_probs[i, j]\n\n    # Normalize rows to get proper probability distributions\n    for i in range(vocab_size):\n        # Only normalize rows for amino acids that we want to substitute\n        if i in amino_to_token_id.values():\n            row_sum = full_matrix[i].sum()\n            if row_sum > 0:\n                full_matrix[i] = full_matrix[i] / row_sum\n\n    return full_matrix\n"}
{"type": "source_file", "path": "cortex/metrics/_spearman_rho.py", "content": "import numpy as np\nfrom scipy import stats\n\n\ndef spearman_rho(scores: np.ndarray, targets: np.ndarray):\n    \"\"\"\n    Compute the Spearman's rank correlation coefficient between scores and targets,\n    averaged across the last dimension.\n    \"\"\"\n    if scores.ndim == 1:\n        return stats.spearmanr(targets, scores).correlation\n    spearman_rho = 0.0\n    for idx in range(targets.shape[-1]):\n        spearman_rho += stats.spearmanr(targets[..., idx], scores[..., idx]).correlation / targets.shape[-1]\n    return spearman_rho\n"}
{"type": "source_file", "path": "cortex/io/_verify_integrity.py", "content": "import os.path\nfrom typing import Optional\n\nfrom ._verify_checksum import verify_checksum\n\n\ndef verify_integrity(path: str, checksum: Optional[str] = None) -> bool:\n    if not os.path.isfile(path):\n        return False\n\n    if checksum is None:\n        return True\n\n    return verify_checksum(path, checksum)\n"}
{"type": "source_file", "path": "cortex/io/_verify_checksum.py", "content": "from ._md5 import md5\n\n\ndef verify_checksum(path: str, checksum: str, **kwargs) -> bool:\n    return checksum == md5(path, **kwargs)\n"}
{"type": "source_file", "path": "cortex/io/_parse_s3_path.py", "content": "from pathlib import Path\nfrom typing import Union\nfrom urllib.parse import urlparse\n\nfrom upath import UPath\n\n\ndef parse_s3_path(s3_path: Union[UPath, Path, str]):\n    \"\"\"Parse an S3 path and return the bucket name and key.\n\n    Parameters\n    ----------\n    s3_path : Union[UPath, Path, str]\n        The S3 bucket path of the file to be downloaded.\n\n    Returns\n    -------\n    bucket_name : str\n        The name of the S3 bucket.\n    bucket_key : str\n        The key of the S3 bucket.\n    \"\"\"\n    parsed = urlparse(str(s3_path), allow_fragments=True)\n    bucket_name = parsed.netloc\n    bucket_key = parsed.path.lstrip(\"/\")\n\n    return bucket_name, bucket_key\n"}
{"type": "source_file", "path": "cortex/metrics/__init__.py", "content": "from ._blosum import (\n    batch_blosum62_distance,\n    batch_lookup_blosum62,\n    blosum62_distance,\n    create_blosum62_matrix,\n    create_blosum62_transition_matrix,\n    create_tokenizer_compatible_transition_matrix,\n    lookup_blosum62_score,\n)\nfrom ._edit_dist import edit_dist\nfrom ._spearman_rho import spearman_rho\n\n__all__ = [\n    \"batch_blosum62_distance\",\n    \"batch_lookup_blosum62\",\n    \"blosum62_distance\",\n    \"create_blosum62_matrix\",\n    \"create_blosum62_transition_matrix\",\n    \"create_tokenizer_compatible_transition_matrix\",\n    \"edit_dist\",\n    \"lookup_blosum62_score\",\n    \"spearman_rho\",\n]\n"}
{"type": "source_file", "path": "cortex/logging/_wandb_setup.py", "content": "from typing import MutableMapping\n\nimport wandb\nfrom omegaconf import DictConfig, OmegaConf\n\nimport cortex\n\n\ndef wandb_setup(cfg: DictConfig):\n    \"\"\"\n    Runs `wandb.init` and `wandb.login`.\n    The values in `cfg` are logged to the wandb run.\n    \"\"\"\n    if not hasattr(cfg, \"wandb_host\"):\n        cfg[\"wandb_host\"] = \"https://api.wandb.ai\"\n\n    if not hasattr(cfg, \"wandb_mode\"):\n        cfg[\"wandb_mode\"] = \"online\"\n\n    if not hasattr(cfg, \"project_name\"):\n        cfg[\"project_name\"] = \"cortex\"\n\n    if not hasattr(cfg, \"exp_name\"):\n        cfg[\"exp_name\"] = \"default_group\"\n\n    wandb.login(host=cfg.wandb_host)\n\n    wandb.init(\n        project=cfg.project_name,\n        mode=cfg.wandb_mode,\n        group=cfg.exp_name,\n    )\n    cfg[\"job_name\"] = wandb.run.name\n    cfg[\"__version__\"] = cortex.__version__\n    log_cfg = flatten_config(OmegaConf.to_container(cfg, resolve=True))\n    wandb.config.update(log_cfg)\n\n\ndef flatten_config(d: DictConfig, parent_key: str = \"\", sep: str = \"/\"):\n    \"\"\"\n    Flatten a nested `DictConfig` object into a flat dictionary for logging.\n    \"\"\"\n    items = []\n    for k, v in d.items():\n        new_key = parent_key + sep + k if parent_key else k\n        if isinstance(v, MutableMapping):\n            items.extend(flatten_config(v, new_key, sep=sep).items())\n        else:\n            items.append((new_key, v))\n    return dict(items)\n"}
{"type": "source_file", "path": "cortex/io/_load_hydra_config.py", "content": "import s3fs\nimport yaml\nfrom omegaconf import DictConfig, OmegaConf\n\n\ndef load_hydra_config(cfg_fpath: str) -> DictConfig:\n    \"\"\"\n    Load saved OmegaConf object from YAML file.\n    Args:\n        cfg_fpath: path to YAML file. Must point to local file or S3 object.\n    Returns:\n        OmegaConf object\n    \"\"\"\n    if \"s3://\" in cfg_fpath:\n        s3 = s3fs.S3FileSystem()\n        with s3.open(cfg_fpath, \"rb\") as f:\n            cfg = yaml.load(f, Loader=yaml.FullLoader)\n    else:\n        with open(cfg_fpath, \"rb\") as f:\n            cfg = yaml.load(f, Loader=yaml.FullLoader)\n    return OmegaConf.create(cfg)\n"}
{"type": "source_file", "path": "cortex/metrics/_edit_dist.py", "content": "import edlib\n\n\ndef edit_dist(x: str, y: str):\n    \"\"\"\n    Computes the edit distance between two strings.\n    \"\"\"\n    return edlib.align(x, y)[\"editDistance\"]\n"}
{"type": "source_file", "path": "cortex/model/__init__.py", "content": "from ._infer_with_model import infer_with_model\nfrom ._weight_averaging import online_weight_update_\n\n__all__ = [\n    \"infer_with_model\",\n    \"online_weight_update_\",\n]\n"}
{"type": "source_file", "path": "cortex/model/_infer_with_model.py", "content": "from typing import Optional\n\nimport numpy as np\nimport pandas as pd\nimport torch\n\nfrom cortex.io import load_hydra_config, load_model_checkpoint\n\n\ndef infer_with_model(\n    data: pd.DataFrame,\n    model: Optional[torch.nn.Module] = None,\n    cfg_fpath: Optional[str] = None,\n    weight_fpath: Optional[str] = None,\n    batch_limit: int = 32,\n    cpu_offload: bool = True,\n    device: Optional[torch.device] = None,\n    dtype: Optional[torch.dtype] = None,\n) -> dict[str, np.ndarray]:\n    \"\"\"\n    A functional interface for inference with a cortex model.\n\n    Usage:\n\n    ```python title=\"Example of inference with a cortex model checkpoint.\"\n    from cortex.model import infer_with_model\n\n    ckpt_dir = <TODO>\n    ckpt_name = <TODO>\n    predictions = infer_with_model(\n        data=df,\n        cfg_fpath=f\"{ckpt_dir}/{ckpt_name}.yaml\",\n        weight_fpath=f\"{ckpt_dir}/{ckpt_name}.pt\",\n    )\n    ```\n\n    Args:\n        data (pd.DataFrame): A dataframe containing the sequences to predict on.\n        cfg_fpath (str): The path to the Hydra config file on S3.\n        weight_fpath (str): The path to the PyTorch model weights on S3.\n        batch_limit (int, optional): The maximum number of sequences to predict on at once. Defaults to 32.\n        cpu_offload (bool, optional): Whether to use cpu offload.\n            If true, will run prediction with cpu offload. Defaults to True\n        device (torch.device, optional): The device to run the model on. Defaults to None.\n        dtype (torch.dtype, optional): The dtype to run the model on. Defaults to None.\n\n    Returns:\n        dict[str, np.ndarray]: A dict of NumPy arrays of the predictions.\n    \"\"\"\n    # set default device and dtype\n    if device is None:\n        device = torch.device(\"cuda:0\") if torch.cuda.is_available() else torch.device(\"cpu\")\n    if dtype is None and torch.cuda.is_available():\n        dtype = torch.float32\n    elif dtype is None:\n        dtype = torch.float64\n\n    if model is None and (cfg_fpath is None or weight_fpath is None):\n        raise ValueError(\"Either model or cfg_fpath and weight_fpath must be provided\")\n\n    if model is not None and (cfg_fpath is not None or weight_fpath is not None):\n        raise ValueError(\"Only one of model or cfg_fpath and weight_fpath must be provided\")\n\n    if model is None:\n        # load Hydra config from s3 or locally\n        cfg = load_hydra_config(cfg_fpath)\n        # load model checkpoint from s3 or locally\n        model, _ = load_model_checkpoint(cfg, weight_fpath, device=device, dtype=dtype)\n\n    # model forward pass\n    with torch.inference_mode():\n        return model.predict(\n            data=data,\n            batch_limit=batch_limit,\n            predict_tasks=None,\n            cpu_offload=cpu_offload,\n        )\n"}
{"type": "source_file", "path": "cortex/constants/_protein_constants.py", "content": "ANTIGEN_COMPLEX_TOKEN = \"<ag>\"  # Antigen chain start token\nAB_AG_COMPLEX_COL = \"tokenized_ab_ag_complex\"  # Tokenized complex column in dataframes\nANTIGEN_COL = \"affinity_antigen_sequence\"  # Antigen sequence column in dataframes\n\n# Dayhoff classification of amino acids based on physicochemical properties\n# These groups represent amino acids that can often substitute for each other\nAMINO_ACID_GROUPS = {\n    \"sulfur_polymerization\": [\"C\"],  # Cysteine\n    \"small\": [\"A\", \"G\", \"P\", \"S\", \"T\"],  # Alanine, Glycine, Proline, Serine, Threonine\n    \"acid_and_amide\": [\"D\", \"E\", \"N\", \"Q\"],  # Aspartic acid, Glutamic acid, Asparagine, Glutamine\n    \"basic\": [\"H\", \"K\", \"R\"],  # Histidine, Lysine, Arginine\n    \"hydrophobic\": [\"I\", \"L\", \"M\", \"V\"],  # Isoleucine, Leucine, Methionine, Valine\n    \"aromatic\": [\"F\", \"W\", \"Y\"],  # Phenylalanine, Tryptophan, Tyrosine\n}\n\n# Combined list of all canonical amino acids\nCANON_AMINO_ACIDS = []\nfor group in AMINO_ACID_GROUPS.values():\n    CANON_AMINO_ACIDS.extend(group)\n\nSTANDARD_AA_FREQS = {\n    \"A\": 0.0825,\n    \"R\": 0.0553,\n    \"N\": 0.0406,\n    \"D\": 0.0545,\n    \"C\": 0.0137,\n    \"Q\": 0.0393,\n    \"E\": 0.0675,\n    \"G\": 0.0707,\n    \"H\": 0.0227,\n    \"I\": 0.0595,\n    \"L\": 0.0966,\n    \"K\": 0.0584,\n    \"M\": 0.0242,\n    \"F\": 0.0386,\n    \"P\": 0.0470,\n    \"S\": 0.0657,\n    \"T\": 0.0534,\n    \"W\": 0.0108,\n    \"Y\": 0.0292,\n    \"V\": 0.0687,\n}\n\nVARIABLE_HEAVY_CHAIN_TOKEN = \"<vh>\"  # Variable heavy chain start token\nVARIABLE_HEAVY_COL = \"fv_heavy_aho\"  # Aligned VH sequence column in dataframes\nVARIABLE_LIGHT_CHAIN_TOKEN = \"<vl>\"  # Variable light chain start token\nVARIABLE_LIGHT_COL = \"fv_light_aho\"  # Aligned VL sequence column in dataframes\n"}
{"type": "source_file", "path": "cortex/data/__init__.py", "content": ""}
{"type": "source_file", "path": "cortex/config/hydra/__init__.py", "content": ""}
{"type": "source_file", "path": "cortex/attribution/_occlusion.py", "content": "from typing import Optional\n\nimport torch\n\n\ndef occlusion(\n    score_fn: callable,\n    tok_idxs: torch.LongTensor,\n    null_value: int,\n    is_excluded: Optional[torch.BoolTensor] = None,\n):\n    scores = []\n    for i in range(tok_idxs.size(-1)):\n        if torch.all(is_excluded[..., i]):\n            scores.append(torch.full_like(tok_idxs[..., 0].float(), -float(\"inf\")))\n            continue\n        occluded = tok_idxs.clone()\n        occluded[..., i] = null_value\n        scores.append(score_fn(occluded))\n    return torch.stack(scores, dim=-1)\n\n\ndef approximate_occlusion(\n    score_fn: callable,\n    tok_embeddings: torch.FloatTensor,\n    null_embedding: torch.FloatTensor,\n    is_excluded: Optional[torch.BoolTensor] = None,\n):\n    \"\"\"\n    First-order Taylor expansion of the occlusion score.\n    \"\"\"\n\n    tok_embeddings = torch.nn.Parameter(tok_embeddings)\n    score = score_fn(tok_embeddings).sum()\n    score.backward()\n    emb_grad = tok_embeddings.grad\n\n    perturbation = null_embedding - tok_embeddings\n\n    score_delta = (emb_grad * perturbation).sum(-1)\n\n    score_delta = torch.where(is_excluded, torch.full_like(score_delta, -float(\"inf\")), score_delta)\n    return score_delta\n\n\ndef greedy_occlusion_search(\n    tok_idxs: torch.LongTensor,\n    score_fn: callable,\n    null_value: int,\n    num_coordinates: int,\n    is_excluded: Optional[torch.BoolTensor] = None,\n    take_second_prob: float = 0.5,\n):\n    \"\"\"\n    Greedy coordinate selection based on sensitivity of `score_fn` to pointwise occlusion.\n    `score_fn` should be a callable that takes a tensor of token indices and returns a batch of scalar scores.\n    At each iteration, each coordinate is occluded and the score_fn is evaluated on the resulting tensor.\n    For each element in the batch, the coordinate with the highest score is selected and remains occluded.\n    This process is repeated until `num_coordinates` coordinates are selected.\n    Returns a tensor of indices of selected coordinates.\n    \"\"\"\n\n    num_feasible = (~is_excluded).float().sum(-1)\n    assert torch.all(num_feasible >= num_coordinates), \"Not enough feasible coordinates\"\n    is_selected = torch.zeros_like(tok_idxs, dtype=torch.bool)\n    for _ in range(num_coordinates):\n        scores = occlusion(\n            score_fn=score_fn, tok_idxs=tok_idxs, null_value=null_value, is_excluded=is_excluded + is_selected\n        )\n        # don't select already selected coordinates\n        scores = scores.masked_fill(is_selected, -float(\"inf\"))\n        # don't select excluded coordinates\n        if is_excluded is not None:\n            scores = scores.masked_fill(is_excluded, -float(\"inf\"))\n\n        _, sorted_idxs = torch.sort(scores, dim=-1, descending=True)\n        best_coord = sorted_idxs[..., 0]\n        second_best = sorted_idxs[..., 1]\n        second_available = (scores > -float(\"inf\")).sum(-1) > 1\n        take_second = (torch.rand_like(best_coord.float()) < take_second_prob) * second_available\n        best_coord = torch.where(take_second, second_best, best_coord)\n\n        is_selected.scatter_(-1, best_coord.unsqueeze(-1), True)\n        tok_idxs = torch.where(is_selected, null_value, tok_idxs)\n    select_coord = torch.where(is_selected)[1].view(*tok_idxs.shape[:-1], num_coordinates)\n    return select_coord\n"}
{"type": "source_file", "path": "cortex/assets/protein_seq_tokenizer_32/__init__.py", "content": ""}
{"type": "source_file", "path": "cortex/__init__.py", "content": "from importlib.metadata import PackageNotFoundError, version\n\ntry:\n    __version__ = version(\"pytorch-cortex\")\nexcept PackageNotFoundError:\n    __version__ = \"unknown version\"\n"}
{"type": "source_file", "path": "cortex/corruption/_abstract_corruption.py", "content": "from abc import ABC, abstractmethod\nfrom typing import Optional, Union\n\nimport numpy as np\nimport torch\n\nfrom cortex.corruption._diffusion_noise_schedule import get_named_beta_schedule\n\n\nclass CorruptionProcess(ABC):\n    \"\"\"\n    Base class for corruption processes, must be subclassed and\n    the _corrupt method must be implemented.\n    Provides noise schedule and timestep sampling, and defines\n    the corruption interface.\n    \"\"\"\n\n    def __init__(self, schedule: str = \"cosine\", max_steps: int = 1000, *args, **kwargs):\n        betas = get_named_beta_schedule(schedule, max_steps)\n\n        # Use float64 for accuracy.\n        betas = np.array(betas, dtype=np.float64)\n        self.betas = betas\n        assert len(betas.shape) == 1, \"betas must be 1-D\"\n        assert (betas > 0).all() and (betas <= 1).all()\n\n        self.max_steps = int(betas.shape[0])\n\n        alphas = 1.0 - betas\n        self.alphas_cumprod = np.cumprod(alphas, axis=0)\n        self.sqrt_alphas_cumprod = np.sqrt(self.alphas_cumprod)\n\n    def sample_timestep(self, n: Optional[int] = None):\n        \"\"\"Sample timestep(s) from the noise schedule.\n\n        Args:\n            n: Number of timesteps to sample. If None, returns a single int.\n               If an integer, returns an array of shape (n,).\n\n        Returns:\n            Int or array of timesteps.\n        \"\"\"\n        if n is None:\n            return np.random.randint(1, self.max_steps + 1)\n\n        return np.random.randint(1, self.max_steps + 1, size=(n,))\n\n    def sample_corrupt_frac(self, n: Optional[int] = None) -> torch.Tensor:\n        \"\"\"Sample corruption fraction(s).\n\n        Args:\n            n: Number of corruption fractions to sample. If None, returns a tensor with a single value.\n               If an integer, returns a tensor of shape (n,).\n\n        Returns:\n            Tensor of corruption fractions.\n        \"\"\"\n        timesteps = self.sample_timestep(n)\n\n        if n is None:\n            return torch.tensor([self.timestep_to_corrupt_frac(timesteps)])\n\n        return torch.tensor([self.timestep_to_corrupt_frac(t) for t in timesteps])\n\n    def timestep_to_corrupt_frac(self, timestep: int) -> float:\n        assert timestep <= self.max_steps\n        if timestep == 0:\n            return 0.0\n        return self.sqrt_alphas_cumprod[timestep - 1]\n\n    def __call__(\n        self,\n        x_start: torch.Tensor,\n        timestep: Optional[int] = None,\n        corrupt_frac: Optional[Union[float, torch.Tensor]] = None,\n        corruption_allowed: Optional[torch.Tensor] = None,\n        *args,\n        **kwargs,\n    ) -> tuple[torch.Tensor]:\n        # can't pass both timestep and noise_frac\n        assert timestep is None or corrupt_frac is None\n        # infer corrupt_frac from timestep\n        if timestep is not None:\n            assert timestep <= self.max_steps\n            corrupt_frac = self.timestep_to_corrupt_frac(timestep)\n        # sample if both timestep and corrupt_frac are None\n        elif corrupt_frac is None:\n            batch_size = x_start.shape[0]\n            corrupt_frac = self.sample_corrupt_frac(n=batch_size).to(x_start.device)\n\n        # Handle scalar and tensor corrupt_frac values consistently\n        if isinstance(corrupt_frac, float):\n            # If it's 0, we can early-return without corruption\n            if corrupt_frac == 0:\n                is_corrupted = torch.full_like(x_start, False, dtype=torch.bool)\n                return x_start, is_corrupted\n            # Otherwise convert to tensor matching batch dimension\n            corrupt_frac = torch.full((x_start.shape[0],), corrupt_frac, device=x_start.device)\n\n        x_corrupt, is_corrupted = self._corrupt(x_start, *args, corrupt_frac=corrupt_frac, **kwargs)\n        # only change values where corruption_allowed is True\n        if corruption_allowed is not None:\n            corruption_allowed = corruption_allowed.to(x_start.device)\n            x_corrupt = torch.where(corruption_allowed, x_corrupt, x_start)\n            is_corrupted = torch.where(corruption_allowed, is_corrupted, False)\n\n        return x_corrupt, is_corrupted\n\n    @abstractmethod\n    def _corrupt(self, x_start: torch.Tensor, corrupt_frac: float, *args, **kwargs):\n        pass\n"}
{"type": "source_file", "path": "cortex/config/__init__.py", "content": ""}
{"type": "source_file", "path": "cortex/data/data_module/__init__.py", "content": "from ._task_data_module import TaskDataModule\n"}
{"type": "source_file", "path": "cortex/corruption/_mask_corruption.py", "content": "from typing import Optional, Union\n\nimport torch\n\nfrom ._abstract_corruption import CorruptionProcess\n\n\nclass MaskCorruptionProcess(CorruptionProcess):\n    \"\"\"\n    Corrupt input tensor with mask values. Each tensor element is corrupted\n    independently with probability `corrupt_frac`.\n    \"\"\"\n\n    def __call__(\n        self,\n        x_start: torch.Tensor,\n        mask_val: int,\n        timestep: Optional[int] = None,\n        corrupt_frac: Optional[float] = None,\n        corruption_allowed: Optional[torch.Tensor] = None,\n        *args,\n        **kwargs,\n    ):\n        return super().__call__(x_start, timestep, corrupt_frac, corruption_allowed, *args, mask_val=mask_val, **kwargs)\n\n    def _corrupt(\n        self, x_start: torch.Tensor, corrupt_frac: Union[float, torch.Tensor], mask_val: int, *args, **kwargs\n    ) -> tuple[torch.Tensor]:\n        # Handle per-example corrupt_frac that has a batch dimension but needs to be\n        # broadcastable to the full x_start shape for element-wise operations\n        if isinstance(corrupt_frac, torch.Tensor) and corrupt_frac.dim() > 0:\n            # Reshape to enable broadcasting: [batch_size] -> [batch_size, 1, ...]\n            corrupt_frac = corrupt_frac.view(*corrupt_frac.shape, *([1] * (x_start.dim() - corrupt_frac.dim())))\n\n        is_corrupted = torch.rand_like(x_start, dtype=torch.float64) < corrupt_frac\n        mask_tensor = torch.full_like(x_start, mask_val)\n        x_corrupt = torch.where(is_corrupted, mask_tensor, x_start)\n        return x_corrupt, is_corrupted\n"}
{"type": "source_file", "path": "cortex/corruption/_substitution_corruption.py", "content": "from typing import Optional, Set, Union\n\nimport torch\n\nfrom cortex.metrics._blosum import create_tokenizer_compatible_transition_matrix\n\nfrom ._abstract_corruption import CorruptionProcess\n\n\nclass SubstitutionCorruptionProcess(CorruptionProcess):\n    \"\"\"\n    Corrupt input tensor by substituting values according to a substitution probability matrix.\n    Each tensor element is corrupted independently with probability `corrupt_frac`.\n\n    If no substitution_matrix is provided, uniform random substitution is used.\n    If a substitution_matrix is provided, it defines the probability of substituting\n    token i with token j.\n\n    Args:\n        vocab_size: Size of the vocabulary (number of possible tokens).\n        excluded_token_ids: Set of token IDs that should not be corrupted or used as substitutes.\n        substitution_matrix: Optional substitution probability matrix of shape (vocab_size, vocab_size).\n            Each row i contains the probability distribution for substituting token i with any other token.\n            If None, uniform random substitution is used.\n        schedule: Noise schedule type (\"linear\", \"cosine\", etc.).\n        max_steps: Maximum number of diffusion steps.\n    \"\"\"\n\n    def __init__(\n        self,\n        vocab_size: int,\n        excluded_token_ids: Optional[Set[int]] = None,\n        substitution_matrix: Optional[torch.Tensor] = None,\n        schedule: str = \"cosine\",\n        max_steps: int = 1000,\n        *args,\n        **kwargs,\n    ):\n        super().__init__(schedule, max_steps, *args, **kwargs)\n        self.vocab_size = vocab_size\n        self.excluded_token_ids = excluded_token_ids or set()\n\n        # Initialize the substitution matrix\n        if substitution_matrix is None:\n            # Create matrix with zeros for excluded tokens\n            substitution_matrix = torch.zeros(vocab_size, vocab_size)\n\n            # For each non-excluded token, set uniform probability to all other non-excluded tokens\n            valid_token_ids = [i for i in range(vocab_size) if i not in self.excluded_token_ids]\n\n            if valid_token_ids:\n                # Calculate probability for each valid substitution\n                # (excluding self-substitution)\n                prob = 1.0 / (len(valid_token_ids) - 1) if len(valid_token_ids) > 1 else 0.0\n\n                for i in valid_token_ids:\n                    for j in valid_token_ids:\n                        if i != j:  # Don't substitute with same token\n                            substitution_matrix[i, j] = prob\n        else:\n            # Validate the substitution matrix\n            if not substitution_matrix.shape == (vocab_size, vocab_size):\n                raise ValueError(\"Substitution matrix must have shape (vocab_size, vocab_size)\")\n\n            if not torch.all(substitution_matrix >= 0) and not torch.all(substitution_matrix <= 1):\n                raise ValueError(\"Substitution matrix must have values in [0, 1]\")\n\n            if not torch.allclose(substitution_matrix.sum(dim=-1), torch.ones(vocab_size)):\n                raise ValueError(\"Substitution matrix rows must sum to 1\")\n\n        # Store substitution matrix as an attribute\n        self.substitution_matrix = substitution_matrix\n\n    def _corrupt(\n        self, x_start: torch.Tensor, corrupt_frac: Union[float, torch.Tensor], *args, **kwargs\n    ) -> tuple[torch.Tensor, torch.Tensor]:\n        \"\"\"\n        Corrupt the input tensor by substituting tokens according to the substitution matrix.\n\n        Args:\n            x_start: Input tensor to corrupt.\n            corrupt_frac: Fraction of tokens to corrupt, either a scalar or per-example tensor.\n\n        Returns:\n            Tuple of (corrupted tensor, corruption mask).\n        \"\"\"\n        # Handle per-example corrupt_frac for broadcasting\n        if isinstance(corrupt_frac, torch.Tensor) and corrupt_frac.dim() > 0:\n            # Reshape to enable broadcasting: [batch_size] -> [batch_size, 1, ...]\n            corrupt_frac = corrupt_frac.view(*corrupt_frac.shape, *([1] * (x_start.dim() - corrupt_frac.dim())))\n\n        # Generate corruption mask (avoiding excluded tokens)\n        corrupted_allowed = torch.ones_like(x_start, dtype=torch.bool)\n        for token_id in self.excluded_token_ids:\n            corrupted_allowed &= x_start != token_id\n\n        # Only corrupt allowed tokens with probability corrupt_frac\n        is_corrupted = torch.rand_like(x_start, dtype=torch.float64) < corrupt_frac\n        is_corrupted &= corrupted_allowed\n\n        # Only proceed if there are tokens to corrupt\n        if not torch.any(is_corrupted):\n            return x_start, is_corrupted\n\n        # Create new tensor for corrupted tokens\n        x_corrupt = x_start.clone()\n\n        # Flatten the tensor for easier indexing\n        flat_shape = x_start.shape\n        flat_x = x_start.reshape(-1)\n        flat_is_corrupted = is_corrupted.reshape(-1)\n        flat_x_corrupt = x_corrupt.reshape(-1)\n\n        # Get indices of tokens to corrupt\n        corrupt_indices = torch.nonzero(flat_is_corrupted).squeeze(1)\n\n        if len(corrupt_indices) > 0:\n            # Get original token values\n            original_tokens = flat_x[corrupt_indices]\n\n            # Generate substitutions based on the substitution matrix\n            # For each token to corrupt, sample from its row in the substitution matrix\n            sub_matrix = self.substitution_matrix.to(original_tokens.device)\n            substitution_probs = sub_matrix[original_tokens]\n\n            # Sample new tokens according to substitution probabilities\n            new_tokens = torch.multinomial(substitution_probs, num_samples=1).squeeze(1)\n\n            # Apply substitutions\n            flat_x_corrupt[corrupt_indices] = new_tokens\n\n        # Reshape back to original shape\n        x_corrupt = flat_x_corrupt.reshape(flat_shape)\n\n        return x_corrupt, is_corrupted\n\n    @classmethod\n    def from_tokenizer(cls, tokenizer, **kwargs):\n        \"\"\"\n        Create a SubstitutionCorruptionProcess using a tokenizer's vocabulary.\n\n        Args:\n            tokenizer: A tokenizer with vocab and corruption_vocab_excluded attributes.\n\n        Returns:\n            SubstitutionCorruptionProcess with uniform substitution matrix respecting tokenizer constraints.\n        \"\"\"\n        vocab_size = len(tokenizer.vocab)\n        excluded_token_ids = set()\n\n        # Convert excluded token strings to token IDs\n        for token in tokenizer.corruption_vocab_excluded:\n            if token in tokenizer.vocab:\n                excluded_token_ids.add(tokenizer.vocab[token])\n\n        return cls(vocab_size=vocab_size, excluded_token_ids=excluded_token_ids, **kwargs)\n\n    @classmethod\n    def from_blosum62(cls, vocab_file_path=None, **kwargs):\n        \"\"\"\n        Create a SubstitutionCorruptionProcess using BLOSUM62 substitution probabilities.\n\n        Args:\n            tokenizer: A tokenizer with vocabulary mapping functions (used for excluded tokens).\n            vocab_file_path: Optional path to vocab file. If None, uses default in ProteinSequenceTokenizer.\n\n        Returns:\n            SubstitutionCorruptionProcess with BLOSUM62-based substitution matrix.\n        \"\"\"\n        # Create transition matrix based on BLOSUM62 and the vocab file\n        transition_matrix = create_tokenizer_compatible_transition_matrix(vocab_file_path)\n\n        return cls(\n            vocab_size=transition_matrix.size(0),\n            excluded_token_ids=None,\n            substitution_matrix=transition_matrix,\n            **kwargs,\n        )\n"}
{"type": "source_file", "path": "cortex/cmdline/__init__.py", "content": ""}
{"type": "source_file", "path": "cortex/corruption/_diffusion_noise_schedule.py", "content": "\"\"\"\nThis code started out as a PyTorch port of Ho et al's diffusion models:\nhttps://github.com/hojonathanho/diffusion/blob/1e0dceb3b3495bbe19116a5e1b3596cd0706c543/diffusion_tf/diffusion_utils_2.py\n\nDocstrings have been added, as well as DDIM sampling and a new collection of beta schedules.\n\"\"\"\n\nimport math\nfrom typing import Callable\n\nimport numpy as np\n\n\ndef get_named_beta_schedule(schedule_name: str, num_diffusion_timesteps: int) -> np.ndarray:\n    \"\"\"\n    Get a pre-defined beta schedule for the given name.\n\n    The beta schedule library consists of beta schedules which remain similar\n    in the limit of num_diffusion_timesteps.\n    Beta schedules may be added, but should not be removed or changed once\n    they are committed to maintain backwards compatibility.\n    \"\"\"\n    if schedule_name == \"linear\":\n        # Linear schedule from Ho et al, extended to work for any number of\n        # diffusion steps.\n        scale = 1000 / num_diffusion_timesteps\n        beta_start = scale * 0.0001\n        beta_end = scale * 0.02\n        return np.linspace(beta_start, beta_end, num_diffusion_timesteps, dtype=np.float64)\n    elif schedule_name == \"cosine\":\n        return _betas_for_alpha_bar(\n            num_diffusion_timesteps,\n            lambda t: math.cos((t + 0.008) / 1.008 * math.pi / 2) ** 2,\n        )\n    elif schedule_name == \"sqrt\":\n        return _betas_for_alpha_bar(\n            num_diffusion_timesteps,\n            lambda t: 1 - np.sqrt(t + 0.0001),\n        )\n    elif schedule_name == \"trunc_cos\":\n        return _betas_for_alpha_bar2(\n            num_diffusion_timesteps,\n            lambda t: np.cos((t + 0.1) / 1.1 * np.pi / 2) ** 2,\n        )\n    elif schedule_name == \"trunc_lin\":\n        scale = 1000 / num_diffusion_timesteps\n        beta_start = scale * 0.0001 + 0.01\n        beta_end = scale * 0.02 + 0.01\n        return np.linspace(beta_start, beta_end, num_diffusion_timesteps, dtype=np.float64)\n    elif schedule_name == \"pw_lin\":\n        scale = 1000 / num_diffusion_timesteps\n        beta_start = scale * 0.0001 + 0.01\n        beta_mid = scale * 0.0001  # scale * 0.02\n        beta_end = scale * 0.02\n        first_part = np.linspace(beta_start, beta_mid, 10, dtype=np.float64)\n        second_part = np.linspace(beta_mid, beta_end, num_diffusion_timesteps - 10, dtype=np.float64)\n        return np.concatenate([first_part, second_part])\n    else:\n        raise NotImplementedError(f\"unknown beta schedule: {schedule_name}\")\n\n\ndef _betas_for_alpha_bar2(num_diffusion_timesteps: int, alpha_bar: Callable, max_beta: float = 0.999) -> np.ndarray:\n    \"\"\"\n    Create a beta schedule that discretizes the given alpha_t_bar function,\n    which defines the cumulative product of (1-beta) over time from t = [0,1].\n\n    :param num_diffusion_timesteps: the number of betas to produce.\n    :param alpha_bar: a lambda that takes an argument t from 0 to 1 and\n                      produces the cumulative product of (1-beta) up to that\n                      part of the diffusion process.\n    :param max_beta: the maximum beta to use; use values lower than 1 to\n                     prevent singularities.\n    \"\"\"\n    betas = []\n    betas.append(min(1 - alpha_bar(0), max_beta))\n    for i in range(num_diffusion_timesteps - 1):\n        t1 = i / num_diffusion_timesteps\n        t2 = (i + 1) / num_diffusion_timesteps\n        betas.append(min(1 - alpha_bar(t2) / alpha_bar(t1), max_beta))\n    return np.array(betas)\n\n\ndef _betas_for_alpha_bar(num_diffusion_timesteps: int, alpha_bar: Callable, max_beta: float = 0.999) -> np.ndarray:\n    \"\"\"\n    Create a beta schedule that discretizes the given alpha_t_bar function,\n    which defines the cumulative product of (1-beta) over time from t = [0,1].\n\n    :param num_diffusion_timesteps: the number of betas to produce.\n    :param alpha_bar: a lambda that takes an argument t from 0 to 1 and\n                      produces the cumulative product of (1-beta) up to that\n                      part of the diffusion process.\n    :param max_beta: the maximum beta to use; use values lower than 1 to\n                     prevent singularities.\n    \"\"\"\n    betas = []\n    for i in range(num_diffusion_timesteps):\n        t1 = i / num_diffusion_timesteps\n        t2 = (i + 1) / num_diffusion_timesteps\n        betas.append(min(1 - alpha_bar(t2) / alpha_bar(t1), max_beta))\n    return np.array(betas)\n"}
{"type": "source_file", "path": "cortex/corruption/_gaussian_corruption.py", "content": "import math\nfrom typing import Union\n\nimport torch\n\nfrom ._abstract_corruption import CorruptionProcess\n\n\nclass GaussianCorruptionProcess(CorruptionProcess):\n    \"\"\"\n    Corrupt input tensor with additive Gaussian noise with\n    variance `noise_variance`. Each tensor element is corrupted\n    independently with probability `corrupt_frac`.\n    \"\"\"\n\n    def __init__(self, noise_variance: float = 10.0, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.noise_variance = noise_variance\n\n    def _corrupt(\n        self, x_start: torch.Tensor, corrupt_frac: Union[float, torch.Tensor], *args, **kwargs\n    ) -> tuple[torch.Tensor]:\n        # Handle per-example corrupt_frac that has a batch dimension but needs to be\n        # broadcastable to the full x_start shape for element-wise operations\n        if isinstance(corrupt_frac, torch.Tensor) and corrupt_frac.dim() > 0:\n            # Reshape to enable broadcasting: [batch_size] -> [batch_size, 1, ...]\n            corrupt_frac = corrupt_frac.view(*corrupt_frac.shape, *([1] * (x_start.dim() - corrupt_frac.dim())))\n\n        noise_scale = corrupt_frac * math.sqrt(self.noise_variance)\n        x_corrupt = (1.0 - corrupt_frac) * x_start + noise_scale * torch.randn_like(x_start)\n        is_corrupted = torch.ones_like(x_start, dtype=torch.bool)\n        return x_corrupt, is_corrupted\n"}
{"type": "source_file", "path": "cortex/acquisition/__init__.py", "content": "from ._graph_nei import GraphNEI, get_graph_nei_runtime_kwargs, get_joint_objective_values\n\n__all__ = [\n    \"get_graph_nei_runtime_kwargs\",\n    \"get_joint_objective_values\",\n    \"GraphNEI\",\n]\n"}
{"type": "source_file", "path": "cortex/cmdline/train_cortex_model.py", "content": "import logging\nimport os\nimport random\nimport warnings\n\nimport hydra\nimport lightning as L\nimport torch\nimport wandb\nfrom omegaconf import DictConfig, OmegaConf\n\nfrom cortex.logging import wandb_setup\n\n\n@hydra.main(config_path=\"../config/hydra\", config_name=\"train_cortex_model\", version_base=None)\ndef main(cfg):\n    \"\"\"\n    general setup\n    \"\"\"\n    random.seed(None)  # make sure random seed resets between Hydra multirun jobs for random job-name generation\n\n    try:\n        with warnings.catch_warnings():\n            warnings.simplefilter(cfg.warnings_filter)\n            ret_val = execute(cfg)\n    except Exception as err:\n        ret_val = float(\"NaN\")\n        logging.exception(err)\n\n    wandb.finish()  # necessary to log Hydra multirun output to different jobs\n    return ret_val\n\n\ndef execute(cfg):\n    \"\"\"\n    instantiate and train a multitask neural tree\n    \"\"\"\n\n    trainer = hydra.utils.instantiate(cfg.trainer)\n\n    # seeding\n    if cfg.seed is None:\n        cfg.seed = random.randint(0, 1000)\n\n    print(trainer.global_rank, trainer.local_rank, trainer.node_rank)\n    total_rank = trainer.global_rank + trainer.local_rank + trainer.node_rank\n    cfg.seed = cfg.seed + total_rank\n    L.seed_everything(seed=cfg.seed, workers=True)\n\n    # logging\n    if trainer.global_rank == 0:\n        wandb_setup(cfg)  # wandb init, set cfg job name to wandb job name\n    cfg = OmegaConf.to_container(cfg, resolve=True)  # Resolve config interpolations\n    cfg = DictConfig(cfg)\n    if trainer.global_rank == 0:\n        print(OmegaConf.to_yaml(cfg))\n    trainer.logger = L.pytorch.loggers.WandbLogger()\n\n    # checkpointing\n    try:\n        ckpt_file = os.path.join(cfg.data_dir, cfg.ckpt_file)\n        ckpt_cfg = os.path.join(cfg.data_dir, cfg.ckpt_cfg)\n    except TypeError:\n        ckpt_file = None\n        ckpt_cfg = None\n\n    if os.path.exists(ckpt_file) and cfg.save_ckpt:\n        msg = f\"checkpoint already exists at {ckpt_file} and will be overwritten!\"\n        warnings.warn(msg, UserWarning, stacklevel=2)\n\n    # instantiate model\n    model = hydra.utils.instantiate(cfg.tree)\n    model.build_tree(cfg, skip_task_setup=False)\n\n    trainer.fit(\n        model,\n        train_dataloaders=model.get_dataloader(split=\"train\"),\n        val_dataloaders=model.get_dataloader(split=\"val\"),\n    )\n\n    # save model\n    model.cpu()\n    if isinstance(ckpt_file, str) and trainer.global_rank == 0:\n        torch.save(model.state_dict(), f\"{ckpt_file}\")\n        OmegaConf.save(config=cfg, f=ckpt_cfg)\n\n    return float(\"NaN\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"type": "source_file", "path": "cortex/assets/__init__.py", "content": ""}
{"type": "source_file", "path": "cortex/data/data_module/_task_data_module.py", "content": "from typing import Any, Callable, Iterable, Optional, Sequence, TypeVar, Union\n\nimport hydra\nimport pandas as pd\nfrom lightning import LightningDataModule\nfrom omegaconf import DictConfig\nfrom torch import Generator\nfrom torch.utils.data import DataLoader, Sampler, random_split\n\nfrom cortex.data.dataset import ordered_dict_collator\n\n# TODO change to prescient.samplers when available\nfrom cortex.data.samplers import RandomizedMinorityUpsampler\n\nT = TypeVar(\"T\")\n\n\nclass TaskDataModule(LightningDataModule):\n    def __init__(\n        self,\n        dataset_config: DictConfig,\n        train_on_everything: bool = False,\n        lengths: Union[Sequence[float], None] = None,\n        # generator: Union[Generator, None] = None,\n        seed: int = 0xDEADBEEF,\n        batch_size: int = 1,\n        shuffle: Optional[bool] = None,\n        balance_train_partition: Optional[Union[str, list[str]]] = None,\n        sampler: Union[Iterable, Sampler, None] = None,\n        batch_sampler: Union[Iterable[Sequence], Sampler[Sequence], None] = None,\n        num_workers: int = 0,\n        collate_fn: Union[Callable[[T], Any], None] = None,\n        pin_memory: bool = True,\n        drop_last: bool = False,\n        skip_task_setup: bool = False,\n    ):\n        _default_lengths = [1.0, 0.0] if train_on_everything else [0.8, 0.2]\n        self._train_on_everything = train_on_everything\n        self._lengths = lengths or _default_lengths\n        self._seed = seed\n        # self._generator = generator or Generator().manual_seed(seed)\n        self._dataset_config = dataset_config\n        super().__init__()\n\n        self._shuffle = shuffle\n        self._balance_train_partition = balance_train_partition\n        self._sampler = sampler\n        self._batch_size = batch_size\n        self._batch_sampler = batch_sampler\n        self._collate_fn = collate_fn or ordered_dict_collator\n        self._drop_last = drop_last\n\n        self.datasets = {\n            \"train\": None,\n            \"val\": None,\n            \"test\": None,\n            \"predict\": None,\n        }\n        self._dataloader_kwargs = {\n            \"batch_size\": batch_size,\n            # \"shuffle\": self._shuffle,\n            \"num_workers\": num_workers,\n            \"collate_fn\": self._collate_fn,\n            \"pin_memory\": pin_memory,\n        }\n        if not skip_task_setup:\n            self.setup(stage=\"test\")\n            self.setup(stage=\"fit\")\n\n    def setup(self, stage=None, dataset_kwargs=None):\n        dataset_kwargs = dataset_kwargs or {}\n        if stage == \"fit\":\n            self._dataset_config.train = True\n            train_val = hydra.utils.instantiate(self._dataset_config, **dataset_kwargs)\n            if self._train_on_everything:\n                train_val.df = pd.concat([train_val._data, self.datasets[\"test\"]._data], ignore_index=True)\n            train_dataset, val_dataset = random_split(\n                train_val,\n                lengths=self._lengths,\n                generator=Generator().manual_seed(self._seed),\n            )\n            # Subset datasets are awkward to work with.\n            self.datasets[\"train_val\"] = train_val\n            self.datasets[\"train\"] = train_dataset\n            self.datasets[\"val\"] = val_dataset\n        if stage == \"test\":\n            self._dataset_config.train = False\n            test_dataset = hydra.utils.instantiate(self._dataset_config, **dataset_kwargs)\n            self.datasets[\"test\"] = test_dataset\n        if stage == \"predict\":\n            self._dataset_config.base_dataset.train = False\n            predict_dataset = hydra.utils.instantiate(self._dataset_config, **dataset_kwargs)\n            self.datasets[\"predict\"] = predict_dataset\n\n    def train_dataloader(self):\n        return self.get_dataloader(split=\"train\")\n\n    def val_dataloader(self):\n        return self.get_dataloader(split=\"val\")\n\n    def test_dataloader(self):\n        return self.get_dataloader(split=\"test\")\n\n    def get_dataloader(self, split: str = \"train\"):\n        if self.datasets[split] is None or len(self.datasets[split]) == 0:\n            return []\n\n        if self._batch_sampler is None:\n            sampler = self._sampler or RandomizedMinorityUpsampler(\n                self._partition_train_indices(),\n            )\n        else:\n            sampler = None\n        if split == \"train\":\n            return DataLoader(\n                self.datasets[split],\n                sampler=sampler,\n                batch_sampler=self._batch_sampler,\n                drop_last=self._drop_last,\n                **self._dataloader_kwargs,\n            )\n        else:\n            # Full batch for evaluation on the test set\n            if split == \"test\":\n                self._dataloader_kwargs[\"batch_size\"] = len(self.datasets[split])\n            dataloader = DataLoader(self.datasets[split], shuffle=True, drop_last=True, **self._dataloader_kwargs)\n            if split == \"test\":\n                self._dataloader_kwargs[\"batch_size\"] = self._batch_size\n            return dataloader\n\n    def _partition_train_indices(self):\n        if self._balance_train_partition is None:\n            return [list(range(len(self.datasets[\"train\"])))]\n\n        train_df = self.datasets[\"train_val\"]._data.iloc[self.datasets[\"train\"].indices].reset_index(drop=True)\n        if isinstance(self._balance_train_partition, str):\n            partition = [self._balance_train_partition]\n        else:\n            partition = list(self._balance_train_partition)\n\n        index_list = list(train_df.groupby(partition).indices.values())\n        return index_list\n"}
{"type": "source_file", "path": "cortex/attribution/__init__.py", "content": "from ._occlusion import approximate_occlusion, occlusion\n\n__all__ = [\n    \"approximate_occlusion\",\n    \"occlusion\",\n]\n"}
{"type": "source_file", "path": "cortex/constants/__init__.py", "content": "from ._protein_constants import (\n    AB_AG_COMPLEX_COL,\n    AMINO_ACID_GROUPS,\n    ANTIGEN_COL,\n    ANTIGEN_COMPLEX_TOKEN,\n    CANON_AMINO_ACIDS,\n    STANDARD_AA_FREQS,\n    VARIABLE_HEAVY_CHAIN_TOKEN,\n    VARIABLE_HEAVY_COL,\n    VARIABLE_LIGHT_CHAIN_TOKEN,\n    VARIABLE_LIGHT_COL,\n)\n\nALIGNMENT_GAP_TOKEN = \"-\"\nCOMPLEX_SEP_TOKEN = \".\"\nNULL_TOKENS = [\"<null_1>\"]\n\n\n__all__ = [\n    \"AB_AG_COMPLEX_COL\",\n    \"ALIGNMENT_GAP_TOKEN\",\n    \"AMINO_ACID_GROUPS\",\n    \"ANTIGEN_COL\",\n    \"ANTIGEN_COMPLEX_TOKEN\",\n    \"CANON_AMINO_ACIDS\",\n    \"COMPLEX_SEP_TOKEN\",\n    \"NULL_TOKENS\",\n    \"STANDARD_AA_FREQS\",\n    \"VARIABLE_HEAVY_CHAIN_TOKEN\",\n    \"VARIABLE_HEAVY_COL\",\n    \"VARIABLE_LIGHT_CHAIN_TOKEN\",\n    \"VARIABLE_LIGHT_COL\",\n]\n"}
{"type": "source_file", "path": "cortex/corruption/__init__.py", "content": "from ._abstract_corruption import CorruptionProcess\nfrom ._diffusion_noise_schedule import get_named_beta_schedule\nfrom ._gaussian_corruption import GaussianCorruptionProcess\nfrom ._mask_corruption import MaskCorruptionProcess\nfrom ._substitution_corruption import SubstitutionCorruptionProcess\n"}
{"type": "source_file", "path": "cortex/acquisition/_graph_nei.py", "content": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Optional\n\nimport numpy as np\nimport torch\nfrom botorch.acquisition.logei import qLogExpectedImprovement\nfrom botorch.acquisition.multi_objective.logei import qLogExpectedHypervolumeImprovement\nfrom botorch.acquisition.objective import IdentityMCObjective\nfrom botorch.utils.multi_objective.box_decompositions import FastNondominatedPartitioning\nfrom botorch.utils.multi_objective.hypervolume import infer_reference_point\nfrom botorch.utils.multi_objective.pareto import is_non_dominated\nfrom torch import Tensor\n\nif TYPE_CHECKING:\n    from cortex.model.tree import NeuralTree, NeuralTreeOutput\n\nGRAPH_OBJECTIVES = [\"stability\", \"log_fluorescence\"]\nGRAPH_CONSTRAINTS = {}\n# rescale stability and log_fluorescence to [0, 1]\n# {\"scale\": 1 / (max - min), \"shift\": -min}\nGRAPH_OBJ_TRANSFORM = {\n    \"stability\": {\"scale\": 1 / 5.37, \"shift\": 1.97},\n    \"log_fluorescence\": {\"scale\": 1 / 2.84, \"shift\": -1.28},\n}\n\n\ndef get_joint_objective_values(\n    inputs: dict[str, Tensor],\n    objectives: list[str],\n    constraints: Optional[dict[str, list[str]]] = None,\n    scaling: Optional[dict[str, dict[str, float]]] = None,\n) -> Tensor:\n    \"\"\"Get joint objective values from predicted properties based on objectives and constraints.\n\n    Parameters\n    ----------\n    inputs : dict[str, Tensor]\n        dictionary of predicted properties. Each key is a property name and each value is a tensor of shape (ensemble size, batch_size)\n    objectives : list[str]\n        list of objective names. Each objective name must be a key in inputs.\n    constraints : Optional[dict[str, list[str]]], optional\n        dictionary of constraints. Each key is a constraint name and each value is a list of objective names that are constrained by the constraint.\n    scaling : Optional[dict[str, dict[str, float]]], optional\n        dictionary of scaling parameters. Each key is a property name and each value is a dictionary with keys \"scale\" and \"shift\".\n\n    Returns\n    -------\n    Tensor\n        Joint objective values of shape (ensemble size, batch_size, num_objectives)\n\n    \"\"\"\n\n    if not all([obj in inputs for obj in objectives]):\n        raise ValueError(f\"Not all objectives {objectives} in predicted_properties {inputs.keys()}\")\n\n    objective_values: list[Tensor] = []\n\n    for obj in objectives:\n        pred_means = inputs[obj]\n\n        if scaling is not None and obj in scaling:\n            pred_means = scale_value(pred_means, shift=scaling[obj][\"shift\"], scale=scaling[obj][\"scale\"])\n\n        objective_values.append(pred_means)\n\n    objective_values = torch.stack(objective_values, dim=-1)\n\n    if constraints is None:\n        return objective_values\n\n    constraint_values: list[Tensor] = []\n\n    for obj in objectives:\n        if obj in constraints:\n            constraint_list = constraints[obj]\n            _current = [inputs[const] for const in constraint_list]\n            constraint_values.append(torch.stack(_current, dim=-1).prod(-1))\n\n    constraint_values = torch.stack(constraint_values, dim=-1)\n\n    objective_values = objective_values * constraint_values\n\n    return objective_values\n\n\ndef scale_value(value: Tensor, *, shift: float, scale: float) -> Tensor:\n    return (value + shift) * scale\n\n\ndef tree_output_to_dict(\n    tree_output: NeuralTreeOutput,\n    objectives: list[str],\n    constraints: Optional[dict[str, list[str]]] = None,\n    scaling: Optional[dict[str, dict[str, float]]] = None,\n) -> dict[str, Tensor]:\n    \"\"\"Convert tree output to dictionary of tensors.\n\n    Parameters\n    ----------\n    tree_output : NeuralTreeOutput\n        Tree output\n    objectives : list[str]\n        list of objective names. Each objective adds a key to the output dictionary.\n    constraints : Optional[dict[str, list[str]]], optional\n        Optional dictionary of constraints. Each key is added to the output dictionary.\n    scaling : Optional[dict[str, dict[str, float]]], optional\n        Optional dictionary of scaling parameters. Must be a subset of objectives and each value is a dictionary with keys \"scale\" and \"shift\".\n\n    Returns\n    -------\n    dict[str, Tensor]\n        dictionary of tensors with keys corresponding to objectives and constraints.\n    \"\"\"\n\n    result: dict[str, Tensor] = {}\n\n    for objective in objectives:\n        result[objective] = tree_output.fetch_task_outputs(objective)[\"loc\"].squeeze(-1)\n\n        if scaling is not None and objective in scaling:\n            result[f\"{objective}_scaled\"] = scale_value(\n                value=result[objective],\n                shift=scaling[objective][\"shift\"],\n                scale=scaling[objective][\"scale\"],\n            )\n\n    if constraints is not None:\n        for c_list in constraints.values():\n            for constraint in c_list:\n                if constraint in result:\n                    continue\n\n                constraint_values = tree_output.fetch_task_outputs(constraint)[\"logits\"]\n                constraint_values = constraint_values.softmax(dim=-1)[..., 1]\n\n                result[constraint] = constraint_values\n\n    return result\n\n\ndef get_graph_nei_runtime_kwargs(\n    model: NeuralTree,\n    candidate_points: np.ndarray,\n    objectives: list[str] = GRAPH_OBJECTIVES,\n    constraints: dict[str, list[str]] = GRAPH_CONSTRAINTS,\n    scaling: dict[str, dict[str, float]] = GRAPH_OBJ_TRANSFORM,\n):\n    print(\"==== predicting baseline point objective values ====\")\n    with torch.inference_mode():\n        tree_output = model.call_from_str_array(candidate_points, corrupt_frac=0.0)\n\n    tree_output_dict = tree_output_to_dict(tree_output, objectives=objectives, constraints=constraints, scaling=scaling)\n    f_baseline = get_joint_objective_values(\n        inputs=tree_output_dict,\n        objectives=objectives,\n        constraints=constraints,\n        scaling=scaling,\n    )  # (num_samples, num_baseline, num_objectives)\n\n    f_baseline_flat = f_baseline.reshape(-1, len(objectives))\n    f_baseline_non_dom = f_baseline_flat[is_non_dominated(f_baseline_flat)]\n    print(f_baseline_non_dom)\n    f_ref = infer_reference_point(f_baseline_non_dom)\n    print(f\"reference point: {f_ref}\")\n    res = {\n        \"f_ref\": f_ref,\n        \"f_baseline\": f_baseline,\n    }\n    print(f\"[INFO][LaMBO-2] Baseline value: {f_baseline.mean(0).max().item():.4f}\")\n    return res\n\n\nclass GraphNEI(object):\n    def __init__(\n        self,\n        objectives: list[str],\n        constraints: dict[str, list[str]],\n        scaling: dict[str, dict[str, float]],\n        f_ref: torch.Tensor,  # (num_objectives,)\n        f_baseline: torch.Tensor,  # (num_samples, num_baseline, num_objectives)\n    ) -> None:\n        \"\"\"\n        Very simple implementation of PropertyDAG + NEHVI\n        \"\"\"\n\n        self.objectives = objectives\n        self.constraints = constraints\n        self.scaling = scaling\n\n        f_non_dom = []\n        for f in f_baseline:\n            f_non_dom.append(f[is_non_dominated(f)])\n\n        self._obj_dim = len(objectives)\n        if self._obj_dim == 1:\n            f_best = f_baseline.max(dim=-2).values.squeeze(-1)\n            self.acq_functions = [\n                qLogExpectedImprovement(\n                    model=None,\n                    best_f=f,\n                    objective=IdentityMCObjective(),\n                )\n                for f in f_best\n            ]\n        else:\n            self.acq_functions = [\n                qLogExpectedHypervolumeImprovement(\n                    model=None,\n                    ref_point=f_ref,\n                    partitioning=FastNondominatedPartitioning(f_ref, f),\n                )\n                for f in f_non_dom\n            ]\n        self.has_pointwise_reference = False\n\n    def get_objective_vals(self, tree_output: NeuralTreeOutput):\n        tree_output_dict = tree_output_to_dict(tree_output, self.objectives, self.constraints, self.scaling)\n        return get_joint_objective_values(\n            tree_output_dict,\n            self.objectives,\n            self.constraints,\n            self.scaling,\n        )\n\n    def __call__(self, input: NeuralTreeOutput | torch.Tensor, pointwise=True):\n        if not torch.is_tensor(input):\n            obj_val_samples = self.get_objective_vals(input)\n\n        else:\n            obj_val_samples = input\n\n        if pointwise:\n            obj_val_samples = obj_val_samples.unsqueeze(-2)  # (num_samples, num_designs, 1, num_objectives)\n\n        # assumes the first dimension of obj_vals corresponds to the qEHVI partitions\n        if self._obj_dim == 1:\n            acq_vals = torch.stack(\n                [fn._sample_forward(vals) for fn, vals in zip(self.acq_functions, obj_val_samples.squeeze(-1))]\n            ).squeeze(-1)\n        else:\n            acq_vals = torch.stack(\n                [fn._compute_log_qehvi(vals.unsqueeze(0)) for fn, vals in zip(self.acq_functions, obj_val_samples)]\n            )\n\n        return acq_vals.mean(0)\n"}
{"type": "source_file", "path": "cortex/data/dataset/_transformed_dataset.py", "content": "from collections import OrderedDict\nfrom typing import Any, Optional\n\nimport pandas as pd\nfrom torch.nn import Sequential\n\nfrom cortex.data.dataset import DataFrameDataset\n\n\nclass TransformedDataset(DataFrameDataset):\n    def __init__(\n        self,\n        preprocessing_transforms: Optional[list] = None,\n        runtime_transforms: Optional[list] = None,\n        *args,\n        **kwargs,\n    ):\n        # if isinstance(base_dataset, DictConfig):\n        #     base_dataset = hydra.utils.instantiate(base_dataset)\n        # if isinstance(base_dataset, ConcatDataset):\n        #     data = pd.concat([dataset._data for dataset in base_dataset.datasets], ignore_index=True)\n        # else:\n        #     data = base_dataset._data.reset_index(drop=True)\n\n        preprocessing_transforms = preprocessing_transforms or []\n        if len(preprocessing_transforms) > 0:\n            self._preprocessing_transforms = Sequential(*preprocessing_transforms)\n        else:\n            self._preprocessing_transforms = None\n\n        super().__init__(*args, **kwargs)\n        self._data = self._preprocess(self._data)\n\n        runtime_transforms = runtime_transforms or []\n        if len(runtime_transforms) > 0:\n            self._runtime_transforms = Sequential(*runtime_transforms)\n        else:\n            self._runtime_transforms = None\n\n    def _preprocess(self, data) -> pd.DataFrame:\n        if self._preprocessing_transforms is not None:\n            data = self._preprocessing_transforms(data).reset_index(drop=True)\n        return data\n\n    def __getitem__(self, index) -> OrderedDict[str, Any]:\n        item = self._fetch_item(index)\n        if self._runtime_transforms is not None:\n            item = self._runtime_transforms(item)\n        return self._format_item(item)\n"}
{"type": "source_file", "path": "cortex/data/samplers/__init__.py", "content": "from ._minority_upsampler import MinorityUpsampler\nfrom ._randomized_minority_sampler import RandomizedMinorityUpsampler\n"}
{"type": "source_file", "path": "cortex/data/dataset/_data_frame_dataset.py", "content": "import os\nfrom collections import OrderedDict\nfrom pathlib import Path\nfrom typing import Any, Optional, TypeVar, Union\n\nimport pandas as pd\nfrom pandas import DataFrame\nfrom torch.utils.data import Dataset\n\nfrom cortex.io import download_and_extract_archive\n\nT = TypeVar(\"T\")\n\n\nclass DataFrameDataset(Dataset):\n    _data: DataFrame\n    _name: str = \"temp\"\n    _target: str = \"data.csv\"\n    columns = None\n\n    def __init__(\n        self,\n        root: Union[str, Path],\n        *,\n        download: bool = False,\n        download_source: Optional[str] = None,\n        dedup: bool = True,\n        train: bool = True,\n        random_seed: int = 0xDEADBEEF,\n        **kwargs: Any,\n    ) -> None:\n        \"\"\"\n        :param root: Root directory where the dataset subdirectory exists or,\n            if :attr:`download` is ``True``, the directory where the dataset\n            subdirectory will be created and the dataset downloaded.\n        \"\"\"\n        if isinstance(root, str):\n            root = Path(root).resolve()\n        self._root = root\n\n        path = self._root / self._name\n\n        if os.path.exists(path / self._target):\n            pass\n        elif download:\n            if download_source is None:\n                raise ValueError(\"If `download` is `True`, `download_source` must be provided.\")\n            download_and_extract_archive(\n                resource=download_source,\n                source=path,\n                destination=path,\n                name=f\"{self._name}.tar.gz\",\n                remove_archive=True,\n            )\n        else:\n            raise ValueError(\n                f\"Dataset not found at {path}. \" \"If `download` is `True`, the dataset will be downloaded.\"\n            )\n        self._data = self._read_data(path, dedup=dedup, train=train, random_seed=random_seed, **kwargs)\n\n    def _read_data(self, path: str, dedup: bool, train: bool, random_seed: int, **kwargs: Any) -> DataFrame:\n        if self._target.endswith(\".csv\"):\n            data = pd.read_csv(path / self._target, **kwargs)\n        elif self._target.endswith(\".parquet\"):\n            data = pd.read_parquet(path / self._target, **kwargs)\n        else:\n            raise ValueError(f\"Unsupported file format: {self._target}\")\n\n        if self.columns is None:\n            self.columns = list(data.columns)\n\n        if dedup:\n            data.drop_duplicates(inplace=True)\n\n        # split data into train and test using random seed\n        train_indices = data.sample(frac=0.8, random_state=random_seed).index\n        test_indices = data.index.difference(train_indices)\n\n        select_indices = train_indices if train else test_indices\n        return data.loc[select_indices].reset_index(drop=True)\n\n    def __len__(self) -> int:\n        return len(self._data)\n\n    def _fetch_item(self, index) -> pd.DataFrame:\n        # check if int or slice\n        if isinstance(index, int):\n            item = self._data.iloc[index : index + 1]\n        else:\n            item = self._data.iloc[index]\n        return item\n\n    def _format_item(self, item: pd.DataFrame) -> OrderedDict[str, Any]:\n        if len(item) == 1:\n            return OrderedDict([(c, item[c].iloc[0]) for c in self.columns])\n        return OrderedDict([(c, item[c]) for c in self.columns])\n\n    def __getitem__(self, index) -> OrderedDict[str, Any]:\n        item = self._fetch_item(index)\n        return self._format_item(item)\n\n\ndef ordered_dict_collator(\n    batch: list[OrderedDict[str, Any]],\n) -> OrderedDict[str, Any]:\n    \"\"\"\n    Collates a batch of OrderedDicts into a single OrderedDict.\n    \"\"\"\n    res = OrderedDict([(key, [item[key] for item in batch]) for key in batch[0].keys()])\n    res[\"batch_size\"] = len(batch)\n    return res\n"}
{"type": "source_file", "path": "cortex/data/samplers/functional/_round_robin_longest.py", "content": "import itertools\nfrom abc import ABCMeta\nfrom typing import Iterable, List, Sized\n\n\nclass SizedIterable(Sized, Iterable, metaclass=ABCMeta):\n    pass\n\n\ndef round_robin_longest(iterables: List[SizedIterable]) -> Iterable:\n    \"\"\"Round robin of iterables until the longest have been exhausted.\n\n    Example\n    -------\n    >>> iterables = [range(5), \"ABCDE\", [\"cat\", \"dog\", \"rabbit\"]]\n    >>> iterator = round_robin_longest(iterables)\n    >>> list(iterator)\n    [0, 'A', 'cat', 1, 'B', 'dog', 2, 'C', 'rabbit', 3, 'D', 'cat', 4, 'E', 'dog']\n\n    Parameters\n    ----------\n    iterables: list[SizedIterable]\n        The iterables to roundly robin\n\n    Returns\n    -------\n    Iterable\n        The iterator stepping round robinly through.\n        Cycles through shorter iterators.\n\n    \"\"\"\n    max_len = max(len(iterable) for iterable in iterables)\n    iterator_cycle = itertools.cycle(\n        [\n            itertools.cycle(iterable) if len(iterable) < max_len else iter(iterable)\n            for iterable in iterables\n            if len(iterable)\n        ]\n    )\n    for iterator in iterator_cycle:\n        try:\n            yield next(iterator)\n        except StopIteration:\n            return\n"}
{"type": "source_file", "path": "cortex/data/dataset/_rfp_dataset.py", "content": "import pandas as pd\n\nfrom cortex.data.dataset._data_frame_dataset import DataFrameDataset\n\n_DOWNLOAD_URL = (\n    \"https://raw.githubusercontent.com/samuelstanton/lambo/main/lambo/assets/fpbase/rfp_known_structures.tar.gz\"\n)\n\n\ndef tokenize_rfp_df(data: pd.DataFrame) -> pd.DataFrame:\n    raw_seqs = data[\"foldx_seq\"]\n    tokenized_seqs = []\n    for seq in raw_seqs:\n        tokenized_seqs.append(\" \".join(seq))\n    data[\"tokenized_seq\"] = tokenized_seqs\n    return data\n\n\nclass RedFluorescentProteinDataset(DataFrameDataset):\n    _name = \"rfp\"\n    _target = \"rfp_known_structures.csv\"\n    columns = [\n        \"tokenized_seq\",\n        \"foldx_total_energy\",\n        \"SASA\",\n    ]\n\n    def __init__(self, root: str, download: bool = False, download_source: str = _DOWNLOAD_URL, **kwargs):\n        super().__init__(root=root, download=download, download_source=download_source, **kwargs)\n        self._data = tokenize_rfp_df(self._data)\n"}
{"type": "source_file", "path": "cortex/data/dataset/_tape_fluorescence.py", "content": "import json\nfrom typing import Any\n\nimport numpy as np\nimport pandas as pd\n\nfrom cortex.data.dataset._data_frame_dataset import DataFrameDataset\n\n_DOWNLOAD_URL = \"http://s3.amazonaws.com/songlabdata/proteindata/data_raw_pytorch/fluorescence.tar.gz\"\n\n\ndef tokenize_gfp_df(data: pd.DataFrame) -> pd.DataFrame:\n    raw_seqs = data[\"primary\"]\n    tokenized_seqs = []\n    for seq in raw_seqs:\n        tokenized_seqs.append(\" \".join(seq))\n    data[\"tokenized_seq\"] = tokenized_seqs\n    return data\n\n\nclass TAPEFluorescenceDataset(DataFrameDataset):\n    _name = \"tape_fluorescence\"\n    _target = \"fluorescence\"\n    columns = [\n        \"tokenized_seq\",\n        \"log_fluorescence\",\n    ]\n\n    def __init__(self, root: str, download: bool = False, download_source: str = _DOWNLOAD_URL, **kwargs):\n        super().__init__(root=root, download=download, download_source=download_source, **kwargs)\n\n    def _read_data(self, path: str, dedup: bool, train: bool, random_seed: int, **kwargs: Any) -> pd.DataFrame:\n        if train:\n            paths = [\n                path / \"fluorescence\" / \"fluorescence_train.json\",\n                path / \"fluorescence\" / \"fluorescence_valid.json\",\n            ]\n        else:\n            paths = [path / \"fluorescence\" / \"fluorescence_test.json\"]\n\n        dfs = []\n        for p in paths:\n            # with open(p, \"r\") as f:\n            data = json.loads(p.read_text())\n            dfs.append(pd.DataFrame.from_records(data))\n\n        data = pd.concat(dfs, ignore_index=True)\n\n        data.loc[:, \"log_fluorescence\"] = np.array([val[0] for val in data[\"log_fluorescence\"].values])\n        data = tokenize_gfp_df(data)\n\n        return data\n"}
{"type": "source_file", "path": "cortex/data/samplers/_randomized_minority_sampler.py", "content": "import random\n\nfrom cortex.data.samplers.functional import round_robin_longest\n\nfrom ._minority_upsampler import MinorityUpsampler\n\n\nclass RandomizedMinorityUpsampler(MinorityUpsampler):\n    \"\"\"Randomized version of Upsampler.\"\"\"\n\n    def __iter__(self):\n        index_list = [idxlist.copy() for idxlist in self.index_list]\n        random.shuffle(index_list)\n\n        for idxlist_copy in index_list:\n            random.shuffle(idxlist_copy)\n        yield from round_robin_longest(index_list)\n"}
{"type": "source_file", "path": "cortex/data/dataset/_tape_stability.py", "content": "import json\nfrom typing import Any\n\nimport numpy as np\nimport pandas as pd\n\nfrom cortex.data.dataset._data_frame_dataset import DataFrameDataset\n\n_DOWNLOAD_URL = \"http://s3.amazonaws.com/songlabdata/proteindata/data_raw_pytorch/stability.tar.gz\"\n\n\ndef tokenize_gfp_df(data: pd.DataFrame) -> pd.DataFrame:\n    raw_seqs = data[\"primary\"]\n    tokenized_seqs = []\n    for seq in raw_seqs:\n        tokenized_seqs.append(\" \".join(seq))\n    data[\"tokenized_seq\"] = tokenized_seqs\n    return data\n\n\nclass TAPEStabilityDataset(DataFrameDataset):\n    _name = \"tape_stability\"\n    _target = \"stability\"\n    columns = [\n        \"tokenized_seq\",\n        \"stability_score\",\n    ]\n\n    def __init__(self, root: str, download: bool = False, download_source: str = _DOWNLOAD_URL, **kwargs):\n        super().__init__(root=root, download=download, download_source=download_source, **kwargs)\n\n    def _read_data(self, path: str, dedup: bool, train: bool, random_seed: int, **kwargs: Any) -> pd.DataFrame:\n        if train:\n            paths = [\n                path / \"stability\" / \"stability_train.json\",\n                path / \"stability\" / \"stability_valid.json\",\n            ]\n        else:\n            paths = [path / \"stability\" / \"stability_test.json\"]\n\n        dfs = []\n        for p in paths:\n            # with open(p, \"r\") as f:\n            data = json.loads(p.read_text())\n            dfs.append(pd.DataFrame.from_records(data))\n\n        data = pd.concat(dfs, ignore_index=True)\n\n        data.loc[:, \"stability_score\"] = np.array([val[0] for val in data[\"stability_score\"].values])\n        data = tokenize_gfp_df(data)\n\n        return data\n"}
{"type": "source_file", "path": "cortex/data/dataset/__init__.py", "content": "from ._data_frame_dataset import DataFrameDataset, ordered_dict_collator\nfrom ._numpy_dataset import NumpyDataset\nfrom ._rfp_dataset import RedFluorescentProteinDataset\nfrom ._tape_fluorescence import TAPEFluorescenceDataset\nfrom ._tape_stability import TAPEStabilityDataset\nfrom ._transformed_dataset import TransformedDataset\n\n__all__ = [\n    \"DataFrameDataset\",\n    \"NumpyDataset\",\n    \"ordered_dict_collator\",\n    \"RedFluorescentProteinDataset\",\n    \"TAPEFluorescenceDataset\",\n    \"TAPEStabilityDataset\",\n    \"TransformedDataset\",\n]\n"}
{"type": "source_file", "path": "cortex/data/samplers/functional/__init__.py", "content": "from ._round_robin_longest import SizedIterable, round_robin_longest\n"}
{"type": "source_file", "path": "cortex/data/dataset/_numpy_dataset.py", "content": "import numpy as np\nimport numpy.typing as npt\nimport pandas as pd\n\nfrom cortex.data.dataset._data_frame_dataset import DataFrameDataset\n\n\nclass NumpyDataset(DataFrameDataset):\n    \"\"\"\n    Create a DataFrameDataset from a dictionary of numpy arrays stored in memory.\n    Useful if not reading data from disk.\n    \"\"\"\n\n    def __init__(\n        self,\n        data: dict[str, npt.NDArray],\n        train: bool = True,\n        random_seed: int = 0xDEADBEEF,\n    ) -> None:\n        total_len = len(data[list(data.keys())[0]])\n        if not all(len(arr) == total_len for arr in data.values()):\n            raise ValueError(\"All arrays must have the same length.\")\n\n        # randomly split the data into train and test sets\n        rng = np.random.default_rng(random_seed)\n        indices = rng.permutation(total_len)\n        split = int(total_len * 0.8)\n        if train:\n            indices = indices[:split]\n        else:\n            indices = indices[split:]\n\n        self._data = pd.DataFrame({k: v[indices] for k, v in data.items()})\n        self.columns = list(data.keys())\n"}
{"type": "source_file", "path": "cortex/data/samplers/_minority_upsampler.py", "content": "from typing import List\n\nfrom torch.utils.data import Sampler\n\nfrom cortex.data.samplers.functional import SizedIterable, round_robin_longest\n\n\nclass MinorityUpsampler(Sampler[int]):\n    \"\"\"Upsamples shorter length lists of indices by cycling through them until\n    until the longer ones are exhausted.\n    \"\"\"\n\n    def __init__(self, index_list: List[SizedIterable[int]]):\n        self.index_list = index_list\n\n    def __iter__(self):\n        yield from round_robin_longest(self.index_list)\n"}
