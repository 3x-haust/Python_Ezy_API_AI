{"repo_info": {"repo_name": "FastAPI-Reference-App", "repo_owner": "betaacid", "repo_url": "https://github.com/betaacid/FastAPI-Reference-App"}}
{"type": "test_file", "path": "tests/conftest.py", "content": "import pytest\nfrom fastapi.testclient import TestClient\nfrom app.schemas.swapi_character_schema import SwapiCharacter\nfrom main import app\nfrom database import get_db_session\nfrom app.schemas.star_wars_character_schema import (\n    StarWarsCharacterCreate,\n    StarWarsCharacterRead,\n)\nfrom mock_alchemy.mocking import UnifiedAlchemyMagicMock\n\n\n@pytest.fixture(scope=\"function\")\ndef mock_db_session():\n    mock_db = UnifiedAlchemyMagicMock()\n    return mock_db\n\n\n@pytest.fixture(scope=\"function\")\ndef client(mock_db_session):\n    def override_get_db_session():\n        yield mock_db_session\n\n    app.dependency_overrides[get_db_session] = override_get_db_session\n\n    with TestClient(app) as client:\n        yield client\n\n    app.dependency_overrides.clear()\n\n\n@pytest.fixture(scope=\"function\")\ndef mock_star_wars_character_create() -> StarWarsCharacterCreate:\n    return StarWarsCharacterCreate(\n        name=\"Leia Organa\",\n    )\n\n\n@pytest.fixture(scope=\"function\")\ndef mock_swapi_character() -> StarWarsCharacterCreate:\n    return SwapiCharacter(\n        name=\"Leia Organa\",\n        height=\"150\",\n        mass=\"49\",\n    )\n\n\n@pytest.fixture(scope=\"function\")\ndef mock_star_wars_character_read() -> StarWarsCharacterRead:\n    return StarWarsCharacterRead(\n        id=1,\n        name=\"Darth Vader\",\n        height=\"123\",\n        mass=\"136\",\n        force=100,\n    )\n\n\n@pytest.fixture\ndef mock_swapi_response():\n    return {\n        \"count\": 1,\n        \"results\": [\n            {\n                \"name\": \"Darth Vader\",\n                \"height\": \"202\",\n                \"mass\": \"136\",\n            }\n        ],\n    }\n"}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/unit_tests/utils_tests/test_characters_utils.py", "content": "import pytest\n\nfrom app.utils.characters_utils import format_star_wars_name\n\n\ndef test_format_star_wars_name_with_spaces():\n    result = format_star_wars_name(\"Darth Vader\")\n    assert result == \"Darth_Vader_from_the_starwars_universe\"\n\n\ndef test_format_star_wars_name_no_spaces():\n    result = format_star_wars_name(\"Yoda\")\n    assert result == \"Yoda_from_the_starwars_universe\"\n\n\ndef test_format_star_wars_name_multiple_spaces():\n    result = format_star_wars_name(\"Obi Wan Kenobi\")\n    assert result == \"Obi_Wan_Kenobi_from_the_starwars_universe\"\n\n\ndef test_format_star_wars_name_empty_string():\n    result = format_star_wars_name(\"\")\n    assert result == \"_from_the_starwars_universe\"\n"}
{"type": "test_file", "path": "tests/unit_tests/domain_tests/test_vehicle_calculations.py", "content": "import pytest\nfrom app.domain.vehicles.vehicle_calculations import (\n    calculate_vehicle_efficiency,\n    convert_consumables_to_days,\n)\nfrom app.schemas.swapi_vehicle_schema import SwapiVehicle\n\n\ndef test_convert_consumables_to_days():\n    assert convert_consumables_to_days(\"1 day\") == 1\n    assert convert_consumables_to_days(\"2 weeks\") == 14\n    assert convert_consumables_to_days(\"3 months\") == 90\n    assert convert_consumables_to_days(\"1 year\") == 365\n\n\ndef test_calculate_vehicle_efficiency():\n    vehicle = SwapiVehicle(\n        name=\"Test Vehicle\",\n        model=\"Test Model\",\n        manufacturer=\"Test Manufacturer\",\n        cost_in_credits=\"10000\",\n        length=\"10\",\n        max_atmosphering_speed=\"1000\",\n        crew=\"2\",\n        passengers=\"4\",\n        cargo_capacity=\"1000\",\n        consumables=\"1 month\",\n        vehicle_class=\"Test Class\",\n        pilots=[],\n    )\n    efficiency = calculate_vehicle_efficiency(vehicle)\n\n    # Calculate expected efficiency\n    cargo_capacity = 1000\n    crew = 2\n    passengers = 4\n    consumables_days = 30\n    expected_efficiency = (cargo_capacity / (crew + passengers)) / consumables_days\n\n    assert efficiency == expected_efficiency\n"}
{"type": "test_file", "path": "tests/unit_tests/client_tests/networking/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/unit_tests/utils_tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/unit_tests/client_tests/database_tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/integration_tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/unit_tests/client_tests/database_tests/test_characters_database_client.py", "content": "from app.clients.database.characters_database_client import insert_new_character\n\n\ndef test_insert_new_character(mock_db_session, mock_swapi_character):\n    # When:\n    new_character = insert_new_character(mock_db_session, mock_swapi_character)\n\n    # Then:\n    assert new_character.name == mock_swapi_character.name\n\n\ndef test_insert_new_character_session_methods_called(\n    mock_db_session, mock_swapi_character\n):\n\n    # When:\n    new_character = insert_new_character(mock_db_session, mock_swapi_character)\n\n    # Then:\n    mock_db_session.add.assert_called_once_with(new_character)\n    mock_db_session.flush.assert_called_once()\n    mock_db_session.refresh.assert_called_once_with(new_character)\n    mock_db_session.commit.assert_called_once()\n"}
{"type": "test_file", "path": "tests/unit_tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/unit_tests/client_tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/unit_tests/service_tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/unit_tests/service_tests/test_characters_service.py", "content": "from unittest.mock import patch\nimport pytest\nfrom fastapi import HTTPException\nfrom app.errors.custom_exceptions import CharacterNotFoundError\nfrom app.services.characters_service import add_new_character\nfrom app.schemas.star_wars_character_schema import StarWarsCharacterRead\nfrom requests.exceptions import RequestException\nfrom sqlalchemy.exc import SQLAlchemyError\n\n\n@patch(\"app.services.characters_service.get_character_from_swapi\")\n@patch(\"app.services.characters_service.transform_swapi_character_json_to_pydantic\")\n@patch(\"app.services.characters_service.insert_new_character\")\n@patch(\"app.services.characters_service.format_star_wars_name\")\ndef test_add_new_character_success(\n    mock_format_star_wars_name,\n    mock_insert_new_character,\n    mock_transform_swapi_character_json_to_pydantic,\n    mock_get_character_from_swapi,\n    mock_db_session,\n    mock_star_wars_character_create,\n    mock_swapi_character,\n    mock_star_wars_character_read,\n):\n    # Given\n    mock_get_character_from_swapi.return_value = {\"results\": [mock_swapi_character]}\n    mock_transform_swapi_character_json_to_pydantic.return_value = mock_swapi_character\n    mock_format_star_wars_name.return_value = \"Leia_Organa_from_the_starwars_universe\"\n    mock_insert_new_character.return_value = mock_star_wars_character_read\n\n    # When\n    result = add_new_character(mock_star_wars_character_create, mock_db_session)\n\n    # Then\n    mock_get_character_from_swapi.assert_called_once_with(\"Leia Organa\")\n    mock_transform_swapi_character_json_to_pydantic.assert_called_once_with(\n        {\"results\": [mock_swapi_character]}\n    )\n    mock_format_star_wars_name.assert_called_once_with(\"Leia Organa\")\n    mock_insert_new_character.assert_called_once_with(\n        mock_db_session, mock_swapi_character\n    )\n    assert isinstance(result, StarWarsCharacterRead)\n    assert result.name == \"Darth Vader\"\n    assert result.height == \"123\"\n"}
{"type": "test_file", "path": "tests/integration_tests/test_star_wars_characters_integration.py", "content": "from fastapi.testclient import TestClient\n\nfrom main import app\n\nclient = TestClient(app)\n\n\n# Happy path: Test successful character creation\ndef test_create_character_happy_path():\n    # Given\n    character_data = {\"name\": \"Luke Skywalker\"}\n\n    # When\n    response = client.post(\"/characters/\", json=character_data)\n\n    # Then\n    assert response.status_code == 200\n    response_data = response.json()\n    assert \"id\" in response_data\n    assert \"name\" in response_data\n    assert \"height\" in response_data\n    assert \"mass\" in response_data\n\n\n# Character not found path\ndef test_create_character_not_found():\n    # Given\n    non_existent_character_data = {\"name\": \"Unknown Character\"}\n\n    # When\n    response = client.post(\"/characters/\", json=non_existent_character_data)\n\n    # Then\n    assert response.status_code == 404\n"}
{"type": "test_file", "path": "tests/unit_tests/router_tests/test_characthers_router.py", "content": "from unittest.mock import patch\nfrom fastapi import HTTPException\n\nfrom app.errors.custom_exceptions import CharacterNotFoundError\n\n\n@patch(\"app.routers.characters_router.add_new_character\")\ndef test_create_character_valid_data(\n    mock_add_new_character, client, mock_star_wars_character_read\n):\n    # Given\n    character_input_data = {\n        \"name\": \"Darth Vader\",\n    }\n\n    # Mock the successful return value of add_new_character\n    mock_add_new_character.return_value = mock_star_wars_character_read\n\n    # When\n    response = client.post(\"/characters/\", json=character_input_data)\n\n    # Then\n    assert response.status_code == 200\n    assert response.json() == {\n        \"id\": mock_star_wars_character_read.id,\n        \"name\": mock_star_wars_character_read.name,\n        \"height\": mock_star_wars_character_read.height,\n        \"mass\": mock_star_wars_character_read.mass,\n        \"force\": mock_star_wars_character_read.force,\n    }\n\n\n@patch(\"app.routers.characters_router.add_new_character\")\ndef test_create_character_character_not_found(mock_add_new_character, client):\n    # Given\n    character_input_data = {\n        \"name\": \"Unknown Character\",\n    }\n\n    mock_add_new_character.side_effect = CharacterNotFoundError(\"Character not found\")\n\n    # When\n    response = client.post(\"/characters/\", json=character_input_data)\n\n    # Then\n    assert response.status_code == 404\n\n\n@patch(\"app.routers.characters_router.add_new_character\")\ndef test_create_character_external_service_error(mock_add_new_character, client):\n    # Given\n    character_input_data = {\n        \"name\": \"Leia Organa\",\n    }\n\n    # Mock add_new_character to raise a RequestException (simulating an external service error)\n    mock_add_new_character.side_effect = HTTPException(\n        status_code=503, detail=\"External service unavailable. Please try again later.\"\n    )\n\n    # When\n    response = client.post(\"/characters/\", json=character_input_data)\n\n    # Then\n    assert response.status_code == 503\n\n\n@patch(\"app.routers.characters_router.add_new_character\")\ndef test_create_character_internal_server_error(mock_add_new_character, client):\n    # Given\n    character_input_data = {\n        \"name\": \"Leia Organa\",\n    }\n\n    # Mock add_new_character to raise a SQLAlchemyError (simulating a database error)\n    mock_add_new_character.side_effect = HTTPException(\n        status_code=500, detail=\"Internal server error. Please try again later.\"\n    )\n\n    # When\n    response = client.post(\"/characters/\", json=character_input_data)\n\n    # Then\n    assert response.status_code == 500\n\n\ndef test_create_character_invalid_data(client):\n    # Given\n    invalid_character_data = {\n        \"name\": 2,  # Invalid type for 'name', should be a string\n    }\n\n    # When\n    response = client.post(\"/characters/\", json=invalid_character_data)\n\n    # Then\n    assert response.status_code == 422\n    assert \"detail\" in response.json()\n"}
{"type": "test_file", "path": "tests/unit_tests/client_tests/networking/test_swapi_networking_client.py", "content": "import pytest\nimport responses\nimport requests\nfrom app.clients.networking.swapi_networking_client import (\n    get_character_from_swapi,\n    transform_swapi_character_json_to_pydantic,\n)\nfrom app.schemas.swapi_character_schema import SwapiCharacter\nfrom app.errors.custom_exceptions import CharacterNotFoundError\n\nSWAPI_BASE_URL = \"https://swapi.dev/api\"\n\n\n@responses.activate\ndef test_get_character_from_swapi_success(mock_swapi_response):\n    search_url = f\"{SWAPI_BASE_URL}/people/?search=vader\"\n    responses.add(responses.GET, search_url, json=mock_swapi_response, status=200)\n\n    result = get_character_from_swapi(\"vader\")\n\n    assert \"results\" in result\n    assert len(result[\"results\"]) > 0\n\n    character = result[\"results\"][0]\n    assert character[\"name\"] == \"Darth Vader\"\n    assert character[\"height\"] == \"202\"\n    assert character[\"mass\"] == \"136\"\n\n    assert responses.calls[0].request.url == search_url\n    assert len(responses.calls) == 1\n\n\n@responses.activate\ndef test_get_character_from_swapi_not_found():\n    mock_response_data = {\"count\": 0, \"results\": []}\n\n    search_url = f\"{SWAPI_BASE_URL}/people/?search=unknowncharacter\"\n    responses.add(responses.GET, search_url, json=mock_response_data, status=200)\n\n    result = get_character_from_swapi(\"unknowncharacter\")\n\n    assert result[\"count\"] == 0\n    assert len(result[\"results\"]) == 0\n\n    assert responses.calls[0].request.url == search_url\n    assert len(responses.calls) == 1\n\n\n@responses.activate\ndef test_get_character_from_swapi_error():\n    search_url = f\"{SWAPI_BASE_URL}/people/?search=vader\"\n    responses.add(\n        responses.GET, search_url, json={\"detail\": \"Internal Server Error\"}, status=500\n    )\n\n    with pytest.raises(requests.HTTPError):\n        get_character_from_swapi(\"vader\")\n\n    assert responses.calls[0].request.url == search_url\n    assert len(responses.calls) == 1\n\n\ndef test_transform_swapi_character_json_to_pydantic_valid(mock_swapi_response):\n    # When: The SWAPI response is valid\n    result = transform_swapi_character_json_to_pydantic(mock_swapi_response)\n\n    # Then: Ensure the result is a valid SwapiCharacter model\n    assert isinstance(result, SwapiCharacter)\n    assert result.name == \"Darth Vader\"\n    assert result.height == \"202\"\n    assert result.mass == \"136\"\n\n\ndef test_transform_swapi_character_json_to_pydantic_no_results():\n    # Given: A response with no results\n    mock_empty_response = {\"count\": 0, \"results\": []}\n\n    # When / Then: Expect a CharacterNotFoundError to be raised\n    with pytest.raises(CharacterNotFoundError):\n        transform_swapi_character_json_to_pydantic(mock_empty_response)\n\n\ndef test_transform_swapi_character_json_to_pydantic_missing_fields():\n    # Given: A response with missing fields (e.g., missing 'mass')\n    mock_response_missing_fields = {\n        \"count\": 1,\n        \"results\": [\n            {\n                \"name\": \"Luke Skywalker\",\n                \"height\": \"172\",\n                # 'mass' is missing\n            }\n        ],\n    }\n\n    # When:\n    result = transform_swapi_character_json_to_pydantic(mock_response_missing_fields)\n\n    # Then:\n    assert isinstance(result, SwapiCharacter)\n    assert result.name == \"Luke Skywalker\"\n    assert result.height == \"172\"\n    assert result.mass is None\n"}
{"type": "test_file", "path": "tests/unit_tests/domain_tests/__init__.py", "content": ""}
{"type": "source_file", "path": "app/clients/database/__init__.py", "content": ""}
{"type": "source_file", "path": "app/clients/networking/__init__.py", "content": ""}
{"type": "source_file", "path": "app/errors/__init__.py", "content": ""}
{"type": "source_file", "path": "alembic/env.py", "content": "import os\nfrom sqlalchemy import create_engine, pool\nfrom logging.config import fileConfig\nfrom alembic import context\n\nfrom app.models.star_wars_character_model import StarWarsCharacter\nfrom database import Base\n\n# Import your SQLAlchemy Base (where your models are defined)\n# Alembic Config object, which provides access to the .ini file values\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n\n# Load the database URL from environment variables\ndatabase_url = os.getenv(\"DATABASE_URL\")\n\n# Override the `sqlalchemy.url` in Alembic's config with the environment variable\nconfig.set_main_option(\"sqlalchemy.url\", database_url)\n\n# Metadata of your models, which Alembic will use to generate migrations\ntarget_metadata = Base.metadata\n\n\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(url=url, target_metadata=target_metadata, literal_binds=True)\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    connectable = create_engine(\n        config.get_main_option(\"sqlalchemy.url\"), poolclass=pool.NullPool\n    )\n\n    with connectable.connect() as connection:\n        context.configure(connection=connection, target_metadata=target_metadata)\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"}
{"type": "source_file", "path": "app/models/__init__.py", "content": ""}
{"type": "source_file", "path": "alembic/versions/e7b1f1b1b1b4_create_star_wars_vehicles_table.py", "content": "\"\"\"Create star wars characters table\n\nRevision ID: e7b1f1b1b1b4\nRevises: 518820f9216c\nCreate Date: 2024-09-07 06:55:52.503072\n\n\"\"\"\n\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = \"e7b1f1b1b1b4\"\ndown_revision: Union[str, None] = \"518820f9216c\"\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"star_wars_vehicles\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"name\", sa.String(length=100), nullable=False),\n        sa.Column(\"model\", sa.String(), nullable=True),\n        sa.Column(\"manufacturer\", sa.String(), nullable=True),\n        sa.Column(\"cost_in_credits\", sa.String(), nullable=True),\n        sa.Column(\"length\", sa.String(), nullable=True),\n        sa.Column(\"max_atmosphering_speed\", sa.String(), nullable=True),\n        sa.Column(\"crew\", sa.String(), nullable=True),\n        sa.Column(\"passengers\", sa.String(), nullable=True),\n        sa.Column(\"cargo_capacity\", sa.String(), nullable=True),\n        sa.Column(\"consumables\", sa.String(), nullable=True),\n        sa.Column(\"vehicle_class\", sa.String(), nullable=True),\n        sa.Column(\"pilots\", sa.String(), nullable=True),\n        sa.Column(\"efficiency\", sa.Integer(), nullable=True),\n        sa.PrimaryKeyConstraint(\"id\"),\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"star_wars_vehicles\")\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "app/domain/vehicles/__init__.py", "content": ""}
{"type": "source_file", "path": "app/domain/__init__.py", "content": ""}
{"type": "source_file", "path": "alembic/versions/010043342e1a_adds_to_charachter_model.py", "content": "\"\"\"adds to charachter model\n\nRevision ID: 010043342e1a\nRevises: cd18fa91af11\nCreate Date: 2024-09-07 07:45:13.307922\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '010043342e1a'\ndown_revision: Union[str, None] = 'cd18fa91af11'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('star_wars_characters', sa.Column('rating', sa.Integer(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('star_wars_characters', 'rating')\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "app/routers/__init__.py", "content": ""}
{"type": "source_file", "path": "app/domain/vehicles/vehicle_calculations.py", "content": "from app.schemas.swapi_vehicle_schema import SwapiVehicle\n\n\ndef convert_consumables_to_days(consumables: str) -> int:\n    time_units = {\n        \"day\": 1,\n        \"days\": 1,\n        \"week\": 7,\n        \"weeks\": 7,\n        \"month\": 30,\n        \"months\": 30,\n        \"year\": 365,\n        \"years\": 365,\n    }\n\n    number, unit = consumables.split()\n    return int(number) * time_units[unit]\n\n\ndef calculate_vehicle_efficiency(vehicle: SwapiVehicle) -> float:\n    try:\n        cargo_capacity = float(vehicle.cargo_capacity)\n        crew = int(vehicle.crew)\n        passengers = int(vehicle.passengers)\n        consumables = vehicle.consumables\n\n        consumables_days = convert_consumables_to_days(consumables)\n\n        efficiency = (cargo_capacity / (crew + passengers)) / consumables_days\n    except (ValueError, ZeroDivisionError):\n        efficiency = 0.0\n\n    return efficiency\n"}
{"type": "source_file", "path": "app/models/star_wars_character_model.py", "content": "from sqlalchemy.orm import Mapped, mapped_column\nfrom sqlalchemy import Integer, String\nfrom database import Base\n\n\nclass StarWarsCharacter(Base):\n    __tablename__ = \"star_wars_characters\"\n\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(100), nullable=False)\n    height: Mapped[str] = mapped_column(String, nullable=True)\n    mass: Mapped[str] = mapped_column(String, nullable=True)\n    force: Mapped[int] = mapped_column(Integer, nullable=True)\n"}
{"type": "source_file", "path": "app/__init__.py", "content": ""}
{"type": "source_file", "path": "alembic/versions/518820f9216c_removes_rating.py", "content": "\"\"\"removes rating\n\nRevision ID: 518820f9216c\nRevises: 010043342e1a\nCreate Date: 2024-09-07 13:37:28.821857\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '518820f9216c'\ndown_revision: Union[str, None] = '010043342e1a'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('star_wars_characters', 'rating')\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('star_wars_characters', sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True))\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "app/errors/custom_exceptions.py", "content": "class SwapiCharacterError(Exception):\n    \"\"\"Exception raised when an error occurs while fetching or parsing a SWAPI character.\"\"\"\n\n    pass\n\n\nclass CharacterNotFoundError(SwapiCharacterError):\n    \"\"\"Exception raised when a character is not found in SWAPI.\"\"\"\n\n    pass\n\n\nclass SwapiVehicleError(Exception):\n    \"\"\"Exception raised when an error occurs while fetching or parsing a SWAPI vehicle.\"\"\"\n\n    pass\n\n\nclass VehicleNotFoundError(SwapiVehicleError):\n    \"\"\"Exception raised when a vehicle is not found in SWAPI.\"\"\"\n\n    pass\n"}
{"type": "source_file", "path": "app/clients/__init__.py", "content": ""}
{"type": "source_file", "path": "app/clients/database/characters_database_client.py", "content": "from sqlalchemy.orm import Session\nfrom app.models.star_wars_character_model import StarWarsCharacter\nfrom app.schemas.swapi_character_schema import SwapiCharacter\n\n\ndef insert_new_character(\n    db: Session, swapi_character: SwapiCharacter\n) -> StarWarsCharacter:\n    new_character = StarWarsCharacter(\n        name=swapi_character.name,\n        height=swapi_character.height,\n        mass=swapi_character.mass,\n    )\n    db.add(new_character)\n    db.flush()\n    db.refresh(new_character)\n    db.commit()\n    return new_character\n"}
{"type": "source_file", "path": "app/routers/characters_router.py", "content": "from fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\nfrom app.schemas.star_wars_character_schema import (\n    StarWarsCharacterCreate,\n    StarWarsCharacterRead,\n)\nfrom app.services.characters_service import add_new_character\nfrom database import get_db_session\n\ncharacters_router = APIRouter(prefix=\"/characters\")\n\n\n@characters_router.post(\"/\", response_model=StarWarsCharacterRead)\nasync def create_character(\n    input_character: StarWarsCharacterCreate,\n    db: Session = Depends(get_db_session),\n) -> StarWarsCharacterRead:\n    return add_new_character(input_character, db)\n"}
{"type": "source_file", "path": "app/clients/networking/swapi_networking_client.py", "content": "import requests\nfrom typing import Dict\n\nfrom app.errors.custom_exceptions import (\n    CharacterNotFoundError,\n    SwapiCharacterError,\n    SwapiVehicleError,\n    VehicleNotFoundError,\n)\nfrom app.schemas.swapi_character_schema import SwapiCharacter\nfrom app.schemas.swapi_vehicle_schema import SwapiVehicle\n\nSWAPI_BASE_URL = \"https://swapi.dev/api\"\n\n\ndef get_character_from_swapi(name: str) -> Dict:\n    url = f\"{SWAPI_BASE_URL}/people/?search={name}\"\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.json()\n\n\ndef get_vehicle_from_swapi(name: str) -> Dict:\n    url = f\"{SWAPI_BASE_URL}/vehicles/?search={name}\"\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.json()\n\n\ndef transform_swapi_character_json_to_pydantic(swapi_json: dict) -> SwapiCharacter:\n    results = swapi_json.get(\"results\", [])\n\n    if not results:\n        raise CharacterNotFoundError(\"Character not found in SWAPI response\")\n\n    try:\n        character_data = results[0]\n        return SwapiCharacter(\n            name=character_data.get(\"name\"),\n            height=character_data.get(\"height\"),\n            mass=character_data.get(\"mass\"),\n        )\n    except KeyError as e:\n        raise SwapiCharacterError(f\"Error parsing SWAPI data: {e}\")\n\n\ndef transform_swapi_vehicle_json_to_pydantic(swapi_json: dict) -> SwapiVehicle:\n    results = swapi_json.get(\"results\", [])\n\n    if not results:\n        raise VehicleNotFoundError(\"Vehicle not found in SWAPI response\")\n\n    try:\n        vehicle_data = results[0]\n        return SwapiVehicle(\n            name=vehicle_data.get(\"name\"),\n            model=vehicle_data.get(\"model\"),\n            manufacturer=vehicle_data.get(\"manufacturer\"),\n            cost_in_credits=vehicle_data.get(\"cost_in_credits\"),\n            length=vehicle_data.get(\"length\"),\n            max_atmosphering_speed=vehicle_data.get(\"max_atmosphering_speed\"),\n            crew=vehicle_data.get(\"crew\"),\n            passengers=vehicle_data.get(\"passengers\"),\n            cargo_capacity=vehicle_data.get(\"cargo_capacity\"),\n            consumables=vehicle_data.get(\"consumables\"),\n            vehicle_class=vehicle_data.get(\"vehicle_class\"),\n        )\n\n    except KeyError as e:\n        raise SwapiVehicleError(f\"Error parsing SWAPI data: {e}\")\n"}
{"type": "source_file", "path": "app/clients/database/vehicles_database_client.py", "content": "from sqlalchemy.orm import Session\nfrom app.models.star_wars_vehicle_model import StarWarsVehicle\nfrom app.schemas.swapi_vehicle_schema import SwapiVehicle\n\n\ndef insert_new_vehicle(db: Session, swapi_vehicle: SwapiVehicle) -> StarWarsVehicle:\n    new_vehicle = StarWarsVehicle(\n        name=swapi_vehicle.name,\n        model=swapi_vehicle.model,\n        manufacturer=swapi_vehicle.manufacturer,\n        cost_in_credits=swapi_vehicle.cost_in_credits,\n        length=swapi_vehicle.length,\n        max_atmosphering_speed=swapi_vehicle.max_atmosphering_speed,\n        crew=swapi_vehicle.crew,\n        passengers=swapi_vehicle.passengers,\n        cargo_capacity=swapi_vehicle.cargo_capacity,\n        consumables=swapi_vehicle.consumables,\n        vehicle_class=swapi_vehicle.vehicle_class,\n    )\n    db.add(new_vehicle)\n    db.flush()\n    db.refresh(new_vehicle)\n    db.commit()\n    return new_vehicle\n\n\ndef get_vehicle_by_id(db: Session, vehicle_id: int) -> StarWarsVehicle:\n    return db.query(StarWarsVehicle).filter(StarWarsVehicle.id == vehicle_id).first()\n"}
{"type": "source_file", "path": "app/models/star_wars_vehicle_model.py", "content": "from sqlalchemy.orm import Mapped, mapped_column\nfrom sqlalchemy import Integer, String\nfrom database import Base\n\n\nclass StarWarsVehicle(Base):\n    __tablename__ = \"star_wars_vehicles\"\n\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(100), nullable=False)\n    model: Mapped[str] = mapped_column(String, nullable=True)\n    manufacturer: Mapped[str] = mapped_column(String, nullable=True)\n    cost_in_credits: Mapped[str] = mapped_column(String, nullable=True)\n    length: Mapped[str] = mapped_column(String, nullable=True)\n    max_atmosphering_speed: Mapped[str] = mapped_column(String, nullable=True)\n    crew: Mapped[str] = mapped_column(String, nullable=True)\n    passengers: Mapped[str] = mapped_column(String, nullable=True)\n    cargo_capacity: Mapped[str] = mapped_column(String, nullable=True)\n    consumables: Mapped[str] = mapped_column(String, nullable=True)\n    vehicle_class: Mapped[str] = mapped_column(String, nullable=True)\n    pilots: Mapped[str] = mapped_column(String, nullable=True)\n    efficiency: Mapped[float] = mapped_column(Integer, nullable=True)\n"}
{"type": "source_file", "path": "app/errors/exception_handlers.py", "content": "from fastapi import Request, HTTPException\nfrom fastapi.responses import JSONResponse\n\nfrom app.errors.custom_exceptions import (\n    SwapiCharacterError,\n    CharacterNotFoundError,\n    VehicleNotFoundError,\n    SwapiVehicleError,\n)\n\n\ndef swapi_character_error_handler(\n    request: Request, exc: SwapiCharacterError\n) -> JSONResponse:\n    return JSONResponse(\n        status_code=500,\n        content={\n            \"message\": \"An error occurred while fetching or parsing a SWAPI character.\"\n        },\n    )\n\n\ndef character_not_found_error_handler(\n    request: Request, exc: CharacterNotFoundError\n) -> JSONResponse:\n    return JSONResponse(\n        status_code=404,\n        content={\"message\": \"Character not found in SWAPI.\"},\n    )\n\n\ndef swapi_vehicle_error_handler(\n    request: Request, exc: SwapiVehicleError\n) -> JSONResponse:\n    return JSONResponse(\n        status_code=500,\n        content={\n            \"message\": \"An error occurred while fetching or parsing a SWAPI vehicle.\"\n        },\n    )\n\n\ndef vehicle_not_found_error_handler(\n    request: Request, exc: VehicleNotFoundError\n) -> JSONResponse:\n    return JSONResponse(\n        status_code=404,\n        content={\"message\": \"Vehicle not found in SWAPI.\"},\n    )\n\n\ndef not_found_error_handler(request: Request, exc: HTTPException) -> JSONResponse:\n    return JSONResponse(\n        status_code=404,\n        content={\"message\": \"Not Found\"},\n    )\n\n\ndef server_error_handler(request: Request, exc: HTTPException) -> JSONResponse:\n    return JSONResponse(\n        status_code=500,\n        content={\"message\": \"Internal Server Error\"},\n    )\n\n\ndef index_out_of_range_error_handler(request: Request, exc: IndexError) -> JSONResponse:\n    return JSONResponse(\n        status_code=400,\n        content={\"message\": \"Index out of range\"},\n    )\n"}
{"type": "source_file", "path": "alembic/versions/cd18fa91af11_create_star_wars_characters_table.py", "content": "\"\"\"Create star wars characters table\n\nRevision ID: cd18fa91af11\nRevises: \nCreate Date: 2024-09-07 06:55:52.503072\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'cd18fa91af11'\ndown_revision: Union[str, None] = None\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('star_wars_characters',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(length=100), nullable=False),\n    sa.Column('height', sa.String(), nullable=True),\n    sa.Column('mass', sa.String(), nullable=True),\n    sa.Column('force', sa.Integer(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('star_wars_characters')\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "app/utils/characters_utils.py", "content": "def format_star_wars_name(name: str) -> str:\n    formatted_name = name.replace(\" \", \"_\")\n    return f\"{formatted_name}_from_the_starwars_universe\"\n"}
{"type": "source_file", "path": "app/utils/__init__.py", "content": ""}
{"type": "source_file", "path": "app/schemas/star_wars_character_schema.py", "content": "from pydantic import BaseModel, ConfigDict\nfrom typing import Optional\n\n\nclass StarWarsCharacterBase(BaseModel):\n    name: str\n\n\nclass StarWarsCharacterCreate(StarWarsCharacterBase):\n    pass\n\n\nclass StarWarsCharacterRead(StarWarsCharacterBase):\n    id: int\n    height: Optional[str] = None\n    mass: Optional[str] = None\n    force: Optional[int] = None\n\n    model_config = ConfigDict(from_attributes=True)\n"}
{"type": "source_file", "path": "app/routers/vehicles_router.py", "content": "from fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\nfrom app.schemas.star_wars_vehicle_schema import (\n    StarWarsVehicleCreate,\n    StarWarsVehicleRead,\n)\n\nfrom app.services.vehicles_service import add_new_vehicle, get_vehicle_by_id\nfrom database import get_db_session\n\nvehicles_router = APIRouter(prefix=\"/vehicles\")\n\n\n@vehicles_router.post(\"/\", response_model=StarWarsVehicleRead)\nasync def create_vehicle(\n    input_vehicle: StarWarsVehicleCreate,\n    db: Session = Depends(get_db_session),\n) -> StarWarsVehicleRead:\n    return add_new_vehicle(input_vehicle, db)\n\n\n@vehicles_router.get(\"/{vehicle_id}\", response_model=StarWarsVehicleRead)\nasync def read_vehicle(\n    vehicle_id: int,\n    db: Session = Depends(get_db_session),\n) -> StarWarsVehicleRead:\n    return get_vehicle_by_id(vehicle_id, db)\n"}
{"type": "source_file", "path": "app/services/characters_service.py", "content": "from app.clients.database.characters_database_client import insert_new_character\nfrom app.clients.networking.swapi_networking_client import (\n    get_character_from_swapi,\n    transform_swapi_character_json_to_pydantic,\n)\nfrom app.schemas.star_wars_character_schema import (\n    StarWarsCharacterCreate,\n    StarWarsCharacterRead,\n)\nfrom app.models.star_wars_character_model import StarWarsCharacter\nfrom sqlalchemy.orm import Session\n\n\nfrom app.utils.characters_utils import format_star_wars_name\n\n\ndef add_new_character(\n    input_character: StarWarsCharacterCreate,\n    db: Session,\n) -> StarWarsCharacterRead:\n    swapi_json = get_character_from_swapi(input_character.name)\n    swapi_character = transform_swapi_character_json_to_pydantic(swapi_json)\n    swapi_character.name = format_star_wars_name(swapi_character.name)\n    new_character: StarWarsCharacter = insert_new_character(db, swapi_character)\n\n    return StarWarsCharacterRead.model_validate(new_character)\n"}
{"type": "source_file", "path": "app/services/__init__.py", "content": ""}
{"type": "source_file", "path": "app/schemas/swapi_character_schema.py", "content": "from pydantic import BaseModel\nfrom typing import List, Optional\n\n\nclass SwapiCharacter(BaseModel):\n    name: str\n    height: Optional[str]\n    mass: Optional[str]\n"}
{"type": "source_file", "path": "main.py", "content": "from fastapi import FastAPI, status\nfrom app.routers.characters_router import characters_router\nfrom app.errors.exception_handlers import (\n    swapi_character_error_handler,\n    character_not_found_error_handler,\n    not_found_error_handler,\n    server_error_handler,\n    index_out_of_range_error_handler,\n)\n\nfrom app.errors.custom_exceptions import (\n    SwapiCharacterError,\n    CharacterNotFoundError,\n    VehicleNotFoundError,\n    SwapiVehicleError,\n)\n\napp = FastAPI()\n\napp.include_router(characters_router)\n\napp.add_exception_handler(SwapiCharacterError, swapi_character_error_handler)\napp.add_exception_handler(CharacterNotFoundError, character_not_found_error_handler)\napp.add_exception_handler(VehicleNotFoundError, character_not_found_error_handler)\napp.add_exception_handler(IndexError, index_out_of_range_error_handler)\napp.add_exception_handler(status.HTTP_404_NOT_FOUND, not_found_error_handler)\napp.add_exception_handler(status.HTTP_500_INTERNAL_SERVER_ERROR, server_error_handler)\n"}
{"type": "source_file", "path": "app/services/vehicles_service.py", "content": "from app.clients.database.vehicles_database_client import (\n    insert_new_vehicle,\n    get_vehicle_by_id,\n)\nfrom app.clients.networking.swapi_networking_client import (\n    get_vehicle_from_swapi,\n    transform_swapi_vehicle_json_to_pydantic,\n)\n\nfrom app.schemas.star_wars_vehicle_schema import (\n    StarWarsVehicleCreate,\n    StarWarsVehicleRead,\n)\n\nfrom app.models.star_wars_vehicle_model import StarWarsVehicle\nfrom sqlalchemy.orm import Session\n\nfrom app.domain.vehicles.vehicle_calculations import calculate_vehicle_efficiency\n\n\ndef add_new_vehicle(\n    input_vehicle: StarWarsVehicleCreate,\n    db: Session,\n) -> StarWarsVehicleRead:\n    swapi_json = get_vehicle_from_swapi(input_vehicle.name)\n    swapi_vehicle = transform_swapi_vehicle_json_to_pydantic(swapi_json)\n    swapi_vehicle.efficiency = calculate_vehicle_efficiency(swapi_vehicle)\n    new_vehicle: StarWarsVehicle = insert_new_vehicle(db, swapi_vehicle)\n\n    return StarWarsVehicleRead.model_validate(new_vehicle)\n\n\ndef get_vehicle_by_id(vehicle_id: int, db: Session) -> StarWarsVehicleRead:\n    vehicle = get_vehicle_by_id(db, vehicle_id)\n    return StarWarsVehicleRead.model_validate(vehicle)\n"}
{"type": "source_file", "path": "app/schemas/star_wars_vehicle_schema.py", "content": "from pydantic import BaseModel, ConfigDict\nfrom typing import List, Optional\n\nclass StarWarsVehicleBase(BaseModel):\n    name: str\n    model: str\n    manufacturer: str\n\nclass StarWarsVehicleCreate(StarWarsVehicleBase):\n    pass\n\nclass StarWarsVehicleRead(StarWarsVehicleBase):\n    id: int\n    cost_in_credits: str\n    length: str\n    max_atmosphering_speed: str\n    crew: str\n    passengers: str\n    cargo_capacity: str\n    consumables: str\n    vehicle_class: str\n    pilots: List[str]\n    efficiency: Optional[float] = None\n\n    model_config = ConfigDict(from_attributes=True)"}
{"type": "source_file", "path": "database.py", "content": "import os\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.orm import declarative_base, Session\n\n\nengine = create_engine(os.getenv(\"DATABASE_URL\"))\n\nSessionLocal = sessionmaker(bind=engine)\n\n\nBase = declarative_base()\n\n\ndef get_db_session():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n"}
{"type": "source_file", "path": "app/schemas/swapi_vehicle_schema.py", "content": "from pydantic import BaseModel\nfrom typing import List, Optional\n\n\nclass SwapiVehicle(BaseModel):\n    name: str\n    model: str\n    manufacturer: str\n    cost_in_credits: str\n    length: str\n    max_atmosphering_speed: str\n    crew: str\n    passengers: str\n    cargo_capacity: str\n    consumables: str\n    vehicle_class: str\n    pilots: List[str]\n    efficiency: Optional[float] = None\n"}
