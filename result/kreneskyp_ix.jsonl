{"repo_info": {"repo_name": "ix", "repo_owner": "kreneskyp", "repo_url": "https://github.com/kreneskyp/ix"}}
{"type": "test_file", "path": "ix/agents/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "ix/agents/tests/echo_command.py", "content": "def write_output(text: str) -> None:\n    \"\"\"mock target for tests.  Mock this to capture output from echo\"\"\"\n    pass\n\n\ndef echo(output: str) -> str:\n    write_output(f\"ECHO: {output}\")\n    return output\n"}
{"type": "test_file", "path": "ix/chains/tests/test_templates.py", "content": "from typing import get_type_hints\n\nimport pytest\nimport pytest_asyncio\nfrom asgiref.sync import sync_to_async\nfrom langchain.schema import BaseRetriever\nfrom pydantic import BaseModel\n\nfrom ix.chains.components.vectorstores import AsyncChromaVectorstore\nfrom ix.chains.fixture_src.vectorstores import CHROMA_CLASS_PATH\nfrom ix.chains.loaders.templates import NodeTemplate\nfrom ix.chains.models import ChainNode\nfrom ix.chains.tests.mock_configs import EMBEDDINGS\nfrom ix.task_log.tests.fake import afake_chain, fake_chain\n\n\nCHROMA_TEMPLATE = {\n    \"class_path\": CHROMA_CLASS_PATH,\n    \"config\": {\n        \"embedding_function\": EMBEDDINGS,\n        \"collection_name\": \"{COLLECTION_NAME}\",\n    },\n}\n\nNODE_TEMPLATE = CHROMA_TEMPLATE\n\n\n@pytest_asyncio.fixture\nasync def aloader_template(anode_types, aix_context) -> NodeTemplate:\n    chain = await afake_chain()\n    chain_node = await sync_to_async(ChainNode.objects.create_from_config)(\n        chain, NODE_TEMPLATE\n    )\n    assert isinstance(chain_node, ChainNode)\n    template = NodeTemplate(node=chain_node, context=aix_context)\n    return template\n\n\n@pytest.fixture()\ndef loader_template(node_types, ix_context) -> NodeTemplate:\n    chain = fake_chain()\n    chain_node = ChainNode.objects.create_from_config(chain, NODE_TEMPLATE)\n    assert isinstance(chain_node, ChainNode)\n    template = NodeTemplate(node=chain_node, context=ix_context)\n    return template\n\n\nclass Foo(BaseModel):\n    bar: str\n\n\n@pytest.mark.django_db\nclass TestNodeTemplate:\n    def test_init(self, loader_template):\n        \"\"\"Smoke tests for creating object\"\"\"\n        assert loader_template is not None\n        assert isinstance(loader_template, NodeTemplate)\n\n    async def test_ainit(self, aloader_template):\n        \"\"\"Smoke tests for creating object\"\"\"\n        assert aloader_template is not None\n        assert isinstance(aloader_template, NodeTemplate)\n\n    def test_format(self, loader_template, mock_openai_key):\n        \"\"\"Test loading the component with aformat\"\"\"\n        component = loader_template.format({\"COLLECTION_NAME\": \"test_collection\"})\n        assert isinstance(component, AsyncChromaVectorstore)\n\n        # assert property is correctly set\n        assert str(component._collection.name) == \"test_collection\"\n\n    async def test_aformat(self, aloader_template, mock_openai_key):\n        \"\"\"Test loading the component with aformat\"\"\"\n        component = await aloader_template.aformat(\n            {\"COLLECTION_NAME\": \"test_collection\"}\n        )\n        assert isinstance(component, AsyncChromaVectorstore)\n\n        # assert property is correctly set\n        assert str(component._collection.name) == \"test_collection\"\n\n    def test_get_variables(self, loader_template):\n        variables = loader_template.get_variables()\n        assert isinstance(variables, set)\n\n    def test_args_schema(self, loader_template):\n        model = loader_template.get_args_schema()\n        assert issubclass(model, BaseModel)\n        assert \"COLLECTION_NAME\" in model.__fields__\n        assert model.model_json_schema() == {\n            \"title\": \"NodeTemplateSchema\",\n            \"type\": \"object\",\n            \"properties\": {\"COLLECTION_NAME\": {\"title\": \"Collection Name\"}},\n            \"required\": [\"COLLECTION_NAME\"],\n        }\n        assert model(COLLECTION_NAME=\"test_collection\").model_dump() == {\n            \"COLLECTION_NAME\": \"test_collection\"\n        }\n\n    def test_type_hint(self):\n        def function_with_type_hint(arg: NodeTemplate[BaseRetriever]) -> None:\n            pass\n\n        type_hints = get_type_hints(function_with_type_hint)\n        assert \"arg\" in type_hints\n        assert type_hints[\"arg\"].__origin__ == NodeTemplate\n        assert type_hints[\"arg\"].__args__[0] == BaseRetriever\n"}
{"type": "test_file", "path": "ix/commands/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "ix/data/tests/fake.py", "content": "from asgiref.sync import sync_to_async\nfrom pydantic import BaseModel\n\nfrom ix.data.models import Schema\n\n\nclass FakeSchema(BaseModel):\n    foo: int = 1\n    bar: str = \"baz\"\n\n\ndef fake_schema(**kwargs) -> Schema:\n    options = {\n        \"name\": kwargs.get(\"name\", \"Test Schema\"),\n        \"type\": kwargs.get(\"type\", \"json\"),\n        \"description\": kwargs.get(\"description\", \"A test schema\"),\n        \"value\": kwargs.get(\"value\", FakeSchema.model_json_schema()),\n        \"meta\": kwargs.get(\"meta\", {}),\n    }\n    return Schema.objects.create(**options)\n\n\nasync def afake_schema(**kwargs) -> Schema:\n    return await sync_to_async(fake_schema)(**kwargs)\n"}
{"type": "test_file", "path": "ix/commands/tests/test_filesystem.py", "content": "import aiofiles\nimport pytest\n\nfrom ix.commands.filesystem import (\n    write_to_file,\n    append_to_file,\n    delete_file,\n    read_file,\n    find_files,\n    awrite_to_file,\n)\n\n\nclass TestWriteToFile:\n    def test_write_to_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        content = \"Hello, world!\"\n        write_to_file(str(file_path), content)\n        assert file_path.exists()\n        with open(file_path, \"r\") as f:\n            assert f.read() == content\n\n    def test_write_to_existing_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        content1 = \"Hello, world!\"\n        content2 = \"Goodbye, world!\"\n        write_to_file(str(file_path), content1)\n        write_to_file(str(file_path), content2)\n        with open(file_path, \"r\") as f:\n            assert f.read() == content2\n\n    def test_write_to_new_workdir(self, mocker, tmp_path):\n        \"\"\"Test that workdir is created if it does not exist\"\"\"\n        mock_workdir = tmp_path / \"workdir\"\n        mocker.patch(\"ix.commands.filesystem.WORKDIR\", mock_workdir)\n        content = \"Hello, world!\"\n        file_path = \"test.txt\"\n        expected_path = mock_workdir / file_path\n        write_to_file(str(file_path), content)\n        assert expected_path.exists()\n        with open(expected_path, \"r\") as f:\n            assert f.read() == content\n\n\nclass TestAWriteToFile:\n    @pytest.mark.asyncio\n    async def test_write_to_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        content = \"Hello, world!\"\n        await awrite_to_file(str(file_path), content)\n        assert file_path.exists()\n        async with aiofiles.open(file_path, \"r\") as f:\n            assert await f.read() == content\n\n    @pytest.mark.asyncio\n    async def test_write_to_existing_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        content1 = \"Hello, world!\"\n        content2 = \"Goodbye, world!\"\n        await awrite_to_file(str(file_path), content1)\n        await awrite_to_file(str(file_path), content2)\n        async with aiofiles.open(file_path, \"r\") as f:\n            assert await f.read() == content2\n\n    @pytest.mark.asyncio\n    async def test_write_to_new_workdir(self, mocker, tmp_path):\n        \"\"\"Test that workdir is created if it does not exist\"\"\"\n        mock_workdir = tmp_path / \"workdir\"\n        mocker.patch(\"ix.commands.filesystem.WORKDIR\", mock_workdir)\n        content = \"Hello, world!\"\n        file_path = \"test.txt\"\n        expected_path = mock_workdir / file_path\n        await awrite_to_file(str(expected_path), content)\n        async with aiofiles.open(expected_path, \"r\") as f:\n            assert await f.read() == content\n\n\nclass TestAppendToFile:\n    def test_append_to_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        content = \"Hello, world!\"\n        append_to_file(str(file_path), content)\n        assert file_path.exists()\n        with open(file_path, \"r\") as f:\n            assert f.read() == content\n\n    def test_append_to_existing_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        content1 = \"Hello, world!\"\n        content2 = \"Goodbye, world!\"\n        with open(file_path, \"w\") as f:\n            f.write(content1)\n        append_to_file(str(file_path), content2)\n        with open(file_path, \"r\") as f:\n            assert f.read() == content1 + content2\n\n\nclass TestDeleteFile:\n    def test_delete_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        content = \"Hello, world!\"\n        with open(file_path, \"w\") as f:\n            f.write(content)\n        assert file_path.exists()\n        delete_file(str(file_path))\n        assert not file_path.exists()\n\n    def test_delete_nonexistent_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        with pytest.raises(FileNotFoundError):\n            delete_file(str(file_path))\n\n\nclass TestReadFile:\n    def test_read_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        content = \"Hello, world!\"\n        with open(file_path, \"w\") as f:\n            f.write(content)\n        assert read_file(str(file_path)) == content\n\n    def test_read_nonexistent_file(self, tmp_path):\n        file_path = tmp_path / \"test.txt\"\n        with pytest.raises(FileNotFoundError):\n            read_file(str(file_path))\n\n\nclass TestFindFiles:\n    def test_find_all_files(self, tmp_path):\n        dir_path = tmp_path / \"test_dir\"\n        dir_path.mkdir()\n        file_paths = []\n        for i in range(3):\n            file_path = dir_path / f\"file_{i}.txt\"\n            with open(file_path, \"w\") as f:\n                f.write(\"test\")\n            file_paths.append(str(file_path))\n        results = find_files(str(dir_path / \"*\"))\n        assert len(results) == 3\n        assert all(result in file_paths for result in results)\n\n    def test_find_files_with_no_matches(self, tmp_path):\n        dir_path = tmp_path / \"test_dir\"\n        dir_path.mkdir()\n        results = find_files(str(dir_path / \"*.txt\"))\n        assert len(results) == 0\n"}
{"type": "test_file", "path": "ix/data/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "ix/agents/tests/test_prompt_builder.py", "content": "import pytest\nfrom ix.agents.prompt_builder import PromptBuilder, ExceedsMaxToken\n\n\nclass TestPromptBuilder:\n    system_msg = {\"role\": \"system\", \"content\": \"this is a system message\"}\n    assistant_msg = {\"role\": \"assistant\", \"content\": \"this is an assistant message\"}\n    user_msg = {\"role\": \"user\", \"content\": \"this is a user message\"}\n\n    def test_init(self):\n        \"\"\"\n        Test that the PromptBuilder can be initialized with a max_token_limit and a model.\n        \"\"\"\n        pb = PromptBuilder(max_token_limit=20, model=\"gpt-3.5-turbo-0301\")\n        assert pb.max_token_limit == 20\n        assert pb.model == \"gpt-3.5-turbo-0301\"\n\n    def test_count_tokens_single_message(self):\n        \"\"\"\n        Test that the count_tokens method returns the correct token count for a single message.\n        \"\"\"\n        pb = PromptBuilder(max_token_limit=100)\n        token_count = pb.count_tokens([self.system_msg])\n        assert token_count > 0\n\n    def test_count_tokens_multiple_messages(self):\n        \"\"\"\n        Test that the count_tokens method returns the correct token count for multiple messages.\n        \"\"\"\n        pb = PromptBuilder(max_token_limit=100)\n        token_count = pb.count_tokens(\n            [self.system_msg, self.assistant_msg, self.user_msg]\n        )\n        assert token_count > 0\n\n    def test_add_message(self):\n        \"\"\"\n        Test that the add method correctly adds a message and updates the total token count.\n        \"\"\"\n        pb = PromptBuilder(max_token_limit=100)\n        initial_tokens = pb.total_tokens\n        token_count = pb.add(self.system_msg)\n        assert pb.total_tokens == initial_tokens + token_count\n\n    def test_add_exceeds_max_token(self):\n        \"\"\"\n        Test that the add method raises an ExceedsMaxToken exception when adding a message that exceeds the max_token_limit.\n        \"\"\"\n        pb = PromptBuilder(max_token_limit=1)\n        with pytest.raises(ExceedsMaxToken):\n            pb.add(self.system_msg)\n\n    def test_add_returns_token_count(self):\n        \"\"\"\n        Test that the add method returns the correct token count for the added message.\n        \"\"\"\n        pb = PromptBuilder(max_token_limit=100)\n        token_count = pb.add(self.system_msg)\n        assert token_count > 0\n\n    def test_add_max_local(self):\n        \"\"\"\n        Test that the add_max method adds messages up to the local max_tokens parameter.\n        \"\"\"\n        pb = PromptBuilder(max_token_limit=100)\n        pb.add_max([self.system_msg, self.assistant_msg, self.user_msg], max_tokens=5)\n        assert pb.total_tokens <= 5\n\n    def test_add_max_global(self):\n        \"\"\"\n        Test that the add_max method stops adding messages when the max_token_limit is reached.\n        \"\"\"\n        pb = PromptBuilder(max_token_limit=10)\n        pb.add_max([self.system_msg, self.assistant_msg, self.user_msg])\n        assert pb.total_tokens <= 10\n\n    def test_add_max_no_limit(self):\n        \"\"\"\n        Test that the add_max method works correctly with no max_tokens parameter.\n        \"\"\"\n        pb = PromptBuilder(max_token_limit=None)\n        pb.add_max([self.system_msg, self.assistant_msg, self.user_msg])\n        assert pb.total_tokens > 0\n"}
{"type": "test_file", "path": "ix/api/tests/test_artifacts.py", "content": "import tempfile\n\nfrom fastapi.exceptions import HTTPException\nimport pytest_asyncio\nfrom ix.server.fast_api import app\nimport pytest\nfrom uuid import uuid4\nfrom httpx import AsyncClient\n\nfrom ix.task_log.models import Artifact, Task\nfrom ix.task_log.tests.fake import afake_task, afake_artifact, afake_chat\nfrom ix.ix_users.tests.mixins import (\n    OwnerState,\n    OwnershipTestsBaseMixin,\n    OwnershipCreateTestsMixin,\n    OwnershipUpdateTestsMixin,\n    OwnershipListTestsMixin,\n    OwnershipRetrieveTestsMixin,\n)\n\n\n@pytest_asyncio.fixture\nasync def mock_file():\n    with tempfile.NamedTemporaryFile() as f:\n        f.write(b\"test content\")\n        f.seek(0)\n        yield f\n\n\n@pytest.mark.django_db\nclass TestArtifact:\n    async def test_create_artifact(self, anode_types):\n        task = await afake_task()\n        data = {\n            \"task_id\": str(task.id),\n            \"key\": \"artifact_key\",\n            \"artifact_type\": \"file\",\n            \"name\": \"New Artifact\",\n            \"description\": \"Artifact description\",\n            \"storage\": {\"file\": \"/this/is/a/mock/path\"},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/artifacts/\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"name\"] == \"New Artifact\"\n        assert result[\"key\"] == \"artifact_key\"\n        assert result[\"task_id\"] == str(task.id)\n        assert result[\"artifact_type\"] == \"file\"\n        assert result[\"description\"] == \"Artifact description\"\n        assert result[\"storage\"] == {\"file\": \"/this/is/a/mock/path\"}\n\n    async def test_get_artifact(self, anode_types):\n        task = await afake_task()\n        artifact = await afake_artifact(task=task)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/artifacts/{artifact.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"id\"] == str(artifact.id)\n        assert result[\"name\"] == artifact.name\n        assert result[\"key\"] == artifact.key\n        assert result[\"task_id\"] == str(artifact.task_id)\n        assert result[\"artifact_type\"] == artifact.artifact_type\n        assert result[\"description\"] == artifact.description\n        assert result[\"storage\"] == artifact.storage\n\n    async def test_get_artifacts(self, anode_types):\n        await Artifact.objects.all().adelete()\n        task = await afake_task()\n        artifact_1 = await afake_artifact(name=\"Artifact 1\", key=\"key_1\", task=task)\n        artifact_2 = await afake_artifact(name=\"Artifact 2\", key=\"key_2\", task=task)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/artifacts/\")\n\n        assert response.status_code == 200, response.content\n        page = response.json()\n        objects = page[\"objects\"]\n        assert len(objects) == 2\n        artifact_ids = [artifact[\"id\"] for artifact in objects]\n        assert str(artifact_1.id) in artifact_ids\n        assert str(artifact_2.id) in artifact_ids\n\n    async def test_get_artifacts_for_chat(self, anode_types):\n        chat = await afake_chat()\n        await Artifact.objects.all().adelete()\n        task = await Task.objects.aget(pk=chat.task_id)\n        task2 = await afake_task()\n        artifact_1 = await afake_artifact(name=\"Artifact 1\", key=\"key_1\", task=task)\n        artifact_2 = await afake_artifact(name=\"Artifact 2\", key=\"key_2\", task=task2)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/artifacts/\", params={\"chat_id\": str(chat.id)})\n\n        assert response.status_code == 200, response.content\n        page = response.json()\n        objects = page[\"objects\"]\n        assert len(objects) == 1\n        artifact_ids = [artifact[\"id\"] for artifact in objects]\n        assert str(artifact_1.id) in artifact_ids\n        assert str(artifact_2.id) not in artifact_ids\n\n    async def test_update_artifact(self, anode_types):\n        task = await afake_task()\n        artifact = await afake_artifact(task=task)\n\n        data = {\n            \"task_id\": str(artifact.task_id),\n            \"name\": \"Updated Artifact\",\n            \"key\": \"updated_key\",\n            \"artifact_type\": \"file\",\n            \"description\": \"Artifact description\",\n            \"storage\": {\"file\": \"/this/is/a/mock/path\"},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/artifacts/{artifact.id}\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"name\"] == \"Updated Artifact\"\n        assert result[\"key\"] == \"updated_key\"\n\n    async def test_update_agent_not_found(self, anode_types):\n        task = await afake_task()\n        non_existent_id = uuid4()\n\n        data = {\n            \"task_id\": str(task.id),\n            \"name\": \"Updated Artifact\",\n            \"key\": \"updated_key\",\n            \"artifact_type\": \"file\",\n            \"description\": \"Artifact description\",\n            \"storage\": {\"file\": \"/this/is/a/mock/path\"},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/artifacts/{non_existent_id}\", json=data)\n\n        assert response.status_code == 404, response.content\n        result = response.json()\n        assert result[\"detail\"] == \"Artifact not found\"\n\n    async def test_artifact_not_found(self):\n        non_existent_artifact_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/artifacts/{non_existent_artifact_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Artifact not found\"\n\n    async def test_download_artifact(self, mock_file, anode_types):\n        task = await afake_task()\n        artifact = await afake_artifact(task_id=task.id, storage={\"id\": mock_file.name})\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/artifacts/{artifact.id}/download\")\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"application/octet-stream\"\n        assert (\n            response.headers[\"content-disposition\"]\n            == f'attachment; filename=\"{artifact.storage[\"id\"].split(\"/\")[-1]}\"'\n        )\n        assert response.content == b\"test content\"\n\n\n@pytest.mark.django_db\n@pytest.mark.usefixtures(\"anode_types\")\nclass TestArtifactOwnership(\n    OwnershipTestsBaseMixin,\n    OwnershipCreateTestsMixin,\n    OwnershipUpdateTestsMixin,\n    OwnershipListTestsMixin,\n    OwnershipRetrieveTestsMixin,\n):\n    object_type = \"artifacts\"\n\n    async def setup_object(self, **kwargs):\n        task = await afake_task()\n        return await afake_artifact(task_id=task.id, **kwargs)\n\n    async def get_create_data(self):\n        task = await afake_task()\n        return {\n            \"task_id\": str(task.id),\n            \"name\": \"New Artifact\",\n            \"key\": \"new_key\",\n            \"artifact_type\": \"file\",\n            \"description\": \"Artifact description\",\n            \"storage\": {\"file\": \"/this/is/a/mock/path\"},\n        }\n\n    async def get_update_data(self, instance):\n        return {\n            \"task_id\": str(instance.task_id),\n            \"name\": \"Updated Artifact\",\n            \"key\": \"updated_key\",\n            \"artifact_type\": \"file\",\n            \"description\": \"Artifact description\",\n            \"storage\": {\"file\": \"/this/is/a/mock/path\"},\n        }\n\n    async def test_download_artifact_ownership_user_owns(\n        self, mock_file, owner_state: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = owner_state.owner\n        owner_state.object_owned.storage[\"id\"] = mock_file.name\n        await owner_state.object_owned.asave()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\n                f\"/artifacts/{owner_state.object_owned.id}/download\",\n            )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"application/octet-stream\"\n        assert (\n            response.headers[\"content-disposition\"]\n            == f'attachment; filename=\"{owner_state.object_owned.storage[\"id\"].split(\"/\")[-1]}\"'\n        )\n        assert response.content == b\"test content\"\n\n    async def test_download_artifact_ownership_user_does_not_own(\n        self, mock_file, owner_state: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = owner_state.non_owner\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\n                f\"/artifacts/{owner_state.object_owned.id}/download\",\n            )\n        assert response.status_code == 404\n\n    async def test_download_artifact_ownership_group_owns(\n        self, mock_file, owner_state: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = owner_state.owner\n        owner_state.object_group_owned.storage[\"id\"] = mock_file.name\n        await owner_state.object_group_owned.asave()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\n                f\"/artifacts/{owner_state.object_group_owned.id}/download\",\n            )\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"application/octet-stream\"\n        assert (\n            response.headers[\"content-disposition\"]\n            == f'attachment; filename=\"{owner_state.object_group_owned.storage[\"id\"].split(\"/\")[-1]}\"'\n        )\n        assert response.content == b\"test content\"\n\n    async def test_download_artifact_ownership_group_does_not_own(\n        self, mock_file, owner_state: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = owner_state.non_owner\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\n                f\"/artifacts/{owner_state.object_group_owned.id}/download\",\n            )\n        assert response.status_code == 404\n\n    async def test_download_artifact_ownership_unauthenticated(\n        self, mock_file, owner_state: OwnerState, arequest_user\n    ):\n        arequest_user.side_effect = HTTPException(\n            status_code=401, detail=\"Not authenticated\"\n        )\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\n                f\"/artifacts/{owner_state.object_owned.id}/download\"\n            )\n        assert response.status_code == 401\n"}
{"type": "test_file", "path": "ix/chains/tests/components/test_metaphor.py", "content": "import pytest\nfrom langchain.tools import Tool\n\nfrom ix.chains.fixture_src.tools import (\n    METAPHOR_SEARCH_CLASS_PATH,\n    METAPHOR_CONTENTS_CLASS_PATH,\n    METAPHOR_FIND_SIMILAR_CLASS_PATH,\n)\nfrom ix.chains.tests.test_config_loader import unpack_chain_flow\n\nMETAPHOR_SEARCH = {\n    \"class_path\": METAPHOR_SEARCH_CLASS_PATH,\n    \"config\": {\n        \"metaphor_api_key\": \"fake_key\",\n    },\n}\n\nMETAPHOR_CONTENTS = {\n    \"class_path\": METAPHOR_CONTENTS_CLASS_PATH,\n    \"config\": {\n        \"metaphor_api_key\": \"fake_key\",\n    },\n}\n\nMETAPHOR_SIMILAR = {\n    \"class_path\": METAPHOR_FIND_SIMILAR_CLASS_PATH,\n    \"config\": {\n        \"metaphor_api_key\": \"fake_key\",\n    },\n}\n\n\n@pytest.mark.django_db\nclass TestMetaphorTools:\n    async def test_load_search(self, aload_chain, mock_config_secrets):\n        config = await mock_config_secrets(METAPHOR_SEARCH, [\"metaphor_api_key\"])\n        flow = await aload_chain(config)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, Tool)\n        assert component.name == \"metaphor_search\"\n\n    async def test_load_contents(self, aload_chain, mock_config_secrets):\n        config = await mock_config_secrets(METAPHOR_CONTENTS, [\"metaphor_api_key\"])\n        flow = await aload_chain(config)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, Tool)\n        assert component.name == \"metaphor_get_contents\"\n\n    async def test_load_similar(self, aload_chain, mock_config_secrets):\n        config = await mock_config_secrets(METAPHOR_SIMILAR, [\"metaphor_api_key\"])\n        flow = await aload_chain(config)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, Tool)\n        assert component.name == \"metaphor_find_similar\"\n"}
{"type": "test_file", "path": "ix/chains/tests/components/test_chains.py", "content": "import pytest\nfrom langchain.chains import SequentialChain\n\nfrom ix.chains.fixture_src.openai_functions import OPENAPI_CHAIN_CLASS_PATH\nfrom ix.chains.tests.test_config_loader import OPENAI_LLM, unpack_chain_flow\n\nOPENAPI_CHAIN = {\n    \"class_path\": OPENAPI_CHAIN_CLASS_PATH,\n    \"config\": {\n        \"llm\": OPENAI_LLM,\n        \"spec\": \"https://www.klarna.com/us/shopping/public/openai/v0/api-docs/\",\n    },\n}\n\n\n@pytest.mark.django_db\nclass TestOpenAPIChain:\n    async def test_load(self, aload_chain):\n        flow = await aload_chain(OPENAPI_CHAIN)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, SequentialChain)\n"}
{"type": "test_file", "path": "ix/agents/tests/test_history.py", "content": "import pytest\n\nfrom ix.agents.history import TaskHistory\nfrom ix.agents.tests.test_process import MessageTeardown\nfrom ix.task_log.models import TaskLogMessage\nfrom ix.task_log.tests.fake import (\n    fake_task_log_msg,\n    fake_autonomous_toggle,\n    fake_command_reply,\n    fake_task_log_msg_type,\n)\n\n\n@pytest.mark.django_db\nclass TestAgentProcessHistory(MessageTeardown):\n    MSG_1 = {\"type\": \"COMMAND\", \"message\": \"THIS IS A TEST 1\"}\n    MSG_2 = {\"type\": \"COMMAND\", \"message\": \"THIS IS A TEST 2\"}\n    MSG_3 = {\"type\": \"COMMAND\", \"message\": \"THIS IS A TEST 3\"}\n    MSG_4 = {\"type\": \"COMMAND\", \"message\": \"THIS IS A TEST 4\"}\n\n    @pytest.mark.parametrize(\"content_type\", sorted(TaskHistory.EXCLUDED_MSG_TYPES))\n    def test_query_message_excludes_msgs(self, content_type, task):\n        \"\"\"Test that non-relevant messages are excluded from history\"\"\"\n        msg = fake_task_log_msg_type(content_type, task=task)\n        agent_process = TaskHistory(task_id=task.id)\n        agent_process.update_message_history()\n\n        for history_msg in agent_process.history:\n            assert history_msg != msg.as_message()\n\n    @pytest.mark.parametrize(\n        \"content_type\", [\"FEEDBACK\", \"COMMAND\", \"EXECUTED\", \"EXECUTE_ERROR\"]\n    )\n    def test_query_message_includes_types(self, content_type, task):\n        \"\"\"Test that relevant messages are included in history\"\"\"\n        msg = fake_task_log_msg_type(content_type, task=task)\n        agent_process = TaskHistory(task_id=task.id)\n        agent_process.update_message_history()\n        assert len(agent_process.history) >= 1\n        assert agent_process.history[-1] == msg.as_message()\n\n    def test_query_message_history_without_since(self, task):\n        \"\"\"Test querying all messages\"\"\"\n        msg1 = fake_task_log_msg(task=task)\n        msg2 = fake_task_log_msg(task=task)\n        agent_process = TaskHistory(task_id=task.id)\n        messages = agent_process.query_message_history()\n        assert messages.count() == 2\n        assert messages.filter(id=msg1.id).exists()\n        assert messages.filter(id=msg2.id).exists()\n\n    def test_query_message_history_with_since(self, task):\n        \"\"\"Test querying new messages\"\"\"\n        msg1 = fake_task_log_msg(task=task)\n        msg2 = fake_task_log_msg(task=task)\n        agent_process = TaskHistory(task_id=task.id)\n        messages = agent_process.query_message_history(since=msg1.created_at)\n        assert messages.count() == 1\n        assert not messages.filter(id=msg1.id).exists()\n        assert messages.filter(id=msg2.id).exists()\n\n    def test_update_message_history_no_messages(self, task):\n        \"\"\"initializing history before there are messages\"\"\"\n        agent_process = TaskHistory(task_id=task.id)\n        assert len(agent_process.history) == 0\n\n        # still no messages\n        agent_process.update_message_history()\n        assert len(agent_process.history) == 0\n\n        # first update\n        msg1 = fake_command_reply(task=task)\n        msg2 = fake_command_reply(task=task)\n        agent_process.update_message_history()\n        assert len(agent_process.history) == 2\n        assert agent_process.history[0] == msg1.as_message()\n        assert agent_process.history[1] == msg2.as_message()\n\n    def test_update_message_history_with_messages(self, task):\n        \"\"\"initialize history when there are messages\"\"\"\n        assert not TaskLogMessage.objects.all().exists()\n        msg1 = fake_task_log_msg(task=task, content=self.MSG_1).as_message()\n        msg2 = fake_task_log_msg(task=task, content=self.MSG_2).as_message()\n        agent_process = TaskHistory(task_id=task.id)\n        agent_process.update_message_history()\n        assert len(agent_process.history) == 2\n        assert agent_process.history[0] == msg1\n        assert agent_process.history[1] == msg2\n\n        # updating with no new messages\n        agent_process.update_message_history()\n        assert len(agent_process.history) == 2\n        assert agent_process.history[0] == msg1\n        assert agent_process.history[1] == msg2\n\n        # add more messages and update\n        msg3 = fake_task_log_msg(task=task, content=self.MSG_3).as_message()\n        msg4 = fake_task_log_msg(task=task, content=self.MSG_4).as_message()\n        agent_process.update_message_history()\n        assert len(agent_process.history) == 4\n        assert agent_process.history[0] == msg1\n        assert agent_process.history[1] == msg2\n        assert agent_process.history[2] == msg3\n        assert agent_process.history[3] == msg4\n\n    def test_continuous_toggle(self, task, mock_openai, command_output):\n        \"\"\"Can enable/disable autonomous mode\"\"\"\n        assert not TaskLogMessage.objects.all().exists()\n        fake_task_log_msg(task=task, content=self.MSG_1)\n        fake_task_log_msg(task=task, content=self.MSG_2)\n        agent_process = TaskHistory(task_id=task.id)\n        agent_process.update_message_history()\n        assert not agent_process.autonomous\n\n        # toggle autonomous to enabled\n        fake_autonomous_toggle(enabled=1)\n        agent_process.update_message_history()\n        assert agent_process.autonomous\n\n        # toggle autonomous to disabled\n        fake_autonomous_toggle(enabled=0)\n        agent_process.update_message_history()\n        assert not agent_process.autonomous\n\n        # toggle autonomous to enabled\n        fake_autonomous_toggle(enabled=1)\n        agent_process.update_message_history()\n        assert agent_process.autonomous\n\n        # toggle autonomous to disabled\n        fake_autonomous_toggle(enabled=0)\n        agent_process.update_message_history()\n        assert not agent_process.autonomous\n\n    def test_autonomous_toggle_latest(self, task):\n        \"\"\"only latest toggle is used\"\"\"\n        assert not TaskLogMessage.objects.all().exists()\n        fake_task_log_msg(task=task, content=self.MSG_1)\n        fake_task_log_msg(task=task, content=self.MSG_2)\n        agent_process = TaskHistory(task_id=task.id)\n        agent_process.update_message_history()\n        assert not agent_process.autonomous\n\n        # verify it uses latest with many back and forth\n        fake_autonomous_toggle(enabled=1)\n        fake_autonomous_toggle(enabled=0)\n        fake_autonomous_toggle(enabled=1)\n        fake_autonomous_toggle(enabled=1)\n        fake_autonomous_toggle(enabled=0)\n        agent_process.update_message_history()\n        assert not agent_process.autonomous\n\n        # verify it uses latest\n        fake_autonomous_toggle(enabled=0)\n        fake_autonomous_toggle(enabled=1)\n        agent_process.update_message_history()\n        assert agent_process.autonomous\n\n        # verify it uses latest\n        fake_autonomous_toggle(enabled=1)\n        fake_autonomous_toggle(enabled=0)\n        agent_process.update_message_history()\n        assert not agent_process.autonomous\n\n        # verify it uses latest with many back and forth\n        fake_autonomous_toggle(enabled=0)\n        fake_autonomous_toggle(enabled=1)\n        fake_autonomous_toggle(enabled=1)\n        fake_autonomous_toggle(enabled=0)\n        fake_autonomous_toggle(enabled=1)\n        agent_process.update_message_history()\n        assert agent_process.autonomous\n\n    def test_autonomous_toggle_interspersed(self, task, mock_openai, command_output):\n        \"\"\"Doesn't have to be the latest of all messages\"\"\"\n        assert not TaskLogMessage.objects.all().exists()\n        fake_task_log_msg(task=task, content=self.MSG_1)\n        fake_task_log_msg(task=task, content=self.MSG_2)\n        agent_process = TaskHistory(task_id=task.id)\n        agent_process.update_message_history()\n        assert not agent_process.autonomous\n\n        fake_task_log_msg(task=task, content=self.MSG_1)\n        fake_autonomous_toggle(enabled=1)\n        fake_autonomous_toggle(enabled=0)\n        fake_autonomous_toggle(enabled=1)\n        fake_task_log_msg(task=task, content=self.MSG_1)\n        agent_process.update_message_history()\n        assert agent_process.autonomous\n"}
{"type": "test_file", "path": "ix/chains/tests/components/__init__.py", "content": ""}
{"type": "test_file", "path": "ix/chains/tests/mock_runnable.py", "content": "import logging\nfrom copy import deepcopy\nfrom typing import Optional, Any\n\nfrom langchain.schema.runnable import Runnable, RunnableConfig\nfrom langchain.schema.runnable.utils import Output\nfrom pydantic.v1 import BaseModel as BaseModelV1, Field\n\nfrom ix.utils.importlib import import_class\n\nlogger = logging.getLogger(__name__)\n\n\nMOCK_RUNNABLE_CLASS_PATH = \"ix.chains.tests.mock_runnable.MockRunnable\"\nMOCK_RUNNABLE_CONFIG = {\n    \"name\": \"mock_runnable\",\n    \"description\": \"mock runnable for testing\",\n    \"class_path\": MOCK_RUNNABLE_CLASS_PATH,\n    \"type\": \"chain\",\n    \"config\": {},\n}\n\n\nclass MockRunnableInput(BaseModelV1):\n    \"\"\"Mock input for the mock runnable\"\"\"\n\n    value: str = Field(description=\"this is a mock value\", default=\"input\")\n\n\nclass MockRunnable(Runnable[MockRunnableInput, Output], BaseModelV1):\n    \"\"\"Mock runnable that returns a default value\"\"\"\n\n    name: str = \"default\"\n    value: Any = \"output\"\n    func_class_path: Optional[str] = None\n\n    def invoke(\n        self,\n        input: MockRunnableInput,\n        config: Optional[RunnableConfig] = None,\n    ) -> dict:\n        # conditionally use a custom function to process the input\n        if self.func_class_path:\n            func = import_class(self.func_class_path)\n            return func(input)\n\n        # default return value\n        if isinstance(input, dict):\n            output = deepcopy(input)\n            output[self.name] = self.value\n            return output\n\n        return {\n            \"input\": input,\n            self.name: self.value,\n        }\n"}
{"type": "test_file", "path": "ix/chains/tests/components/test_document_loaders.py", "content": "import json\n\nimport pytest\nfrom langchain_community.document_loaders import (\n    BSHTMLLoader,\n    CSVLoader,\n    JSONLoader,\n    PyPDFLoader,\n)\n\nfrom ix.chains.fixture_src.document_loaders import (\n    BEAUTIFUL_SOUP_LOADER_CLASS_PATH,\n    CSV_LOADER_CLASS_PATH,\n    PDF_LOADER_CLASS_PATH,\n    JSON_LOADER_CLASS_PATH,\n)\nfrom ix.chains.tests.test_config_loader import unpack_chain_flow\nfrom ix.runnable.documents import RunLoader\n\nTEST_HTML_FILE_PATH = \"/var/app/test_data/documents/test.html\"\nTEST_CSV_FILE_PATH = \"/var/app/test_data/documents/test.csv\"\nTEST_JSON_FILE_PATH = \"/var/app/test_data/documents/test.json\"\nTEST_PDF_FILE_PATH = \"/var/app/test_data/documents/test.pdf\"\nTEST_MARKDOWN_FILE_PATH = \"/var/app/test_data/documents/README.md\"\n\n\nBEAUTIFUL_SOUP_LOADER = {\n    \"class_path\": BEAUTIFUL_SOUP_LOADER_CLASS_PATH,\n    \"config\": {\n        \"file_path\": TEST_HTML_FILE_PATH,\n    },\n}\n\nCSV_LOADER = {\n    \"class_path\": CSV_LOADER_CLASS_PATH,\n    \"config\": {\n        \"file_path\": TEST_CSV_FILE_PATH,\n    },\n}\n\nJQ_SCHEMA = {\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\"type\": \"string\"},\n        \"age\": {\"type\": \"number\"},\n        \"email\": {\"type\": \"string\", \"format\": \"email\"},\n        \"address\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"street\": {\"type\": \"string\"},\n                \"city\": {\"type\": \"string\"},\n                \"country\": {\"type\": \"string\"},\n            },\n            \"required\": [\"street\", \"city\", \"country\"],\n        },\n        \"hobbies\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n    },\n    \"required\": [\"name\", \"age\", \"email\", \"address\", \"hobbies\"],\n}\n\n\nJSON_LOADER = {\n    \"class_path\": JSON_LOADER_CLASS_PATH,\n    \"config\": {\n        \"file_path\": TEST_JSON_FILE_PATH,\n        \"jq_schema\": json.dumps(JQ_SCHEMA),\n    },\n}\n\nPDF_LOADER = {\n    \"class_path\": PDF_LOADER_CLASS_PATH,\n    \"config\": {\n        \"file_path\": TEST_PDF_FILE_PATH,\n    },\n}\n\n\n@pytest.mark.django_db\nclass TestBeautifulSoupLoader:\n    async def test_load(self, aload_chain):\n        component = await aload_chain(BEAUTIFUL_SOUP_LOADER)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is BSHTMLLoader\n\n\n@pytest.mark.django_db\nclass TestCSVLoader:\n    async def test_load(self, aload_chain):\n        component = await aload_chain(CSV_LOADER)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is CSVLoader\n\n\n@pytest.mark.django_db\nclass TestJSONLoader:\n    async def test_load(self, aload_chain):\n        component = await aload_chain(JSON_LOADER)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is JSONLoader\n\n\n@pytest.mark.django_db\nclass TestPDFLoader:\n    async def test_load(self, aload_chain):\n        component = await aload_chain(PDF_LOADER)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is PyPDFLoader\n"}
{"type": "test_file", "path": "ix/chains/tests/components/test_llm.py", "content": "from langchain.chat_models.fireworks import ChatFireworks\nfrom langchain.llms.fireworks import Fireworks\nimport pytest\nfrom langchain_community.llms.ollama import Ollama\nfrom langchain_mistralai import ChatMistralAI\n\nfrom ix.chains.fixture_src.llm import (\n    FIREWORKS_CHAT_LLM_CLASS_PATH,\n    FIREWORKS_LLM_CLASS_PATH,\n    OLLAMA_LLM_CLASS_PATH,\n    MISTRAL_LLM_CLASS_PATH,\n)\nfrom ix.chains.tests.test_config_loader import unpack_chain_flow\n\nOLLAMA_LLM = {\n    \"class_path\": OLLAMA_LLM_CLASS_PATH,\n    \"config\": {\"model\": \"llama2\"},\n}\n\n\n@pytest.mark.django_db\nclass TestOllama:\n    async def test_aload(self, aload_chain):\n        flow = await aload_chain(OLLAMA_LLM)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, Ollama)\n\n\nFIREWORKS_LLM = {\n    \"class_path\": FIREWORKS_LLM_CLASS_PATH,\n    \"config\": {\n        \"model\": \"accounts/fireworks/models/llama-v2-7b-chat\",\n        \"fireworks_api_key\": \"mock key\",\n    },\n}\n\nFIREWORKS_CHAT_LLM = {\n    \"class_path\": FIREWORKS_CHAT_LLM_CLASS_PATH,\n    \"config\": {\n        \"model\": \"accounts/fireworks/models/llama-v2-7b-chat\",\n        \"fireworks_api_key\": \"mock key\",\n    },\n}\n\n\n@pytest.mark.django_db\nclass TestFireworks:\n    async def test_aload(self, aload_chain, mock_config_secrets):\n        config = await mock_config_secrets(FIREWORKS_LLM, [\"fireworks_api_key\"])\n        flow = await aload_chain(config)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, Fireworks)\n\n\n@pytest.mark.django_db\nclass TestFireworksChat:\n    async def test_aload(self, aload_chain, mock_config_secrets):\n        config = await mock_config_secrets(FIREWORKS_CHAT_LLM, [\"fireworks_api_key\"])\n        flow = await aload_chain(config)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, ChatFireworks)\n\n\n@pytest.mark.django_db\nclass TestMistralChat:\n    CONFIG = {\n        \"class_path\": MISTRAL_LLM_CLASS_PATH,\n        \"config\": {\n            \"model\": \"mistral-small\",\n            \"mistral_api_key\": \"mock key\",\n        },\n    }\n\n    async def test_aload(self, aload_chain, mock_config_secrets):\n        config = await mock_config_secrets(self.CONFIG, [\"mistral_api_key\"])\n        flow = await aload_chain(config)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, ChatMistralAI)\n"}
{"type": "test_file", "path": "ix/chains/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "ix/chains/tests/components/test_embeddings.py", "content": "import pytest\nfrom langchain_community.embeddings import (\n    HuggingFaceEmbeddings,\n    HuggingFaceBgeEmbeddings,\n    HuggingFaceInstructEmbeddings,\n    HuggingFaceHubEmbeddings,\n    HuggingFaceInferenceAPIEmbeddings,\n)\n\nfrom ix.chains.fixture_src.embeddings import (\n    HUGGINGFACE_EMBEDDINGS_CLASS_PATH,\n    HUGGINGFACE_INSTRUCT_EMBEDDINGS_CLASS_PATH,\n    HUGGINGFACE_BGE_EMBEDDINGS_CLASS_PATH,\n    HUGGINGFACE_INFERENCE_API_EMBEDDINGS_CLASS_PATH,\n    HUGGINGFACE_HUB_EMBEDDINGS_CLASS_PATH,\n)\n\n\n@pytest.mark.skip(reason=\"dependencies not installed by default\")\n@pytest.mark.django_db\nclass TestHugggingFaceEmbeddings:\n    \"\"\"Smoke tests for HuggingFace Embeddings.\"\"\"\n\n    async def test_huggingface_embeddings(self, aload_chain):\n        config = {\n            \"class_path\": HUGGINGFACE_EMBEDDINGS_CLASS_PATH,\n            \"config\": {},\n        }\n\n        component = await aload_chain(config)\n        assert isinstance(component, HuggingFaceEmbeddings)\n\n    async def test_huggingface_instruct_embeddings(self, aload_chain):\n        config = {\n            \"class_path\": HUGGINGFACE_INSTRUCT_EMBEDDINGS_CLASS_PATH,\n            \"config\": {},\n        }\n\n        component = await aload_chain(config)\n        assert isinstance(component, HuggingFaceInstructEmbeddings)\n\n    async def test_huggingface_bge_embeddings(self, aload_chain):\n        config = {\n            \"class_path\": HUGGINGFACE_BGE_EMBEDDINGS_CLASS_PATH,\n            \"config\": {},\n        }\n\n        component = await aload_chain(config)\n        assert isinstance(component, HuggingFaceBgeEmbeddings)\n\n    async def test_huggingface_inference_api_embeddings(\n        self, aload_chain, mock_config_secrets\n    ):\n        config = {\n            \"class_path\": HUGGINGFACE_INFERENCE_API_EMBEDDINGS_CLASS_PATH,\n            \"config\": {\n                \"api_key\": \"fake_key\",\n            },\n        }\n        config = await mock_config_secrets(config, [\"api_key\"])\n\n        component = await aload_chain(config)\n        assert isinstance(component, HuggingFaceInferenceAPIEmbeddings)\n\n    async def test_huggingface_hub_embeddings(self, aload_chain, mock_config_secrets):\n        config = {\n            \"class_path\": HUGGINGFACE_HUB_EMBEDDINGS_CLASS_PATH,\n            \"config\": {\n                \"huggingfacehub_api_token\": \"fake_token\",\n            },\n        }\n\n        config = await mock_config_secrets(config, [\"huggingfacehub_api_token\"])\n        component = await aload_chain(config)\n        assert isinstance(component, HuggingFaceHubEmbeddings)\n"}
{"type": "test_file", "path": "ix/chains/tests/mock_memory.py", "content": "from typing import Dict, Any, List\n\nfrom langchain.schema import BaseMemory\n\n\nclass MockMemory(BaseMemory):\n    \"\"\"\n    Mock memory that returns a fixed set of values\n    Used for testing only.\n    \"\"\"\n\n    memory_variable: str = \"memories\"\n    value_map: Dict[str, str] = {\"chat_history\": \"mock memory\"}\n    session_id: str = \"mock_session_id\"\n    supports_session: bool = True\n\n    @property\n    def memory_variables(self) -> List[str]:\n        return list(self.value_map.keys())\n\n    def load_memory_variables(self, inputs: Dict[str, Any]) -> Dict[str, Any]:\n        return {self.memory_variable: self.value_map}\n\n    def save_context(self, inputs: Dict[str, Any], outputs: Dict[str, str]) -> None:\n        pass\n\n    def clear(self) -> None:\n        pass\n"}
{"type": "test_file", "path": "ix/agents/tests/mock_llm.py", "content": "from typing import Any, Dict\n\nfrom langchain_community.chat_models import ChatOpenAI\n\n\nclass MockChatOpenAI(ChatOpenAI):\n    \"\"\"Mock ChatOpenAI for testing\"\"\"\n\n    return_value: Any = None\n    raise_exception: Any = None\n    acompletion_with_retry: Any = None\n    streaming: bool = False\n\n    def validate_environment(cls, values: Dict) -> Dict:\n        return {}\n\n    def set_return_value(self, return_value: Any):\n        self.return_value = return_value\n\n    def get_mock_content(self):\n        response = self.return_value or \"This is a test.\"\n        message = {\"role\": \"assistant\", \"content\": None}\n        if isinstance(response, dict):\n            message[\"function_call\"] = response\n        else:\n            message[\"content\"] = response\n\n        return {\n            \"choices\": [{\"message\": message}],\n            \"usage\": {\"prompt_tokens\": 5, \"completion_tokens\": 7, \"total_tokens\": 12},\n        }\n\n    def completion_with_retry(self, *args, **kwargs) -> Dict[str, Any]:\n        if self.raise_exception:\n            raise self.raise_exception\n        return self.get_mock_content()\n"}
{"type": "test_file", "path": "ix/api/tests/test_agents.py", "content": "from ix.ix_users.tests.mixins import OwnershipTestsMixin\nfrom ix.server.fast_api import app\nimport pytest\nfrom ix.agents.models import Agent\nfrom uuid import uuid4\nfrom httpx import AsyncClient\n\nfrom ix.task_log.tests.fake import afake_agent, afake_chain\n\n\n@pytest.mark.django_db\nclass TestAgent:\n    async def test_get_agents(self, auser, anode_types):\n        agent_1 = await afake_agent(name=\"Mock Agent 1\", alias=\"mock_agent_1\")\n        agent_2 = await afake_agent(name=\"Mock Agent 2\", alias=\"mock_agent_2\")\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/agents/\")\n\n        assert response.status_code == 200, response.content\n        page = response.json()\n\n        # Check that we got a list of agents\n        objects = page[\"objects\"]\n        assert len(objects) >= 2\n        agent_ids = [agent[\"id\"] for agent in objects]\n        assert str(agent_1.id) in agent_ids\n        assert str(agent_2.id) in agent_ids\n\n    async def test_search_agents(self, achat):\n        search_term = \"mock\"\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/agents/?search={search_term}\")\n\n        assert response.status_code == 200, response.content\n        page = response.json()\n        objects = page[\"objects\"]\n        assert len(objects) > 0\n        assert (\n            search_term in objects[0][\"name\"]\n            or search_term in objects[0][\"purpose\"]\n            or search_term in objects[0][\"alias\"]\n        )\n\n    async def test_get_agent_detail(self, anode_types):\n        agent = await afake_agent()\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/agents/{agent.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we got the correct agent detail\n        assert result[\"id\"] == str(agent.id)\n        assert result[\"name\"] == agent.name\n        assert result[\"chain_id\"] == str(agent.chain_id)\n        assert result[\"alias\"] == agent.alias\n        assert result[\"purpose\"] == agent.purpose\n        assert result[\"model\"] == agent.model\n\n    async def test_get_agent_detail_not_found(self, anode_types):\n        non_existent_agent_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/agents/{non_existent_agent_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Agent not found\"\n\n    async def test_create_agent(self):\n        chain = await afake_chain()\n        data = {\n            \"name\": \"New Agent\",\n            \"alias\": \"new_guy\",\n            \"purpose\": \"New Agent Purpose\",\n            \"model\": \"gpt-4\",\n            \"chain_id\": str(chain.id),\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/agents/\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we created the agent\n        assert result[\"name\"] == \"New Agent\"\n        assert result[\"chain_id\"] == str(chain.id)\n        assert result[\"alias\"] == \"new_guy\"\n        assert result[\"purpose\"] == \"New Agent Purpose\"\n        assert result[\"model\"] == \"gpt-4\"\n\n    async def test_update_agent(self):\n        agent = await afake_agent()\n        chain = await afake_chain()\n        data = {\n            \"name\": \"New Agent\",\n            \"alias\": \"new_guy\",\n            \"purpose\": \"New Agent Purpose\",\n            \"model\": \"gpt-4\",\n            \"chain_id\": str(chain.id),\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/agents/{agent.id}\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we updated the agent\n        # Check that we created the agent\n        assert result[\"name\"] == \"New Agent\"\n        assert result[\"chain_id\"] == str(chain.id)\n        assert result[\"alias\"] == \"new_guy\"\n        assert result[\"purpose\"] == \"New Agent Purpose\"\n        assert result[\"model\"] == \"gpt-4\"\n\n    async def test_update_agent_not_found(self):\n        agent = await afake_agent()\n        non_existent_agent_id = uuid4()\n\n        # Prepare the data for the API request\n        data = {\n            \"name\": \"New Agent\",\n            \"alias\": \"new_guy\",\n            \"purpose\": \"New Agent Purpose\",\n            \"model\": \"gpt-4\",\n            \"chain_id\": str(agent.chain_id),\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/agents/{non_existent_agent_id}\", json=data)\n\n        assert response.status_code == 404, response.content\n        result = response.json()\n        assert result[\"detail\"] == \"Agent not found\"\n\n    async def test_delete_agent(self, anode_types):\n        agent = await afake_agent()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/agents/{agent.id}\")\n\n        # Assert the result\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"id\"] == str(agent.id)\n\n        # Ensure the agent is deleted\n        assert not await Agent.objects.filter(id=agent.id).aexists()\n\n    async def test_delete_agent_not_found(self, node_types):\n        non_existent_agent_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/agents/{non_existent_agent_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Agent not found\"\n\n\n@pytest.mark.django_db\n@pytest.mark.usefixtures(\"anode_types\")\nclass TestAgentOwnership(OwnershipTestsMixin):\n    object_type = \"agents\"\n\n    async def setup_object(self, **kwargs):\n        return await afake_agent(**kwargs)\n\n    async def get_create_data(self):\n        chain = await afake_chain()\n        return {\n            \"name\": \"New Agent\",\n            \"alias\": \"new_guy\",\n            \"purpose\": \"New Agent Purpose\",\n            \"model\": \"gpt-4\",\n            \"chain_id\": str(chain.id),\n        }\n\n    async def get_update_data(self, instance):\n        return {\n            \"name\": \"New Agent\",\n            \"alias\": \"new_guy\",\n            \"purpose\": \"New Agent Purpose\",\n            \"model\": \"gpt-4\",\n            \"chain_id\": str(instance.chain_id),\n        }\n"}
{"type": "test_file", "path": "ix/chains/tests/mock_configs.py", "content": "import json\nfrom pathlib import Path\n\n\nfrom ix.chains.fixture_src.chains import CONVERSATIONAL_RETRIEVAL_CHAIN_CLASS_PATH\nfrom ix.chains.fixture_src.document_loaders import GENERIC_LOADER_CLASS_PATH\nfrom ix.chains.fixture_src.embeddings import OPENAI_EMBEDDINGS_CLASS_PATH\nfrom ix.chains.fixture_src.lcel import RUNNABLE_EACH_CLASS_PATH\nfrom ix.chains.fixture_src.parsers import LANGUAGE_PARSER_CLASS_PATH\nfrom ix.chains.fixture_src.text_splitter import RECURSIVE_CHARACTER_SPLITTER_CLASS_PATH\nfrom ix.chains.fixture_src.vectorstores import (\n    REDIS_VECTORSTORE_CLASS_PATH,\n)\n\nfrom ix.chains.fixture_src.tools import GOOGLE_SEARCH\n\nOPENAI_LLM = {\n    \"class_path\": \"langchain_community.chat_models.ChatOpenAI\",\n    \"config\": {\"verbose\": True},\n}\n\nOPENAI_FUNCTION_SCHEMA = {\n    \"class_path\": \"ix.runnable.schema.Schema\",\n    \"name\": \"openai_function\",\n    \"description\": \"Run an OpenAI function.\",\n    \"config\": {\n        \"parameters\": json.dumps(\n            {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"files\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"filename\": {\"type\": \"string\"},\n                                \"description\": {\"type\": \"string\"},\n                            },\n                            \"required\": [\"filename\", \"description\"],\n                        },\n                    },\n                },\n            },\n            indent=4,\n        ),\n    },\n}\n\nMOCK_MEMORY = {\n    \"class_path\": \"ix.chains.tests.mock_memory.MockMemory\",\n    \"config\": {\"value_map\": {\"mock_memory_input\": \"mock memory\"}},\n}\n\nMEMORY = {\n    \"class_path\": \"langchain.memory.ConversationBufferMemory\",\n    \"config\": {\n        \"input_key\": \"user_input\",\n        \"memory_key\": \"chat_history\",\n    },\n}\n\nMEMORY_WITH_BACKEND = {\n    \"class_path\": \"langchain.memory.ConversationBufferMemory\",\n    \"config\": {\n        \"input_key\": \"user_input\",\n        \"memory_key\": \"chat_history\",\n        \"chat_memory\": {\n            \"class_path\": \"langchain.memory.RedisChatMessageHistory\",\n            \"config\": {\"url\": \"redis://redis:6379/0\", \"session_scope\": \"task\"},\n        },\n    },\n}\n\nMEMORY_WITH_LLM = {\n    \"class_path\": \"langchain.memory.summary_buffer.ConversationSummaryBufferMemory\",\n    \"config\": {\n        \"input_key\": \"user_input\",\n        \"memory_key\": \"chat_summary\",\n        \"llm\": {\n            \"class_path\": \"langchain_community.chat_models.ChatOpenAI\",\n        },\n    },\n}\n\nAGENT_MEMORY = {\n    \"class_path\": \"langchain.memory.ConversationBufferMemory\",\n    \"config\": {\n        \"input_key\": \"user_input\",\n        \"memory_key\": \"chat_history\",\n        # agent requires return_messages=True\n        \"return_messages\": True,\n    },\n}\n\nMEMORY_WITH_SCOPE = {\n    \"class_path\": \"ix.memory.artifacts.ArtifactMemory\",\n    \"config\": {\n        \"memory_key\": \"chat_history\",\n        \"session_scope\": \"chat\",\n        \"session_prefix\": \"tests\",\n    },\n}\n\nCHAT_MESSAGES = [\n    {\n        \"role\": \"system\",\n        \"template\": \"You are a test bot.\",\n    },\n    {\n        \"role\": \"user\",\n        \"template\": \"{user_input}\",\n        \"input_variables\": [\"user_input\"],\n    },\n]\n\nCHAT_MESSAGES_WITH_CHAT_HISTORY = [\n    {\n        \"role\": \"system\",\n        \"template\": \"You are a test bot! HISTORY: {chat_history}\",\n        \"input_variables\": [\"chat_history\"],\n    },\n    {\n        \"role\": \"user\",\n        \"template\": \"{user_input}\",\n        \"input_variables\": [\"user_input\"],\n    },\n]\n\nPROMPT_CHAT = {\n    \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n    \"config\": {\n        \"messages\": CHAT_MESSAGES,\n    },\n}\n\nPROMPT_CHAT_0 = {\n    \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n    \"config\": {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"template\": \"You are bot 0.\",\n            }\n        ],\n    },\n}\n\nPROMPT_CHAT_1 = {\n    \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n    \"config\": {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"template\": \"You are bot 1.\",\n            }\n        ],\n    },\n}\n\nPROMPT_CHAT_2 = {\n    \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n    \"config\": {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"template\": \"You are bot 2.\",\n            }\n        ],\n    },\n}\n\nPROMPT_WITH_CHAT_HISTORY = {\n    \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n    \"config\": {\n        \"messages\": CHAT_MESSAGES_WITH_CHAT_HISTORY,\n    },\n}\n\nLLM_CHAIN = {\n    \"class_path\": \"ix.chains.llm_chain.LLMChain\",\n    \"config\": {\n        \"prompt\": PROMPT_CHAT,\n        \"llm\": {\n            \"class_path\": \"langchain_community.chat_models.ChatOpenAI\",\n        },\n    },\n}\n\nLLM_REPLY = {\n    \"class_path\": \"ix.chains.llm_chain.LLMReply\",\n    \"config\": {\n        \"prompt\": PROMPT_CHAT,\n        \"llm\": {\n            \"class_path\": \"langchain_community.chat_models.ChatOpenAI\",\n        },\n    },\n}\n\nLLM_REPLY_WITH_HISTORY = {\n    \"class_path\": \"ix.chains.llm_chain.LLMReply\",\n    \"config\": {\n        \"prompt\": PROMPT_WITH_CHAT_HISTORY,\n        \"llm\": {\n            \"class_path\": \"langchain_community.chat_models.ChatOpenAI\",\n        },\n    },\n}\n\nLLM_REPLY_WITH_HISTORY_AND_MEMORY = {\n    \"class_path\": \"ix.chains.llm_chain.LLMReply\",\n    \"config\": {\n        \"prompt\": PROMPT_WITH_CHAT_HISTORY,\n        \"memory\": MEMORY,\n        \"llm\": {\n            \"class_path\": \"langchain_community.chat_models.ChatOpenAI\",\n        },\n    },\n}\n\nGOOGLE_SEARCH_CONFIG = {\n    \"class_path\": GOOGLE_SEARCH[\"class_path\"],\n    \"name\": \"tester\",\n    \"description\": \"test\",\n    \"config\": {},\n}\n\nTEST_DATA = Path(\"/var/app/test_data\")\nTEST_DOCUMENTS = TEST_DATA / \"documents\"\n\nLANGUAGE_PARSER = {\n    \"class_path\": LANGUAGE_PARSER_CLASS_PATH,\n    \"config\": {\n        \"language\": \"python\",\n    },\n}\n\nDOCUMENT_LOADER = {\n    \"class_path\": GENERIC_LOADER_CLASS_PATH,\n    \"config\": {\n        \"parser\": LANGUAGE_PARSER,\n        \"path\": str(TEST_DOCUMENTS),\n        \"suffixes\": [\".py\"],\n    },\n}\n\nTEXT_SPLITTER = {\n    \"class_path\": RECURSIVE_CHARACTER_SPLITTER_CLASS_PATH,\n    \"config\": {\"language\": \"python\", \"document_loader\": DOCUMENT_LOADER},\n}\n\nEMBEDDINGS = {\n    \"class_path\": OPENAI_EMBEDDINGS_CLASS_PATH,\n    \"config\": {\"model\": \"text-embedding-ada-002\"},\n}\n\nREDIS_VECTORSTORE = {\n    \"class_path\": REDIS_VECTORSTORE_CLASS_PATH,\n    \"config\": {\n        \"embedding\": EMBEDDINGS,\n        \"redis_url\": \"redis://redis:6379/0\",\n        \"index_name\": \"tests\",\n    },\n}\n\nCONVERSATIONAL_RETRIEVAL_CHAIN = {\n    \"class_path\": CONVERSATIONAL_RETRIEVAL_CHAIN_CLASS_PATH,\n    \"config\": {\"llm\": OPENAI_LLM, \"retriever\": REDIS_VECTORSTORE},\n}\n\nRUNNABLE_EACH = {\"class_path\": RUNNABLE_EACH_CLASS_PATH, \"config\": {}}\n"}
{"type": "test_file", "path": "ix/chains/tests/fake.py", "content": "import uuid\nfrom typing import List, Dict, Tuple, Any\n\nfrom asgiref.sync import sync_to_async\n\nfrom ix.chains.fixture_src.lcel import (\n    RUNNABLE_MAP_CLASS_PATH,\n    RUNNABLE_BRANCH_CLASS_PATH,\n)\nfrom ix.chains.loaders.core import (\n    MapPlaceholder,\n    BranchPlaceholder,\n    find_roots,\n)\nfrom ix.chains.models import Chain, ChainNode, ChainEdge, NodeType\nfrom ix.chains.tests.mock_runnable import MOCK_RUNNABLE_CLASS_PATH\nfrom faker import Faker\n\nfake = Faker()\n\n\ndef fake_chain(**kwargs) -> Chain:\n    \"\"\"\n    Create a fake chain with a root ChainNode.\n    \"\"\"\n    chain_kwargs = dict(\n        id=uuid.uuid4(),\n        name=fake.unique.name(),\n        description=fake.text(),\n        user=kwargs.get(\"user\", None),\n        group=kwargs.get(\"group\", None),\n    )\n    chain_kwargs.update(kwargs)\n    chain = Chain.objects.create(**chain_kwargs)\n    return chain\n\n\nasync def afake_chain(**kwargs) -> Chain:\n    \"\"\"\n    Create a fake chain with a root ChainNode.\n    \"\"\"\n    return await sync_to_async(fake_chain)(**kwargs)\n\n\nMOCK_RUNNABLE = {\n    \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n    \"config\": {\n        \"value\": \"default\",\n    },\n}\n\n\ndef fake_chain_node(**kwargs) -> ChainNode:\n    \"\"\"\n    Create a fake chain node.\n    \"\"\"\n    chain = kwargs.get(\"chain\", fake_chain())\n    config = kwargs.get(\"config\", MOCK_RUNNABLE)\n    root = kwargs.get(\"root\", True)\n    return ChainNode.objects.create_from_config(\n        chain=chain,\n        root=root,\n        config=config,\n    )\n\n\nasync def afake_chain_node(**kwargs):\n    \"\"\"\n    Create a fake chain node.\n    \"\"\"\n    return await sync_to_async(fake_chain_node)(**kwargs)\n\n\ndef fake_root(**kwargs) -> ChainNode:\n    \"\"\"\n    Create a fake root chain node.\n    \"\"\"\n    config = kwargs.pop(\n        \"config\",\n        {\n            \"class_path\": \"__ROOT__\",\n            \"config\": {},\n        },\n    )\n    return fake_chain_node(root=True, config=config, **kwargs)\n\n\nasync def afake_root(**kwargs):\n    \"\"\"\n    Create a fake root chain node.\n    \"\"\"\n    return await sync_to_async(fake_root)(**kwargs)\n\n\ndef fake_root_edge(chain: Chain, root: ChainNode, target: ChainNode) -> ChainEdge:\n    return fake_chain_edge(\n        chain=chain,\n        source=root,\n        target=target,\n        source_key=\"inputs\",\n        target_key=\"in\",\n    )\n\n\nasync def afake_root_edge(**kwargs):\n    return await sync_to_async(fake_root_edge)(**kwargs)\n\n\ndef fake_runnable(name=\"default\", value=0, config=None, **kwargs):\n    \"\"\"\n    Create a fake runnable.\n    \"\"\"\n    options = dict(\n        config={\n            \"class_path\": MOCK_RUNNABLE_CLASS_PATH,\n            \"config\": dict(name=name, value=value, **(config or {})),\n        },\n    )\n    return fake_chain_node(**options, **kwargs)\n\n\ndef afake_runnable(name=\"default\", value=0, **kwargs):\n    \"\"\"\n    Create a fake runnable.\n    \"\"\"\n    return sync_to_async(fake_runnable)(name=name, value=value, **kwargs)\n\n\ndef fake_chain_edge(**kwargs):\n    if \"key\" in kwargs:\n        raise ValueError(\"key is deprecated, use target_key instead\")\n\n    chain = kwargs.get(\"chain\", fake_chain())\n\n    source_node = kwargs.get(\"source\")\n    if source_node is None:\n        source_node = fake_chain_node(chain=chain)\n\n    target_node = kwargs.get(\"target\")\n    if target_node is None:\n        target_node = fake_chain_node(chain=chain)\n\n    edge = ChainEdge.objects.create(\n        source=source_node,\n        target=target_node,\n        source_key=kwargs.get(\"source_key\", source_node.node_type.type),\n        target_key=kwargs.get(\"target_key\", \"default_key\"),\n        chain=chain,\n        input_map=kwargs.get(\"input_map\", {}),\n        relation=kwargs.get(\"relation\", \"LINK\"),\n    )\n\n    return edge\n\n\nasync def afake_chain_edge(**kwargs):\n    \"\"\"\n    Create a fake chain edge.\n    \"\"\"\n    return await sync_to_async(fake_chain_edge)(**kwargs)\n\n\ndef fake_node_sequence(\n    chain: Chain, nodes: List[ChainNode] = None, n: int = 2, root: int = True\n) -> List[ChainNode]:\n    \"\"\"Fake a sequence of ChainNode connected by edges\n\n    Note that this does not create a RunnableSequence node. Sequences are\n    represented implicitly by the edges. An explicit RunnableSequence node\n    is not needed.\n    \"\"\"\n    chain = chain or fake_chain()\n    nodes = nodes or [\n        fake_runnable(chain=chain, name=f\"sequence_{i}\", value=i, root=root and i == 0)\n        for i in range(n)\n    ]\n    first_node = nodes[0]\n\n    if isinstance(first_node, MapPlaceholder):\n        current_node = first_node.node\n    elif isinstance(first_node, BranchPlaceholder):\n        raise ValueError(\n            \"Build sequence for branch's branches instead of including branch in sequence\"\n        )\n    else:\n        current_node = first_node\n\n    for node in nodes[1:]:\n        if isinstance(node, MapPlaceholder):\n            # Create edges to the roots of every branch within the map.\n            # The nodes should already be connected correctly internally.\n            # Lastly, connect the outgoing edge to the map node itself.\n            for map_root in find_roots(node):\n                fake_chain_edge(\n                    chain=chain,\n                    source=current_node,\n                    target=map_root,\n                    source_key=\"out\",\n                    target_key=\"in\",\n                )\n            current_node = node.node\n        elif isinstance(node, BranchPlaceholder):\n            raise ValueError(\n                \"Build sequence for branch's branches instead of including branch in sequence\"\n            )\n        else:\n            fake_chain_edge(\n                chain=chain,\n                source=current_node,\n                target=node,\n                source_key=\"out\",\n                target_key=\"in\",\n            )\n            current_node = node\n    return nodes\n\n\nasync def afake_node_sequence(**kwargs) -> List[ChainNode]:\n    \"\"\"Fake a sequence of ChainNode connected by edges\"\"\"\n    return await sync_to_async(fake_node_sequence)(**kwargs)\n\n\ndef fake_node_dict(chain: Chain, keys: List[str], root=True) -> Dict[str, ChainNode]:\n    \"\"\"Fake a map of ChainNode connected by edges\"\"\"\n    chain = chain or fake_chain()\n    node_map = {}\n    for key in keys:\n        node = fake_runnable(chain=chain, name=key, root=root)\n        node_map[key] = node\n    return node_map\n\n\ndef afake_node_dict(**kwargs) -> Dict[str, ChainNode]:\n    \"\"\"Fake a map of ChainNode connected by edges\"\"\"\n    return sync_to_async(fake_node_dict)(**kwargs)\n\n\ndef fake_node_map(\n    chain: Chain,\n    input_node: ChainNode = None,\n    nodes: Dict[str, ChainNode] = None,\n    root: bool = True,\n) -> MapPlaceholder:\n    \"\"\"Add ChainEdges to match the structure of a dict of ChainNodes\"\"\"\n    node_map = nodes or fake_node_dict(chain, [\"a\", \"b\", \"c\"], root=root)\n\n    map_type = NodeType.objects.get(class_path=RUNNABLE_MAP_CLASS_PATH)\n    map_node = ChainNode.objects.create(\n        chain=chain,\n        class_path=RUNNABLE_MAP_CLASS_PATH,\n        node_type=map_type,\n        root=False,\n        config={\n            \"steps\": list(node_map.keys()),\n            \"steps_hash\": [str(uuid.uuid4()) for _ in range(len(node_map))],\n        },\n    )\n\n    for map_key, node in node_map.items():\n        if isinstance(node, MapPlaceholder):\n            first_node = node.node\n            source = node.node\n        elif isinstance(node, list):\n            first_node = node[0]\n            source = node[-1]\n        else:\n            first_node = node\n            source = node\n\n        if input_node is not None:\n            fake_chain_edge(\n                chain=chain,\n                source=input_node,\n                target=first_node,\n                source_key=\"out\",\n                target_key=\"in\",\n                relation=\"LINK\",\n            )\n\n        # calculate target from steps hash_list\n        index_of_key = map_node.config[\"steps\"].index(map_key)\n        key_hash = map_node.config[\"steps_hash\"][index_of_key]\n\n        ChainEdge.objects.create(\n            source=source,\n            target=map_node,\n            source_key=\"out\",\n            target_key=key_hash,\n            chain=chain,\n            relation=\"LINK\",\n        )\n\n    return MapPlaceholder(node=map_node, map=node_map)\n\n\nasync def afake_node_map(**kwargs) -> MapPlaceholder:\n    \"\"\"Add ChainEdges to match the structure of a dict of ChainNodes\"\"\"\n    return await sync_to_async(fake_node_map)(**kwargs)\n\n\ndef build_branches(\n    class_path: str,\n    chain: Chain = None,\n    branches: List[Tuple[str, ChainNode]] = None,\n    root: bool = True,\n    edge_type: str = \"LINK\",\n    config: Dict[str, Any] = None,\n) -> Tuple[ChainNode, List[Tuple[str, ChainNode]]]:\n    \"\"\"Generic method for all branching types\"\"\"\n    chain = chain or fake_chain()\n\n    branch_keys = [\"a\", \"b\", \"c\"] if branches is None else [key for key, _ in branches]\n    branch_uuids = [str(uuid.uuid4()) for _ in range(len(branch_keys))]\n\n    branch_type = NodeType.objects.get(class_path=class_path)\n    _config = {\n        \"branches\": branch_keys,\n        \"branches_hash\": branch_uuids,\n    }\n    _config.update(config or {})\n    branch_node = ChainNode.objects.create(\n        chain=chain,\n        class_path=class_path,\n        node_type=branch_type,\n        root=root,\n        config=_config,\n    )\n\n    branches = branches or [\n        (key, fake_runnable(chain=chain, name=key, root=False)) for key in branch_keys\n    ]\n\n    # encode branches with uuids for edges\n    encoded_branches = [\n        (branch_uuids[i], branch_node) for i, [key, branch_node] in enumerate(branches)\n    ]\n\n    for branch_uuid, branch in encoded_branches:\n        for branch_root in find_roots(branch):\n            fake_chain_edge(\n                source=branch_node,\n                target=branch_root,\n                source_key=branch_uuid,\n                target_key=\"in\",\n                relation=edge_type,\n            )\n\n    return branch_node, branches\n\n\ndef fake_node_branch(\n    chain: Chain,\n    default: ChainNode = None,\n    branches: List[Tuple[str, ChainNode]] = None,\n    root: bool = True,\n) -> BranchPlaceholder:\n    \"\"\"Fake a branch of ChainNode connected by edges\"\"\"\n    chain = chain or fake_chain()\n\n    branch_node, branches = build_branches(\n        RUNNABLE_BRANCH_CLASS_PATH,\n        chain,\n        branches=branches,\n        root=root,\n        edge_type=\"LINK\",\n    )\n    default = default or fake_runnable(chain=chain, name=\"default\", root=False)\n    for branch_root in find_roots(default):\n        fake_chain_edge(\n            source=branch_node,\n            target=branch_root,\n            source_key=\"default\",\n            target_key=\"in\",\n            relation=\"LINK\",\n        )\n\n    return BranchPlaceholder(\n        node=branch_node,\n        default=default,\n        branches=branches,\n    )\n\n\nasync def afake_node_branch(**kwargs) -> BranchPlaceholder:\n    \"\"\"Fake a branch of ChainNode connected by edges\"\"\"\n    return await sync_to_async(fake_node_branch)(**kwargs)\n"}
{"type": "test_file", "path": "ix/api/tests/test_chains.py", "content": "from uuid import uuid4\nfrom faker import Faker\nfrom pydantic import BaseModel\n\nimport pytest\nimport pytest_asyncio\nfrom httpx import AsyncClient\n\nfrom ix.agents.models import Agent\nfrom ix.api.chains.endpoints import (\n    create_chain_chat,\n    create_chain_agent,\n)\nfrom ix.chains.fixture_src.document_loaders import GENERIC_LOADER_CLASS_PATH\nfrom ix.chains.fixture_src.llm import LLAMA_CPP_LLM_CLASS_PATH, OPENAI_LLM_CLASS_PATH\nfrom ix.chat.models import Chat\nfrom ix.server.fast_api import app\nfrom ix.chains.models import ChainEdge, ChainNode, Chain, NodeType\nfrom ix.chains.tests.mock_chain import MOCK_CHAIN_CONFIG\nfrom ix.task_log.models import Task\nfrom ix.task_log.tests.fake import (\n    afake_chain_node,\n    afake_chain_edge,\n    afake_chain,\n    afake_node_type,\n    afake_agent,\n)\nfrom ix.ix_users.tests.fake import afake_user\nfrom ix.ix_users.tests.mixins import OwnershipTestsMixin\n\n\nfaker = Faker()\n\n\n@pytest_asyncio.fixture\nasync def amock_node_type(anode_types):\n    return await NodeType.objects.aget(\n        class_path=\"ix.chains.tests.mock_chain.MockChain\"\n    )\n\n\nclass MockConfig(BaseModel):\n    value: int\n\n\n@pytest.mark.django_db\n@pytest.mark.usefixtures(\"arequest_user\")\nclass TestNodeType:\n    async def test_get_node_types(self, amock_node_type):\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/node_types/\")\n\n        assert response.status_code == 200, response.content\n        page = response.json()\n\n        # Check that we got a list of node types\n        objects = page[\"objects\"]\n        assert len(objects) >= 2\n\n    async def test_search_node_types(self, anode_types):\n        search_term = \"mock\"\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/node_types/?search={search_term}\")\n\n        assert response.status_code == 200, response.content\n        page = response.json()\n        objects = page[\"objects\"]\n        assert len(objects) > 0\n        assert (\n            search_term in objects[0][\"name\"]\n            or search_term in objects[0][\"description\"]\n            or search_term in objects[0][\"type\"]\n            or search_term in objects[0][\"class_path\"]\n        )\n\n    async def test_search_node_types_types(self, anode_types):\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/node_types/?types=memory&types=llm\")\n\n        assert response.status_code == 200, response.content\n        page = response.json()\n        objects = page[\"objects\"]\n        assert len(objects) > 0\n        class_paths = [o[\"class_path\"] for o in objects]\n\n        # assert types that match are included\n        assert LLAMA_CPP_LLM_CLASS_PATH in class_paths, class_paths\n        assert OPENAI_LLM_CLASS_PATH in class_paths, class_paths\n\n        # assert that filter excluded types that don't match\n        assert GENERIC_LOADER_CLASS_PATH not in class_paths, class_paths\n\n    async def test_get_node_type_detail(self, amock_node_type):\n        # Create a node type\n        node_type = amock_node_type\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/node_types/{node_type.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we got the correct node type detail\n        assert result[\"id\"] == str(node_type.id)\n        assert result[\"name\"] == \"Mock Chain\"\n\n    async def test_get_node_type_detail_not_found(self):\n        # Use a non-existent node_type_id\n        non_existent_node_type_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/node_types/{non_existent_node_type_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Node type not found\"\n\n    async def test_create_node_type(self):\n        node_type_data = {\n            \"name\": \"New Node Type\",\n            \"description\": \"New Node Type Description\",\n            \"class_path\": \"ix.chains.tests.DoesNotNeedToExistForTest\",\n            \"type\": \"chain\",\n            \"config_schema\": MockConfig.schema(),\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/node_types/\", json=node_type_data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we created the node type\n        assert result[\"name\"] == \"New Node Type\"\n\n    async def test_update_node_type(self, amock_node_type):\n        # Create a node type to update\n        node_type = amock_node_type\n        data = {\n            \"name\": \"Updated Node Type\",\n            \"description\": \"Updated Node Type Description\",\n            \"class_path\": \"ix.chains.tests.mock_chain.MockChainUpdated\",\n            \"type\": \"llm\",\n            \"config\": {},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/node_types/{node_type.id}\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we updated the node type\n        assert result[\"id\"] == str(node_type.id)\n        assert result[\"name\"] == \"Updated Node Type\"\n        assert result[\"type\"] == \"llm\"\n        assert result[\"class_path\"] == \"ix.chains.tests.mock_chain.MockChainUpdated\"\n\n    async def test_update_node_type_not_found(self):\n        # Use a non-existent node_type_id\n        non_existent_node_type_id = uuid4()\n\n        # Prepare the data for the API request\n        data = {\n            \"name\": \"Updated Node Type\",\n            \"description\": \"Updated Node Type Description\",\n            \"class_path\": \"ix.chains.tests.mock_chain.MockChainUpdated\",\n            \"type\": \"llm\",\n            \"config\": {},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(\n                f\"/node_types/{non_existent_node_type_id}\", json=data\n            )\n\n        assert response.status_code == 404, response.content\n        result = response.json()\n        assert result[\"detail\"] == \"Node type not found\"\n\n    async def test_delete_node_type(self, amock_node_type):\n        # Create a node type to delete\n        node_type = amock_node_type\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/node_types/{node_type.id}\")\n\n        # Assert the result\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"id\"] == str(node_type.id)\n\n        # Ensure the node type is deleted\n        assert not await NodeType.objects.filter(id=node_type.id).aexists()\n\n    async def test_delete_node_type_not_found(self):\n        # Use a non-existent node_type_id\n        non_existent_node_type_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/node_types/{non_existent_node_type_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Node type not found\"\n\n\n@pytest.mark.django_db\n@pytest.mark.usefixtures(\"anode_types\", \"arequest_user\")\nclass TestNodeTypeOwnership(OwnershipTestsMixin):\n    object_type = \"node_types\"\n\n    async def setup_object(self, **kwargs):\n        node_type = await afake_node_type(**kwargs)\n        return node_type\n\n    async def get_create_data(self):\n        return {\n            \"name\": \"New Node Type\",\n            \"description\": \"New Node Type Description\",\n            \"class_path\": \"ix.chains.tests.DoesNotNeedToExistForTest\",\n            \"type\": \"chain\",\n        }\n\n    async def get_update_data(self, instance):\n        return {\n            \"name\": \"Updated Node Type\",\n            \"description\": \"Updated Node Type Description\",\n            \"class_path\": faker.pystr(),\n            \"type\": \"llm\",\n            \"config\": {},\n        }\n\n\n@pytest.mark.django_db\nclass TestChain:\n    async def test_get_chains(self, anode_types):\n        # Clear existing chains\n        await Chain.objects.all().adelete()\n\n        # Create some chains\n        chain1 = await afake_chain(name=\"Chain 1\", description=\"Chain 1 Description\")\n        chain2 = await afake_chain(name=\"Chain 2\", description=\"Chain 2 Description\")\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/chains/\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we got the correct chains back\n        objects = result[\"objects\"]\n        assert len(objects) == 2\n        chain_ids = {chain[\"id\"] for chain in objects}\n        assert str(chain1.id) in chain_ids\n        assert str(chain2.id) in chain_ids\n\n    async def test_get_chain_detail(self, anode_types):\n        # Create a chain\n        chain = await afake_chain(\n            name=\"Test Chain\", description=\"Test Chain Description\", is_agent=True\n        )\n        await create_chain_agent(chain, \"mock_test_agent\")\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chains/{chain.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we got the correct chain detail\n        assert result[\"id\"] == str(chain.id)\n        assert result[\"name\"] == \"Test Chain\"\n        assert result[\"description\"] == \"Test Chain Description\"\n        assert result[\"is_agent\"] is True\n        assert result[\"alias\"] == \"mock_test_agent\"\n\n    async def test_get_chain_detail_not_found(self):\n        # Use a non-existent chain_id\n        non_existent_chain_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chains/{non_existent_chain_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Chain not found\"\n\n    async def test_create_chain(self, anode_types):\n        await afake_user()\n        chain_data = {\n            \"name\": \"New Chain\",\n            \"description\": \"A new chain\",\n            \"alias\": \"auto_agent_test\",\n            \"is_agent\": True,\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/chains/\", json=chain_data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"name\"] == \"New Chain\"\n\n        # verify test chat was created\n        chain_id = result[\"id\"]\n        test_agent = await Agent.objects.aget(chain_id=chain_id, is_test=True)\n        assert test_agent.name == result[\"name\"]\n        assert test_agent.purpose == result[\"description\"]\n        assert test_agent.alias == \"test\"\n        assert await Task.objects.filter(agent=test_agent, chain_id=chain_id).aexists()\n        assert await Chat.objects.filter(lead=test_agent, is_test=True).aexists()\n\n        # verify agent is created\n        agent = await Agent.objects.aget(chain_id=chain_id, is_test=False)\n        assert agent.name == result[\"name\"]\n        assert agent.purpose == result[\"description\"]\n        assert agent.alias == \"auto_agent_test\"\n\n    async def test_update_chain(self, anode_types):\n        # Create a chain to update\n        chain = await afake_chain(is_agent=True)\n        await create_chain_agent(chain, alias=\"test\")\n        await create_chain_chat(chain)\n\n        data = {\n            \"name\": \"Updated Chain\",\n            \"description\": \"Updated Chain\",\n            \"is_agent\": True,\n            \"alias\": \"auto_agent_test_update\",\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chains/{chain.id}\", json=data)\n\n        # assert the result\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"name\"] == \"Updated Chain\"\n        assert result[\"description\"] == \"Updated Chain\"\n        assert result[\"is_agent\"] is True\n        assert result[\"alias\"] == \"auto_agent_test_update\"\n\n        # verify test chat agent updated\n        test_agent = await Agent.objects.aget(chain_id=chain.id, is_test=True)\n        assert test_agent.name == result[\"name\"]\n        assert test_agent.purpose == result[\"description\"]\n        assert test_agent.alias == \"test\"\n\n        # verify agent updated\n        agent = await Agent.objects.aget(chain_id=chain.id, is_test=False)\n        assert agent.name == result[\"name\"]\n        assert agent.purpose == result[\"description\"]\n        assert agent.alias == \"auto_agent_test_update\"\n\n    async def test_update_chain_create_agent(self):\n        \"\"\"Test that auto-agent is created when updated and is_agent=True\"\"\"\n        chain = await afake_chain(is_agent=False)\n        data = {\n            \"name\": \"Updated Chain\",\n            \"description\": \"Updated Chain\",\n            \"is_agent\": True,\n            \"alias\": \"auto_agent_test_update\",\n        }\n\n        # sanity check that agent doesn't exist yet\n        assert not await Agent.objects.filter(\n            chain_id=chain.id, is_test=False\n        ).aexists()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chains/{chain.id}\", json=data)\n\n        # assert the result\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"is_agent\"] is True\n        assert result[\"alias\"] == \"auto_agent_test_update\"\n\n        # verify agent created\n        agent = await Agent.objects.aget(chain_id=chain.id, is_test=False)\n        assert agent.name == result[\"name\"]\n        assert agent.purpose == result[\"description\"]\n        assert agent.alias == \"auto_agent_test_update\"\n\n    async def test_update_chain_destroy_agent(self):\n        \"\"\"Test that auto-agent is destroyed when updated and is_agent=True\"\"\"\n        chain = await afake_chain(is_agent=False)\n        agent = await create_chain_agent(chain, alias=\"auto_agent_test\")\n        data = {\n            \"name\": \"Updated Chain\",\n            \"description\": \"Updated Chain\",\n            \"is_agent\": False,\n        }\n\n        # sanity check that agent exists\n        assert await Agent.objects.filter(chain_id=chain.id, is_test=False).aexists()\n\n        # assert the update\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chains/{chain.id}\", json=data)\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"is_agent\"] is False\n        assert result[\"alias\"] is None\n\n        # verify agent is destroyed\n        assert not await Agent.objects.filter(\n            chain_id=chain.id, is_test=False\n        ).aexists()\n        assert not await Agent.objects.filter(id=agent.id).aexists()\n\n    async def test_delete_chain(self, anode_types):\n        # Create a chain to delete\n        chain = await afake_chain()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chains/{chain.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"id\"] == str(chain.id)\n        assert await Chain.objects.filter(id=chain.id).acount() == 0\n\n    async def test_update_non_existent_chain(self):\n        # Prepare data for a non-existent chain\n        non_existent_chain_id = uuid4()\n        update_data = {\n            \"name\": \"Updated Chain\",\n            \"description\": \"Updated Chain\",\n            \"config\": {},\n            \"alias\": \"update_test\",\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(\n                f\"/chains/{non_existent_chain_id}\", json=update_data\n            )\n\n        assert response.status_code == 404, response.content\n        result = response.json()\n        assert result[\"detail\"] == \"Chain not found\"\n\n    async def test_delete_non_existent_chain(self):\n        # Prepare a non-existent chain id\n        non_existent_chain_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chains/{non_existent_chain_id}\")\n\n        assert response.status_code == 404, response.content\n        result = response.json()\n        assert result[\"detail\"] == \"Chain not found\"\n\n\n@pytest.mark.django_db\n@pytest.mark.usefixtures(\"anode_types\")\nclass TestChainOwnership(OwnershipTestsMixin):\n    object_type = \"chains\"\n\n    async def setup_object(self, **kwargs):\n        chain = await afake_chain(**kwargs)\n        await afake_agent(chain=chain)\n        return chain\n\n    async def get_create_data(self):\n        return {\n            \"name\": \"New Chain\",\n            \"description\": \"A new chain\",\n            \"alias\": \"auto_agent_test\",\n            \"is_agent\": True,\n        }\n\n    async def get_update_data(self, instance):\n        return {\n            \"name\": \"Updated Chain\",\n            \"description\": \"Updated Chain\",\n            \"alias\": \"update_test\",\n        }\n\n\n@pytest.mark.django_db\nclass TestChainRoot:\n    async def test_set_chain_root_no_root_exists(self, anode_types):\n        chain = await afake_chain()\n        node = await afake_chain_node(chain=chain)\n        await ChainNode.objects.filter(chain=chain).aupdate(root=False)\n        data = {\"node_ids\": [str(node.id)]}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chains/{chain.id}/set_root\", json=data)\n\n        assert response.status_code == 200\n        result = response.json()\n        assert result[\"roots\"] == [str(node.id)]\n        assert result[\"old_roots\"] == []\n        await node.arefresh_from_db()\n        assert node.root\n\n    async def test_replace_root(self, anode_types):\n        chain = await afake_chain()\n        old_root = await afake_chain_node(chain=chain, root=True)\n        new_root = await afake_chain_node(chain=chain, root=False)\n\n        data = {\"node_ids\": [str(new_root.id)]}\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chains/{chain.id}/set_root\", json=data)\n\n        assert response.status_code == 200\n        result = response.json()\n        assert result[\"roots\"] == [str(new_root.id)]\n        assert result[\"old_roots\"] == [str(old_root.id)]\n        await old_root.arefresh_from_db()\n        await new_root.arefresh_from_db()\n        assert new_root.root\n        assert not old_root.root\n\n    async def test_add_root(self, anode_types):\n        chain = await afake_chain()\n        root1 = await afake_chain_node(chain=chain, root=True)\n        root2 = await afake_chain_node(chain=chain, root=False)\n\n        data = {\"node_ids\": [str(root1.id), str(root2.id)]}\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chains/{chain.id}/set_root\", json=data)\n\n        assert response.status_code == 200\n        result = response.json()\n        assert result[\"roots\"] == [str(root1.id), str(root2.id)]\n        assert result[\"old_roots\"] == []\n        await root1.arefresh_from_db()\n        await root2.arefresh_from_db()\n        assert root1.root\n        assert root2.root\n\n    async def test_remove_root(self, anode_types):\n        chain = await afake_chain()\n        root = await afake_chain_node(chain=chain, root=True)\n        data = {\"node_ids\": []}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chains/{chain.id}/set_root\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"roots\"] == []\n        assert result[\"old_roots\"] == [str(root.id)]\n        await root.arefresh_from_db()\n        assert not root.root\n\n    async def test_remove_one_root(self, anode_types):\n        chain = await afake_chain()\n        root1 = await afake_chain_node(chain=chain, root=True)\n        root2 = await afake_chain_node(chain=chain, root=True)\n        data = {\"node_ids\": [str(root2.id)]}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chains/{chain.id}/set_root\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"roots\"] == [str(root2.id)]\n        assert result[\"old_roots\"] == [str(root1.id)]\n        await root1.arefresh_from_db()\n        await root2.arefresh_from_db()\n        assert not root1.root\n        assert root2.root\n\n\n@pytest.mark.django_db\nclass TestNode:\n    async def test_add_first_node(self, anode_types):\n        \"\"\"\n        The first node will create the chain\n        \"\"\"\n        data = {\n            \"id\": str(uuid4()),\n            \"class_path\": \"ix.chains.llm_chain.LLMChain\",\n            \"config\": {},\n            \"name\": \"Custom Node\",\n            \"description\": \"Custom Description\",\n            \"position\": {\n                \"x\": 10,\n                \"y\": 20,\n            },\n        }\n\n        # Execute the API request\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/chains/nodes\", json=data)\n\n        # Assert the result\n        assert response.status_code == 200, response.json()\n        node_data = response.json()\n        assert node_data[\"id\"] is not None\n        assert node_data[\"name\"] == \"Custom Node\"\n        assert node_data[\"description\"] == \"Custom Description\"\n        assert node_data[\"position\"] == {\n            \"x\": 10,\n            \"y\": 20,\n        }\n\n        # assert models\n        node = await ChainNode.objects.aget(id=node_data[\"id\"])\n        assert node.chain_id is not None\n\n    async def test_update_node(self, anode_types):\n        # Create a chain node to update\n        node = await afake_chain_node()\n\n        # Prepare data for the API request\n        data = {\n            \"name\": \"Updated Node\",\n            \"description\": \"Updated Description\",\n            \"position\": {\n                \"x\": 10,\n                \"y\": 20,\n            },\n            \"config\": {\"foo\": \"bar\"},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chains/nodes/{node.id}\", json=data)\n\n        # Assert the result\n        assert response.status_code == 200, response.json()\n        node_data = response.json()\n        assert node_data[\"id\"] == str(node.id)\n        assert node_data[\"name\"] == \"Updated Node\"\n        assert node_data[\"description\"] == \"Updated Description\"\n        assert node_data[\"position\"] == {\n            \"x\": 10,\n            \"y\": 20,\n        }\n\n    async def test_update_non_existent_chain_node(self):\n        non_existent_node_id = uuid4()\n        update_data = {\n            \"name\": \"Updated Name\",\n            \"description\": \"Updated Description\",\n            \"config\": {\"foo\": \"bar\"},\n            \"position\": {\n                \"x\": 10,\n                \"y\": 20,\n            },\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(\n                f\"/chains/nodes/{non_existent_node_id}\", json=update_data\n            )\n\n        assert response.status_code == 404, response.content\n\n    async def test_delete_node(self, anode_types):\n        # Create a chain node to delete\n        node = await afake_chain_node(config=MOCK_CHAIN_CONFIG)\n        source_node = await afake_chain_node(chain=node.chain, config=MOCK_CHAIN_CONFIG)\n        target_node = await afake_chain_node(chain=node.chain, config=MOCK_CHAIN_CONFIG)\n        edge_in = await afake_chain_edge(source=source_node, target=node)\n        edge_out = await afake_chain_edge(source=node, target=target_node)\n\n        # Execute the API request\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chains/nodes/{node.id}\")\n\n        # Assert the result\n        assert response.status_code == 200\n        response_data = response.json()\n        assert response_data[\"id\"] == str(node.id)\n        assert await ChainNode.objects.filter(id=node.id).acount() == 0\n        assert await ChainEdge.objects.filter(id=edge_in.id).acount() == 0\n        assert await ChainEdge.objects.filter(id=edge_out.id).acount() == 0\n\n\n@pytest.mark.django_db\nclass TestNodePosition:\n    async def test_update_position(self, anode_types):\n        \"\"\"\n        Update just the position of a node\n        \"\"\"\n        assert not await Chain.objects.filter(name=\"Custom Node\").aexists()\n\n        node = await afake_chain_node()\n\n        # Prepare data for the API request\n        data = {\n            \"x\": 100,\n            \"y\": 200,\n        }\n\n        # Execute the API request\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chains/nodes/{node.id}/position\", json=data)\n\n        # Assert the result\n        assert response.status_code == 200, response.json()\n        node_data = response.json()\n        assert node_data[\"id\"] is not None\n        assert node_data[\"position\"] == {\n            \"x\": 100,\n            \"y\": 200,\n        }\n\n\n@pytest.mark.django_db\nclass TestChainEdge:\n    async def test_add_chain_edge(self, anode_types):\n        # Create a chain and nodes\n        chain = await afake_chain()\n        node1 = await afake_chain_node(chain=chain)\n        node2 = await afake_chain_node(chain=chain)\n        edge_id = str(uuid4())\n        node1_type = await NodeType.objects.aget(id=node1.node_type_id)\n\n        # Prepare data for the API request\n        data = {\n            \"id\": edge_id,\n            \"source_id\": str(node1.id),\n            \"target_id\": str(node2.id),\n            \"source_key\": node1_type.type,\n            \"target_key\": \"Custom Key\",\n            \"chain_id\": str(chain.id),\n            \"relation\": \"LINK\",\n            \"input_map\": {},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/chains/edges\", json=data)\n\n        # Assert the result\n        assert response.status_code == 200, response.json()\n        edge_data = response.json()\n        assert edge_data[\"id\"] == edge_id\n        assert edge_data[\"source_id\"] == str(node1.id)\n        assert edge_data[\"target_id\"] == str(node2.id)\n        assert edge_data[\"source_key\"] == node1_type.type\n        assert edge_data[\"target_key\"] == \"Custom Key\"\n        assert edge_data[\"input_map\"] == {}\n\n    async def test_update_chain_edge(self, anode_types):\n        # Create a chain edge to update\n        edge = await afake_chain_edge()\n\n        chain = await afake_chain()\n        node1 = await afake_chain_node(chain=chain)\n        node2 = await afake_chain_node(chain=chain)\n        node1_type = await NodeType.objects.aget(id=node1.node_type_id)\n\n        # Prepare data for the API request\n        data = {\n            \"source_id\": str(node1.id),\n            \"target_id\": str(node2.id),\n            \"target_key\": \"Custom Key\",\n            \"source_key\": node1_type.type,\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chains/edges/{edge.id}\", json=data)\n\n        # Assert the result\n        assert response.status_code == 200, response.json()\n        edge_data = response.json()\n        assert edge_data[\"id\"] == str(edge.id)\n        assert edge_data[\"source_id\"] == str(node1.id)\n        assert edge_data[\"target_id\"] == str(node2.id)\n        assert edge_data[\"source_key\"] == node1_type.type\n        assert edge_data[\"target_key\"] == \"Custom Key\"\n\n    async def test_delete_chain_edge(self, anode_types):\n        # Create a chain edge to delete\n        edge = await afake_chain_edge()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chains/edges/{edge.id}\")\n\n        # Assert the result\n        assert response.status_code == 200\n        response_data = response.json()\n        assert response_data[\"id\"] == str(edge.id)\n        assert await ChainEdge.objects.filter(id=edge.id).acount() == 0\n\n    async def test_update_non_existent_chain_edge(self, anode_types):\n        chain = await afake_chain()\n        node1 = await afake_chain_node(chain=chain)\n        node2 = await afake_chain_node(chain=chain)\n        edge_id = str(uuid4())\n        node1_type = await NodeType.objects.aget(id=node1.node_type_id)\n\n        non_existent_edge_id = uuid4()\n        data = {\n            \"id\": edge_id,\n            \"source_id\": str(node1.id),\n            \"target_id\": str(node2.id),\n            \"source_key\": node1_type.type,\n            \"target_key\": \"Custom Key\",\n            \"chain_id\": str(chain.id),\n            \"relation\": \"LINK\",\n            \"input_map\": {},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chains/edges/{non_existent_edge_id}\", json=data)\n\n        assert response.status_code == 404, response.content\n\n\n@pytest.mark.django_db\nclass TestChainGraph:\n    async def test_add_chain_edge(self, anode_types):\n        chain = await afake_chain(is_agent=True)\n        await create_chain_agent(chain=chain, alias=\"tester\")\n        node1 = await afake_chain_node(chain=chain)\n        node2 = await afake_chain_node(chain=chain)\n        await afake_chain_edge(source=node1, target=node2)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chains/{chain.id}/graph\")\n\n        assert response.status_code == 200, response.content\n        data = response.json()\n        assert data[\"chain\"][\"id\"] == str(chain.id)\n        assert data[\"chain\"][\"is_agent\"] == chain.is_agent\n        assert data[\"chain\"][\"alias\"] == \"tester\"\n        node_ids = {node[\"id\"] for node in data[\"nodes\"]}\n        assert node_ids == {str(node.id) async for node in chain.nodes.all()}\n        edge_ids = {edge[\"id\"] for edge in data[\"edges\"]}\n        assert edge_ids == {str(edge.id) async for edge in chain.edges.all()}\n"}
{"type": "test_file", "path": "ix/chains/tests/agents/test_knowledge.py", "content": "import pytest\nfrom langchain_core.messages import AIMessage\n\nfrom ix.chains.loaders.core import ainit_chain_flow\nfrom ix.chains.models import Chain\nfrom ix.conftest import aload_fixture\n\n\n@pytest.mark.openai_api\n@pytest.mark.django_db\nclass TestKnowledge:\n    \"\"\"\n    Tests for Knowledge agent.\n    \"\"\"\n\n    async def test_knowledge_flow(self, anode_types, aix_context):\n        \"\"\"test loading the knowledge agent\"\"\"\n\n        await aload_fixture(\"agent/knowledge\")\n        chain = await Chain.objects.aget(agent__alias=\"knowledge\")\n\n        # init flow\n        runnable = await ainit_chain_flow(chain, context=aix_context)\n\n        output = await runnable.ainvoke(input={\"user_input\": \"test\"})\n        assert isinstance(output, AIMessage)\n"}
{"type": "test_file", "path": "ix/chains/tests/test_callbacks.py", "content": "import pytest\nfrom django.db.models.signals import post_save\n\nfrom ix.agents.models import Agent\nfrom ix.chains.callbacks import IxHandler\nfrom ix.chains.models import Chain\nfrom ix.chains.tests.test_config_loader import unpack_chain_flow\nfrom ix.schema.subscriptions import ChatMessageTokenSubscription\nfrom ix.task_log.models import Task, TaskLogMessage\n\nCHAIN_WITH_LLM = {\n    \"name\": \"test chain\",\n    \"class_path\": \"ix.chains.llm_chain.LLMChain\",\n    \"config\": {\n        \"llm\": {\n            \"class_path\": \"langchain_community.chat_models.ChatOpenAI\",\n            \"config\": {\"streaming\": True},\n        },\n        \"prompt\": {\n            \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n            \"config\": {\n                \"messages\": [\n                    {\n                        \"role\": \"system\",\n                        \"template\": \"Write a sea shanty for user input: {user_input}.\",\n                        \"input_variables\": [\"user_input\"],\n                    },\n                ],\n            },\n        },\n    },\n}\n\n\n@pytest.mark.django_db\nclass TestIxHandler:\n    async def test_stream(self, achat, aload_chain, mock_openai_streaming, mocker):\n        await TaskLogMessage.objects.all().adelete()\n        spy_broadcast = mocker.spy(ChatMessageTokenSubscription, \"broadcast\")\n        saves = []\n\n        def save_handler(sender, instance, created, **kwargs):\n            if instance.content[\"type\"] == \"ASSISTANT\":\n                saves.append(\n                    {\n                        \"text\": instance.content[\"text\"],\n                        \"stream\": instance.content[\"stream\"],\n                    }\n                )\n\n        post_save.connect(save_handler, sender=TaskLogMessage)\n\n        chat = achat[\"chat\"]\n        task = await Task.objects.aget(id=chat.task_id)\n        chain = await Chain.objects.aget(id=task.chain_id)\n        agent = await Agent.objects.aget(id=task.agent_id)\n\n        handler = IxHandler(agent=agent, chain=chain, task=task)\n        flow = await aload_chain(CHAIN_WITH_LLM)\n        langchain_chain = unpack_chain_flow(flow)\n        langchain_chain.llm.streaming = True\n        assert langchain_chain.llm.streaming is True\n\n        result = await langchain_chain.acall(\n            inputs=dict(user_input=\"testing\"), callbacks=[handler]\n        )\n        msg = await TaskLogMessage.objects.aget(\n            task_id=task.id, content__type=\"ASSISTANT\"\n        )\n        assert result == {\"user_input\": \"testing\", \"text\": \"mock llm response\"}\n\n        # verify that placeholder was saved and then updated on completion\n        assert len(saves) == 2\n        assert saves[0][\"stream\"] is True\n        assert saves[0][\"text\"] == \"\"\n        assert saves[1][\"stream\"] is False\n        assert saves[1][\"text\"] == \"mock llm response\"\n\n        # verify django-channel publish calls\n        for call in spy_broadcast.call_args_list:\n            assert call.kwargs[\"group\"] == f\"stream_task_id_{task.id}\"\n        calls = spy_broadcast.call_args_list\n        assert len(calls) == 5\n        assert calls[0].kwargs[\"payload\"] == {\n            \"msg_id\": str(msg.id),\n            \"index\": 1,\n            \"text\": \"mock\",\n        }\n        assert calls[1].kwargs[\"payload\"] == {\n            \"msg_id\": str(msg.id),\n            \"index\": 2,\n            \"text\": \" \",\n        }\n        assert calls[2].kwargs[\"payload\"] == {\n            \"msg_id\": str(msg.id),\n            \"index\": 3,\n            \"text\": \"llm\",\n        }\n        assert calls[3].kwargs[\"payload\"] == {\n            \"msg_id\": str(msg.id),\n            \"index\": 4,\n            \"text\": \" \",\n        }\n        assert calls[4].kwargs[\"payload\"] == {\n            \"msg_id\": str(msg.id),\n            \"index\": 5,\n            \"text\": \"response\",\n        }\n"}
{"type": "test_file", "path": "ix/agents/tests/test_process.py", "content": "import pytest\nimport json\nfrom asgiref.sync import sync_to_async\n\nfrom ix.agents.process import AgentProcess\nfrom ix.conftest import USER_INPUT\nfrom ix.task_log.models import TaskLogMessage\nfrom ix.task_log.tests.fake import (\n    fake_command_reply,\n    fake_autonomous_toggle,\n    fake_task,\n)\n\nNEXT_COMMAND = {\"user_input\": \"NEXT COMMAND\"}\n\n\nclass MockTicker:\n    \"\"\"Mock tick method used for testing autonomous mode without risking infinite loops\"\"\"\n\n    def __init__(self, agent_process, task, return_value=None):\n        # limit runs to less than loop n\n        self.remaining = 3\n        self.task = task\n        self.agent_process = agent_process\n        self.executes = []\n        self.return_value = return_value\n\n    def __call__(self, user_input: str = \"Next Command\", execute: bool = False):\n        self.executes.append(execute)\n        self.remaining -= 1\n        # use toggle to stop autonomous mode\n        if not self.remaining:\n            fake_autonomous_toggle(task=self.task, enabled=0)\n\n        # simulate return code, will be False when autonomous mode\n        # is disabled and agent returns with AUTH_REQUEST\n        if self.return_value is not None:\n            return self.return_value\n        return self.remaining >= 0\n\n\nclass MessageTeardown:\n    def teardown_method(self):\n        # always teardown to prevent leaks when django_db doesnt clear db\n        TaskLogMessage.objects.all().delete()\n\n\n@pytest.mark.django_db\nclass TestAgentProcessStart:\n    async def test_start_task(self, mock_openai, anode_types):\n        \"\"\"Run task for the first time with no auth to run commands\"\"\"\n        task = await sync_to_async(fake_task)()\n        mock_reply = await sync_to_async(fake_command_reply)(task=task)\n        await mock_reply.adelete()\n        query = TaskLogMessage.objects.filter(task=task)\n        count = await query.acount()\n        assert count == 0\n        agent_process = AgentProcess(task=task, agent=task.agent, chain=task.chain)\n\n        return_value = await agent_process.start(USER_INPUT)\n        assert return_value is True\n\n        # expect think, assistant (placeholder), and thought messages\n        count = await query.acount()\n        assert count == 3\n        messages = [msg async for msg in query]\n        think_msg = messages[0]\n        ai_msg = messages[1]\n        thought_msg = messages[2]\n\n        assert think_msg.content[\"type\"] == \"THINK\"\n        assert think_msg.content[\"input\"] == {\n            \"input\": \"hello agent 1\",\n            \"user_input\": \"hello agent 1\",\n            \"question\": \"hello agent 1\",\n        }\n        assert ai_msg.content[\"type\"] == \"ASSISTANT\"\n        assert ai_msg.content[\"text\"] == \"\"\n        assert ai_msg.content[\"stream\"] is False\n        assert thought_msg.content[\"type\"] == \"THOUGHT\"\n        assert isinstance(thought_msg.content[\"runtime\"], float)\n\n        # disabled until this is logged again\n        #  assert thought_msg.content[\"usage\"] == {\n        #      \"completion_tokens\": 7,\n        #      \"prompt_tokens\": 5,\n        #      \"total_tokens\": 12,\n        #  }\n\n    async def test_start_task_with_input(self, mock_openai, anode_types):\n        \"\"\"\n        Test that if `input` is included in inputs then it will be\n        used instead of the default `user_input -> input` mapping.\n        \"\"\"\n        task = await sync_to_async(fake_task)()\n        mock_reply = await sync_to_async(fake_command_reply)(task=task)\n        await mock_reply.adelete()\n        query = TaskLogMessage.objects.filter(task=task)\n        count = await query.acount()\n        assert count == 0\n        agent_process = AgentProcess(task=task, agent=task.agent, chain=task.chain)\n\n        inputs = {\n            \"user_input\": \"hello agent 1\",\n            \"input\": \"hello agent 1\",\n            \"question\": \"hello agent 1\",\n        }\n        return_value = await agent_process.start(inputs)\n        assert return_value is True\n\n        # expect think, assistant (placeholder), and thought messages\n        count = await query.acount()\n        assert count == 3\n        messages = [msg async for msg in query]\n        think_msg = messages[0]\n        ai_msg = messages[1]\n        thought_msg = messages[2]\n\n        assert think_msg.content[\"type\"] == \"THINK\"\n        assert think_msg.content[\"input\"] == {\n            \"input\": \"hello agent 1\",\n            \"user_input\": \"hello agent 1\",\n            \"question\": \"hello agent 1\",\n        }\n        assert ai_msg.content[\"type\"] == \"ASSISTANT\"\n        assert ai_msg.content[\"text\"] == \"\"\n        assert ai_msg.content[\"stream\"] is False\n        assert thought_msg.content[\"type\"] == \"THOUGHT\"\n        assert isinstance(thought_msg.content[\"runtime\"], float)\n\n\ndef msg_to_response(msg: TaskLogMessage):\n    \"\"\"utility for turning model instances back into response json\"\"\"\n    content = dict(msg.content.items())\n    content.pop(\"type\")\n    json_content = f\"###START###{json.dumps(content, sort_keys=True)}###END###\"\n    return json_content\n\n    return {\n        \"choices\": [{\"message\": {\"content\": json_content}}],\n        \"usage\": {\"prompt_tokens\": 5, \"completion_tokens\": 7, \"total_tokens\": 12},\n    }\n"}
{"type": "test_file", "path": "ix/api/tests/test_secrets.py", "content": "from typing import Any\n\nimport pytest\nimport pytest_asyncio\n\nfrom pydantic import BaseModel\n\nfrom ix.ix_users.tests.mixins import OwnershipTestsMixin\nfrom ix.server.fast_api import app\nfrom ix.secrets.models import Secret, SecretType\nfrom uuid import uuid4\nfrom httpx import AsyncClient\n\nfrom ix.secrets.tests.fake import (\n    MockAccount,\n    afake_secret,\n    afake_secret_type,\n    aget_mock_secret_type,\n)\nfrom ix.ix_users.tests.fake import afake_group, afake_user\n\n\n@pytest_asyncio.fixture\nasync def asecret_type() -> SecretType:\n    return await aget_mock_secret_type()\n\n\n@pytest.mark.django_db\nclass TestSecretTypes:\n    async def test_create_secret_type(self, auser):\n        data = {\"name\": \"Test Secret Type\", \"fields_schema\": MockAccount.schema()}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/secret_types/\", json=data)\n\n        assert response.status_code == 200, response.content\n\n        result = response.json()\n        assert result[\"name\"] == \"Test Secret Type\"\n        assert result[\"user_id\"] == auser.id\n        assert result[\"group_id\"] is None\n        assert result[\"fields_schema\"] == MockAccount.schema()\n\n        secret_type = await SecretType.objects.aget(id=result[\"id\"])\n        assert secret_type.name == \"Test Secret Type\"\n        assert secret_type.user_id == auser.id\n        assert secret_type.fields_schema == MockAccount.schema()\n        assert secret_type.group_id is None\n\n    async def test_get_secret_types(self, auser):\n        secret_type_1 = await afake_secret_type(name=\"Secret Type 1\")\n        secret_type_2 = await afake_secret_type(name=\"Secret Type 2\")\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/secret_types/?limit=9000\")\n\n        assert response.status_code == 200, response.content\n        page = response.json()\n\n        # Check that we got a list of secret types\n        objects = page[\"objects\"]\n        assert len(objects) >= 2\n        object_ids = [secret_type[\"id\"] for secret_type in objects]\n        assert str(secret_type_1.id) in object_ids\n        assert str(secret_type_2.id) in object_ids\n\n    async def test_update_secret_type(self, auser):\n        secret_type = await afake_secret_type(name=\"Old Secret Type\")\n\n        class NewAccount(BaseModel):\n            different_key: str\n\n        data = {\"name\": \"New Secret Type\", \"fields_schema\": NewAccount.schema()}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/secret_types/{secret_type.id}\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"name\"] == \"New Secret Type\"\n        assert result[\"user_id\"] == auser.id\n        assert result[\"group_id\"] is None\n        assert result[\"fields_schema\"] == NewAccount.schema()\n\n        updated_secret_type = await SecretType.objects.aget(id=result[\"id\"])\n        assert updated_secret_type.name == \"New Secret Type\"\n        assert updated_secret_type.user_id == auser.id\n        assert updated_secret_type.group_id is None\n        assert updated_secret_type.fields_schema == NewAccount.schema()\n\n    async def test_cant_change_user_or_group(self, auser):\n        new_user = await afake_user()\n        new_group = await afake_group()\n\n        secret_type = await afake_secret_type(name=\"Secret Type\")\n\n        data = {\n            \"name\": \"Updated Secret Type\",\n            \"fields_schema\": MockAccount.schema(),\n            \"user_id\": new_user.id,\n            \"group_id\": new_group.id,\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/secret_types/{secret_type.id}\", json=data)\n        assert response.status_code == 200, response.content\n\n        await secret_type.arefresh_from_db()\n        assert not secret_type.user_id == new_user.id\n        assert not secret_type.group_id == new_group.id\n\n    async def test_delete_secret_type(self, auser):\n        secret_type = await afake_secret_type(name=\"Secret Type to Delete\")\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/secret_types/{secret_type.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"id\"] == str(secret_type.id)\n        assert not await SecretType.objects.filter(id=secret_type.id).aexists()\n\n\n@pytest.mark.django_db\nclass TestSecrets:\n    async def test_get_secrets(self, auser, asecret_type):\n        secret_1 = await afake_secret(path=\"Mock Secret 1\")\n        secret_2 = await afake_secret(path=\"Mock Secret 2\")\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/secrets/?limit=9000\")\n\n        assert response.status_code == 200, response.content\n        page = response.json()\n\n        # Check that we got a list of agents\n        objects = page[\"objects\"]\n        assert len(objects) >= 2\n        object_ids = [agent[\"id\"] for agent in objects]\n        assert str(secret_1.id) in object_ids\n        assert str(secret_2.id) in object_ids\n        object_1 = objects[0]\n        assert object_1[\"path\"] == f\"{asecret_type.id}/{secret_1.pk}\"\n        assert object_1[\"name\"] == \"default instance\"\n        assert object_1[\"user_id\"] == auser.id\n        assert object_1[\"type_id\"] == str(asecret_type.id)\n\n    async def test_create_secret(self, auser, asecret_type):\n        data = {\n            \"type_id\": str(asecret_type.id),\n            \"name\": \"default key\",\n            \"value\": {\"test\": \"value\"},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/secrets/\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # verify response\n        secret_id = result[\"id\"]\n        assert result[\"path\"] == f\"{asecret_type.id}/{secret_id}\"\n        assert result[\"name\"] == \"default key\"\n        assert result[\"user_id\"] == auser.id\n        assert result[\"type_id\"] == str(asecret_type.id)\n\n        # verify secret in database\n        secret = await Secret.objects.aget(id=secret_id)\n        assert secret.type_id == asecret_type.id\n        assert secret.path == f\"{asecret_type.id}/{secret_id}\"\n        assert secret.name == \"default key\"\n        assert secret.user_id == auser.id\n        assert secret.group_id is None\n\n        # verify secret saved to secure storage\n        assert await secret.aread() == {\"test\": \"value\"}\n\n    async def test_create_with_new_type(self, auser, asecret_type):\n        class DynamicModel(BaseModel):\n            # all fields will be inferred as strings\n            one: Any\n            second: Any\n\n        data = {\n            \"type_key\": \"New Type\",\n            \"name\": \"default key\",\n            \"value\": {\n                \"one\": \"1\",\n                \"second\": 2,\n            },\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/secrets/\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # verify type was created\n        type_id = result[\"type_id\"]\n        secret_type = await SecretType.objects.aget(id=type_id)\n        assert secret_type.name == \"New Type\"\n        assert secret_type.user_id == auser.id\n        assert secret_type.group_id is None\n        assert secret_type.fields_schema == DynamicModel.schema()\n\n        # verify response\n        secret_id = result[\"id\"]\n        assert result[\"path\"] == f\"{secret_type.id}/{secret_id}\"\n        assert result[\"name\"] == \"default key\"\n        assert result[\"user_id\"] == auser.id\n\n        # verify secret in database\n        secret = await Secret.objects.aget(id=secret_id)\n        assert secret.type_id == secret_type.id\n        assert secret.path == f\"{secret_type.id}/{secret_id}\"\n        assert secret.name == \"default key\"\n        assert secret.user_id == auser.id\n        assert secret.group_id is None\n\n        # verify secret saved to secure storage\n        assert await secret.aread() == {\n            \"one\": \"1\",\n            \"second\": 2,\n        }\n\n    async def test_create_unauthorized_secret(self, arequest_user, auser, asecret_type):\n        \"\"\"Test creating a secret for someone else's user_id\n        user_id is ignored and secret is created for themselves.\n        \"\"\"\n        arequest_user.return_value = auser\n        user2 = await afake_user(username=\"user2\")\n        data = {\n            \"user_id\": user2.id,\n            \"type_id\": str(asecret_type.id),\n            \"name\": \"default key\",\n            \"value\": {\"test\": \"value\"},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/secrets/\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        secret = await Secret.objects.aget(id=result[\"id\"])\n        assert result[\"path\"] == f\"{asecret_type.id}/{secret.pk}\"\n        assert result[\"name\"] == \"default key\"\n        assert result[\"user_id\"] == auser.id\n        assert result[\"type_id\"] == str(asecret_type.id)\n\n    async def test_create_secret_with_unauthorized_type(\n        self, arequest_user, owner_filtering, auser\n    ):\n        \"\"\"User should not be able to insert a type_id that doesnt belong to them\"\"\"\n        other_user = await afake_user(username=\"other\")\n        secret_type = await afake_secret_type(name=\"other\", user=other_user, group=None)\n        assert secret_type.user_id != auser.id\n        assert secret_type.group_id is None\n\n        # create secret with unauthorized type\n        data = {\n            \"type_id\": str(secret_type.id),\n            \"name\": \"unauthorized secret\",\n            \"value\": {\"test\": \"value\"},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/secrets/\", json=data)\n\n        assert response.status_code == 422, response.content\n\n    async def test_update_secret(self, auser, asecret_type):\n        secret = await afake_secret()\n        await secret.awrite({\"test\": \"value\"})\n\n        data = {\n            \"name\": \"Updated Secret\",\n            \"type_id\": str(asecret_type.id),\n            \"value\": {\"test\": \"updated value\"},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/secrets/{secret.id}\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        assert result[\"name\"] == \"Updated Secret\"\n        assert \"value\" not in result\n\n        # secret meta updated in db\n        secret = await Secret.objects.aget(id=secret.id)\n        assert secret.name == \"Updated Secret\"\n\n        # secret value updated in vault\n        assert await secret.aread() == {\"test\": \"updated value\"}\n\n    async def test_update_cant_change_type(self, auser, asecret_type):\n        \"\"\"\n        Cant change type of secret\n        \"\"\"\n        other_type = await afake_secret_type(name=\"other\", user=auser, group=None)\n        secret = await afake_secret()\n        assert secret.type_id == asecret_type.id\n        assert secret.type_id != other_type.id\n        await secret.awrite({\"test\": \"value\"})\n\n        data = {\n            \"name\": \"Updated Secret\",\n            \"type_id\": str(other_type.id),\n            \"value\": {\"test\": \"updated value\"},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/secrets/{secret.id}\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        assert result[\"name\"] == \"Updated Secret\"\n        assert \"value\" not in result\n\n        # secret meta updated in db\n        secret = await Secret.objects.aget(id=secret.id)\n        assert secret.name == \"Updated Secret\"\n        assert secret.type_id == asecret_type.id\n\n    async def test_update_only_name(self, arequest_user, asecret_type):\n        \"\"\"\n        If value is None then value should not be updated.\n        \"\"\"\n        secret = await afake_secret()\n        await secret.awrite({\"test\": \"value\"})\n\n        data = {\n            \"name\": \"Updated Secret\",\n            \"type_id\": str(asecret_type.id),\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/secrets/{secret.id}\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        assert result[\"name\"] == \"Updated Secret\"\n        assert \"value\" not in result\n\n        # secret meta updated in db\n        secret = await Secret.objects.aget(id=secret.id)\n        assert secret.name == \"Updated Secret\"\n\n        # secret value updated in vault\n        assert await secret.aread() == {\"test\": \"value\"}\n\n    async def test_update_one_value_of_secret(self, arequest_user, auser):\n        \"\"\"\n        SecretTypes may have more than one field. Users may update a single field.\n        \"\"\"\n        arequest_user.return_value = auser\n        secret = await afake_secret(user=auser)\n        await secret.awrite(\n            {\n                \"one\": \"1\",\n                \"two\": \"2\",\n            }\n        )\n\n        data = {\n            \"name\": \"updated name\",\n            \"value\": {\n                \"one\": \"updated value\",\n            },\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/secrets/{secret.id}\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        assert result[\"name\"] == \"updated name\"\n        assert \"value\" not in result\n\n        # secret meta updated in db\n        secret = await Secret.objects.aget(id=secret.id)\n        assert secret.name == \"updated name\"\n\n        # secret value updated in vault\n        assert await secret.aread() == {\n            \"one\": \"updated value\",\n            \"two\": \"2\",\n        }\n\n    async def test_delete_secret(self, auser):\n        secret = await afake_secret(user=auser)\n        await secret.awrite({\"test\": \"value\"})\n        assert await secret.aread() == {\"test\": \"value\"}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/secrets/{secret.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"id\"] == str(secret.id)\n\n        # Ensure the secret is deleted\n        assert not await Secret.objects.filter(id=secret.id).aexists()\n\n    async def test_delete_secret_not_found(self):\n        non_existent_secret_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/secrets/{non_existent_secret_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Secret not found\"\n\n    async def test_get_secret_detail_not_found(self):\n        non_existent_secret_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/secrets/{non_existent_secret_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Secret not found\"\n\n\n@pytest.mark.django_db\nclass TestSecretTypeOwnership(OwnershipTestsMixin):\n    object_type = \"secret_types\"\n\n    async def setup_object(self, **kwargs):\n        return await afake_secret_type(**kwargs)\n\n    async def get_create_data(self):\n        return {\n            \"name\": \"Testing Service\",\n            \"fields_schema\": MockAccount.schema(),\n        }\n\n    async def get_update_data(self, instance):\n        return {\n            \"name\": \"Testing Service\",\n            \"fields_schema\": MockAccount.schema(),\n        }\n\n\n@pytest.mark.django_db\nclass TestSecretOwnership(OwnershipTestsMixin):\n    object_type = \"secrets\"\n\n    @pytest.fixture(autouse=True)\n    def mock_vault(self, mocker):\n        \"\"\"\n        Disable vault calls for these tests.\n        Just checking access permissions. Other tests validate read/writes\n        \"\"\"\n        # mocker.patch(\"ix.secrets.models.UserVaultClient\")\n\n    async def setup_object(self, **kwargs):\n        secret_type = await aget_mock_secret_type()\n        secret = await afake_secret(type_id=secret_type.id, **kwargs)\n        await secret.awrite({\"test\": \"value\"})\n        return secret\n\n    async def get_create_data(self):\n        secret_type = await aget_mock_secret_type()\n        return {\n            \"name\": \"Test Account 1\",\n            \"value\": MockAccount(api_key=\"foo\").model_dump(),\n            \"type_id\": str(secret_type.id),\n        }\n\n    async def get_update_data(self, instance):\n        return {\n            \"name\": \"Test Account 2\",\n            \"value\": MockAccount(api_key=\"bar\").model_dump(),\n            \"type_id\": str(instance.type_id),\n        }\n"}
{"type": "test_file", "path": "ix/chains/tests/test_agent_interaction.py", "content": "import pytest\n\nfrom ix.chains.agent_interaction import DelegateToAgentChain\nfrom ix.chains.tests.test_config_loader import unpack_chain_flow\nfrom ix.task_log.models import Task\n\nDELEGATE_TO_AGENT_CHAIN = {\n    \"class_path\": \"ix.chains.agent_interaction.DelegateToAgentChain\",\n    \"config\": {\n        \"target_alias\": \"agent_1\",\n        \"prompt\": {\n            \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n            \"config\": {\n                \"messages\": [\n                    {\n                        \"role\": \"system\",\n                        \"template\": \"Write a sea shanty for user input: {user_input}.\",\n                        \"input_variables\": [\"user_input\"],\n                    },\n                ],\n            },\n        },\n    },\n}\n\n\nDELEGATE_TO_AGENT_CHAIN_FILTER_INPUTS = {\n    \"class_path\": \"ix.chains.agent_interaction.DelegateToAgentChain\",\n    \"config\": {\n        \"target_alias\": \"agent_1\",\n        \"delegate_inputs\": [\"user_input\"],\n        \"prompt\": {\n            \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n            \"config\": {\n                \"messages\": [\n                    {\n                        \"role\": \"system\",\n                        \"template\": \"Write a sea shanty for user input: {user_input}.\",\n                        \"input_variables\": [\"user_input\"],\n                    },\n                ],\n            },\n        },\n    },\n}\n\n\n@pytest.fixture\ndef start_agent_loop(mocker):\n    # mock start_agent_loop since the task is async and makes this test flaky\n    yield mocker.patch(\"ix.chains.agent_interaction.start_agent_loop\")\n\n\n@pytest.mark.django_db\nclass TestDelegateToAgentChain:\n    async def test_delegate_to_agent(\n        self, aload_chain, aix_handler, achat, start_agent_loop\n    ):\n        \"\"\"Verify that the chain will delegate to the agent\"\"\"\n        chat = achat[\"chat\"]\n        task = await Task.objects.aget(id=chat.task_id)\n        chain = await aload_chain(DELEGATE_TO_AGENT_CHAIN)\n        component = unpack_chain_flow(chain)\n        assert isinstance(component, DelegateToAgentChain)\n\n        result = await chain.ainvoke(\n            dict(\n                chat_id=str(chat.id),\n                user_input=\"test task delegation\",\n                extra_input=\"testing extra input\",\n            ),\n            config=dict(callbacks=[aix_handler]),\n        )\n        assert result[\"delegate_to\"] == \"Delegating to @agent_1\"\n        assert start_agent_loop.delay.call_args_list[0].kwargs[\"user_id\"] == str(\n            task.user_id\n        )\n        assert start_agent_loop.delay.call_args_list[0].kwargs[\"inputs\"] == {\n            \"chat_id\": str(chat.id),\n            \"user_input\": \"System: Write a sea shanty for user input: test task delegation.\",\n            \"extra_input\": \"testing extra input\",\n        }\n\n    async def test_delegate_to_agent_summons_agents(\n        self, aload_chain, aix_handler, achat, start_agent_loop\n    ):\n        \"\"\"Verify that the chain will delegate to the agent\"\"\"\n        chat = achat[\"chat\"]\n        chain = await aload_chain(DELEGATE_TO_AGENT_CHAIN)\n        component = unpack_chain_flow(chain)\n        assert isinstance(component, DelegateToAgentChain)\n\n        # remove agents\n        await chat.agents.all().adelete()\n        assert await chat.agents.aexists() is False\n\n        result = await chain.ainvoke(\n            dict(\n                chat_id=str(chat.id),\n                user_input=\"test task delegation\",\n            ),\n            config=dict(callbacks=[aix_handler]),\n        )\n        assert result[\"delegate_to\"] == \"Delegating to @agent_1\"\n        assert await chat.agents.filter(alias=\"agent_1\").aexists()\n\n    async def test_delegate_to_agent_filter_inputs(\n        self, aload_chain, aix_handler, achat, start_agent_loop\n    ):\n        \"\"\"Verify that the chain will delegate to the agent\"\"\"\n        chat = achat[\"chat\"]\n        chain = await aload_chain(DELEGATE_TO_AGENT_CHAIN_FILTER_INPUTS)\n        component = unpack_chain_flow(chain)\n        assert isinstance(component, DelegateToAgentChain)\n\n        result = await chain.ainvoke(\n            dict(\n                chat_id=str(chat.id),\n                user_input=\"test task delegation\",\n                excluded_input=\"this input won't be passed to the agent\",\n            ),\n            config=dict(callbacks=[aix_handler]),\n        )\n        assert result[\"delegate_to\"] == \"Delegating to @agent_1\"\n        start_agent_loop.delay.assert_called_once()\n        assert start_agent_loop.delay.call_args_list[0].kwargs[\"inputs\"] == {\n            \"chat_id\": str(chat.id),\n            \"user_input\": \"System: Write a sea shanty for user input: test task delegation.\",\n        }\n"}
{"type": "test_file", "path": "ix/chains/tests/components/test_vectorstores.py", "content": "from typing import List\n\nimport pytest\nfrom asgiref.sync import sync_to_async\nfrom langchain.schema.vectorstore import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom langchain_core.documents import Document\n\nfrom ix.chains.fixture_src.vectorstores import (\n    CHROMA_CLASS_PATH,\n)\nfrom ix.chains.tests.test_config_loader import (\n    EMBEDDINGS,\n)\nfrom ix.conftest import aload_chain\nfrom ix.runnable.vectorstore import (\n    AddTexts,\n    AddTextsInput,\n    AddDocuments,\n    DeleteVectors,\n    AddImages,\n)\n\nTEST_TEXTS = [\n    \"def foo1():\\n    print('hello world foo1')\",\n    \"def foo2():\\n    print('hello world foo2')\",\n    \"def bar3():\\n    print('hello world bar3')\",\n    \"def bar4():\\n    print('hello world bar4')\",\n    \"def bar5():\\n    print('hello world bar5')\",\n]\n\nTEXT_KWARGS = {\n    \"texts\": TEST_TEXTS,\n    \"ids\": [\"foo1\", \"foo2\", \"bar3\", \"bar4\", \"bar5\"],\n    \"metadatas\": [{\"foo\": \"bar\"}] * len(TEST_TEXTS),\n}\n\n\nTEST_DOCUMENTS = [\n    Document(page_content=text, metadata={\"foo\": 1}) for text in TEST_TEXTS\n]\n\n\nclass VectorStoreTestMixin:\n    \"\"\"Test loading retrieval components.\n\n    This is a test of loading mechanism for the various retrieval components.\n    It is not an exhaustive test that all retrieval components work as expected.\n    The tests verify that any special loading logic for the components is working.\n    \"\"\"\n\n    CLASS = None\n    CONFIG = None\n\n    async def cleanup_vectorstore(self, vectorstore: VectorStore, ids: List[str]):\n        if ids:\n            if type(vectorstore).adelete != VectorStore.adelete:\n                await vectorstore.adelete(ids)\n            else:\n                await sync_to_async(vectorstore.delete)(ids)\n        vectorstore.delete_collection()\n\n    async def test_load_vectorstore(self, aload_chain, mock_openai_embeddings):\n        vectorstore: VectorStore = await aload_chain(self.CONFIG)\n        assert isinstance(vectorstore, self.CLASS)\n\n        ids = await vectorstore.aadd_texts(**TEXT_KWARGS)\n        try:\n            results = await vectorstore.asearch(\"foo\", \"similarity\")\n            assert len(results) == 4\n            assert results[0].metadata[\"foo\"] == \"bar\"\n        finally:\n            await self.cleanup_vectorstore(vectorstore, ids)\n\n    async def test_add_text(self, aload_chain, mock_openai_embeddings):\n        vectorstore: VectorStore = await aload_chain(self.CONFIG)\n        runnable = AddTexts(vectorstore=vectorstore)\n        ids = await runnable.ainvoke(input=AddTextsInput(texts=TEST_TEXTS))\n\n        await self.cleanup_vectorstore(vectorstore, ids)\n        assert len(ids) == len(TEST_TEXTS)\n\n    async def test_add_delete_documents(self, aload_chain, mock_openai_embeddings):\n        vectorstore: VectorStore = await aload_chain(self.CONFIG)\n        runnable = AddDocuments(vectorstore=vectorstore)\n        ids = await runnable.ainvoke(input=TEST_DOCUMENTS)\n        try:\n            assert len(ids) == len(TEST_TEXTS)\n            delete_runnable = DeleteVectors(vectorstore=vectorstore)\n            await delete_runnable.ainvoke(input=ids)\n        finally:\n            await self.cleanup_vectorstore(vectorstore, ids)\n\n\nclass AddImagesMixin:\n    async def test_add_images(self):\n        vectorstore: VectorStore = await aload_chain(self.CONFIG)\n        runnable = AddImages(vectorstore=vectorstore)\n        ids = await runnable.ainvoke(input=TEST_DOCUMENTS)\n        try:\n            assert len(ids) == len(TEST_TEXTS)\n            delete_runnable = DeleteVectors(vectorstore=vectorstore)\n            await delete_runnable.ainvoke(input=ids)\n        finally:\n            await self.cleanup_vectorstore(vectorstore, ids)\n\n\n@pytest.mark.django_db\nclass TestChroma(VectorStoreTestMixin):\n    \"\"\"Test Chroma vectorstore component.\"\"\"\n\n    CLASS = Chroma\n    CONFIG = {\n        \"class_path\": CHROMA_CLASS_PATH,\n        \"config\": {\n            \"embedding_function\": EMBEDDINGS,\n            \"collection_name\": \"tests\",\n        },\n    }\n"}
{"type": "test_file", "path": "ix/chains/tests/components/test_unstructured.py", "content": "import pytest\nfrom langchain_community.document_loaders import (\n    UnstructuredHTMLLoader,\n    UnstructuredMarkdownLoader,\n    UnstructuredWordDocumentLoader,\n    UnstructuredODTLoader,\n    UnstructuredPDFLoader,\n    UnstructuredCSVLoader,\n    UnstructuredExcelLoader,\n    UnstructuredTSVLoader,\n    UnstructuredPowerPointLoader,\n    UnstructuredOrgModeLoader,\n    UnstructuredRTFLoader,\n    UnstructuredEmailLoader,\n    UnstructuredImageLoader,\n    UnstructuredXMLLoader,\n    UnstructuredEPubLoader,\n    UnstructuredRSTLoader,\n)\n\nfrom ix.chains.fixture_src.unstructured import (\n    UNSTRUCTURED_HTML_LOADER_CLASS_PATH,\n    UNSTRUCTURED_MARKDOWN_LOADER_CLASS_PATH,\n    UNSTRUCTURED_WORD_DOCUMENT_LOADER_CLASS_PATH,\n    UNSTRUCTURED_ODT_LOADER_CLASS_PATH,\n    UNSTRUCTURED_PDF_LOADER_CLASS_PATH,\n    UNSTRUCTURED_CSV_LOADER_CLASS_PATH,\n    UNSTRUCTURED_TSV_LOADER_CLASS_PATH,\n    UNSTRUCTURED_EXCEL_LOADER_CLASS_PATH,\n    UNSTRUCTURED_POWERPOINT_LOADER_CLASS_PATH,\n    UNSTRUCTURED_ORG_MODE_LOADER_CLASS_PATH,\n    UNSTRUCTURED_RTF_LOADER_CLASS_PATH,\n    UNSTRUCTURED_EMAIL_LOADER_CLASS_PATH,\n    UNSTRUCTURED_IMAGE_LOADER_CLASS_PATH,\n    UNSTRUCTURED_XML_LOADER_CLASS_PATH,\n    UNSTRUCTURED_EPUB_LOADER_CLASS_PATH,\n    UNSTRUCTURED_RST_LOADER_CLASS_PATH,\n)\nfrom ix.chains.tests.components.test_document_loaders import (\n    TEST_HTML_FILE_PATH,\n    TEST_MARKDOWN_FILE_PATH,\n    TEST_PDF_FILE_PATH,\n    TEST_CSV_FILE_PATH,\n)\nfrom ix.chains.tests.test_config_loader import unpack_chain_flow\nfrom ix.runnable.documents import RunLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredAPILoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_HTML_LOADER_CLASS_PATH,\n        \"config\": {\n            \"url\": \"MOCK_URL\",\n            \"api_key\": \"MOCK_API_KEY\",\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredHTMLLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredHTMLLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_HTML_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [TEST_HTML_FILE_PATH],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredHTMLLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredMarkdownLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_MARKDOWN_LOADER_CLASS_PATH,\n        \"config\": {\"file_path\": [TEST_MARKDOWN_FILE_PATH], \"mode\": \"\"},\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredMarkdownLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredWordDocumentLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_WORD_DOCUMENT_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredWordDocumentLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredODTLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_ODT_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredODTLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredPDFLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_PDF_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [TEST_PDF_FILE_PATH],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredPDFLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredCSVLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_CSV_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [TEST_CSV_FILE_PATH],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredCSVLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredRSTLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_RST_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredRSTLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredEPubLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_EPUB_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredEPubLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredXMLLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_XML_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredXMLLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredImageLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_IMAGE_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredImageLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredEmailLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_EMAIL_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredEmailLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredRTFLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_RTF_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredRTFLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredOrgModeLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_ORG_MODE_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredOrgModeLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredPowerPointLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_POWERPOINT_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredPowerPointLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredExcelLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_EXCEL_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredExcelLoader\n\n\n@pytest.mark.django_db\nclass TestUnstructuredTSVLoader:\n    CONFIG = {\n        \"class_path\": UNSTRUCTURED_TSV_LOADER_CLASS_PATH,\n        \"config\": {\n            \"file_path\": [\"MOCK_FILE_PATH\"],\n        },\n    }\n\n    async def test_load(self, aload_chain):\n        component = await aload_chain(self.CONFIG)\n        component = unpack_chain_flow(component)\n        assert isinstance(component, RunLoader)\n        assert component.initializer is UnstructuredTSVLoader\n"}
{"type": "test_file", "path": "ix/chains/tests/mock_chain.py", "content": "import logging\nfrom typing import Dict, List, Any\n\nfrom langchain.chains.base import Chain\n\nfrom ix.agents.callback_manager import IxCallbackManager\n\nlogger = logging.getLogger(__name__)\n\n\ndef mock_chain_func(inputs: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"Mock chain function that just returns the input\"\"\"\n    chain_input = inputs[\"mock_chain_input\"]\n    result = {\"mock_chain_output\": chain_input}\n    logger.debug(f\"MockChain.call input={chain_input}\")\n    logger.debug(f\"MockChain.call result={result}\")\n    return result\n\n\nMOCK_CHAIN_CONFIG = {\n    \"name\": \"mock_chain\",\n    \"description\": \"mock chain for testing\",\n    \"class_path\": \"ix.chains.tests.mock_chain.MockChain\",\n    \"config\": {},\n}\n\n\nclass MockChain(Chain):\n    \"\"\"\n    Mock chain for testing. It just returns the input as output\n    \"\"\"\n\n    @property\n    def _chain_type(self) -> str:\n        return \"ix_test\"\n\n    @property\n    def input_keys(self) -> List[str]:\n        return [\"mock_chain_input\"]\n\n    @property\n    def output_keys(self) -> List[str]:\n        return [\"mock_chain_output\"]\n\n    def _call(self, inputs: Dict[str, str]) -> Dict[str, str]:\n        return mock_chain_func(inputs)\n\n    async def _acall(self, inputs: Dict[str, str]) -> Dict[str, str]:\n        return mock_chain_func(inputs)\n\n    def __str__(self):\n        return f\"MockChain({id(self)})\"\n\n    def __repr__(self):\n        return str(self)\n\n    @classmethod\n    def from_config(\n        cls, config: Dict[str, Any], callback_manager: IxCallbackManager\n    ) -> \"MockChain\":\n        chain = MockChain(**config)\n        chain.callbacks = callback_manager\n        return chain\n"}
{"type": "test_file", "path": "ix/chains/tests/agents/__init__.py", "content": ""}
{"type": "test_file", "path": "ix/api/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "ix/chains/tests/components/test_toolkits.py", "content": "import pytest\nfrom langchain.agents import AgentExecutor\nfrom langchain_community.agent_toolkits import FileManagementToolkit\n\nfrom ix.chains.fixture_src.toolkit import FILE_MANAGEMENT_TOOLKIT_CLASS_PATH\nfrom ix.chains.llm_chain import LLMChain\nfrom ix.chains.tests.mock_configs import PROMPT_CHAT\nfrom ix.chains.tests.test_config_loader import OPENAI_LLM, unpack_chain_flow\n\nFILESYSTEM_TOOLKIT = {\n    \"class_path\": FILE_MANAGEMENT_TOOLKIT_CLASS_PATH,\n    \"config\": {\n        \"root_dir\": \"/var/app/workdir\",\n    },\n}\n\nAGENT_WITH_TOOLKIT = {\n    \"class_path\": \"ix.chains.loaders.agents.initialize_openai_functions\",\n    \"config\": {\"llm\": OPENAI_LLM, \"tools\": [FILESYSTEM_TOOLKIT]},\n}\n\nLLM_CHAIN = {\n    \"class_path\": \"ix.chains.llm_chain.LLMChain\",\n    \"config\": {\n        \"prompt\": PROMPT_CHAT,\n        \"llm\": OPENAI_LLM,\n        \"functions\": [FILESYSTEM_TOOLKIT],\n    },\n}\n\n\n@pytest.mark.django_db\nclass TestFileManagementToolkit:\n    async def test_load(self, aload_chain):\n        component = await aload_chain(FILESYSTEM_TOOLKIT)\n        assert isinstance(component, FileManagementToolkit)\n\n\n@pytest.mark.django_db\nclass TestToolkitIntegrations:\n    async def test_load_chain_functions(self, aload_chain):\n        flow = await aload_chain(LLM_CHAIN)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, LLMChain)\n\n        # chain doesn't unpack tools until load_functions is called\n        assert len(component.functions) == 1\n        assert isinstance(component.functions[0], FileManagementToolkit)\n        assert len(component.llm_kwargs.get(\"functions\", [])) == 7\n\n    async def test_load_agent_toolkit(self, aload_chain):\n        flow = await aload_chain(AGENT_WITH_TOOLKIT)\n        component = unpack_chain_flow(flow)\n        assert isinstance(component, AgentExecutor)\n        assert len(component.tools) == 7\n"}
{"type": "test_file", "path": "ix/api/tests/test_editor.py", "content": "import pytest\nfrom httpx import AsyncClient\n\nfrom ix.api.chains.endpoints import create_chain_chat\nfrom ix.chat.models import Chat\nfrom ix.server.fast_api import app\nfrom ix.task_log.tests.fake import (\n    afake_chain,\n)\nfrom ix.ix_users.tests.fake import afake_user\n\n\n@pytest.mark.django_db\nclass TestEditorChat:\n    async def test_get_chat(self, anode_types):\n        \"\"\"Test getting test chat for a chain\"\"\"\n        # Create a chain to update\n        await afake_user()\n        chain = await afake_chain()\n        chat = await create_chain_chat(chain)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chains/{chain.id}/chat\")\n\n        assert response.status_code == 200, response.content\n        response = response.json()\n        assert str(chat.id) == response[\"id\"]\n\n    async def test_get_chat_404(self, anode_types):\n        \"\"\"Test chat is created if it does not exist\"\"\"\n        # Create a chain to update\n        await afake_user()\n        chain = await afake_chain()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chains/{chain.id}/chat\")\n\n        assert response.status_code == 200, response.content\n        response = response.json()\n        assert response[\"id\"]\n        assert await Chat.objects.filter(id=response[\"id\"]).aexists()\n"}
{"type": "test_file", "path": "ix/api/tests/test_chat.py", "content": "from fastapi import HTTPException\nfrom asgiref.sync import sync_to_async\nimport pytest\nimport pytest_asyncio\nfrom uuid import uuid4, UUID\n\nfrom httpx import AsyncClient\n\nfrom ix.agents.models import Agent\nfrom ix.chains.management.commands.create_ix_v2 import IX_AGENT_V2\nfrom ix.chat.models import Chat\nfrom ix.ix_users.models import Group\nfrom ix.ix_users.tests.mixins import OwnerState, OwnershipTestsMixin\nfrom ix.server.fast_api import app\nfrom ix.task_log.models import TaskLogMessage, Task\nfrom ix.task_log.tests.fake import (\n    afake_agent,\n    afake_chat,\n    afake_artifact,\n    afake_system,\n    afake_task,\n)\nfrom ix.ix_users.tests.fake import afake_user, aget_default_user\n\nCHAT_ID_1 = uuid4()\nCHAT_ID_2 = uuid4()\n\n\n@pytest_asyncio.fixture\nasync def aowned_chat(anode_types) -> OwnerState:\n    owner = await afake_user()\n    non_owner = await afake_user()\n    group, _ = await Group.objects.aget_or_create(name=\"Test Group\")\n    await sync_to_async(owner.groups.add)(group.id)\n    chat = await afake_chat(user=owner)\n    group_chat = await afake_chat(group=group)\n    return OwnerState(\n        owner=owner,\n        non_owner=non_owner,\n        object_owned=chat,\n        object_group_owned=group_chat,\n        object_global=None,\n    )\n\n\n@pytest.mark.django_db\nclass TestChat:\n    async def test_create_chat(self, anode_types, aix_agent):\n        \"\"\"Chat with default lead agent\"\"\"\n        await afake_user()\n        data = {\"name\": \"New Chat\", \"autonomous\": False}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/chats/\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we created the chat\n        assert result[\"name\"] == \"New Chat\"\n        assert result[\"lead_id\"] == str(IX_AGENT_V2)\n        assert result[\"autonomous\"] is False\n        assert await Chat.objects.filter(id=result[\"id\"]).aexists()\n\n    async def test_create_chat_with_custom_lead(self, anode_types, aix_agent):\n        \"\"\"Chat with custom lead agent\"\"\"\n        await afake_user()\n        agent = await afake_agent()\n        data = {\"name\": \"New Chat\", \"autonomous\": False, \"lead_id\": str(agent.id)}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/chats/\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we created the chat\n        assert result[\"name\"] == \"New Chat\"\n        assert result[\"lead_id\"] == str(agent.id)\n        assert result[\"autonomous\"] is False\n        assert await Chat.objects.filter(id=result[\"id\"]).aexists()\n\n    async def test_get_chat(self, anode_types):\n        chat = await afake_chat(name=\"Chat 1\")\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check if we got the correct chat details\n        assert result[\"id\"] == str(chat.id)\n        assert result[\"name\"] == chat.name\n\n    async def test_get_chat_not_found(self):\n        non_existent_chat_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{non_existent_chat_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Chat not found\"\n\n    async def test_get_chats(self, anode_types):\n        await Chat.objects.all().adelete()\n        chat_1 = await afake_chat(name=\"Chat 1\", id=CHAT_ID_1)\n        chat_2 = await afake_chat(name=\"Chat 2\", id=CHAT_ID_2)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/chats/\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check if we got a list of chats\n        assert len(result[\"objects\"]) == 2\n        chat_ids = [chat[\"id\"] for chat in result[\"objects\"]]\n        assert str(chat_1.id) in chat_ids\n        assert str(chat_2.id) in chat_ids\n\n        # pagination sanity check\n        assert result[\"count\"] == 2\n        assert result[\"pages\"] == 1\n        assert result[\"page_number\"] == 1\n        assert result[\"has_next\"] is False\n        assert result[\"has_previous\"] is False\n\n    @pytest.mark.parametrize(\n        \"search_term, expected_ids\",\n        [\n            [\"mock\", [CHAT_ID_1, CHAT_ID_2]],\n            [\"mock Chat 1\", [CHAT_ID_1]],\n            [\"mock Chat 2\", [CHAT_ID_2]],\n            [\"matches none\", []],\n        ],\n    )\n    async def test_search_chats(self, anode_types, search_term, expected_ids):\n        await Chat.objects.all().adelete()\n        await afake_chat(name=\"mock Chat 1\", id=CHAT_ID_1)\n        await afake_chat(name=\"mock Chat 2\", id=CHAT_ID_2)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/?search={search_term}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert len(result[\"objects\"]) == len(expected_ids)\n        assert {UUID(chat[\"id\"]) for chat in result[\"objects\"]} == set(expected_ids)\n\n    async def test_update_chat(self):\n        chat = await afake_chat()\n        data = {\"name\": \"New Chat\", \"lead_id\": str(chat.lead_id), \"autonomous\": False}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{chat.id}\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we updated the chat\n        assert result[\"id\"] == str(chat.id)\n        assert result[\"name\"] == \"New Chat\"\n        assert result[\"lead_id\"] == str(chat.lead_id)\n        assert result[\"autonomous\"] is False\n\n    async def test_update_chat_not_found(self):\n        non_existent_chat_id = uuid4()\n\n        # Prepare the data for the API request\n        data = {\"name\": \"New Chat\", \"lead_id\": str(uuid4()), \"autonomous\": False}\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{non_existent_chat_id}\", json=data)\n\n        assert response.status_code == 404, response.content\n        result = response.json()\n        assert result[\"detail\"] == \"Chat not found\"\n\n    async def test_delete_chat(self, anode_types):\n        chat = await afake_chat()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chats/{chat.id}\")\n\n        # Assert the status code and the response\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result == {\"id\": str(chat.id)}\n\n        # Ensure the chat is actually deleted\n        assert not await Chat.objects.filter(id=chat.id).aexists()\n\n    async def test_delete_chat_not_found(self, anode_types):\n        non_existent_chat_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chats/{non_existent_chat_id}\")\n\n        # Assert the status code and the response\n        assert response.status_code == 404, response.content\n        result = response.json()\n        assert result[\"detail\"] == \"Chat not found\"\n\n\n@pytest.mark.django_db\n@pytest.mark.usefixtures(\"anode_types\")\nclass TestChatOwnership(OwnershipTestsMixin):\n    object_type = \"chats\"\n\n    async def setup_object(self, **kwargs):\n        chat = await afake_chat(id=uuid4(), **kwargs)\n        return chat\n\n    async def get_create_data(self):\n        return {}\n\n    async def get_update_data(self, instance):\n        return {\n            \"lead_id\": str(instance.lead_id),\n            \"name\": \"updated chat\",\n            \"autonomous\": True,\n        }\n\n\n@pytest.mark.django_db\nclass TestChatAgents:\n    async def test_get_agents(self, anode_types):\n        await Chat.objects.all().adelete()\n        chat = await afake_chat(name=\"Chat 1\", id=CHAT_ID_1)\n        agent_1 = await afake_agent(name=\"Agent 1\")\n        agent_2 = await afake_agent(name=\"Agent 2\")\n        await chat.agents.aadd(agent_1)\n        await chat.agents.aadd(agent_2)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(\"/agents/\", params={\"chat_id\": chat.id})\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check if we got a list of chats\n        assert len(result[\"objects\"]) == 2\n        agent_ids = [agent[\"id\"] for agent in result[\"objects\"]]\n        assert str(agent_1.id) in agent_ids\n        assert str(agent_2.id) in agent_ids\n\n    async def test_add_agent_to_chat(self, anode_types):\n        chat = await afake_chat()\n        agent = await afake_agent()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 200\n        result = response.json()\n\n        # verify that the agent is added\n        assert result == dict(\n            chat_id=str(chat.id),\n            agent_id=str(agent.id),\n        )\n        assert await chat.agents.filter(id=agent.id).aexists()\n\n    async def test_add_existing_lead_agent_to_chat(self):\n        chat = await afake_chat()\n        agent = chat.lead\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 200\n        result = response.json()\n\n        # Check that the response returns the same chat as no changes were made\n        assert result[\"chat_id\"] == str(chat.id)\n        assert result[\"agent_id\"] is None\n\n    async def test_add_existing_agent_to_chat_agents(self):\n        chat = await afake_chat()\n        agent = await afake_agent()\n        await chat.agents.aadd(agent)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 200\n        result = response.json()\n\n        # Check that the response returns the same chat as no changes were made\n        assert result[\"chat_id\"] == str(chat.id)\n        assert result[\"agent_id\"] is None\n\n    async def test_add_agent_chat_not_found(self):\n        non_existent_chat_id = uuid4()\n        agent = await afake_agent()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{non_existent_chat_id}/agents/{agent.id}\")\n\n        assert response.status_code == 404, response.content\n        result = response.json()\n        assert result[\"detail\"] == \"Chat does not exist.\"\n\n    async def test_add_agent_agent_not_found(self):\n        chat = await afake_chat()\n        non_existent_agent_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{chat.id}/agents/{non_existent_agent_id}\")\n\n        assert response.status_code == 404, response.content\n        result = response.json()\n        assert result[\"detail\"] == \"Agent does not exist.\"\n\n    async def test_remove_agent_from_chat(self, anode_types):\n        chat = await afake_chat()\n        agent = await afake_agent()\n\n        # add agent to chat first\n        await chat.agents.aadd(agent)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 200\n        result = response.json()\n\n        # verify that the agent is removed\n        assert result == dict(\n            chat_id=str(chat.id),\n            agent_id=str(agent.id),\n        )\n        assert not await chat.agents.filter(id=agent.id).aexists()\n\n    async def test_remove_agent_chat_not_found(self):\n        non_existent_chat_id = uuid4()\n        agent = await afake_agent()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(\n                f\"/chats/{non_existent_chat_id}/agents/{agent.id}\"\n            )\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Chat does not exist.\"\n\n    async def test_remove_agent_agent_not_found(self):\n        chat = await afake_chat()\n        non_existent_agent_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(\n                f\"/chats/{chat.id}/agents/{non_existent_agent_id}\"\n            )\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Agent does not exist.\"\n\n\n@pytest.mark.django_db\n@pytest.mark.usefixtures(\"owner_filtering\")\nclass TestChatAgentsAccess:\n    async def test_user_owns_chat_add(self, aowned_chat: OwnerState, arequest_user):\n        arequest_user.return_value = aowned_chat.owner\n        chat = aowned_chat.object_owned\n        agent = await afake_agent()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 200\n\n    async def test_user_owns_chat_remove(self, aowned_chat: OwnerState, arequest_user):\n        arequest_user.return_value = aowned_chat.owner\n        chat = aowned_chat.object_owned\n        agent = await afake_agent()\n        await chat.agents.aadd(agent)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 200\n\n    async def test_user_does_not_own_chat_add(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = aowned_chat.non_owner\n        chat = aowned_chat.object_owned\n        agent = await afake_agent()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 404\n\n    async def test_user_does_not_own_chat_remove(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = aowned_chat.non_owner\n        chat = aowned_chat.object_owned\n        agent = await afake_agent()\n        await chat.agents.aadd(agent)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 404\n\n    async def test_unauthenticated_chat_add(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.side_effect = HTTPException(\n            status_code=401, detail=\"Not authenticated\"\n        )\n        chat = aowned_chat.object_owned\n        agent = await afake_agent()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 401\n\n    async def test_unauthenticated_chat_remove(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.side_effect = HTTPException(\n            status_code=401, detail=\"Not authenticated\"\n        )\n        chat = aowned_chat.object_owned\n        agent = await afake_agent()\n        await chat.agents.aadd(agent)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/chats/{chat.id}/agents/{agent.id}\")\n\n        assert response.status_code == 401\n\n\n@pytest.mark.django_db\nclass TestChatGraph:\n    async def test_user_owns_chat_get(self, aowned_chat: OwnerState, arequest_user):\n        arequest_user.return_value = aowned_chat.owner\n        chat = await afake_chat(user=aowned_chat.owner)\n        fake_artifact = await afake_artifact(task_id=chat.task_id)\n        agent = await afake_agent()\n        await chat.agents.aadd(agent)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/graph\")\n\n        assert response.status_code == 200\n        result = response.json()\n\n        # verify the chat graph response\n        assert result[\"chat\"][\"id\"] == str(chat.id)\n        assert result[\"chat\"][\"name\"] == chat.name\n        assert result[\"lead\"][\"id\"] == str(chat.lead.id)\n        assert len(result[\"agents\"]) == 1\n        assert result[\"agents\"][0][\"id\"] == str(agent.id)\n        assert len(result[\"plans\"]) == 0\n        assert len(result[\"artifacts\"]) == 1\n        assert result[\"artifacts\"][0][\"id\"] == str(fake_artifact.id)\n\n\n@pytest.mark.django_db\n@pytest.mark.usefixtures(\"owner_filtering\")\nclass TestChatGraphAccess:\n    async def test_user_does_not_own_chat_get(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = aowned_chat.non_owner\n        chat = await afake_chat(user=aowned_chat.owner)\n        agent = await afake_agent()\n        await chat.agents.aadd(agent)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/graph\")\n\n        assert response.status_code == 404\n\n    async def test_unauthenticated_chat_get(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.side_effect = HTTPException(\n            status_code=401, detail=\"Not authenticated\"\n        )\n        chat = await afake_chat(user=aowned_chat.owner)\n        agent = await afake_agent()\n        await chat.agents.aadd(agent)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/graph\")\n\n        assert response.status_code == 401\n\n\n@pytest.fixture()\ndef mock_start_agent_loop(mocker):\n    yield mocker.patch(\"ix.api.chats.endpoints.start_agent_loop\")\n\n\n@pytest.mark.django_db\nclass TestChatMessage:\n    async def test_send_message(self, anode_types, mock_start_agent_loop):\n        chat = await afake_chat()\n        user = await aget_default_user()\n        lead = await Agent.objects.aget(id=chat.lead_id)\n        text = \"Test message\"\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chats/{chat.id}/messages\", json={\"text\": text})\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        assert result[\"content\"][\"type\"] == \"FEEDBACK\"\n        assert result[\"content\"][\"feedback\"] == text\n        message = await TaskLogMessage.objects.aget(id=result[\"id\"])\n        assert message.content[\"type\"] == \"FEEDBACK\"\n        assert message.content[\"feedback\"] == text\n\n        # Agent isn't being set on message for now, this may be deprecated in the future\n        assert result[\"agent_id\"] is None\n        assert message.agent_id is None\n\n        mock_start_agent_loop.delay.assert_called_once_with(\n            str(chat.task_id),\n            chain_id=str(lead.chain_id),\n            user_id=str(user.id),\n            inputs={\"user_input\": text, \"chat_id\": str(chat.id), \"artifact_ids\": []},\n        )\n\n    async def test_send_message_with_artifact(self, anode_types, mock_start_agent_loop):\n        chat = await afake_chat()\n        user = await aget_default_user()\n        lead = await Agent.objects.aget(id=chat.lead_id)\n        text = \"Test message with {test_artifact}\"\n        artifact = await afake_artifact(task_id=chat.task_id, key=\"test_artifact\")\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\n                f\"/chats/{chat.id}/messages\",\n                json={\"text\": text, \"artifact_ids\": [str(artifact.id)]},\n            )\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        assert result[\"content\"][\"type\"] == \"FEEDBACK\"\n        assert result[\"content\"][\"feedback\"] == text\n        assert result[\"agent_id\"] is None\n        message = await TaskLogMessage.objects.aget(id=result[\"id\"])\n        assert message.agent_id is None\n        assert message.content[\"type\"] == \"FEEDBACK\"\n        assert message.content[\"feedback\"] == text\n        assert message.content[\"artifact_ids\"] == [str(artifact.id)]\n\n        mock_start_agent_loop.delay.assert_called_once_with(\n            str(chat.task_id),\n            chain_id=str(lead.chain_id),\n            user_id=str(user.id),\n            inputs={\n                \"user_input\": text,\n                \"chat_id\": str(chat.id),\n                \"artifact_ids\": [str(artifact.id)],\n            },\n        )\n\n    async def test_send_message_to_agent(self, anode_types, mock_start_agent_loop):\n        chat = await afake_chat()\n        user = await aget_default_user()\n        agent = await afake_agent(alias=\"a_fake_agent\")\n        await chat.agents.aadd(agent)\n        text = \"@a_fake_agent Test message to agent\"\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chats/{chat.id}/messages\", json={\"text\": text})\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        assert result[\"content\"][\"type\"] == \"FEEDBACK\"\n        assert result[\"content\"][\"feedback\"] == text\n        assert result[\"agent_id\"] is None\n        message = await TaskLogMessage.objects.aget(id=result[\"id\"])\n        assert message.agent_id is None\n        assert message.content[\"type\"] == \"FEEDBACK\"\n        assert message.content[\"feedback\"] == text\n\n        # verify that the agent is started\n        subtask = await Task.objects.aget(parent_id=chat.task_id)\n        mock_start_agent_loop.delay.assert_called_once_with(\n            str(subtask.id),\n            chain_id=str(agent.chain_id),\n            user_id=str(user.id),\n            inputs={\"user_input\": text, \"chat_id\": str(chat.id), \"artifact_ids\": []},\n        )\n\n\n@pytest.mark.django_db\n@pytest.mark.usefixtures(\"owner_filtering\")\nclass TestChatMessageAccess:\n    async def test_user_owns_chat_send_message(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = aowned_chat.owner\n        chat = await afake_chat(user=aowned_chat.owner)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 200\n\n    async def test_group_owns_chat_send_message(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = aowned_chat.owner\n        chat = aowned_chat.object_group_owned\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 200\n\n    async def test_user_does_not_own_chat_send_message(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = aowned_chat.non_owner\n        chat = await afake_chat(user=aowned_chat.owner)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 404\n\n    async def test_group_does_not_own_chat_send_message(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = aowned_chat.non_owner\n        chat = aowned_chat.object_group_owned\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 404\n\n    async def test_unauthenticated_send_message(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.side_effect = HTTPException(\n            status_code=401, detail=\"Not authenticated\"\n        )\n        chat = await afake_chat(user=aowned_chat.owner)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 401\n\n    async def test_user_owns_chat_get_messages(\n        self, aowned_chat: OwnerState, arequest_user, anode_types\n    ):\n        arequest_user.return_value = aowned_chat.owner\n        chat = await afake_chat(user=aowned_chat.owner)\n        task = await Task.objects.aget(id=chat.task_id)\n        subtask = await afake_task(parent=task)\n        msg1 = await afake_system(\"test1\", task=task)\n        msg2 = await afake_system(\"test2\", task=subtask)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        msgs = result[\"objects\"]\n\n        assert len(msgs) == 3\n        assert msgs[0][\"content\"][\"type\"] == \"FEEDBACK\"\n        assert msgs[1][\"id\"] == str(msg1.id)\n        assert msgs[1][\"content\"][\"type\"] == \"SYSTEM\"\n        assert msgs[1][\"content\"][\"message\"] == \"test1\"\n        assert msgs[2][\"id\"] == str(msg2.id)\n        assert msgs[2][\"content\"][\"type\"] == \"SYSTEM\"\n        assert msgs[2][\"content\"][\"message\"] == \"test2\"\n\n    async def test_group_owns_chat_get_messages(\n        self, aowned_chat: OwnerState, arequest_user, anode_types\n    ):\n        arequest_user.return_value = aowned_chat.owner\n        chat = aowned_chat.object_group_owned\n        task = await Task.objects.aget(id=chat.task_id)\n        subtask = await afake_task(parent=task)\n        msg1 = await afake_system(\"test1\", task=task)\n        msg2 = await afake_system(\"test2\", task=subtask)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        msgs = result[\"objects\"]\n\n        assert len(msgs) == 3\n        assert msgs[0][\"content\"][\"type\"] == \"FEEDBACK\"\n        assert msgs[1][\"id\"] == str(msg1.id)\n        assert msgs[1][\"content\"][\"type\"] == \"SYSTEM\"\n        assert msgs[1][\"content\"][\"message\"] == \"test1\"\n        assert msgs[2][\"id\"] == str(msg2.id)\n        assert msgs[2][\"content\"][\"type\"] == \"SYSTEM\"\n        assert msgs[2][\"content\"][\"message\"] == \"test2\"\n\n    async def test_user_does_not_own_chat_get_messages(\n        self, aowned_chat: OwnerState, arequest_user, anode_types\n    ):\n        arequest_user.return_value = aowned_chat.non_owner\n        chat = aowned_chat.object_group_owned\n        task = await Task.objects.aget(id=chat.task_id)\n        subtask = await afake_task(parent=task)\n        await afake_system(\"test1\", task=task)\n        await afake_system(\"test2\", task=subtask)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 404\n\n    async def test_non_group_member_chat_get_messages(\n        self, aowned_chat: OwnerState, arequest_user, anode_types\n    ):\n        arequest_user.return_value = aowned_chat.non_owner\n        chat = aowned_chat.object_group_owned\n        task = await Task.objects.aget(id=chat.task_id)\n        subtask = await afake_task(parent=task)\n        await afake_system(\"test1\", task=task)\n        await afake_system(\"test2\", task=subtask)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 404\n\n    async def test_unauthenticated_chat_get_messages(\n        self, aowned_chat: OwnerState, arequest_user, anode_types\n    ):\n        arequest_user.side_effect = HTTPException(status_code=401)\n        chat = await afake_chat(user=aowned_chat.owner)\n        task = await Task.objects.aget(id=chat.task_id)\n        subtask = await afake_task(parent=task)\n        await afake_system(\"test1\", task=task)\n        await afake_system(\"test2\", task=subtask)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/chats/{chat.id}/messages\")\n\n        assert response.status_code == 401\n\n    async def test_user_owns_chat_clear_messages(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = aowned_chat.owner\n        chat = await afake_chat(user=aowned_chat.owner)\n        task = await Task.objects.aget(id=chat.task_id)\n        subtask = await afake_task(parent=task)\n        await afake_system(\"test1\", task=task)\n        await afake_system(\"test2\", task=subtask)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chats/{chat.id}/messages/clear\")\n\n        assert response.status_code == 200, response.content\n        assert response.json() == {\"id\": str(chat.id)}, response.json()\n\n    async def test_user_does_not_own_chat_clear_messages(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.return_value = aowned_chat.non_owner\n        chat = await afake_chat(user=aowned_chat.owner)\n        task = await Task.objects.aget(id=chat.task_id)\n        subtask = await afake_task(parent=task)\n        await afake_system(\"test1\", task=task)\n        await afake_system(\"test2\", task=subtask)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chats/{chat.id}/messages/clear\")\n\n        assert response.status_code == 404\n\n    async def test_unauthenticated_chat_clear_messages(\n        self, aowned_chat: OwnerState, arequest_user\n    ):\n        arequest_user.side_effect = HTTPException(status_code=401)\n        chat = await afake_chat(user=aowned_chat.owner)\n        task = await Task.objects.aget(id=chat.task_id)\n        subtask = await afake_task(parent=task)\n        await afake_system(\"test1\", task=task)\n        await afake_system(\"test2\", task=subtask)\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(f\"/chats/{chat.id}/messages/clear\")\n\n        assert response.status_code == 401\n"}
{"type": "test_file", "path": "ix/chains/tests/test_artifacts.py", "content": "from copy import deepcopy\n\nimport json\nimport pytest\n\nfrom ix.chains.artifacts import SaveArtifact\nfrom ix.chains.tests.test_config_loader import unpack_chain_flow\nfrom ix.task_log.models import Artifact, TaskLogMessage\nfrom ix.task_log.tests.fake import afake_task\n\nARTIFACT_FROM_ARTIFACT = {\n    \"class_path\": \"ix.chains.artifacts.SaveArtifact\",\n    \"config\": {\n        \"artifact_from_key\": \"mock_artifact\",\n        \"artifact_type\": \"test\",\n        \"artifact_storage\": \"mock_write_to_file\",\n        \"content_key\": \"artifact_content\",\n        \"output_key\": \"generated_artifact\",\n    },\n}\n\n\nSTATIC_ARTIFACT = {\n    \"class_path\": \"ix.chains.artifacts.SaveArtifact\",\n    \"config\": {\n        \"artifact_name\": \"test artifact\",\n        \"artifact_key\": \"test_artifact\",\n        \"artifact_description\": \"This is a test artifact generated by a test\",\n        \"artifact_type\": \"test\",\n        \"artifact_storage\": \"mock_write_to_file\",\n        \"content_key\": \"artifact_content\",\n        \"output_key\": \"generated_artifact\",\n    },\n}\n\n\nMOCK_CONTENT = {\"foo\": \"bar\"}\nMOCK_ARTIFACT = artifact = dict(\n    name=\"test artifact\",\n    key=\"test_artifact\",\n    description=\"this is a test artifact\",\n    identifier=\"test_artifact_001\",\n)\n\n\n@pytest.mark.django_db\nclass TestAsyncSaveArtifact:\n    async def test_create_from_artifact(\n        self, aclean_artifacts, aload_chain, aix_handler\n    ):\n        chain = await aload_chain(ARTIFACT_FROM_ARTIFACT)\n        component = unpack_chain_flow(chain)\n        assert isinstance(component, SaveArtifact)\n\n        result = await chain.ainvoke(\n            input=dict(\n                artifact_content=MOCK_CONTENT,\n                mock_artifact=MOCK_ARTIFACT,\n            ),\n            config=dict(callbacks=[aix_handler]),\n        )\n        artifact = await Artifact.objects.aget()\n        assert result[\"generated_artifact\"] == str(artifact.id)\n        assert artifact.name == \"test artifact\"\n        assert artifact.key == \"test_artifact\"\n        assert artifact.description == \"this is a test artifact\"\n        assert artifact.storage[\"type\"] == \"mock_write_to_file\"\n        assert artifact.storage[\"id\"] == \"test_artifact_001\"\n\n    async def test_create_static_artifact(\n        self, aclean_artifacts, aload_chain, aix_handler\n    ):\n        chain = await aload_chain(STATIC_ARTIFACT)\n        component = unpack_chain_flow(chain)\n        assert isinstance(component, SaveArtifact)\n\n        result = await chain.ainvoke(\n            input=dict(\n                artifact_content=MOCK_CONTENT,\n            ),\n            config=dict(callbacks=[aix_handler]),\n        )\n        artifact = await Artifact.objects.aget()\n        assert result[\"generated_artifact\"] == str(artifact.id)\n        assert artifact.name == \"test artifact\"\n        assert artifact.key == \"test_artifact\"\n        assert artifact.description == \"This is a test artifact generated by a test\"\n        assert artifact.storage[\"type\"] == \"mock_write_to_file\"\n        assert (\n            artifact.storage[\"id\"] == f\"test_artifact_{aix_handler.parent_think_msg.id}\"\n        )\n\n    @pytest.mark.parametrize(\"config\", [ARTIFACT_FROM_ARTIFACT, STATIC_ARTIFACT])\n    async def test_artifact_storage_for_artifact(\n        self, aclean_artifacts, config, aload_chain, tmp_path, aix_handler\n    ):\n        \"\"\"Test that file is written when artifact_storage is set to write_to_file\"\"\"\n        config = deepcopy(config)\n        config[\"config\"][\"artifact_storage\"] = \"write_to_file\"\n        temp_file = tmp_path / \"temp_file.txt\"\n        config[\"config\"][\"identifier\"] = str(temp_file)\n        config[\"config\"][\"artifact_storage\"] = \"write_to_file\"\n        config[\"config\"][\"artifact_storage_id\"] = str(temp_file)\n\n        chain = await aload_chain(config)\n\n        kwargs = {}\n        if \"artifact_from_key\" in config[\"config\"]:\n            kwargs[\"mock_artifact\"] = MOCK_ARTIFACT\n        result = await chain.ainvoke(\n            input=dict(artifact_content=MOCK_CONTENT, **kwargs),\n            config=dict(callbacks=[aix_handler]),\n        )\n\n        artifact = await Artifact.objects.aget()\n        assert result[\"generated_artifact\"] == str(artifact.id)\n\n        # assert file is written\n        assert temp_file.is_file()\n\n        # assert file contents are correct\n        with open(temp_file, \"r\") as file:\n            file_content = file.read()\n        assert json.loads(file_content) == MOCK_CONTENT\n\n    async def test_artifact_content_path(\n        self, aclean_artifacts, aix_handler, aload_chain, tmp_path\n    ):\n        \"\"\"\n        Test mapping content with `content_path` jsonpath. This allows a value\n        within the content object to be saved.\n        \"\"\"\n        config = deepcopy(ARTIFACT_FROM_ARTIFACT)\n        config[\"config\"][\"artifact_storage\"] = \"write_to_file\"\n        temp_file = tmp_path / \"temp_file.txt\"\n        config[\"config\"][\"identifier\"] = str(temp_file)\n        config[\"config\"][\"content_path\"] = \"artifact_content.foo\"\n        config[\"config\"][\"artifact_storage\"] = \"write_to_file\"\n        config[\"config\"][\"artifact_storage_id\"] = str(temp_file)\n\n        chain = await aload_chain(config)\n\n        kwargs = {}\n        if \"artifact_from_key\" in config[\"config\"]:\n            kwargs[\"mock_artifact\"] = MOCK_ARTIFACT\n        result = await chain.ainvoke(\n            input=dict(artifact_content=MOCK_CONTENT, **kwargs),\n            config=dict(callbacks=[aix_handler]),\n        )\n\n        artifact = await Artifact.objects.aget()\n        assert result[\"generated_artifact\"] == str(artifact.id)\n\n        # assert file is written\n        assert temp_file.is_file()\n\n        # assert file contents are correct\n        with open(temp_file, \"r\") as file:\n            file_content = file.read()\n        assert file_content == \"bar\"\n\n    @pytest.mark.parametrize(\"config\", [ARTIFACT_FROM_ARTIFACT, STATIC_ARTIFACT])\n    async def test_artifact_type(\n        self, aclean_artifacts, config, aload_chain, aix_handler\n    ):\n        \"\"\"Test that artifact_type will be set to the value in the config if set in config\"\"\"\n        config = deepcopy(config)\n        config[\"config\"][\"artifact_type\"] = \"custom_mock_type\"\n        chain = await aload_chain(config)\n\n        kwargs = {}\n        if \"artifact_from_key\" in config[\"config\"]:\n            kwargs[\"mock_artifact\"] = MOCK_ARTIFACT\n\n        result = await chain.ainvoke(\n            input=dict(artifact_content=MOCK_CONTENT, **kwargs),\n            config=dict(callbacks=[aix_handler]),\n        )\n\n        artifact = await Artifact.objects.aget()\n        msg = await TaskLogMessage.objects.filter(content__type=\"ARTIFACT\").alatest(\n            \"created_at\"\n        )\n        assert result[\"generated_artifact\"] == str(artifact.id)\n        assert artifact.artifact_type == \"custom_mock_type\"\n        assert msg.content[\"artifact_type\"] == \"custom_mock_type\"\n\n    async def test_artifact_parent_for_chat_task(\n        self, aclean_artifacts, aload_chain, aix_handler\n    ):\n        \"\"\"\n        Test that artifact parent is set to chain's task if it does not have a parent.\n        This handles the case where the artifact is created by the main task\n        for a chat.\n        \"\"\"\n        chain = await aload_chain(ARTIFACT_FROM_ARTIFACT)\n\n        result = await chain.ainvoke(\n            input=dict(\n                artifact_content=MOCK_CONTENT,\n                mock_artifact=MOCK_ARTIFACT,\n            ),\n            config=dict(callbacks=[aix_handler]),\n        )\n        artifact = await Artifact.objects.aget()\n        msg = await TaskLogMessage.objects.filter(content__type=\"ARTIFACT\").alatest(\n            \"created_at\"\n        )\n        assert result[\"generated_artifact\"] == str(artifact.id)\n        assert msg.content[\"artifact_id\"] == str(artifact.id)\n\n    async def test_artifact_for_subtask(\n        self, aclean_artifacts, atask, aload_chain, aix_handler\n    ):\n        \"\"\"\n        Test that artifact parent is set to the root task if the task has a parent.\n        This handles the case where artifact is running in a subtask of the main task.\n        \"\"\"\n\n        await afake_task(parent=aix_handler.task)\n        chain = await aload_chain(ARTIFACT_FROM_ARTIFACT)\n\n        # fake_task(parent=task)\n        # chain.mock_callback_manager.child(\"subtask\")\n\n        result = await chain.ainvoke(\n            input=dict(\n                artifact_content=MOCK_CONTENT,\n                mock_artifact=MOCK_ARTIFACT,\n            ),\n            config=dict(callbacks=[aix_handler]),\n        )\n        artifact = await Artifact.objects.aget()\n        msg = await TaskLogMessage.objects.filter(content__type=\"ARTIFACT\").alatest(\n            \"created_at\"\n        )\n        assert aix_handler.task.id == msg.task_id\n        assert result[\"generated_artifact\"] == str(artifact.id)\n        assert msg.content[\"artifact_id\"] == str(artifact.id)\n"}
{"type": "test_file", "path": "ix/chains/tests/conftest.py", "content": "import uuid\nfrom ix.chains.fixture_src.lcel import (\n    RUNNABLE_BRANCH_CLASS_PATH,\n    RUNNABLE_EACH_CLASS_PATH,\n)\nfrom ix.chains.loaders.core import (\n    BranchPlaceholder,\n    ImplicitJoin,\n    MapPlaceholder,\n    SequencePlaceholder,\n)\nfrom ix.chains.models import ChainNode, NodeType\nfrom ix.chains.tests.fake import (\n    afake_node_sequence,\n    afake_node_map,\n    afake_node_branch,\n    afake_chain_edge,\n    afake_runnable,\n)\nfrom ix.task_log.tests.fake import afake_chain\nimport pytest_asyncio\n\n\n@pytest_asyncio.fixture\nasync def lcel_sequence(anode_types) -> dict:\n    chain = await afake_chain()\n    nodes = await afake_node_sequence(chain=chain)\n\n    return {\n        \"chain\": chain,\n        \"nodes\": nodes,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=True)\n    map_placeholder = await afake_node_map(\n        chain=chain,\n        nodes={\n            \"a\": node1,\n            \"b\": node2,\n        },\n    )\n    return dict(chain=chain, map=map_placeholder, node1=node1, node2=node2)\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_with_one_branch(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    map_placeholder = await afake_node_map(\n        chain=chain,\n        nodes={\n            \"a\": node1,\n        },\n    )\n    return dict(chain=chain, map=map_placeholder, node1=node1)\n\n\n@pytest_asyncio.fixture\nasync def lcel_sequence_in_map_start(anode_types) -> dict:\n    \"\"\"Map contains a sequence and the map is the first node in the chain.\"\"\"\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    inner_sequence = await afake_node_sequence(chain=chain, root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=True)\n    node_map = await afake_node_map(\n        chain=chain,\n        nodes={\n            \"a\": node1,\n            \"b\": inner_sequence,  # last node in sequence gets edge to map\n            \"c\": node2,\n        },\n        root=False,\n    )\n    return {\n        \"chain\": chain,\n        \"node1\": node1,\n        \"inner_sequence\": inner_sequence,\n        \"node2\": node2,\n        \"map\": node_map,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_sequence_in_map_in_sequence(anode_types) -> dict:\n    \"\"\"Map contains a sequence and the map is the first node in the chain.\"\"\"\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    inner_sequence = await afake_node_sequence(chain=chain, root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    node4 = await afake_runnable(chain=chain, name=\"node4\", root=False)\n    inner_map = await afake_node_map(\n        chain=chain,\n        input_node=node1,\n        nodes={\n            \"a\": node2,\n            \"b\": inner_sequence,  # last node in sequence gets edge to map\n            \"c\": node3,\n        },\n        root=False,\n    )\n\n    await afake_chain_edge(\n        chain=chain,\n        source=inner_map.node,\n        target=node4,\n        source_key=\"out\",\n        target_key=\"in\",\n    )\n\n    return {\n        \"chain\": chain,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"node4\": node4,\n        \"inner_sequence\": inner_sequence,\n        \"sequence\": [node1, inner_map, node4],\n        \"map\": inner_map,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_sequence_in_map_in_sequence_n2(anode_types) -> dict:\n    \"\"\"Map contains a sequence and the map is the first node in the chain.\n\n    The sequence ends in n=2 nodes.\n    \"\"\"\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    inner_sequence = await afake_node_sequence(chain=chain, root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    node4 = await afake_runnable(chain=chain, name=\"node4\", root=False)\n    node5 = await afake_runnable(chain=chain, name=\"node5\", root=False)\n    inner_map = await afake_node_map(\n        chain=chain,\n        nodes={\n            \"a\": node2,\n            \"b\": inner_sequence,  # last node in sequence gets edge to map\n            \"c\": node3,\n        },\n        root=False,\n    )\n    sequence = await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node1,\n            inner_map,\n            node4,\n            node5,\n        ],\n        root=False,\n    )\n    return {\n        \"chain\": chain,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"node4\": node4,\n        \"node5\": node5,\n        \"inner_sequence\": inner_sequence,\n        \"sequence\": sequence,\n        \"map\": inner_map,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_sequence(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    inner_map = await afake_node_map(chain=chain, input_node=node1, root=False)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n\n    await afake_chain_edge(\n        chain=chain,\n        source=inner_map.node,\n        target=node2,\n        source_key=\"out\",\n        target_key=\"in\",\n    )\n\n    sequence = [node1, inner_map, node2]\n    return {\n        \"chain\": chain,\n        \"sequence\": sequence,\n        \"node1\": node1,\n        \"map\": inner_map,\n        \"node2\": node2,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_sequence_n2(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    inner_map = await afake_node_map(chain=chain, root=False)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    sequence = await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node1,\n            inner_map,\n            node2,\n            node3,\n        ],\n        root=False,\n    )\n    return {\n        \"chain\": chain,\n        \"sequence\": sequence,\n        \"node1\": node1,\n        \"map\": inner_map,\n        \"node2\": node2,\n        \"node3\": node3,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_sequence_start(anode_types) -> dict:\n    chain = await afake_chain()\n    inner_map = await afake_node_map(chain=chain, root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    sequence = await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            inner_map,\n            node2,\n        ],\n        root=False,\n    )\n    return {\n        \"chain\": chain,\n        \"sequence\": sequence,\n        \"map\": inner_map,\n        \"node2\": node2,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_sequence_start_n2(anode_types) -> dict:\n    chain = await afake_chain()\n    inner_map = await afake_node_map(chain=chain, root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    sequence = await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            inner_map,\n            node2,\n            node3,\n        ],\n        root=False,\n    )\n    return {\n        \"chain\": chain,\n        \"sequence\": sequence,\n        \"map\": inner_map,\n        \"node2\": node2,\n        \"node3\": node3,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_map(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    inner_map = await afake_node_map(chain=chain, root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=True)\n    node_map = await afake_node_map(\n        chain=chain,\n        nodes={\n            \"a\": node1,\n            \"b\": inner_map,\n            \"c\": node2,\n        },\n    )\n    return {\n        \"chain\": chain,\n        \"node1\": node1,\n        \"inner_map\": inner_map,\n        \"node2\": node2,\n        \"map\": node_map,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_map_in_sequence_start(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    inner_map = await afake_node_map(chain=chain, root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=True)\n    node_map = await afake_node_map(\n        chain=chain,\n        nodes={\n            \"a\": node1,\n            \"b\": inner_map,\n            \"c\": node2,\n        },\n        root=True,\n    )\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n\n    sequence = await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node_map,\n            node3,\n        ],\n        root=False,\n    )\n\n    return {\n        \"chain\": chain,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"inner_map\": inner_map,\n        \"map\": node_map,\n        \"sequence\": sequence,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_map_in_sequence_start_n2(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    inner_map = await afake_node_map(chain=chain, root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=True)\n    node_map = await afake_node_map(\n        chain=chain,\n        nodes={\n            \"a\": node1,\n            \"b\": inner_map,\n            \"c\": node2,\n        },\n        root=True,\n    )\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    node4 = await afake_runnable(chain=chain, name=\"node4\", root=False)\n\n    sequence = await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node_map,\n            node3,\n            node4,\n        ],\n        root=False,\n    )\n\n    return {\n        \"chain\": chain,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"node4\": node4,\n        \"inner_map\": inner_map,\n        \"map\": node_map,\n        \"sequence\": sequence,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_map_in_sequence(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    inner_map = await afake_node_map(chain=chain, root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    node_map = await afake_node_map(\n        chain=chain,\n        nodes={\n            \"a\": node2,\n            \"b\": inner_map,\n            \"c\": node3,\n        },\n        root=False,\n    )\n\n    sequence = await afake_node_sequence(\n        chain=chain,\n        nodes=[node1, node_map],\n        root=False,\n    )\n\n    return {\n        \"chain\": chain,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"inner_map\": inner_map,\n        \"map\": node_map,\n        \"sequence\": sequence,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_map_in_sequence_n2(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=True)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    inner_map = await afake_node_map(chain=chain, root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    node4 = await afake_runnable(chain=chain, name=\"node4\", root=False)\n    node5 = await afake_runnable(chain=chain, name=\"node5\", root=False)\n    node_map = await afake_node_map(\n        chain=chain,\n        nodes={\n            \"a\": node2,\n            \"b\": inner_map,\n            \"c\": node3,\n        },\n        root=False,\n    )\n\n    sequence = await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node1,\n            node_map,\n            node4,\n            node5,\n        ],\n        root=False,\n    )\n\n    return {\n        \"chain\": chain,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"node4\": node4,\n        \"node5\": node5,\n        \"inner_map\": inner_map,\n        \"map\": node_map,\n        \"sequence\": sequence,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_branch(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=False)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    branch = await afake_node_branch(\n        chain=chain,\n        root=True,\n        default=node1,\n        branches=[\n            (\"a\", node2),\n            (\"b\", node3),\n        ],\n    )\n\n    assert await chain.nodes.filter(root=True).acount() == 1\n    return {\n        \"chain\": chain,\n        \"branch\": branch,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_branch_in_branch(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=False)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    node4 = await afake_runnable(chain=chain, name=\"node4\", root=False)\n    node5 = await afake_runnable(chain=chain, name=\"node5\", root=False)\n    inner_branch = await afake_node_branch(\n        chain=chain,\n        root=False,\n        default=node1,\n        branches=[\n            (\"a\", node2),\n            (\"b\", node3),\n        ],\n    )\n    branch = await afake_node_branch(\n        chain=chain,\n        root=True,\n        branches=[\n            (\"a\", inner_branch),\n            (\"b\", node4),\n        ],\n        default=node5,\n    )\n\n    return {\n        \"chain\": chain,\n        \"branch\": branch,\n        \"inner_branch\": inner_branch,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"node4\": node4,\n        \"node5\": node5,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_branch_in_default_branch(anode_types) -> dict:\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"inner_default\", root=False)\n    node2 = await afake_runnable(chain=chain, name=\"inner_a\", root=False)\n    node3 = await afake_runnable(chain=chain, name=\"inner_b\", root=False)\n    node4 = await afake_runnable(chain=chain, name=\"a\", root=False)\n    node5 = await afake_runnable(chain=chain, name=\"b\", root=False)\n\n    inner_branch = await afake_node_branch(\n        chain=chain,\n        root=False,\n        default=node1,\n        branches=[\n            (\"inner_a_in\", node2),\n            (\"inner_b_in\", node3),\n        ],\n    )\n    branch = await afake_node_branch(\n        chain=chain,\n        root=True,\n        default=inner_branch,\n        branches=[\n            (\"a_in\", node4),\n            (\"b_in\", node5),\n        ],\n    )\n\n    return {\n        \"chain\": chain,\n        \"branch\": branch,\n        \"inner_branch\": inner_branch,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"node4\": node4,\n        \"node5\": node5,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_sequence_in_branch(anode_types) -> dict:\n    chain = await afake_chain()\n    inner_sequence = await afake_node_sequence(chain=chain, root=False)\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=False)\n    branch = await afake_node_branch(\n        chain=chain,\n        root=True,\n        branches=[\n            (\"a\", inner_sequence),\n            (\"b\", node1),\n        ],\n    )\n\n    return {\n        \"chain\": chain,\n        \"branch\": branch,\n        \"inner_sequence\": inner_sequence,\n        \"node1\": node1,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_sequence_in_default_branch(anode_types) -> dict:\n    chain = await afake_chain()\n    inner_sequence = await afake_node_sequence(chain=chain, root=False)\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=False)\n    branch = await afake_node_branch(\n        chain=chain,\n        root=True,\n        default=inner_sequence,\n    )\n\n    return {\n        \"chain\": chain,\n        \"branch\": branch,\n        \"inner_sequence\": inner_sequence,\n        \"node1\": node1,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_branch(anode_types) -> dict:\n    chain = await afake_chain()\n    inner_map = await afake_node_map(chain=chain, root=False)\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=False)\n    branch = await afake_node_branch(\n        root=True,\n        chain=chain,\n        branches=[\n            (\"a\", node1),\n            (\"b\", inner_map),\n        ],\n    )\n\n    return {\n        \"chain\": chain,\n        \"branch\": branch,\n        \"inner_map\": inner_map,\n        \"node1\": node1,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_map_in_default_branch(anode_types) -> dict:\n    chain = await afake_chain()\n    inner_map = await afake_node_map(chain=chain, root=False)\n    branch = await afake_node_branch(\n        chain=chain,\n        root=True,\n        default=inner_map,\n    )\n\n    return {\n        \"chain\": chain,\n        \"branch\": branch,\n        \"inner_map\": inner_map,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_branch_in_sequence(anode_types) -> dict:\n    chain = await afake_chain()\n    node0 = await afake_runnable(chain=chain, name=\"node0\", root=True)\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=False)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    node4 = await afake_runnable(chain=chain, name=\"node4\", root=False)\n    node5 = await afake_runnable(chain=chain, name=\"node5\", root=False)\n\n    await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node1,\n            node4,\n        ],\n        root=False,\n    )\n    await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node2,\n            node4,\n        ],\n        root=False,\n    )\n    await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node3,\n            node4,\n        ],\n        root=False,\n    )\n    await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node4,\n            node5,\n        ],\n        root=False,\n    )\n\n    sequence_x = [node1, node4, node5]\n    sequence_a = [node2, node4, node5]\n    sequence_b = [node3, node4, node5]\n\n    a_uuid = str(uuid.uuid4())\n    b_uuid = str(uuid.uuid4())\n    branch = await ChainNode.objects.acreate(\n        chain=chain,\n        class_path=RUNNABLE_BRANCH_CLASS_PATH,\n        node_type=await NodeType.objects.aget(class_path=RUNNABLE_BRANCH_CLASS_PATH),\n        root=False,\n        config={\n            \"branches\": [\"a\", \"b\"],\n            \"branches_hash\": [a_uuid, b_uuid],\n        },\n    )\n\n    def get_join(node: ChainNode):\n        return [\n            ImplicitJoin(\n                source=[node],\n                target=MapPlaceholder(\n                    node=node4,\n                    map={\n                        \"in\": node1,\n                    },\n                ),\n            ),\n            node5,\n        ]\n\n    branch_placeholder = BranchPlaceholder(\n        node=branch,\n        default=get_join(sequence_x[0]),\n        branches=[\n            (\"a\", get_join(sequence_a[0])),\n            (\"b\", get_join(sequence_b[0])),\n        ],\n    )\n\n    # edge to branch\n    await afake_chain_edge(\n        chain=chain,\n        source=node0,\n        target=branch_placeholder.node,\n        source_key=\"out\",\n        target_key=\"in\",\n    )\n    # edge from branch node to sequences\n    await afake_chain_edge(\n        chain=chain,\n        source=branch_placeholder.node,\n        target=node1,\n        source_key=\"default\",\n        target_key=\"in\",\n    )\n    await afake_chain_edge(\n        chain=chain,\n        source=branch_placeholder.node,\n        target=node2,\n        source_key=a_uuid,\n        target_key=\"in\",\n    )\n    await afake_chain_edge(\n        chain=chain,\n        source=branch_placeholder.node,\n        target=node3,\n        source_key=b_uuid,\n        target_key=\"in\",\n    )\n\n    return {\n        \"chain\": chain,\n        \"sequence\": [node0, branch_placeholder],\n        \"branch\": branch,\n        \"node0\": node0,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"node4\": node4,\n        \"node5\": node5,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_branch_in_map_in_sequence(anode_types) -> dict:\n    \"\"\"\n    This is technically possible but requires wrapping the RunnableBranch into a sequence\n    such that the output from any branch is used as input for the next node\n    in the sequence.\n\n    Note that this is different from nesting a branch in a sequence. In this case there is\n    a common Map Node that turns into a common RunnableMap node. The RunnableMap is what is\n    executed. (i.e RunnableBranch -> mapped nodes) It's not possible to create alternate\n    sequences when embedding in a sequence.\n    \"\"\"\n    raise NotImplementedError(\"Not supported for now. See code for details.\")\n\n\n@pytest_asyncio.fixture\nasync def lcel_branch_in_map_start(anode_types) -> dict:\n    \"\"\"\n    This is technically possible but requires wrapping the RunnableBranch into a sequence\n    such that the output from any branch is used as input for the next node\n    in the sequence.\n\n    Note that this is different from nesting a branch in a sequence. In this case there is\n    a common Map Node that turns into a common RunnableMap node. The RunnableMap is what is\n    executed. (i.e RunnableBranch -> mapped nodes) It's not possible to create alternate\n    sequences when embedding in a sequence.\n    \"\"\"\n    raise NotImplementedError(\"Not supported for now. See code for details.\")\n\n\n@pytest_asyncio.fixture\nasync def lcel_join_after_branch(anode_types) -> dict:\n    \"\"\"Branches can JOIN to a single node after the branch\"\"\"\n\n    chain = await afake_chain()\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=False)\n    node2 = await afake_runnable(chain=chain, name=\"node2\", root=False)\n    node3 = await afake_runnable(chain=chain, name=\"node3\", root=False)\n    node4 = await afake_runnable(chain=chain, name=\"node4\", root=False)\n    node5 = await afake_runnable(chain=chain, name=\"node5\", root=False)\n\n    await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node1,\n            node4,\n        ],\n    )\n    await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node2,\n            node4,\n        ],\n    )\n    await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node3,\n            node4,\n        ],\n    )\n    await afake_node_sequence(\n        chain=chain,\n        nodes=[\n            node4,\n            node5,\n        ],\n    )\n\n    sequence_default = [node1, node4, node5]\n    sequence_a = [node2, node4, node5]\n    sequence_b = [node3, node4, node5]\n\n    a_uuid = str(uuid.uuid4())\n    b_uuid = str(uuid.uuid4())\n    branch = await ChainNode.objects.acreate(\n        chain=chain,\n        class_path=RUNNABLE_BRANCH_CLASS_PATH,\n        node_type=await NodeType.objects.aget(class_path=RUNNABLE_BRANCH_CLASS_PATH),\n        root=True,\n        config={\n            \"branches\": [\"a\", \"b\"],\n            \"branches_hash\": [a_uuid, b_uuid],\n        },\n    )\n\n    def get_join(node: ChainNode):\n        return [\n            ImplicitJoin(\n                source=[node],\n                target=MapPlaceholder(\n                    node=node4,\n                    map={\n                        \"in\": node1,\n                    },\n                ),\n            ),\n            node5,\n        ]\n\n    branch_placeholder = BranchPlaceholder(\n        node=branch,\n        default=get_join(sequence_default[0]),\n        branches=[\n            (\"a\", get_join(sequence_a[0])),\n            (\"b\", get_join(sequence_b[0])),\n        ],\n    )\n\n    # edge from branch node to sequences\n    await afake_chain_edge(\n        chain=chain,\n        source=branch_placeholder.node,\n        target=node1,\n        source_key=\"default\",\n        target_key=\"in\",\n    )\n    await afake_chain_edge(\n        chain=chain,\n        source=branch_placeholder.node,\n        target=node2,\n        source_key=a_uuid,\n        target_key=\"in\",\n    )\n    await afake_chain_edge(\n        chain=chain,\n        source=branch_placeholder.node,\n        target=node3,\n        source_key=b_uuid,\n        target_key=\"in\",\n    )\n\n    return {\n        \"chain\": chain,\n        \"branch\": branch_placeholder,\n        \"branch_node\": branch,\n        \"sequence_default\": sequence_default,\n        \"sequence_a\": sequence_a,\n        \"sequence_b\": sequence_b,\n        \"node1\": node1,\n        \"node2\": node2,\n        \"node3\": node3,\n        \"node4\": node4,\n        \"node5\": node5,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_flow_each(anode_types) -> dict:\n    chain = await afake_chain()\n    node_type = await NodeType.objects.aget(class_path=RUNNABLE_EACH_CLASS_PATH)\n    each = await ChainNode.objects.acreate(\n        chain=chain,\n        class_path=RUNNABLE_EACH_CLASS_PATH,\n        node_type=node_type,\n        root=True,\n        config={},\n    )\n\n    node1 = await afake_runnable(chain=chain, name=\"node1\", root=False)\n\n    await afake_chain_edge(\n        chain=chain,\n        source=each,\n        target=node1,\n        relation=\"PROP\",\n        source_key=\"workflow\",\n        target_key=\"in\",\n    )\n\n    return {\n        \"chain\": chain,\n        \"each\": each,\n        \"node1\": node1,\n    }\n\n\n@pytest_asyncio.fixture\nasync def lcel_flow_each_sequence(lcel_flow_each) -> dict:\n    \"\"\"Sequence in the RunnableEach's workflow\"\"\"\n    datum = lcel_flow_each.copy()\n    datum[\"node2\"] = await afake_runnable(\n        chain=datum[\"chain\"], name=\"node2\", root=False\n    )\n    datum[\"sequence\"] = SequencePlaceholder(steps=[datum[\"each\"], datum[\"node2\"]])\n    await afake_chain_edge(\n        chain=datum[\"chain\"],\n        source=datum[\"node1\"],\n        target=datum[\"node2\"],\n        relation=\"LINK\",\n        source_key=\"out\",\n        target_key=\"in\",\n    )\n    return datum\n\n\n@pytest_asyncio.fixture\nasync def lcel_flow_each_in_sequence(lcel_flow_each) -> dict:\n    \"\"\"A RunnableEach in sequence with other nodes.\"\"\"\n    datum = lcel_flow_each.copy()\n    datum[\"node2\"] = await afake_runnable(\n        chain=datum[\"chain\"], name=\"node2\", root=False\n    )\n    datum[\"sequence\"] = SequencePlaceholder(steps=[datum[\"each\"], datum[\"node2\"]])\n    await afake_chain_edge(\n        chain=datum[\"chain\"],\n        source=datum[\"each\"],\n        target=datum[\"node2\"],\n        relation=\"LINK\",\n        source_key=\"out\",\n        target_key=\"in\",\n    )\n    return datum\n"}
{"type": "test_file", "path": "ix/chains/tests/mock_vector_embeddings.py", "content": "# OpenAI Embeddings for python files in /var/app/test_data\n# These embeddings were generated for use with mock_openai_embeddings\n# fixture when testing vectorstores.\nMOCK_VECTORSTORE_EMBEDDINGS = [\n    [\n        -0.0032779048122314517,\n        -0.00248889531373356,\n        -0.01651138994807457,\n        -0.012261676574138614,\n        0.0007194828924168656,\n        -0.0002456866199142908,\n        -0.00581835907490087,\n        0.002670133014647385,\n        -0.02217351081387508,\n        -0.028173107589689775,\n        0.0040622269642219795,\n        -0.0015553642261738943,\n        0.0072995093484863735,\n        -0.006762045885867621,\n        -0.0020592366298326004,\n        -0.01829877119068965,\n        0.02359841386069479,\n        -0.005637121373987044,\n        0.03482266135033224,\n        0.027848128165953317,\n        -0.0007167487039670046,\n        -0.005368389177016381,\n        0.014024057393617655,\n        0.010693031338834987,\n        -0.02854808227176287,\n        0.023635912632753702,\n        0.006768295060329057,\n        -0.012011692831874836,\n        0.03439768768463221,\n        -0.006474564768528789,\n        0.036122571594697485,\n        -0.03222283341102116,\n        -0.019836166828395802,\n        -0.01489899862889574,\n        -0.011099254687182985,\n        -0.031072912666956123,\n        -0.020998589646674004,\n        -0.005224648851177609,\n        0.02158604929895197,\n        -0.019236206964549817,\n        0.015373966621609834,\n        0.012680398271409488,\n        -0.001429591441064968,\n        -0.009086889194117593,\n        -0.03164787210766607,\n        0.012680398271409488,\n        0.009518110171633912,\n        -0.01443652991642709,\n        -0.022510986723889265,\n        0.022835966147625723,\n        0.017211344053884123,\n        0.012442913809391155,\n        -0.040997244324292886,\n        0.003131039666331317,\n        -0.01652389015964259,\n        0.008930649588033374,\n        -0.009111887754608486,\n        0.021511055480124438,\n        0.036247566259797095,\n        -0.013211612559566804,\n        -0.014749009128595529,\n        8.519935344033147e-05,\n        -0.03139789022804743,\n        0.01651138994807457,\n        -0.013574087961394454,\n        0.0027013809824303577,\n        0.009224380345494929,\n        0.023885894512372333,\n        -0.015073987621009415,\n        0.03054794662193767,\n        0.02032363410135534,\n        -0.004440326699187081,\n        -0.03147288404687497,\n        0.010430549247648333,\n        0.012011692831874836,\n        -0.003593508611630608,\n        -0.02048612381322357,\n        -0.001135861149264699,\n        0.0005027006252395261,\n        0.006937033946658723,\n        0.024585848618181888,\n        -0.037522479806316594,\n        -0.023485921269808346,\n        0.016836369371811027,\n        0.02476083667897299,\n        -0.010080573126066129,\n        0.0061964588098659705,\n        0.03917236617226404,\n        -0.0077119818712958095,\n        -0.023160943708717033,\n        0.0022560984310532337,\n        -0.0026123244255888043,\n        0.01572394367451461,\n        0.008280693534528177,\n        -0.011886700960742945,\n        0.022061018222988636,\n        0.00744949931444787,\n        0.020111149131150474,\n        0.01712385002348857,\n        -0.030247967621337253,\n        -0.01989866229830046,\n        -0.019561186388286276,\n        -0.006974531321733776,\n        -0.02314844535979416,\n        -0.007855721731473296,\n        -0.005152778688258222,\n        -0.006587057359415232,\n        0.013361602059867013,\n        0.010424299141864324,\n        -0.003955984013458259,\n        -0.014086553794844888,\n        0.033972717744222475,\n        -0.0022264129897162635,\n        -0.046946845841770946,\n        0.0005952725173386201,\n        0.0013303793936469718,\n        -0.011849204051329179,\n        -0.005880855010466814,\n        0.001742070420402763,\n        0.0006909691712914149,\n        0.024048384224240563,\n        0.03502264610896909,\n        0.01489899862889574,\n        -0.002657633967232582,\n        0.023435926011471705,\n        0.0091931326105426,\n        -0.055496271573269786,\n        -0.015248975681800517,\n        -0.02457334840661387,\n        -0.022435992905061732,\n        0.04472199444717811,\n        0.01489899862889574,\n        0.01697385866054322,\n        -0.008480680155810173,\n        -0.010005577444593452,\n        0.022948458738512166,\n        -0.009618103482274909,\n        0.012924131907889257,\n        6.991717948486585e-05,\n        -0.03332276262203985,\n        0.013686580552280898,\n        0.031222902167256334,\n        0.024435857255236535,\n        -0.002485770493672198,\n        -0.0016936361751129453,\n        0.03627256295764284,\n        0.011799206930347394,\n        0.0037653720851909918,\n        -0.0027295041301519684,\n        -0.0021186077453371837,\n        0.0027404408839514123,\n        0.019011221782776932,\n        0.0053933877375072735,\n        -0.03819743535163526,\n        0.02558578172459186,\n        0.021623546208365735,\n        -0.03342275313871313,\n        0.004024729589146927,\n        0.017786305357239216,\n        0.01016181705067767,\n        0.008680666777092167,\n        0.0264482236796245,\n        0.026573214619433818,\n        -0.03592258683606064,\n        0.018311269539612523,\n        0.017223842402807,\n        0.026573214619433818,\n        -0.0006378477541172154,\n        -0.0338727235022589,\n        -0.00430596060070175,\n        0.01741133067516612,\n        0.004737181578218068,\n        -0.04092225050546536,\n        0.012111686142515832,\n        -0.0034091458578247784,\n        0.022548485495948175,\n        0.009180633330297153,\n        0.01708635125142966,\n        -0.01221167945315683,\n        -0.012017942937658845,\n        -0.053296420601812985,\n        0.0012264801161369332,\n        0.013236610188735124,\n        0.012542907120032152,\n        -0.006049593431135193,\n        0.004299710960579026,\n        0.007874471117502752,\n        -0.011430482354058307,\n        0.011667965884754068,\n        0.011655466604508622,\n        0.00976809391389769,\n        0.03729749462454371,\n        0.021623546208365735,\n        0.01489899862889574,\n        -0.6251580104894522,\n        0.004955917119868232,\n        0.008680666777092167,\n        -0.028723070332553974,\n        -0.0007280760893779491,\n        0.01932370099494537,\n        0.01731133643320255,\n        0.02032363410135534,\n        -0.0038497412955251814,\n        0.026773201240715812,\n        -0.01163671814980174,\n        0.02311094658773525,\n        -0.007705732231173086,\n        -0.006624554734490285,\n        -0.008818157928469503,\n        -0.022548485495948175,\n        -0.021898528511120407,\n        -0.02507331589114143,\n        -0.031772866772765675,\n        0.013836570052581107,\n        -0.009024393724212935,\n        0.04029729208112848,\n        0.010399301512696005,\n        0.004002856081548039,\n        0.005268395866375384,\n        -0.008561925011744286,\n        0.005480881767902825,\n        -0.026673206998752242,\n        -0.005534003010454042,\n        0.03362274162264027,\n        -0.0032154088766655066,\n        0.0010350866918160222,\n        0.031322896409219904,\n        0.0008811908171931458,\n        0.03419770292599536,\n        0.007330757549099989,\n        -0.039872322140718744,\n        -0.0022889086924515654,\n        0.01829877119068965,\n        0.050871580723293015,\n        -0.008630669656110382,\n        -0.009230629519956367,\n        0.0053933877375072735,\n        -0.025898259074115155,\n        0.0022607855447299543,\n        0.000736278654727532,\n        0.0017076977489737506,\n        0.0162989049778697,\n        -0.00030954950418601423,\n        -0.013599086521885347,\n        -0.00011503133256331748,\n        -0.020348632661846236,\n        -0.0029888616341079035,\n        0.01909871767581763,\n        0.00654955998434018,\n        -0.0021170452188911813,\n        0.028748068893044865,\n        -0.000451922764903687,\n        -0.003777871132605795,\n        -0.0011975758216076428,\n        0.01532397043195062,\n        0.030922923166655913,\n        -0.00014530273586945365,\n        0.021423561449728887,\n        0.0013100681796634434,\n        0.01852375450981739,\n        0.004796552926553294,\n        0.012074188301779493,\n        -0.021173577707465106,\n        0.008011961337557515,\n        -0.021898528511120407,\n        -0.01862374875178096,\n        -0.024773335027895863,\n        -0.009774343088359129,\n        0.025923257634606046,\n        0.03772246456495344,\n        0.02427336940601345,\n        -0.0006948751963681168,\n        -0.02047362360165555,\n        0.0021186077453371837,\n        0.0027795007854724673,\n        -0.000693312786337436,\n        -0.02311094658773525,\n        -0.022535985284380156,\n        0.022061018222988636,\n        -0.001452246211886857,\n        -0.026798199801206703,\n        0.025598280073514737,\n        -0.0029779248803084597,\n        0.032472819015930084,\n        0.00854942573149884,\n        0.024348363224840984,\n        0.0015592701930429353,\n        0.0011921074447079209,\n        0.013211612559566804,\n        0.005268395866375384,\n        -0.006568308904708349,\n        0.017173845281825213,\n        0.017673812766352773,\n        -0.01538646590185528,\n        -0.014761508408840976,\n        0.004771554366062402,\n        -0.006399570018378684,\n        -0.007074524632374773,\n        0.012267925748600052,\n        0.003182598615267175,\n        -0.008468180875564725,\n        0.02884806127236329,\n        0.03514763704877841,\n        -0.026648210300906493,\n        -0.016786372250829244,\n        -0.01502399050002763,\n        -0.03734749174552549,\n        0.02989799149975505,\n        0.017761306796748325,\n        -0.025598280073514737,\n        0.01498649265929129,\n        -0.019611181646622913,\n        0.010205564065875446,\n        0.008499428610517055,\n        0.014449029196672538,\n        -0.0020217392547575482,\n        0.034047711563050004,\n        -0.006233956184941023,\n        0.021298568647274422,\n        -0.012555406400277597,\n        -0.009986828989886568,\n        0.027023184982979592,\n        -0.034447684805614,\n        -0.013511592491489796,\n        0.02391089307286323,\n        -0.0012077313121840855,\n        0.004712183483388462,\n        -0.02312344679930327,\n        0.020686110434505564,\n        0.0006437067626284379,\n        0.016811370811320135,\n        -0.005887104650589538,\n        0.014386533726767878,\n        0.002404525870568727,\n        -0.027248168302107332,\n        -0.028923056953835968,\n        0.0012131996890838075,\n        -0.02036113101076911,\n        -0.018223775509216972,\n        -0.02506081567957341,\n        -0.018823735373062957,\n        -0.008374437670707738,\n        0.016398897357188125,\n        -0.003182598615267175,\n        0.01651138994807457,\n        -0.009661850497472684,\n        -0.014611517977218193,\n        -0.0012694459845270293,\n        -0.0034622673332066383,\n        -0.01456152178755898,\n        -0.01628640662894683,\n        0.005649620188571204,\n        -0.02073610755548735,\n        -0.020211141510468898,\n        0.008418184685905513,\n        0.013111619248925807,\n        -0.011192997892039975,\n        0.010455547808139226,\n        0.01602392267511503,\n        -0.01453652322706809,\n        -0.02967300631798216,\n        0.027523150604862004,\n        -0.0068995365715836705,\n        -0.03879739335283609,\n        0.0015272410784522834,\n        0.012711646006361817,\n        -0.010174316330923118,\n        -0.008230697344868965,\n        -0.004277837452980138,\n        0.012080438407563503,\n        -0.0103243067625459,\n        0.007593239640286642,\n        -0.03664753950236108,\n        -0.011699213619706397,\n        0.0017717559781550549,\n        0.002404525870568727,\n        -0.011555473293867625,\n        -0.015473959932250831,\n        0.04699684296275273,\n        0.011224245626992303,\n        0.021611047859442862,\n        -0.008861904943667278,\n        0.015911430084228587,\n        0.00516215338127295,\n        0.006052718484027198,\n        0.03037295856114657,\n        -0.021098582025992428,\n        0.023823399042467677,\n        -0.013611585802130793,\n        -0.03294778607732161,\n        0.006233956184941023,\n        -0.02232350031417529,\n        -0.002351404395186867,\n        0.0380474439886899,\n        0.028648074651081296,\n        0.044372018325595904,\n        0.00986183711875468,\n        -0.03464767328954114,\n        0.00830569209501907,\n        -0.021723540450329305,\n        0.01456152178755898,\n        -0.0282730999690082,\n        -0.011455479983226628,\n        0.02569827245283316,\n        0.02048612381322357,\n        -0.015298971871459729,\n        -0.009936832800227356,\n        0.001146797903064143,\n        0.014299039696372327,\n        0.03212284289434788,\n        -0.002968550652955018,\n        0.003499764941112334,\n        -0.0027341912438286894,\n        -0.0069245346664132765,\n        -0.01843626047942184,\n        0.03329776219890381,\n        -0.0020576743362172413,\n        -0.006212082677342135,\n        0.0012905383453182375,\n        -0.01716134693290234,\n        -0.002520143281516532,\n        0.03962233653580982,\n        -0.011955446536431614,\n        -0.005918352385541867,\n        -0.012261676574138614,\n        -0.00555587651805293,\n        0.0249108261792732,\n        0.003621631759352219,\n        0.006755796245744898,\n        -0.010955514361344213,\n        0.02387339616344946,\n        -0.010805523929721431,\n        0.01536146827268696,\n        0.0042309658505516445,\n        -0.019136214585231393,\n        -0.006287077427492241,\n        0.015773940795496395,\n        -0.01056804039902567,\n        0.013411599180848797,\n        0.017511323054484544,\n        -0.0020889220711695707,\n        -0.02134856576825621,\n        -0.002929490751433963,\n        0.04332208996084929,\n        -0.0168488677207339,\n        0.0013061622127944021,\n        -0.007430750859740987,\n        -0.021998522753083977,\n        -0.008411934580121504,\n        -0.023610914072262807,\n        -0.01502399050002763,\n        -0.01732383664477057,\n        0.021961023981025066,\n        0.03174786634962964,\n        0.017048854342015897,\n        0.00983683948958636,\n        0.023560916951281024,\n        -0.00267950747483147,\n        0.0009796216595958016,\n        -0.0031263525526545963,\n        0.011105503861644423,\n        -0.02323593939018971,\n        -0.010793024649475985,\n        -0.019973657979773136,\n        -0.016798870599752116,\n        -0.0073432568293454355,\n        0.020048653661245815,\n        -0.003293528679707616,\n        0.04567193229525145,\n        0.013511592491489796,\n        0.00854317562571483,\n        -0.0026482595070484974,\n        0.018648747312271854,\n        0.0066558029351039,\n        -0.008436933140612397,\n        -0.027498152044371112,\n        0.011930447975940721,\n        -0.002618574065711527,\n        0.0011186748717578537,\n        -0.02128607029835155,\n        -0.0367725304421704,\n        -0.018061285797348742,\n        0.006780794340574504,\n        -0.00473405699098735,\n        -0.007168268302893047,\n        0.004380955816513141,\n        0.006624554734490285,\n        -0.026873193620034236,\n        0.006605806279783402,\n        0.003980982573949151,\n        0.03222283341102116,\n        -0.002871682162375382,\n        0.006190209169743248,\n        0.009805590823311457,\n        -0.0015241163748062434,\n        -0.010418049967402887,\n        2.054305327742946e-05,\n        -0.0013702204419757062,\n        0.033972717744222475,\n        0.017561320175466327,\n        0.006093340446332969,\n        -0.029947988620736832,\n        -0.0007530744170381984,\n        -0.0033060279599530624,\n        0.026073248997551403,\n        0.008168200943641735,\n        -0.015161481651404966,\n        -0.0028201229806088814,\n        0.028073113347726206,\n        -0.0015553642261738943,\n        0.008374437670707738,\n        0.005352765309540217,\n        0.027123177362298016,\n        0.02652321749845203,\n        -0.020723607343919332,\n        -0.008280693534528177,\n        -0.004980915214697838,\n        -0.00854317562571483,\n        0.034847658048177986,\n        0.000164930329980941,\n        -0.0037341241174080196,\n        0.008730662966751379,\n        -0.020823601585882902,\n        0.007024527977054274,\n        -0.030972918424992554,\n        -0.021736038799252178,\n        0.0040622269642219795,\n        -0.009911834239736465,\n        -0.01156797257411307,\n        -0.016623882538961014,\n        -0.0028654325222526593,\n        0.004777804006185125,\n        0.016261408068455937,\n        -0.012280425028845498,\n        -0.018761239903158297,\n        -0.005330891801941329,\n        0.03537262223055129,\n        -0.011074256126692094,\n        -0.014811504598500188,\n        0.0071807675831384934,\n        0.008111954648198512,\n        0.01883623372198583,\n        -0.006487064048774235,\n        0.0020358008286183536,\n        -0.0006257392218985913,\n        0.003365398842627003,\n        -0.002015489614634825,\n        -0.044297024506768375,\n        -0.008199448678594063,\n        0.01031805665676189,\n        -0.0009679037007810173,\n        0.006068342351503363,\n        -0.014049055954108549,\n        0.010268060467102678,\n        -0.002731066423767328,\n        0.031247900727747226,\n        0.013499093211244349,\n        -0.011186748717578536,\n        0.005680868389184819,\n        0.005146529048135499,\n        0.004812176794029459,\n        -0.011011759725464863,\n        0.00038923165905114376,\n        0.016786372250829244,\n        0.00229828315263565,\n        -0.0007827599165828292,\n        -0.009293125921183597,\n        0.0020358008286183536,\n        -0.01619891073590613,\n        0.0035997580189226883,\n        -0.00447157443413941,\n        -0.023185942269207928,\n        -0.009136886315099377,\n        0.0048809219040568405,\n        -0.006337074082812739,\n        -0.018186278599803204,\n        0.006371446870657073,\n        -0.003148226060253484,\n        -0.031097911227447015,\n        -0.01160547041484941,\n        0.005387138097384551,\n        -0.00894314886827882,\n        0.007880720291964188,\n        -0.03284779183535804,\n        -0.03137289353020169,\n        -0.007337007189222713,\n        -0.018586251842367195,\n        0.0061277132341773025,\n        0.014911497909141185,\n        -0.023223439178621692,\n        -0.016598883978470123,\n        0.00033220424590407277,\n        0.03144788734902922,\n        0.012436664634929716,\n        -0.00030486233230163264,\n        0.00802446061780296,\n        -0.007337007189222713,\n        -0.0013913128027669144,\n        0.007724481151541255,\n        -0.06064592660561986,\n        -0.00032673586900435083,\n        -0.004293461320456303,\n        0.011817956316376851,\n        0.007986963708389194,\n        0.0289980507726635,\n        0.00451844650222919,\n        -0.042972113839267086,\n        0.032472819015930084,\n        -0.011792957755885958,\n        0.005215274623824167,\n        0.009424366966776924,\n        -0.01749882470556167,\n        0.001599892504594671,\n        -0.002874806749606101,\n        -0.008786909262194602,\n        0.015548955613723507,\n        -0.008730662966751379,\n        0.0035903837915692467,\n        -0.019948659419282245,\n        -0.0022139137094708172,\n        -0.017336334993693442,\n        -0.01652389015964259,\n        0.015011491219782182,\n        0.007018278336931551,\n        0.013149116158339573,\n        0.010699281444618996,\n        -0.010424299141864324,\n        -0.007955715042114293,\n        0.04167219986961155,\n        -0.008018211443341524,\n        0.03197285153140253,\n        -0.007824473996520967,\n        0.021473556708065524,\n        0.003943485198874099,\n        0.014149049264749546,\n        0.04039728632309205,\n        -0.013874067893317446,\n        -0.03707250944277082,\n        -0.0004218466628513859,\n        -0.011068006020908084,\n        -0.004271587812857415,\n        0.008680666777092167,\n        -0.01976117300956827,\n        -0.01982366847947293,\n        -0.011424232248274298,\n        -0.03522263459289623,\n        -0.0017483200605254861,\n        -0.02501082042123677,\n        -0.0162989049778697,\n        -0.004055977324099256,\n        0.0040528527368685376,\n        -0.03229783095513898,\n        -0.015148982371159518,\n        -0.009774343088359129,\n        1.783327384631908e-05,\n        0.005774612059703094,\n        -0.013661581991790005,\n        -0.007686983310804917,\n        -0.024048384224240563,\n        -0.004580942437795135,\n        -0.009286875815399588,\n        -0.02134856576825621,\n        -0.018698744433253638,\n        -0.03037295856114657,\n        -0.005637121373987044,\n        0.0037216248371625734,\n        0.004146596407386812,\n        -0.0035841341514465234,\n        0.005827733302254311,\n        0.02967300631798216,\n        -0.014736509848350083,\n        0.019161213145722285,\n        0.026248237058342505,\n        -0.01792379650861655,\n        0.005999596775814695,\n        0.00916188487559027,\n        -0.001723321732865237,\n        0.012949129537057577,\n        0.023348431981076154,\n        0.014711511287859191,\n        0.03214783959219363,\n        0.0004277056422587781,\n        0.012142933877468162,\n        -0.006918285026290554,\n        -0.030922923166655913,\n        -0.019048720554835842,\n        -0.026398226558642716,\n        -0.009355621391088255,\n        0.019336201206513387,\n        -0.006662052575226623,\n        0.013461595370508011,\n        0.027023184982979592,\n        0.04414703314382302,\n        0.01419904638573133,\n        -0.013874067893317446,\n        0.011617969695094855,\n        -0.013299106589962355,\n        -0.0012171057723681703,\n        -0.021936025420534175,\n        0.00037048291330595674,\n        -0.00451844650222919,\n        0.02257348405643907,\n        -0.013036624498775701,\n        0.0015553642261738943,\n        0.015923930295796605,\n        -0.02539829345223274,\n        -0.01284913622641658,\n        -0.01862374875178096,\n        -8.085394056026735e-05,\n        0.008536926451253394,\n        0.04027229538328273,\n        0.032772798016530505,\n        0.01163671814980174,\n        0.013761575302431002,\n        -0.009543108732124803,\n        -0.00755574226521159,\n        0.007249512693165875,\n        0.012936631188134705,\n        0.01377407458267645,\n        0.03539762265368733,\n        -0.017786305357239216,\n        0.0036716284146727177,\n        -0.005502755275501712,\n        0.047271825265507404,\n        0.0007589333673417601,\n        0.014336536605786094,\n        -0.005509004915624436,\n        0.0006968281798026374,\n        0.005134030233551339,\n        -0.021011087995596877,\n        -0.008630669656110382,\n        -0.014886499348650294,\n        0.026148242816378935,\n        -0.018248774069707863,\n        -0.009318123550351918,\n        0.014324037325540648,\n        -0.02124857152629264,\n        -0.029448021136209274,\n        -0.0077119818712958095,\n        -0.0056589948815859315,\n        0.03514763704877841,\n        -0.006943283586781446,\n        0.021936025420534175,\n        0.03164787210766607,\n        0.013436596810017118,\n        0.02674820268022492,\n        0.013474094650753457,\n        0.0024467105921511436,\n        -0.00814945248893485,\n        0.02619823993736072,\n        0.012961628817303023,\n        -0.010849270944919207,\n        -0.014649015817954532,\n        -0.0031529131739302047,\n        0.031697869228647854,\n        0.00015965723978313896,\n        -0.034472685228750036,\n        0.0011178936085348525,\n        0.0427471286574942,\n        -0.0063683222834263545,\n        -0.016786372250829244,\n        0.007986963708389194,\n        -0.03704750901963478,\n        -0.0027482528176894947,\n        0.004540320009828078,\n        -0.025273302512423424,\n        -0.023185942269207928,\n        0.008555674905960277,\n        -0.023660909330599448,\n        -0.005374638817139105,\n        -0.030122976681527934,\n        0.02548578748262829,\n        0.02128607029835155,\n        -0.007699482591050363,\n        -0.012755393021559593,\n        0.00644331703357646,\n        -0.015311471151705175,\n        -0.024073382784731454,\n        -0.013474094650753457,\n        0.030922923166655913,\n        -0.0051371548207820575,\n        0.009936832800227356,\n        0.019836166828395802,\n        -0.0025326423289313356,\n        -0.01184295394554517,\n        -0.01853625472138541,\n        0.010024326830622907,\n        0.027748135786634893,\n        -0.00232796859397262,\n        -0.020161146252132257,\n        -0.022548485495948175,\n        0.0052402727186537735,\n        0.008649419042139837,\n        0.011399233687783405,\n        -0.006930784306536,\n        -0.007943216693191419,\n        -0.013424098461094245,\n        0.003662253954488633,\n        0.013411599180848797,\n        0.0191112160247405,\n        -0.008343189004432837,\n        -0.007886970397748197,\n        -0.01718634549339323,\n        0.003234157797033676,\n        -0.041197232808220026,\n        -0.00867441760263073,\n        0.0035497615964328326,\n        -0.014998991939536736,\n        -0.02256098384487105,\n        0.00508403357823084,\n        -0.003784120772728518,\n        0.0005519160173370236,\n        0.012011692831874836,\n        0.011586721028819955,\n        0.0282730999690082,\n        0.03392272062324069,\n        -0.03837242341242635,\n        -0.004834050301628347,\n        -0.016923863402206578,\n        0.022860964708116615,\n        -0.014699012007613744,\n        -0.005355890362432222,\n        -0.02391089307286323,\n        0.017723809887334557,\n        0.023823399042467677,\n        -0.020161146252132257,\n        -0.007455748954570593,\n        -0.014424030636181645,\n        -0.0008515052594408541,\n        0.016548888720133482,\n        0.018098784569407653,\n        0.009499361716927028,\n        0.019711175888586483,\n        0.011455479983226628,\n        0.006718298405008559,\n        -0.025923257634606046,\n        -0.018886230842967613,\n        0.0029888616341079035,\n        -0.030022982439564364,\n        -0.006455816313821906,\n        -0.008774410913271727,\n        -0.02402338566374967,\n        0.009518110171633912,\n        -0.013449096090262564,\n        -0.004884046956948845,\n        0.010830522490212323,\n        -0.025898259074115155,\n        0.002045175055971795,\n        -0.020623614964600908,\n        -0.0014374033748030504,\n        -0.010518043278043884,\n        -0.012630401150427703,\n        -0.032497815713775836,\n        0.007543242984966144,\n        -0.03172286965178389,\n        0.011324238937633301,\n        -0.008793159367978611,\n        -0.0023185941337885356,\n        0.0057621127794576475,\n        0.02498582186074588,\n        0.018736241342667406,\n        -0.0011725774939473936,\n        0.001446777834987135,\n        -0.006705799590424399,\n        -0.0077369799661254155,\n        0.015811437704910163,\n        -0.009530609451879357,\n        -0.013949062643467552,\n        0.0135865872416399,\n        0.0365975423813793,\n        0.021486056919633543,\n        0.014736509848350083,\n        -0.0013874068358978732,\n        -0.017198843842316104,\n        -0.011361736778369639,\n        -0.02213601204181617,\n        0.0034091458578247784,\n        0.015761440583928376,\n        0.01701135743260213,\n        -0.008861904943667278,\n        0.006537060704094734,\n        0.011211746346746857,\n        0.005440259339935768,\n        0.007124521287695271,\n        -0.025423292012723635,\n        -0.014086553794844888,\n        -0.0053340163891720475,\n        0.0019608058456376054,\n        -0.007843223382550422,\n        -0.011455479983226628,\n        -0.010436798422109771,\n        -0.02399838710325878,\n        0.01886123228247672,\n        0.018761239903158297,\n        0.019311202646022495,\n        0.03629755965548859,\n        -0.005665244521708655,\n        -0.0005179339775195117,\n        -0.03459767616855935,\n        -0.01322411183981225,\n        -0.004134097127141366,\n        -0.00017684359004956036,\n        -0.004265338638395979,\n        -0.002717004849906522,\n        -0.011199247066501411,\n        0.009586855747322579,\n        0.007843223382550422,\n        -0.017611317296448114,\n        -0.009530609451879357,\n        0.002727941603705966,\n        0.007786976621445914,\n        0.012124185422761278,\n        -0.002062361449893962,\n        -0.01532397043195062,\n        0.03922236329324583,\n        -0.009243128800201813,\n        0.03829742586830853,\n        0.00882440710293094,\n        0.010968012710267087,\n        0.04067226862584672,\n        0.0047871782335385665,\n        0.00992433351998191,\n        -0.003621631759352219,\n        -0.011917949627017848,\n        -0.01236791905924105,\n        0.028173107589689775,\n        -0.0124554130896366,\n        0.003374773302811087,\n        -0.0028154358669321604,\n        -0.01967367897917272,\n        -0.010886768785655546,\n        -0.013236610188735124,\n        0.011892951066526955,\n        -0.02158604929895197,\n        -0.01536146827268696,\n        -0.02442335890631366,\n        0.03922236329324583,\n        0.003077918190949457,\n        -0.025235803740364514,\n        0.003521638448711222,\n        -0.0039653587064729864,\n        -0.009805590823311457,\n        0.02562327863400563,\n        -0.024160876815127005,\n        0.0022545359046072314,\n        -0.025085814240064303,\n        0.000612849426456966,\n        0.02124857152629264,\n        -0.029423022575718383,\n        -0.00401223030890148,\n        0.030347960000655677,\n        0.03322276838007628,\n        0.0006280827787369517,\n        0.02048612381322357,\n        0.24098381345222347,\n        0.005730865044505319,\n        0.009811840929095466,\n        0.028223102848026413,\n        0.005993347135691971,\n        0.0133116058702078,\n        -0.008693166057337613,\n        -0.010524292452505322,\n        0.012630401150427703,\n        0.015173980000327839,\n        -0.03507264322995087,\n        0.007568241545457036,\n        -0.01792379650861655,\n        0.007955715042114293,\n        -0.01943619358583181,\n        0.0011671091170476716,\n        -0.018811235161494935,\n        -0.030497951363601034,\n        -0.02399838710325878,\n        0.009155634769806261,\n        0.003399771630471337,\n        -0.032897788956339824,\n        -0.03297278277516735,\n        -0.023898394723940352,\n        0.026323230877170038,\n        -0.008018211443341524,\n        -0.00821194795883951,\n        0.01044304852789378,\n        0.047271825265507404,\n        -0.011486728649501529,\n        -0.026823198361697595,\n        -0.010174316330923118,\n        -0.008324440549725953,\n        0.003759122445068269,\n        -0.014036556673863103,\n        0.006605806279783402,\n        0.029598010636509485,\n        0.008049459178293854,\n        0.025510786043119186,\n        -0.024248370845522556,\n        -0.0219235270716113,\n        -0.01813628147882142,\n        -0.007943216693191419,\n        -0.021011087995596877,\n        0.015186479280573284,\n        -0.0043247095210699185,\n        0.01804878744842587,\n        -0.014361535166276987,\n        0.02957301207601859,\n        0.019611181646622913,\n        -0.005440259339935768,\n        -0.0011757021975934334,\n        0.005437134752705049,\n        0.02869807177206308,\n        0.0037309992973466577,\n        0.004252839358150532,\n        0.022585982405361943,\n        0.0027998117666253527,\n        -0.010155567876216234,\n        -0.004243464665135805,\n        -0.012474161544343483,\n        0.03969733407992764,\n        -0.0021967273155486505,\n        0.02451085293670921,\n        -0.021961023981025066,\n        0.0017389457167567232,\n        -0.02887305983285418,\n        0.008693166057337613,\n        -0.002837309374531048,\n        -0.00955560801237025,\n        -0.014686513658690871,\n        -0.013349102779621567,\n        0.008124453928443959,\n        -0.0031638499277296486,\n        -0.021073583465501537,\n        -0.013424098461094245,\n        0.02177353757131109,\n        0.007262011973411321,\n        0.020048653661245815,\n        0.028223102848026413,\n        0.0006019126726575222,\n        -0.007699482591050363,\n        -0.010411800792941451,\n        0.01741133067516612,\n        -0.031997848229248275,\n        -0.02112358058648332,\n        0.013449096090262564,\n        0.030022982439564364,\n        -0.011467979263472074,\n        -0.04492198293110525,\n        0.009711847618454469,\n        -0.01731133643320255,\n        -0.0001629773319945052,\n        0.009074389913872147,\n        -0.005808984847547428,\n        -0.00043786119104288155,\n        -0.010936764975314758,\n        0.002317031840173176,\n        -0.019386198327495174,\n        -0.003880989263308154,\n        -0.012542907120032152,\n        -0.013436596810017118,\n        0.015223977121309623,\n        -0.005277770559390112,\n        -0.0028404341945924096,\n        -0.010368053777743675,\n        0.01789879794812566,\n        0.002171728987888401,\n        0.01511148453042318,\n        -0.012561655574739034,\n        -0.022510986723889265,\n        -0.00882440710293094,\n        0.002176416334395765,\n        -0.00642456811320829,\n        -0.003234157797033676,\n        -0.018148779827744294,\n        -0.019011221782776932,\n        0.012649150536457158,\n        0.002079547843816129,\n        -0.005758988192226929,\n        0.0068307909958950025,\n        0.004430952471833639,\n        0.0015952052745026287,\n        0.008268194254282732,\n        0.0026935690486922753,\n        0.006468315594067352,\n        -0.00017020340562682784,\n        -0.012030441286581718,\n        0.014549022507313535,\n        -0.0127303944610687,\n        0.013336603499376121,\n        -0.032897788956339824,\n        0.003212284056604145,\n        -0.00894939897406283,\n        0.004499697581861021,\n        0.018411263781576093,\n        -0.019161213145722285,\n        -0.011736711460442736,\n        -0.010111820861018458,\n        -0.008836906383176387,\n        0.007880720291964188,\n        0.0035247632687725834,\n        -0.005512129502855154,\n        -0.006283952840261522,\n        -0.007624487840900258,\n        -0.028798064151381506,\n        0.026723204119734025,\n        -0.006315200575213851,\n        0.014236543295145097,\n        0.00728076089377949,\n        -0.03499764941112334,\n        -0.002645134686987136,\n        -0.011986694271383942,\n        -0.04389705126420439,\n        0.011980445096922506,\n        -0.018248774069707863,\n        -0.0013553777213072213,\n        -0.04052227726290137,\n        0.03727249420140767,\n        -0.0072057656779680995,\n        -0.014586520348049874,\n        -0.0016967609951743067,\n        0.01114300170238076,\n        0.0037309992973466577,\n        -0.049746658539718866,\n        -0.01926120552504071,\n        -0.15408964420032567,\n        0.007861971837257306,\n        0.023723406663149253,\n        -0.009393119231824594,\n        0.020873596844219543,\n        -0.008655668216601275,\n        0.017486324493993653,\n        0.007674484496220757,\n        -0.010236811800827776,\n        0.02113608079805134,\n        -0.021611047859442862,\n        -0.04034728920211027,\n        0.005534003010454042,\n        -0.01951118926730449,\n        -0.012642900430673149,\n        -0.016573887280624373,\n        0.0006550340898317217,\n        0.0020358008286183536,\n        0.04029729208112848,\n        0.00311385327240915,\n        0.03389772392539494,\n        -0.0067370473253767285,\n        0.010536791732750768,\n        0.02459834696710476,\n        0.006512062609265128,\n        -0.0033310262876133116,\n        -0.014424030636181645,\n        0.04092225050546536,\n        0.00019402992576406658,\n        -0.037972450169862365,\n        0.002292033512512927,\n        -0.0004898108297979008,\n        0.008280693534528177,\n        -0.022935958526944147,\n        0.010618036588684883,\n        -0.020536120934205357,\n        0.028498085150781085,\n        -0.027023184982979592,\n        0.01779880370616209,\n        0.00603084497642831,\n        0.04762180138708961,\n        0.029772998697300587,\n        0.021023588207164896,\n        -0.015198978560818732,\n        -0.020186142949978007,\n        0.010924265695069312,\n        0.03907237565559076,\n        0.014024057393617655,\n        0.006524561423849287,\n        0.0017248841428959176,\n        0.012349170604534165,\n        -0.016473893038660804,\n        0.010955514361344213,\n        -0.00489967082442501,\n        0.02219850937436597,\n        0.0230234525573397,\n        -0.003181036321651816,\n        0.029273033075418172,\n        -0.0289980507726635,\n        0.026248237058342505,\n        -0.012774141476266475,\n        -0.022935958526944147,\n        0.00485279875633523,\n        0.0005624621977326276,\n        -0.0027982494730099936,\n        -0.0026482595070484974,\n        -0.02306095132939861,\n        0.024485854376218318,\n        -0.015086485969932287,\n        0.02047362360165555,\n        -0.006352697950288904,\n        -0.023498421481376364,\n        0.013974061203958443,\n        -0.013561588681149008,\n        -0.014324037325540648,\n        -0.0012210117392372113,\n        -0.02396089019384501,\n        0.031622875409820325,\n        -0.0022264129897162635,\n        -0.034547679047577565,\n        -0.0206486135250918,\n        0.029498018257191057,\n        0.030697937984883027,\n        -0.005302768654219718,\n        -0.018948726312872272,\n        0.016723876780924584,\n        -0.006624554734490285,\n        0.002951364259032851,\n        -0.02232350031417529,\n        -0.0141365499845041,\n        0.022598480754284816,\n        -0.014911497909141185,\n        -0.016898864841715686,\n        -0.034297697167958933,\n        -0.0030810430110108184,\n        0.006912035386167831,\n        -0.0032716551721087284,\n        0.006187084116851243,\n        -0.007293260174024937,\n        -0.03532262510956951,\n        0.02054861928312823,\n        0.017261339312220764,\n        -0.020661111874014673,\n        -0.028323097089989983,\n        0.03489765516915977,\n        0.007062025352129327,\n        -0.0073932530190046475,\n        0.02061111475303289,\n        0.013011625938284808,\n        0.001388187982705553,\n        -0.007405752299250094,\n        -0.013999059764449337,\n        0.03077293180371056,\n        0.03174786634962964,\n        0.005993347135691971,\n        0.011792957755885958,\n        0.018511256160894517,\n        0.004915294691901175,\n        0.016886364630147668,\n        0.020936094176769345,\n        0.028498085150781085,\n        -0.02461084717867278,\n        0.0032435320243871177,\n        -0.02113608079805134,\n        -0.005743364324750764,\n        0.007080774272497496,\n        -0.07874470931238237,\n        -0.05349640536044984,\n        0.00384036706817174,\n        0.031622875409820325,\n        0.012192930998449947,\n        0.011836704771083733,\n        0.00843068396615096,\n        0.016986358872111237,\n        -0.013861568613072,\n        0.019173711494645158,\n        0.0029373026851720455,\n        -0.012861635506662026,\n        -0.016673879659942797,\n        -0.03337275601773135,\n        0.020948592525692217,\n        -0.029498018257191057,\n        0.008393186125414622,\n        0.018586251842367195,\n        -0.032647807076721186,\n        0.0008757223820857631,\n        -0.007337007189222713,\n        -0.015711443462946593,\n        -0.0019748674194984108,\n        -0.012130434597222716,\n        -0.0053340163891720475,\n        -0.008961898254308275,\n        -0.026273235618833397,\n        0.012517908559541258,\n        0.005452758620181214,\n        0.012961628817303023,\n        -0.02829809852949909,\n        -0.025823265255287622,\n        0.005990222548461253,\n        -0.008493179436055619,\n        0.01282413859724826,\n        0.00574023927185876,\n        -0.02482333214887765,\n        0.004359082308914253,\n        0.02634822943766093,\n        -0.018998723433854055,\n        0.010936764975314758,\n        0.025410791801155616,\n        0.02562327863400563,\n        -0.02384839760295857,\n        0.01193669808172473,\n        0.007868221011718742,\n        -0.012274174923061489,\n        0.019948659419282245,\n        0.010136818490186779,\n        -0.005371514229908386,\n        -0.056496202817034616,\n        -0.01789879794812566,\n        -0.019048720554835842,\n        -0.00516215338127295,\n        0.03087292604567413,\n        -0.02317344205763991,\n        0.023835899254035696,\n        0.013174114718830465,\n        -0.011311739657387854,\n        0.005812109434778146,\n        0.017048854342015897,\n        -0.01443652991642709,\n        -0.03794744974672633,\n        0.017586318735957222,\n        0.0012452288036744596,\n        0.011267992642190078,\n        -0.017236342614375018,\n        0.011867952506036063,\n        0.03992231926170053,\n        0.0013092870328557636,\n        -0.019223708615626944,\n        0.025273302512423424,\n        -0.015761440583928376,\n        0.04247214635473953,\n        -0.010111820861018458,\n        0.012386667513947932,\n        0.0057621127794576475,\n        -0.0028388716681464073,\n        -0.0011975758216076428,\n        0.008280693534528177,\n        -0.028898058393345076,\n        0.0039028627709070418,\n        -0.018273772630198755,\n        0.003396646810409975,\n        0.01968617732809559,\n        0.016798870599752116,\n        -0.013436596810017118,\n        0.019036220343267823,\n        0.017386332114675225,\n        -0.04117223238508399,\n        -0.006349573363058185,\n        0.025135811361046086,\n        0.029847994378773262,\n        -0.001828002157182955,\n        0.0017545695842328879,\n        0.00916188487559027,\n        0.019986156328696013,\n        0.016311403326792574,\n        0.016986358872111237,\n        0.020923593965201326,\n        -0.044372018325595904,\n        -0.021323567207765317,\n        -0.058096095787290566,\n        0.02907304645413618,\n        -0.018248774069707863,\n        -0.018886230842967613,\n        0.011767959195395066,\n        0.009305625201429043,\n        0.009824340209340914,\n        0.010461796982600663,\n        -0.006637054014735731,\n        -0.008193199504132626,\n        -0.0023373430541567047,\n        -0.011280491922435526,\n        -0.015498958492741723,\n        -0.0016983234052049875,\n        -0.01734883520526146,\n        0.006543310344217457,\n        0.016073919796096816,\n        0.01123674490723775,\n        -0.0018967475000409798,\n        -0.004315334828055191,\n        -0.0071995160378453766,\n        -0.020911095616278453,\n        0.011136751596596751,\n        -0.031322896409219904,\n        -0.01697385866054322,\n        -0.009749344527868235,\n        -0.009636852868304364,\n        0.025723271013324053,\n        -0.0012842887051955144,\n        -0.034847658048177986,\n        0.006780794340574504,\n        -0.025510786043119186,\n        0.003777871132605795,\n        0.010305557376516445,\n        -0.00024256182895675962,\n        0.02257348405643907,\n        -0.010943015081098767,\n        -0.0028560580620685745,\n        0.02634822943766093,\n        -0.010824272384428313,\n        -0.0360225810780242,\n        -0.03212284289434788,\n        0.009880586504784135,\n        -0.0036185069392908574,\n        -0.018911229403458508,\n        0.014611517977218193,\n        -0.025673275754987412,\n        -0.007799475901691361,\n        0.018561253281876303,\n        -0.0072057656779680995,\n        0.006158960969129632,\n        0.019073719115326734,\n        -0.024360863436409003,\n        -0.011517976384453859,\n        -0.007699482591050363,\n        -0.037897452625744545,\n        0.0008147890311734813,\n        -0.027948122407916887,\n        -0.0030997916985483448,\n        -0.020748605904410224,\n        0.00205454951615588,\n        0.014061555234353994,\n        0.03664753950236108,\n        0.0012952254589949583,\n        0.0015303658985136449,\n        -0.011411732968028852,\n        0.004502822634753025,\n        -0.016073919796096816,\n        -0.01741133067516612,\n        0.007130770927817994,\n        -2.394858705886448e-05,\n        -0.010861770225164652,\n        -0.011380485233076523,\n        -0.002415462624368171,\n        0.021411061238160868,\n        0.005046535737494502,\n        0.005733989631736037,\n        0.007774477806861754,\n        -0.03432269386580468,\n        0.03299778319830339,\n        0.021261071737860657,\n        -0.006449566673699183,\n        -0.01618641238698326,\n        0.0014592769988172596,\n        0.05419635760361425,\n        0.02213601204181617,\n        0.0050277872827876186,\n        -0.027623144846825574,\n        0.010761776914523655,\n        -0.003390397170287252,\n        -0.009961830429395677,\n        0.000942905373120768,\n        0.002067048563570683,\n        0.04424702738578659,\n        0.019236206964549817,\n        -0.006512062609265128,\n        0.01282413859724826,\n        -0.0008155701779811609,\n        -0.004759055085816956,\n        -0.007849472557011858,\n        0.0002462725091238809,\n        0.004168469914985699,\n        -0.016448894478169912,\n        -0.013811572423412787,\n        -0.024210873936108792,\n        -0.017211344053884123,\n        -0.013111619248925807,\n        -0.007474497874938762,\n        0.0032841544523541746,\n        0.01108050530115353,\n        0.012642900430673149,\n        0.006930784306536,\n        0.027723137226144,\n        0.00934312211084281,\n        -0.023535918390790132,\n        -0.014186547105485885,\n        -0.0031732243879137333,\n        0.017586318735957222,\n        -0.021173577707465106,\n        0.02159854951051999,\n        1.6295291024282885e-05,\n        0.023648410981676575,\n        0.016036422886683048,\n        -0.0020217392547575482,\n        -0.009243128800201813,\n        0.02046112525273268,\n        0.008355688284678283,\n        0.012924131907889257,\n        0.0018045662395533863,\n        -0.01284913622641658,\n        0.011374236058615086,\n        -0.026223238497851614,\n        -0.019861165388886694,\n        -0.033347759319885595,\n        0.003921611691275211,\n        0.0024935824274102806,\n        0.00270919291616844,\n        0.017936294857539427,\n        0.006062092711380639,\n        0.05259646463335829,\n        0.003893488310722957,\n        -0.02459834696710476,\n        -0.0009889960033645647,\n        -0.007287010533902213,\n        0.023223439178621692,\n        0.03889738759479966,\n        -0.002749815344135497,\n        -0.0023998387568920066,\n        -0.023260937950680603,\n        0.01233042121850471,\n        -0.0016530139799765312,\n        -0.012692897551654933,\n        -0.015461461583327956,\n        0.007230764238458992,\n        0.011024259005710309,\n        -0.01877373825208117,\n        0.01377407458267645,\n        -0.03287279225849408,\n        0.02747315348388022,\n        0.01877373825208117,\n        0.007843223382550422,\n        0.003834117428049017,\n        0.01258040496076849,\n        -0.017936294857539427,\n        0.00728076089377949,\n        -0.008155701663396287,\n        -0.008586922640912606,\n        -0.02113608079805134,\n        -0.03829742586830853,\n        0.002338905347772064,\n        -0.008886902572835599,\n        -0.03172286965178389,\n        -0.029623009197000377,\n        0.005790235927179258,\n        0.02564827719449652,\n        -0.006068342351503363,\n        0.018511256160894517,\n        -0.003871614803124069,\n        0.008593172746696616,\n        0.012167932437959054,\n        0.013349102779621567,\n        -0.028748068893044865,\n        -0.04242214923375774,\n        -0.028648074651081296,\n        0.004615314759978183,\n        -0.0367725304421704,\n        0.00485279875633523,\n        -0.032772798016530505,\n    ],\n    [\n        -0.013231909337196666,\n        -0.0071878863997157875,\n        -0.002599520461346871,\n        -0.007763507565333781,\n        -0.002571846442963719,\n        0.0060366436028184995,\n        -0.021238949847550613,\n        0.002202858289424884,\n        -0.024589360568049643,\n        -0.024855031517056946,\n        -0.004619729856913909,\n        0.012582490634003166,\n        0.009940537019287083,\n        0.014087961518130625,\n        -0.020781404090127607,\n        -0.04035252837775239,\n        0.01881838837989975,\n        0.017062005216089745,\n        0.03754821915591532,\n        -0.0022711212095882813,\n        -0.011512426106327672,\n        0.0016327718576343263,\n        -0.008737636085785332,\n        -0.002416871334658374,\n        -0.034183048834768935,\n        0.019039780526964964,\n        0.010944184275372056,\n        -0.021475101595263193,\n        0.015571293932609646,\n        0.003272923515592333,\n        0.04460327101245007,\n        -0.02956331804653242,\n        -0.018464159827008275,\n        -0.019039780526964964,\n        -0.012870301915304116,\n        -0.02808736729502229,\n        -0.021342265189436938,\n        -0.00979294194413607,\n        0.030434130759436347,\n        -0.006623334468922014,\n        0.02873678599821579,\n        -0.006781999244558548,\n        -0.004058867826281976,\n        -0.017504791372865387,\n        -0.023467636506785777,\n        0.008899990761583708,\n        -0.008110355852240271,\n        -0.0035902532996960534,\n        -0.035983708937875815,\n        0.009660105538309814,\n        0.04584307001624762,\n        0.006062472903951383,\n        -0.04371769869889878,\n        -0.00020605674166526851,\n        -0.02095851929789595,\n        0.002990647783026098,\n        -0.006682372871511461,\n        0.0034869365608258232,\n        -5.848315787476442e-06,\n        -0.012073287205636999,\n        -0.0017360885965045565,\n        0.006158409842497932,\n        -0.02038289673529405,\n        0.029327166298819842,\n        -0.02047145433917822,\n        -0.005841080291224863,\n        -0.02023530259146564,\n        0.03616082414564416,\n        0.004619729856913909,\n        0.014899735828445105,\n        0.009697004539928219,\n        0.009623207468014015,\n        -0.02097327889854331,\n        0.010095511894761778,\n        0.032087196718714815,\n        -0.009999574490553926,\n        -0.010803969000544724,\n        0.019320211076619628,\n        -0.009121383839971528,\n        -0.0018855287381518153,\n        0.011534564575976108,\n        -0.03852234907335078,\n        -0.03447823712242575,\n        0.01327618813913875,\n        0.0015193081261496862,\n        -0.009246839514151499,\n        0.0029814230326214966,\n        0.029253368295583032,\n        -0.0109663236763431,\n        -0.007523665451798059,\n        0.006634404169407535,\n        0.02399898026744559,\n        0.03055220570197003,\n        0.015032571302948756,\n        0.001968551026131923,\n        0.021017555837840186,\n        -0.016589699858019377,\n        0.04855882163420051,\n        0.015467976728078113,\n        -0.030035623404602786,\n        -0.01825752541794521,\n        -0.014110100919101668,\n        -0.01560081313390437,\n        -0.02546017141830836,\n        -0.0036289970185647267,\n        -0.021268469048845336,\n        0.01803613327087999,\n        0.0019408768913334452,\n        0.005534819974776013,\n        -0.010014334091201288,\n        -0.023408598104196328,\n        0.046226815907788606,\n        -0.0033688604541388827,\n        -0.04495749770269633,\n        0.007335481474866801,\n        -0.02308388875259958,\n        0.005988675366375876,\n        -0.008981167633821592,\n        -0.0062986251173252645,\n        -0.0019353420410906845,\n        0.018715071175368216,\n        0.030286534752962727,\n        -0.0013624881841787463,\n        -0.012051147804665957,\n        0.03176248550447286,\n        0.009180421311238371,\n        -0.03630842015211777,\n        0.005354015798168436,\n        -0.027556023534362473,\n        -0.021814570547507305,\n        0.04628585431037805,\n        0.02643430133574382,\n        0.019438287881798525,\n        -0.00551268057380497,\n        -0.00723216473599657,\n        0.010058612893143373,\n        0.00041211348333053703,\n        0.006627024369083854,\n        -0.009003307034792634,\n        -0.032234792725188435,\n        0.01273746550947786,\n        0.015349900854221825,\n        -0.003184366377369465,\n        0.00925421931447518,\n        -0.010383322244740123,\n        0.03636745855470722,\n        0.013586137890088138,\n        0.025740603830608232,\n        -0.008427686334835944,\n        -0.019866314437926805,\n        0.003103189039470278,\n        -0.01874459037666294,\n        0.007313342073895758,\n        -0.019275932274677544,\n        -0.010656373925393712,\n        0.00949775086251144,\n        -0.02497310832223584,\n        0.020176264188876195,\n        0.019615401226921656,\n        0.014493848673287865,\n        0.02996182540136598,\n        0.02588819797443664,\n        0.01412486051974903,\n        -0.025548729022192528,\n        0.013512340818173934,\n        0.029194329892993583,\n        0.032707096220613595,\n        0.010080752294114415,\n        -0.023939941864856144,\n        -0.004431545879982651,\n        0.03436016404253728,\n        0.00591487782880037,\n        -0.020781404090127607,\n        0.01186665372789654,\n        -0.003933412152102005,\n        0.019703958830805827,\n        -0.0071768166992302665,\n        0.0018809163629495147,\n        -0.016161675164536305,\n        0.006283865516677902,\n        -0.025342096475774675,\n        -0.006272795816192381,\n        0.03261853861672942,\n        0.010582575922156902,\n        0.0009519890612728459,\n        -0.013379505343670283,\n        0.013903467441361207,\n        0.0072948925730865555,\n        0.00019810043809704716,\n        0.0017416233303319914,\n        0.003269233615430493,\n        0.03341555332639654,\n        0.031172107066514017,\n        0.0024998936226384816,\n        -0.5969930487289206,\n        -0.004191703766446929,\n        -0.02023530259146564,\n        -0.03309084211215458,\n        -0.018729830776015578,\n        0.001247179502613186,\n        0.0037101743564639145,\n        -0.01446432947199314,\n        -0.00949775086251144,\n        0.042684530378873875,\n        -0.025740603830608232,\n        0.018892186383136556,\n        0.029681394851711316,\n        -0.005018236746086166,\n        -0.01187403352822022,\n        -0.023910422663561418,\n        -0.0032987528167252164,\n        -0.038788018159712875,\n        -0.017416233768981215,\n        0.015541774731314923,\n        -0.015143267376481364,\n        0.018213248478648334,\n        0.006656543570378578,\n        -0.013180251666253504,\n        0.0009017144043984211,\n        -0.0012416446523704253,\n        0.00669713200649752,\n        -0.02565204622672406,\n        0.019630160827569017,\n        0.03170345082717383,\n        -0.016028838758710046,\n        -0.001725018896019035,\n        0.010774449799250001,\n        -0.027792177144720265,\n        0.030758840111033095,\n        0.004379887743378187,\n        -0.031821523907062305,\n        0.01326880833881507,\n        0.0016927325024335823,\n        0.03495054434314133,\n        -0.028707266796921066,\n        0.0040662476266056565,\n        0.007132537897288181,\n        -0.03320891891733348,\n        -0.00495181900883434,\n        0.005438883036229464,\n        0.02261158525717442,\n        0.01530562205227974,\n        -0.0002721286526403315,\n        -0.019792516434689995,\n        0.005007167045600644,\n        0.00029957213957486285,\n        0.006018194102009297,\n        0.016161675164536305,\n        0.026950883633111062,\n        0.022286875905577673,\n        0.017681904717988518,\n        -0.01906929972825969,\n        -0.014774279222942529,\n        -0.007844684903232969,\n        0.011165577353759878,\n        0.010036473492172331,\n        -0.006497878794742043,\n        0.007165746998744745,\n        -0.0016364617577961666,\n        0.020988036636545464,\n        -0.005095724183823512,\n        0.008272710528038645,\n        0.0015700439041290155,\n        -0.002924229812943621,\n        -0.008870471560288983,\n        -0.012722705908830498,\n        -0.024707437373228537,\n        0.011785476855658655,\n        0.021238949847550613,\n        0.034921025141846605,\n        0.02733463138729726,\n        -0.017534310574160113,\n        -0.00409945672806222,\n        -0.001409534178411561,\n        0.0022840356273240714,\n        -0.00831698932998073,\n        -0.025858678773141918,\n        -0.011593602978565556,\n        0.031969119913535925,\n        -0.011283653227616168,\n        -0.015482736328725476,\n        0.029548558445885057,\n        0.016501144116780414,\n        0.02234591244552191,\n        0.005774662088311735,\n        0.025164981268006332,\n        0.010065992693467054,\n        -0.008575281409986956,\n        0.0037212440569494355,\n        0.017490031772218025,\n        -0.005767282287988054,\n        0.00859004101063432,\n        0.016766815065787716,\n        -0.025593007824134616,\n        -0.021504620796557915,\n        0.011910932529838625,\n        0.015003052101654032,\n        -0.011689539451450803,\n        -0.005154762586412959,\n        -0.013409023613642402,\n        -0.01899550172502288,\n        0.00551268057380497,\n        0.033445072527691265,\n        -0.028057848093727567,\n        -0.017667145117341156,\n        -0.04690575381227683,\n        -0.030316053954257453,\n        0.009364915388007789,\n        0.0009584463283484039,\n        -0.031024511060040397,\n        0.007165746998744745,\n        -0.017755702721225328,\n        0.016161675164536305,\n        -0.007623292290506448,\n        -0.001445510472158854,\n        -8.352677743179604e-06,\n        0.015836965812939554,\n        -0.011446007903414542,\n        0.012722705908830498,\n        0.0034795567605021426,\n        -0.003852234814202818,\n        -0.01306217486107461,\n        -0.014250316193929,\n        -0.03716447326437434,\n        -0.004191703766446929,\n        -0.003176986577045784,\n        0.011933071930809667,\n        -0.012966238388189364,\n        0.02974043325430076,\n        -0.0045643813544863025,\n        0.009423953790597236,\n        -0.004106836528385902,\n        0.004051488025958294,\n        -0.009586308466395611,\n        -0.03335651492380709,\n        -0.020279581393407728,\n        0.015379420055516548,\n        -0.025932476776378728,\n        -0.021534139997852638,\n        -0.008361268131922816,\n        -0.013209770867548229,\n        -0.02892865894398628,\n        0.01097370347666678,\n        0.02978471205624285,\n        0.006815208346015112,\n        -0.005678725149765186,\n        -0.027083720038937317,\n        0.015984559956767962,\n        -0.005468402237524188,\n        -0.00819891345612444,\n        0.011446007903414542,\n        -0.004538552519014721,\n        -0.01399940484556906,\n        0.006553226831508348,\n        -0.012316819684995864,\n        0.006431461057490218,\n        -0.011431248302767181,\n        0.001802506333756382,\n        0.018715071175368216,\n        -0.0034168289234121573,\n        0.0062506568808826405,\n        0.030094661807192235,\n        -0.00978556214381239,\n        -0.025371615677069397,\n        0.014707861951352007,\n        0.00860480061128168,\n        0.014774279222942529,\n        -0.004815293634168848,\n        -0.0118814133285439,\n        0.01260463003497421,\n        -0.017534310574160113,\n        0.022213077902340863,\n        -0.02048621393982558,\n        0.007114088862140281,\n        -0.013748492565886514,\n        0.02179981094685994,\n        -0.013047416191749853,\n        -0.014287215195547405,\n        0.039083210172660116,\n        0.014161759521367435,\n        0.01734243576574441,\n        -0.004438925680306332,\n        0.020840442492717055,\n        0.014309354596518447,\n        -0.001905823072626612,\n        -0.0037821269439585006,\n        -0.00893688976320211,\n        0.028441595847913764,\n        -0.012951478787542001,\n        -0.022449229650053443,\n        0.012848162514333074,\n        0.0035994780501006547,\n        -0.006490498994418363,\n        0.03158537402199494,\n        0.03474390993407826,\n        0.014929254098417223,\n        0.02326100396036792,\n        -0.030065142605897512,\n        -0.001994380094434155,\n        -0.026449059073745968,\n        0.016043598359357408,\n        -0.012789124111743627,\n        -0.006763550209410649,\n        0.023939941864856144,\n        0.003293217966482456,\n        -0.011379589700501415,\n        0.0066786829713496206,\n        0.005793111589120937,\n        0.020530492741767666,\n        0.035245732630798145,\n        -0.010280005971531196,\n        0.01924641493602803,\n        -0.0009220087970808807,\n        -0.005368775398815798,\n        -0.01433149399748949,\n        0.023880903462266696,\n        0.006516328295551246,\n        0.014316734396842128,\n        -0.030434130759436347,\n        -0.02915005295369671,\n        0.0007905568023072685,\n        0.030197977149078556,\n        -0.009645345937662453,\n        -0.00034108328356491667,\n        -0.017165322420621278,\n        0.00508096458317615,\n        0.009121383839971528,\n        0.008663838082548524,\n        0.006970183221489806,\n        -0.004531172718691041,\n        0.02252302765329025,\n        0.0026899225496506596,\n        0.011763337454687611,\n        -0.020988036636545464,\n        -0.025430652217013634,\n        -0.00011081171033076935,\n        0.015482736328725476,\n        0.004007209689677512,\n        0.01669301706255091,\n        0.0029352995134291422,\n        0.02848587278721064,\n        0.005534819974776013,\n        -0.0007305962157156752,\n        0.0306407633058542,\n        -0.03078835931232782,\n        0.002435320835467576,\n        -0.02210976069780933,\n        -0.002512808273204923,\n        -0.0178442603251095,\n        -0.015822206212292193,\n        -0.016220711704480542,\n        0.012899820185276235,\n        0.021888368550744112,\n        0.017977094868290546,\n        0.0025072734229621622,\n        0.006014504201847457,\n        0.011615742379536598,\n        -0.0049924074449532825,\n        0.005796801489282778,\n        -0.018449400226360914,\n        0.011652641381155003,\n        -0.025194500469301058,\n        -0.004217533067579812,\n        -0.01563033140387649,\n        -0.03350411093028071,\n        -0.00430240030564084,\n        -0.0012231952679765488,\n        -0.01215446500919749,\n        0.04758469171676505,\n        0.011446007903414542,\n        0.022744419800355468,\n        -0.004221222967741653,\n        0.01586648315158907,\n        0.010730170997307916,\n        0.0044942737170726365,\n        -0.03663312764106931,\n        0.027157516179528916,\n        -0.0011475526639047964,\n        -0.0033743953043816432,\n        -0.016176434765183666,\n        -0.029445243103998736,\n        -0.012619389635621571,\n        0.01703248601479502,\n        0.012464414760146878,\n        -0.008494103606426467,\n        0.016427346113543607,\n        -0.008959028232850549,\n        0.005036686246895367,\n        0.0013016051807543559,\n        0.014250316193929,\n        0.040854351074472266,\n        -0.02661141468086695,\n        -0.008508863207073829,\n        -0.027969290489843396,\n        0.002682542749326979,\n        -0.0090549656370584,\n        -0.011763337454687611,\n        0.0221983183016935,\n        0.04120858149000895,\n        0.017327676165097047,\n        0.008095597182915514,\n        -0.013386885143993965,\n        0.01744575297027594,\n        -0.024205612813863447,\n        0.0086343188812538,\n        0.0032489393973710217,\n        -0.001681662801948061,\n        0.0035164557621205467,\n        0.025342096475774675,\n        -0.0022231527403150063,\n        -0.0014224487125626768,\n        0.00032932178500671305,\n        -0.009032826236087359,\n        0.016324028909012075,\n        -0.014036303847187464,\n        -0.014907115628768786,\n        0.005520060374128652,\n        -0.008626939080930119,\n        0.004335608941436102,\n        0.00017330905235192297,\n        -0.0053724652989776385,\n        0.009726523741222943,\n        -0.026596655080219588,\n        0.014611924547144155,\n        -0.028648228394331617,\n        -0.013696834894943352,\n        0.016250230905775265,\n        -0.017416233768981215,\n        -0.02205072229521988,\n        -0.020751884888832884,\n        -0.001332046740674214,\n        -0.008250572058390207,\n        0.030257015551668005,\n        -0.012006869934046475,\n        0.0059185677289622105,\n        -0.005911187928638529,\n        0.027556023534362473,\n        -0.02824972103949806,\n        0.008353888331599136,\n        0.027452708192476152,\n        -0.0005816173115886464,\n        0.035688520650219,\n        -0.0066786829713496206,\n        -0.005250699059298206,\n        0.0048854012715825144,\n        0.0034020693227647955,\n        0.019054540127612325,\n        -0.0424483804938065,\n        -0.018287044619239932,\n        0.01898074212437552,\n        -0.004689837494327575,\n        0.02900245694722309,\n        -0.01778522192252005,\n        0.03226431192648316,\n        -0.0006425003732206997,\n        0.039525994466790546,\n        0.03406497202959004,\n        0.002453770103446127,\n        0.002341228847001947,\n        0.011077019749875707,\n        0.017622866315399072,\n        -0.01163788178050764,\n        0.028500632387858,\n        0.0028762615765009973,\n        -0.037725334363683666,\n        0.01057519612183322,\n        -0.000765650092630171,\n        -0.001196443608218531,\n        -0.00991101781799236,\n        0.010029093691848649,\n        -0.024869791117704307,\n        -0.03828619546299299,\n        0.005568029076232577,\n        0.020072946984344663,\n        -0.018552717430892447,\n        -0.0018301804685548597,\n        0.010125031096056501,\n        -0.004165874465314046,\n        -0.012191364010815893,\n        -0.020766644489480245,\n        0.006339214019105509,\n        -0.011704299052098164,\n        0.01261200983529789,\n        -0.016176434765183666,\n        -0.012220882280788012,\n        -0.00699970242278453,\n        -0.015349900854221825,\n        -0.004276571004507957,\n        0.028559670790447446,\n        -0.005553269475585216,\n        -0.008058698181297109,\n        -0.000550253334835991,\n        0.012397996557233748,\n        0.010501398118596413,\n        0.009423953790597236,\n        0.000830222996216402,\n        0.003440813041633469,\n        -0.006187928578131353,\n        -0.0005954543789878852,\n        -0.06252132561550595,\n        0.011851895058571782,\n        -0.039260321655138035,\n        0.004914920007215935,\n        0.002854122175529955,\n        0.044573751811155346,\n        -0.018228008079295695,\n        -0.029858508196834447,\n        0.02253778725393761,\n        0.004453685280953694,\n        -0.01518754617842345,\n        0.00926159911479886,\n        -0.023482396107433138,\n        -0.0015838810297359172,\n        -0.0013920072690581443,\n        -0.018951222923080793,\n        0.023880903462266696,\n        -0.01908405932890705,\n        0.005210110623179264,\n        0.005114173684632715,\n        -0.025666805827371426,\n        -0.021607938001089448,\n        0.003474022143090033,\n        0.01400678464589274,\n        0.015836965812939554,\n        0.028692507196273705,\n        0.012951478787542001,\n        -0.005962846065242993,\n        -0.00723216473599657,\n        0.047053349818750444,\n        -0.01293671918689464,\n        0.02866298799497898,\n        -0.01269318763885838,\n        0.010981083276990461,\n        -0.0008325291838175523,\n        0.009114004039647848,\n        0.010014334091201288,\n        -0.02736415058859198,\n        -0.02267062365976387,\n        0.023925182264208783,\n        -0.0029998725334306987,\n        0.014427430470374737,\n        0.03350411093028071,\n        -0.019143097731496497,\n        -0.0009649035954239619,\n        -0.018656032772778768,\n        -0.03586563213269692,\n        0.0011512425640666367,\n        -0.014567646676524673,\n        -0.01261200983529789,\n        -0.0006803216170489131,\n        0.007136227797450021,\n        -0.03914224857524956,\n        -0.04498701690399105,\n        -0.015615571803229127,\n        -0.0203238583327046,\n        0.006996012522622689,\n        -0.01802137367023263,\n        -0.012929339386570959,\n        -0.019703958830805827,\n        0.01647162491548569,\n        0.018596994370189322,\n        -0.022936294608771172,\n        -0.019467807083093248,\n        -0.026271945728622837,\n        -0.002053418264192951,\n        0.006217447779426077,\n        -0.006818898246176952,\n        -0.0022323774907196075,\n        -0.011165577353759878,\n        0.029592837247827145,\n        -0.01892170558443128,\n        -0.009571548865748248,\n        0.03500958274573077,\n        -0.010176688766999663,\n        0.020279581393407728,\n        0.027319871786649897,\n        0.016589699858019377,\n        0.017918056465701097,\n        0.03636745855470722,\n        0.00949037106218776,\n        0.004213843167417972,\n        0.008730256285461651,\n        0.018154210076058885,\n        0.00012268851099307265,\n        -0.022892015806829084,\n        -0.015143267376481364,\n        -0.033149880514744025,\n        0.005877978827181965,\n        0.011586223178241874,\n        0.002470374654174409,\n        -0.0030533756201160827,\n        0.00945347299189196,\n        0.02931240669817248,\n        0.019453047482445886,\n        -0.03961455207067472,\n        -0.016220711704480542,\n        -0.008826192758346897,\n        -0.004881711371420673,\n        -0.014176519122014796,\n        0.013320466941080836,\n        -0.0022508267586981586,\n        0.03306132663615028,\n        -0.013209770867548229,\n        -0.0015995629890084135,\n        0.021976926154628283,\n        -0.025017387124177923,\n        -0.0015349900854221825,\n        0.001595873088846573,\n        -0.005523750274290492,\n        0.009364915388007789,\n        0.04448519420727117,\n        0.007169436898906586,\n        0.01219874287981697,\n        -0.006579056132641231,\n        0.00010291306145257675,\n        -0.022316395106872396,\n        0.008855711959641622,\n        0.010405461645711166,\n        -0.0018652344036770184,\n        0.0332384381186282,\n        0.003623462168321966,\n        -0.010213587768618066,\n        -0.005723003951707271,\n        0.033887856821821695,\n        -0.009851979415402914,\n        -0.014471709272316823,\n        -0.012988377789160406,\n        -0.0021382855022539786,\n        -0.005948086464595631,\n        -0.04209415007826982,\n        -0.020589531144357114,\n        -0.023939941864856144,\n        0.02588819797443664,\n        -0.0009081717296816419,\n        -0.016722536263845632,\n        0.016279750107069987,\n        -0.0013523410751490107,\n        -0.02398422066679823,\n        0.0015469821445328383,\n        -0.012287300483701141,\n        0.039407917661611655,\n        -0.0017914367496861862,\n        0.022641104458469143,\n        0.03250046181155053,\n        0.005394604699948681,\n        0.028146403834966527,\n        0.018611753970836684,\n        -0.006176859343307134,\n        -0.010936804475048375,\n        0.024515562564812833,\n        0.02662617428151431,\n        -0.014774279222942529,\n        -0.01520230577907081,\n        -0.006490498994418363,\n        0.01670777666319827,\n        -0.002527567873852285,\n        -0.015851725413586915,\n        0.026670453083456398,\n        0.022847737004887,\n        -0.004254431603536914,\n        -0.02095851929789595,\n        -0.0021143011512020156,\n        -0.03436016404253728,\n        0.00237259276554694,\n        0.0024962037224766412,\n        -0.006099371439908485,\n        0.0037655226260608697,\n        0.01097370347666678,\n        -0.023541434510022583,\n        -0.01281126351271467,\n        0.0011650795732582129,\n        0.018198488878000973,\n        -0.008767155287080056,\n        -0.01713580321932655,\n        -0.016811093867729804,\n        -0.011586223178241874,\n        -0.0061916184782931935,\n        -0.01720960122256336,\n        -0.010803969000544724,\n        0.03188056230965175,\n        -0.007829925302585606,\n        -0.004188013866285089,\n        0.009136142509296286,\n        -0.027201794981471003,\n        -0.01926117453667539,\n        -0.007365000676161524,\n        0.0008394476884133403,\n        0.03710543486178489,\n        -0.020058187383697298,\n        -0.014634063948115197,\n        -0.03217575432259899,\n        0.01639782691224888,\n        0.007339171375028641,\n        0.004062557726443816,\n        -0.01948256668374061,\n        -0.00551268057380497,\n        -0.0362198625482336,\n        0.011674780782126045,\n        0.010516157719243774,\n        0.021681734141681046,\n        -0.0237628266570878,\n        0.0016161674233213699,\n        -0.009298497185094661,\n        0.0036308419686456473,\n        -0.021652216803031536,\n        0.003734158474685226,\n        -0.006785689144720389,\n        0.006401941856195494,\n        -0.0050625155480282505,\n        0.005010856945762484,\n        -0.006763550209410649,\n        -0.00852362280772119,\n        0.0013790926184917027,\n        0.012619389635621571,\n        0.02383662466032461,\n        0.04153328897896049,\n        -0.03326795731992292,\n        0.02187360895009675,\n        -0.046964792214866276,\n        0.009128762708972605,\n        -0.024043259069387677,\n        0.003844855013879137,\n        -0.00528759806091661,\n        -0.008412926734188583,\n        0.020013908581755214,\n        -0.00634659381942919,\n        -0.007564253887917001,\n        -0.012715326108506817,\n        -0.010265246370883833,\n        0.004675077893680214,\n        0.0005041298738512993,\n        0.004272881104346117,\n        0.023910422663561418,\n        0.0014934789414321286,\n        0.01899550172502288,\n        -0.02743794859182879,\n        -0.025991515178968173,\n        -0.0044942737170726365,\n        -0.042330303688627606,\n        0.013955126043626974,\n        0.0037821269439585006,\n        -0.015128507775834002,\n        -0.0011540099891880172,\n        -0.0009284660641564387,\n        0.0030183218014092498,\n        0.018803628779252388,\n        -0.01720960122256336,\n        0.007667570626787231,\n        -0.02268538139776602,\n        0.011386969500825095,\n        -0.025548729022192528,\n        -0.024279410817100253,\n        -0.031496816418110765,\n        -0.00904020603641104,\n        -0.028648228394331617,\n        0.014442190071022099,\n        -0.03170345082717383,\n        -0.010471879848624294,\n        -0.017991854468937907,\n        0.002236067390881448,\n        -0.0008929509497217128,\n        -0.0005986830416294956,\n        -0.011239374425674083,\n        -0.010722791196984235,\n        0.017165322420621278,\n        0.0475256533141756,\n        -0.013534480219144978,\n        -0.02023530259146564,\n        -0.0032821482659969345,\n        0.013829670369447003,\n        0.006501568694903884,\n        -0.00892950996287843,\n        -0.0068963856839143,\n        -0.006922214985047183,\n        0.0028319830073895635,\n        -0.02048621393982558,\n        -0.013431163014613445,\n        0.01236109848693795,\n        0.01465620334908624,\n        0.003826405513069935,\n        0.000507358478285247,\n        0.03663312764106931,\n        0.005243319724635828,\n        0.011940451731133348,\n        -0.019895833639221528,\n        -0.01951208588503533,\n        0.005365085498653958,\n        0.030758840111033095,\n        -0.0035828734993723723,\n        -0.01154194437629979,\n        -0.005073585248513772,\n        -0.03111306866392457,\n        0.020264821792760363,\n        -0.0023855074161133814,\n        0.023069129151952215,\n        0.03176248550447286,\n        -0.01926117453667539,\n        -0.0034980062613113446,\n        -0.03379929921793753,\n        -0.016973447612205574,\n        -0.009593688266719292,\n        0.005121553484956395,\n        -0.03740062314944171,\n        -0.007667570626787231,\n        -0.0022231527403150063,\n        0.027172275780176277,\n        0.03589515133399164,\n        -0.0033227369349465284,\n        0.003974000588220948,\n        -0.009268978915122543,\n        -0.010885145872782609,\n        0.0203238583327046,\n        0.012176604410168532,\n        -0.005066205448190091,\n        0.016014079158062685,\n        -0.004446305480630013,\n        0.05003477424835585,\n        0.019305451475972266,\n        0.0002248520687512334,\n        0.047850364528417566,\n        0.008855711959641622,\n        0.008110355852240271,\n        -0.04805699893748063,\n        0.00399245008903015,\n        -0.024264651216452892,\n        -0.0013255894153909932,\n        -0.0005055135864119896,\n        -0.00032862992872636793,\n        -0.006719271407468563,\n        -0.024604120168697004,\n        0.001002724897459838,\n        -0.015408939256811272,\n        -0.010073372493790735,\n        -0.02122419024690325,\n        -0.02801356929178548,\n        -0.016663497861256184,\n        0.027747898342778177,\n        0.013231909337196666,\n        -0.031644412424584385,\n        -0.003852234814202818,\n        0.0060366436028184995,\n        0.00258845076086135,\n        0.02686232602922689,\n        -0.048293148822547996,\n        -0.01833132342118202,\n        -0.019526845485682693,\n        -0.0103538030434454,\n        0.03350411093028071,\n        -0.020855202093364417,\n        -0.011482906905032947,\n        0.016043598359357408,\n        0.03250046181155053,\n        -0.0023098649284569546,\n        0.006331834218781828,\n        0.21631552989596187,\n        0.0035404398803418587,\n        -0.0007001547140034799,\n        0.0314082588142266,\n        0.008361268131922816,\n        0.014375772799431575,\n        -0.007424038613089669,\n        -0.002796928955852079,\n        0.008412926734188583,\n        0.010479259648947975,\n        -0.03291373062967666,\n        0.023777586257735163,\n        -0.014818558024884614,\n        -0.0003456956296633858,\n        0.013246668937844028,\n        0.003328271785189289,\n        -0.012545591632384763,\n        -0.021755532144917857,\n        -0.036839762050132376,\n        -0.008287470128686006,\n        -0.004121596129033263,\n        -0.02205072229521988,\n        -0.02833827864338223,\n        0.001474107081997792,\n        0.010730170997307916,\n        -0.013172871865929824,\n        0.014265075794576362,\n        0.01898074212437552,\n        0.022463989250700804,\n        -0.0030183218014092498,\n        -0.019689199230158463,\n        0.0002223152769418838,\n        -0.04297972239182111,\n        0.01478165902326621,\n        -0.029592837247827145,\n        0.0014842541910275275,\n        0.02900245694722309,\n        0.011069639949552026,\n        0.025371615677069397,\n        -0.00826533165903757,\n        0.004069937526767497,\n        -0.01955636468697742,\n        -0.01539417965616391,\n        -0.01498829250100667,\n        -0.024205612813863447,\n        0.0027286662685193333,\n        -0.019157857332143858,\n        0.0038854436828287308,\n        0.022257356704282947,\n        0.008826192758346897,\n        -0.024869791117704307,\n        0.004811603734007007,\n        0.022257356704282947,\n        0.01056043652118586,\n        0.0153203816529271,\n        -0.022951054209418533,\n        0.048145552816074376,\n        0.00344819284195715,\n        -0.005298667761402132,\n        0.0011124988451979634,\n        -0.011837135457924421,\n        0.02904673574916518,\n        -0.02138654399137902,\n        0.0037636776759799495,\n        -0.004409406479011608,\n        0.00550530077348129,\n        -0.026271945728622837,\n        -0.020072946984344663,\n        -0.0019999149446769155,\n        -0.017017726414147658,\n        -0.01670777666319827,\n        -0.0041363552640193224,\n        0.017977094868290546,\n        -0.008449824804484382,\n        -0.013357365942699241,\n        -0.03250046181155053,\n        0.01130579262858721,\n        0.010457120247976933,\n        0.008501483406750148,\n        0.032559500214139975,\n        -0.009431333590920916,\n        -0.012272540883053778,\n        -0.026581895479572227,\n        0.0031087238897130384,\n        -0.005247009159136366,\n        -0.005785731788797256,\n        0.02643430133574382,\n        0.012405376357557429,\n        -0.013711594495590715,\n        -0.019866314437926805,\n        0.005446262836553145,\n        -0.014604544746820474,\n        0.01787377952640422,\n        0.010058612893143373,\n        0.0028615019758536355,\n        0.02045669473853086,\n        -0.009556789265100887,\n        0.01892170558443128,\n        -0.0011752267987032742,\n        -0.0097043843402519,\n        -0.011696919251774483,\n        0.024869791117704307,\n        0.03055220570197003,\n        -0.014434810270698418,\n        -0.017165322420621278,\n        -0.01825752541794521,\n        0.017327676165097047,\n        0.040854351074472266,\n        -0.012707946308183136,\n        -0.023054369551304854,\n        -0.003830095413231775,\n        -0.008545762208692234,\n        0.006302315017487105,\n        0.0018772264627876741,\n        0.007494146250503335,\n        -0.03131970121034242,\n        -0.028353038244029592,\n        0.005409364300596043,\n        -0.00946085279221564,\n        -0.003614237417917365,\n        0.020751884888832884,\n        -0.017475272171570664,\n        -0.013741112765562833,\n        0.009918397618316041,\n        -0.015984559956767962,\n        -0.00045846759217917505,\n        -0.020766644489480245,\n        -0.02424989161580553,\n        0.014789038823589892,\n        -0.02808736729502229,\n        0.02138654399137902,\n        -0.008405546933864902,\n        0.000873117852767146,\n        -0.006003434967023238,\n        -0.005970225865566674,\n        0.022567306455232337,\n        0.015158026977128727,\n        -0.00819153365580076,\n        0.015940281154825875,\n        -0.00830960952965705,\n        0.014486468872964184,\n        0.011202475424055678,\n        0.011888793128867581,\n        0.005841080291224863,\n        -0.008597420810958,\n        -0.01703248601479502,\n        0.018626513571484045,\n        -0.009667485338633496,\n        0.009844599615079231,\n        -0.008833572558670578,\n        -0.01893646332243343,\n        0.009844599615079231,\n        -0.012626769435945252,\n        -0.04994621664447168,\n        0.022065481895867243,\n        -0.02205072229521988,\n        -0.005103103984147193,\n        -0.03648553535988611,\n        0.03964407127196944,\n        -0.022818217803592278,\n        -0.012331579285643227,\n        0.005770972188149895,\n        0.001339426424582569,\n        -0.012958858587865682,\n        -0.012899820185276235,\n        -0.03471439073278354,\n        -0.19222799574992253,\n        0.011586223178241874,\n        0.026257186127975476,\n        -0.01901026132567024,\n        0.03185104310835703,\n        0.0003987376534515282,\n        0.03382881841923225,\n        -0.009615827667690334,\n        -0.01868555197407349,\n        0.013106453663016696,\n        -0.015032571302948756,\n        -0.029991344602660702,\n        -0.02259682565652706,\n        -0.009224700113180457,\n        -0.027880732885959224,\n        -0.012294680284024822,\n        -0.01135007049920669,\n        -0.005317117262211334,\n        0.04675815780580321,\n        0.002702837200217101,\n        0.05472830117718396,\n        -0.029548558445885057,\n        0.012353718686614269,\n        0.007593773089211725,\n        0.006258036681206322,\n        -0.0056455165139699245,\n        -0.01506947030456716,\n        0.043215876002178896,\n        -0.0013311242656337539,\n        -0.02799880969113812,\n        0.006977563021813487,\n        0.029415723902704013,\n        0.01729815696380232,\n        -0.0208994808953065,\n        -0.004210153267256132,\n        -0.020279581393407728,\n        0.031496816418110765,\n        -0.031172107066514017,\n        0.0042691912041842766,\n        0.0014510453224016147,\n        0.0207076060868908,\n        0.03158537402199494,\n        0.03303180743485555,\n        -0.028367797844676954,\n        -0.007302272373410237,\n        0.030994991858745675,\n        0.03273661542190832,\n        0.004925989707701457,\n        0.020766644489480245,\n        0.0031806764772076244,\n        -0.004106836528385902,\n        -0.0376367767597995,\n        -0.00118721885781393,\n        0.009350155787360427,\n        0.03636745855470722,\n        0.006785689144720389,\n        -0.003173296909714595,\n        0.022729660199708106,\n        -0.030758840111033095,\n        0.008280090328362326,\n        -0.0024593049536888877,\n        -0.03604274734046526,\n        0.0008883386327270751,\n        -0.010907285273753653,\n        -0.015748408209055383,\n        -0.010464500048300613,\n        -0.03441920244512672,\n        0.019526845485682693,\n        -0.03046364996073107,\n        0.006996012522622689,\n        -0.014117480719425349,\n        -0.006165789642821613,\n        0.018493679028302998,\n        -0.006350283719591031,\n        -0.00022519799689140594,\n        -0.00027351236520102167,\n        -0.01339426401299504,\n        0.03627890095082305,\n        0.004379887743378187,\n        -0.018493679028302998,\n        -0.009748663142193985,\n        0.06287555603104264,\n        0.023069129151952215,\n        -0.004700907194813097,\n        0.0058816687273438055,\n        0.016043598359357408,\n        -0.008213673056771804,\n        0.012921959586247278,\n        -0.003103189039470278,\n        -0.01644210571419097,\n        0.03152633561940549,\n        -0.019054540127612325,\n        -0.01834608302182938,\n        -0.01898074212437552,\n        -0.01498829250100667,\n        -0.000980585612904121,\n        -0.02277393900165019,\n        0.001551594519735139,\n        -0.007711849428729317,\n        -0.028603949592389533,\n        -0.004483204016587115,\n        0.009187801111562052,\n        -0.026227666926680753,\n        -0.005151072686251119,\n        0.04215318848085927,\n        0.012722705908830498,\n        -0.009328016386389384,\n        0.035363809435977035,\n        0.005959156165081153,\n        0.008427686334835944,\n        -0.01803613327087999,\n        0.001961171225808242,\n        0.04507557450787522,\n        0.028367797844676954,\n        -0.00216042467039437,\n        0.0196744396295111,\n        -0.0002092853752030475,\n        -0.01827228501859257,\n        0.01269318763885838,\n        0.018139450475411524,\n        0.0060366436028184995,\n        -0.005675035249603345,\n        -0.002073712482252422,\n        -0.03179200470576758,\n        -0.020205783390170918,\n        -0.01663397865996146,\n        -0.07875679692063385,\n        -0.02163745720238417,\n        0.008051318380973428,\n        0.027467465930478305,\n        0.0030570655202779235,\n        0.0038817537826668904,\n        -0.010036473492172331,\n        0.0319396007122412,\n        -0.020810923291422333,\n        0.0203238583327046,\n        -0.010309525172825918,\n        -0.011482906905032947,\n        -0.0068926957837524595,\n        -0.02162269760173681,\n        0.0131433526646351,\n        -0.015025191502625075,\n        -0.009202560712209413,\n        -0.021312747850787423,\n        -0.004073627426929337,\n        0.01011765129573282,\n        -0.0030718251209252852,\n        -0.005970225865566674,\n        0.00593332686394827,\n        -0.01068589219536583,\n        -0.0035994780501006547,\n        0.014146999920720072,\n        -0.029622356449121867,\n        0.004335608941436102,\n        0.0019242724570204888,\n        0.014265075794576362,\n        0.010907285273753653,\n        0.007464627049208612,\n        0.020205783390170918,\n        -0.020929000096601227,\n        0.015276102850985015,\n        -0.004571761154809983,\n        -0.011947831531457028,\n        -0.018154210076058885,\n        0.028441595847913764,\n        0.013158112265282462,\n        -0.0008030101571458171,\n        0.00971176414057558,\n        -0.0015432923607863235,\n        -0.005667655914940967,\n        0.010051233092819693,\n        0.005165831821237178,\n        -0.0035699588488059307,\n        0.021534139997852638,\n        -0.0006623334701752665,\n        -0.011475527104709267,\n        -0.03412401043217949,\n        0.003271078565511413,\n        0.010826108401515768,\n        -0.012892440384952554,\n        0.02801356929178548,\n        -0.021666974541033685,\n        0.02292153500812381,\n        0.002509118373043083,\n        -0.03722350794167337,\n        -0.0041843239661232485,\n        -0.012966238388189364,\n        -0.009645345937662453,\n        -0.024855031517056946,\n        0.03527525183209287,\n        0.0001670823749326486,\n        0.014309354596518447,\n        -0.020087706584992024,\n        -0.006283865516677902,\n        0.043776737101488224,\n        -0.010464500048300613,\n        -0.006394562055871814,\n        0.03949647526549582,\n        -0.006837347746986155,\n        0.04330443360606307,\n        -0.027954530889196035,\n        0.007257994037129453,\n        -0.00018772265209953372,\n        0.005110483784470874,\n        0.009800321744459752,\n        0.027733138742130816,\n        -0.04002781716351043,\n        0.0005414898801592827,\n        0.002760030187064326,\n        -0.021253709448197974,\n        0.013829670369447003,\n        0.014139620120396391,\n        -0.003903892950807282,\n        0.033297476521217645,\n        0.024928829520293756,\n        -0.019999148981107853,\n        0.011490286705356628,\n        0.035393328637271765,\n        0.027629821537599283,\n        -0.013040036391426172,\n        0.007962760777089257,\n        0.005741453452516474,\n        0.023482396107433138,\n        0.02047145433917822,\n        -0.021297988250140062,\n        0.021607938001089448,\n        -0.04835218722513744,\n        -0.034655352330194095,\n        -0.07798930513755188,\n        0.043924333107961844,\n        -0.024190853213216085,\n        -0.015408939256811272,\n        0.023379078902901605,\n        0.0054315032359057835,\n        0.016176434765183666,\n        0.012973618188513045,\n        -0.016973447612205574,\n        0.012759604910448903,\n        -0.004711976895298618,\n        -0.010752310398278958,\n        -0.011409108901796139,\n        -0.0028965557945604685,\n        0.0035662689486440904,\n        0.011386969500825095,\n        0.007881583904851372,\n        -0.00035076921328208504,\n        0.026316224530564924,\n        0.013165492065606143,\n        0.0008168471663373932,\n        0.007719228763391695,\n        0.025991515178968173,\n        -0.023216725158425836,\n        -0.02212452029845669,\n        -0.003933412152102005,\n        -0.0076159124901827675,\n        0.021829330148154667,\n        -0.0008924897122014827,\n        -0.04286164558664221,\n        0.006047713303304021,\n        -0.019305451475972266,\n        -0.016678257461903545,\n        0.019275932274677544,\n        0.02515022166735897,\n        0.011527184775652427,\n        0.010626854724098987,\n        0.009187801111562052,\n        0.033445072527691265,\n        -0.017681904717988518,\n        -0.01656018065672465,\n        -0.029120533752401985,\n        0.030906434254861503,\n        -0.014102721118777988,\n        0.006324454418458148,\n        0.002564466642640038,\n        -0.021534139997852638,\n        0.00029888028329451774,\n        0.007080879760683717,\n        -0.01565985060517121,\n        -0.013076934461721972,\n        0.0026862326494888193,\n        -0.028382557445324315,\n        -0.009623207468014015,\n        -0.004475824681924737,\n        -0.038315714664287716,\n        0.012892440384952554,\n        -0.025593007824134616,\n        -0.008368647932246497,\n        -0.017652385516693795,\n        -0.0009925776720147769,\n        -0.002254516658859999,\n        0.03114258786521929,\n        0.01273008570915418,\n        -0.008162014454506037,\n        -0.010014334091201288,\n        -0.0026013654114277916,\n        -0.0010119496478644392,\n        -0.0051769015217227,\n        -0.0265523762782775,\n        -0.004472134781762896,\n        -0.007387139611471264,\n        0.004239672002889553,\n        -0.002367057915304179,\n        0.016117396362594218,\n        -0.005984985466214036,\n        -0.007464627049208612,\n        0.013135972864311419,\n        -0.018198488878000973,\n        0.03179200470576758,\n        0.01629450970771735,\n        0.0012222727929360887,\n        0.0014907115163107483,\n        0.0031677620594718343,\n        0.026006274779615535,\n        0.032116715920009545,\n        0.0011438627637429559,\n        -0.021519380397205277,\n        -0.009025446435763676,\n        -0.005719314051545431,\n        0.004486893916748955,\n        0.0003134091778702703,\n        0.014073201917483263,\n        0.03202815831612537,\n        0.03970310967455889,\n        0.008597420810958,\n        -0.005228560123988466,\n        0.004516413118043679,\n        -0.00864169868157748,\n        -0.0009639811785911646,\n        0.013246668937844028,\n        0.003937102052263846,\n        0.012228262081111694,\n        -0.020766644489480245,\n        -0.034448721646421446,\n        -0.00015866483384419718,\n        -0.00949775086251144,\n        -0.013187631466577185,\n        -0.006376112555062611,\n        -0.006940664485856385,\n        0.0036843452881616823,\n        -0.01647162491548569,\n        -0.013873949171389089,\n        0.026567135878924866,\n        -0.005785731788797256,\n        -0.007837305102909286,\n        -0.014479089072640504,\n        0.008339128730951773,\n        -0.03441920244512672,\n        0.03252998101284525,\n        0.007531045252121739,\n        0.01777046232187269,\n        0.03911272937395484,\n        -0.0018587770783937976,\n        0.010759690198602638,\n        0.018715071175368216,\n        -0.011719058652745525,\n        -0.006328144318619988,\n        0.0009824305629850412,\n        -0.010663752794394786,\n        0.015453217127430752,\n        -0.009970056220581808,\n        -0.03288421142838194,\n        -0.0306407633058542,\n        -0.015984559956767962,\n        -0.011822375857277058,\n        0.008471964205455424,\n        0.027231314182765726,\n        -0.004501653517396317,\n        0.039378398460316925,\n        0.023629992113906755,\n        -0.009977436020905488,\n        -0.0017849794244029654,\n        -0.007896343505498735,\n        0.03498006354443605,\n        0.034448721646421446,\n        -0.024058016807389827,\n        -0.008280090328362326,\n        -0.024928829520293756,\n        0.026877085629874252,\n        -0.01186665372789654,\n        -0.014899735828445105,\n        -0.022242597103635586,\n        0.00508096458317615,\n        0.014036303847187464,\n        -0.012132325608226446,\n        0.002536792624256886,\n        -0.03483246753796243,\n        -0.009918397618316041,\n        0.03052268836332052,\n        0.029578077647179783,\n        0.00038789862993378473,\n        -0.00409576682790038,\n        -0.025164981268006332,\n        0.006272795816192381,\n        -0.0025312577740141252,\n        -0.00019037475328894082,\n        -0.005084654483337991,\n        -0.03799100345004576,\n        0.01850843862895036,\n        -0.011062260149228346,\n        -0.0363379393534125,\n        -0.026655693482809033,\n        0.001010104697783519,\n        0.020353377533999326,\n        0.014316734396842128,\n        0.021976926154628283,\n        0.009298497185094661,\n        0.0213570247900843,\n        -0.0008998695125251637,\n        0.004103146628224061,\n        -0.040263970773868216,\n        -0.032441423408961084,\n        -0.018626513571484045,\n        0.01573364860840802,\n        -0.015512255530020199,\n        -0.0148628368268267,\n        -0.05041852013989684,\n    ],\n    [\n        -0.009236050368282546,\n        0.004727615769378554,\n        -0.00376869814855234,\n        0.006182735051475372,\n        -0.007787019607252667,\n        -0.0013478119504672956,\n        -0.01940970969781019,\n        0.0034125289793618084,\n        -0.02289225434113545,\n        -0.030003464408102348,\n        0.024986651571455142,\n        -0.00442624165997603,\n        0.014198068843633642,\n        0.00964397056955825,\n        -0.0064049607153140375,\n        -0.03224398428138348,\n        0.019726303480065623,\n        -0.007391275516788305,\n        0.03821058032744206,\n        0.01977501164860113,\n        0.011287829348117473,\n        0.0023805509683774064,\n        -0.00795749354051426,\n        -0.002176590634908921,\n        -0.029199800116362282,\n        0.02186940887892082,\n        -0.0009338030535016789,\n        -0.014965202008972079,\n        0.017765850919250967,\n        -0.025084066045881082,\n        0.03609182901285461,\n        -0.0356291144502828,\n        -0.010094509952641252,\n        -0.010788583659144035,\n        0.006861588153802711,\n        -0.028688377385254968,\n        -0.02722717144473628,\n        -0.00961352936120736,\n        0.020274256406252033,\n        -0.01894699327259331,\n        0.017412725079271368,\n        0.016475117980671337,\n        -0.0031446408045049086,\n        -0.019348825418463344,\n        -0.02073697283146891,\n        0.008554153703913638,\n        0.019300119112572907,\n        -0.03409484625696086,\n        -0.013163046339285138,\n        0.04429894865748446,\n        0.025644195082878834,\n        0.010338044276061033,\n        -0.03314506118490442,\n        0.005144668985085299,\n        -0.030222645578576908,\n        0.006496286203011772,\n        -0.018484276847376434,\n        0.018423394430674655,\n        0.018484276847376434,\n        -0.0037017262794610904,\n        -0.013089985949126949,\n        0.006776350721510647,\n        -0.03421661481565455,\n        0.018788696381465596,\n        -0.0178145572251414,\n        0.011470480323512944,\n        0.025936436643511585,\n        0.024170811168903735,\n        -0.020079429320045222,\n        0.027202817360468527,\n        0.031805621940434355,\n        -0.010922527397326534,\n        -0.025985144812047088,\n        0.014685137490473205,\n        0.0178145572251414,\n        0.002621041264094352,\n        -0.02825001690695091,\n        0.0022572615599854647,\n        -0.004688041546596625,\n        -0.002726065574946747,\n        0.02674010093525165,\n        -0.014806905117844361,\n        -0.018679105796228314,\n        0.021443222648783036,\n        0.018118974896585493,\n        -0.008822041180278637,\n        -0.00414922116917999,\n        0.05391856421145243,\n        -0.0057869914266722765,\n        -4.2523426571279065e-05,\n        -0.0012831229857378555,\n        0.01620722864166127,\n        0.010106686994775127,\n        0.009680500764637343,\n        -0.012365470102950743,\n        0.017936323921190024,\n        -0.00020224789326266521,\n        0.01873998821293009,\n        0.0025677682181577625,\n        -0.046003689852745465,\n        -0.020298610490519786,\n        -0.018922639188325558,\n        -0.009065576435020952,\n        -0.018727812102118747,\n        -0.003653019275078754,\n        -0.013662292028258576,\n        0.0029071945364907985,\n        0.022283417135602196,\n        -0.004642378802747758,\n        -0.026910575799835777,\n        -0.020566497966884784,\n        0.03402178586680267,\n        -0.007226889638932382,\n        -0.04342222397558621,\n        -0.006922471501827022,\n        0.0032603196779784948,\n        -0.011507010518592037,\n        -0.004803720187239578,\n        -0.005366894183262697,\n        -0.0068737647302753195,\n        0.006441490910393131,\n        0.03606747679123193,\n        0.015403564349921206,\n        -0.00470326215077207,\n        0.02055432185607344,\n        0.001429243766054231,\n        -0.044859075831837146,\n        -0.020968330112754816,\n        -0.02542501391240427,\n        -0.02052996777180569,\n        0.048439034949588344,\n        0.021711111987793106,\n        0.040938170710207826,\n        0.0015494890303280207,\n        -0.027714240091575842,\n        0.01996983873480794,\n        -0.010411104666219221,\n        0.022137296355285822,\n        -0.0027047564497043645,\n        -0.03594570823253824,\n        0.014953025898160737,\n        0.01949494619877972,\n        0.00456931841258957,\n        0.007963582527242465,\n        -0.00016333943512541438,\n        0.03268234662233261,\n        0.016475117980671337,\n        -0.015062616483398019,\n        0.014575546905235923,\n        -0.007726135793567087,\n        -0.005942244755758426,\n        0.025181480520307022,\n        0.0054338660523539474,\n        -0.014599900058181141,\n        0.0264478593746189,\n        0.01772932072417187,\n        -0.011196503860419739,\n        0.014441603167053422,\n        0.019263588917493815,\n        0.010344133262789238,\n        0.012164554030015727,\n        0.01787544150448825,\n        0.01685259604227362,\n        -0.025278893132087893,\n        0.008170586655583153,\n        0.013053455754047856,\n        0.03275540701249079,\n        0.0009124937536363213,\n        -0.02138234023208126,\n        -0.006182735051475372,\n        0.02788471495615997,\n        7.2394472718406e-05,\n        -0.02844484399315772,\n        0.030539241223477412,\n        -0.0030807129631164948,\n        0.023610682131905987,\n        0.004197927940731693,\n        0.00866983234455659,\n        -0.020919623806864383,\n        -0.004651511351517531,\n        -0.03645713096364555,\n        0.0060518353409957076,\n        0.014709490643418421,\n        -0.002844788708953802,\n        -0.014904318660947767,\n        0.01177489892627957,\n        -0.002100486217047898,\n        -0.008079261167885418,\n        0.011787075968413446,\n        0.020310786601331128,\n        -0.00020548233276798845,\n        0.03635971835186468,\n        0.030953249480158786,\n        0.0025373263113149733,\n        -0.6281245077851121,\n        0.0007245154969302563,\n        0.015342681001896894,\n        -0.03117243065063335,\n        -0.004386667437194101,\n        0.03494721871723643,\n        0.0025266717486937817,\n        0.007659163924475838,\n        -0.0038021843159285985,\n        0.02381768532892414,\n        -0.031148078429010666,\n        0.049413175968557606,\n        0.00019863292119065836,\n        -0.020140313599392067,\n        0.004828073805846062,\n        -0.02825001690695091,\n        -0.009461319594162779,\n        -0.039136013177875816,\n        -0.02751941300536903,\n        0.02157716731828807,\n        -0.0008805298911497725,\n        0.0399153252479932,\n        0.004517567147673765,\n        -0.01027716092803672,\n        0.00852980055096842,\n        -0.003689549470157848,\n        0.01195754990167504,\n        -0.025839024031730714,\n        0.000327630158011794,\n        0.028420489908889967,\n        -0.008000112722321559,\n        0.001105038284727273,\n        0.02674010093525165,\n        0.00525425957032258,\n        0.036700668081032936,\n        0.009808356447414172,\n        -0.036773728471191126,\n        -0.0043957999859638745,\n        0.01093470443946041,\n        0.04890175323745029,\n        -0.020006368929887035,\n        -0.012414177340163713,\n        0.0010959057359574995,\n        -0.021930293158267666,\n        -0.014612077100315016,\n        -0.010636374823421989,\n        0.018484276847376434,\n        0.016061107861344896,\n        0.0032207454551965655,\n        -0.010344133262789238,\n        -0.01200625713888801,\n        -0.0110077648296186,\n        -0.0038387145110076923,\n        0.008456740160810232,\n        0.008304530393765651,\n        0.010179747384933316,\n        0.02937027498094641,\n        0.012505502827861448,\n        -0.0033912196212887926,\n        -0.0037565215720797313,\n        0.012895157931597604,\n        0.023026199010640482,\n        0.004380578916127162,\n        0.028128248348257216,\n        0.012030610291833227,\n        0.02034731679641022,\n        0.015781044274168553,\n        0.010965146579133833,\n        -0.01695001051669956,\n        0.005993996020674231,\n        -0.014453779277864764,\n        -0.013857120045787921,\n        -0.025351953522246083,\n        -0.02401251427777602,\n        0.038600238225145814,\n        0.043884938538158016,\n        0.02308708142734226,\n        0.01742490119008271,\n        -0.03236575284007717,\n        -0.009284757605495516,\n        -0.0007717003128381997,\n        0.014234599038712735,\n        -0.028128248348257216,\n        -0.017960678005457777,\n        0.010198012482472863,\n        -0.022855724146056355,\n        -0.0306123016136356,\n        0.02308708142734226,\n        -0.00026008735910328746,\n        0.006076188959602193,\n        0.02118751128322938,\n        0.02372027271714327,\n        -0.003790007506625356,\n        -0.0080549080149402,\n        0.007257331778605805,\n        0.010198012482472863,\n        -0.009162989978124357,\n        0.020505615550183008,\n        0.0161098160298804,\n        -0.02429257786495236,\n        -0.005217729375243486,\n        -0.011854047371843429,\n        -0.0025525471483210512,\n        -0.010374574471140126,\n        0.015330503959763018,\n        0.014185891801499767,\n        0.0029969980103371156,\n        0.03484980238016542,\n        0.0223321253041377,\n        -0.02907803342031366,\n        -0.014283305344603172,\n        -0.015525331977292363,\n        -0.02185723276810948,\n        0.018143328980853246,\n        0.01224979146230779,\n        -0.025960790727779334,\n        0.012115847724125292,\n        -0.015293973764683924,\n        0.014356365734761359,\n        0.008779422929793872,\n        0.01977501164860113,\n        -0.0032724964872817373,\n        0.02664268832347078,\n        -0.0008995559956150284,\n        0.014940848856026862,\n        -0.003446014913907433,\n        -0.005540412609888393,\n        0.014892141618813892,\n        -0.03316941713181724,\n        -0.008962073905189341,\n        0.021357986147813507,\n        -0.008468916271621574,\n        0.016255936810196776,\n        -0.024353462144299204,\n        -0.00030746245584648734,\n        -0.014709490643418421,\n        0.0028204353231779506,\n        -0.009759650141523735,\n        0.01403977102118339,\n        0.0012047353142690723,\n        -0.023208849986035954,\n        -0.01753449177531999,\n        0.01256638617588576,\n        -0.024085574667934206,\n        -0.004197927940731693,\n        -0.017656260334013685,\n        -0.030661007919526036,\n        -0.00043455710259377784,\n        0.02946768945537235,\n        0.002312056852604105,\n        0.015744514079089462,\n        -0.011099090317316334,\n        -0.006800704340117132,\n        0.00216593607228773,\n        -0.009954477227730548,\n        -0.018325979956248715,\n        -0.005732196134053636,\n        0.007872257039544731,\n        -0.02429257786495236,\n        -0.027007990274261717,\n        0.0024566553862384296,\n        0.018800872492276938,\n        -0.013771882613495857,\n        0.017753672945794555,\n        0.011086913275182457,\n        -0.008682009386690467,\n        -0.03453320859790999,\n        0.021796348488762635,\n        -0.012450707535242807,\n        -0.044518129827959024,\n        -0.004596716058898891,\n        -0.001183426072611373,\n        0.0007534352152986528,\n        0.002843266695102384,\n        0.00998491936740397,\n        0.010605932683748567,\n        -0.00781746174692609,\n        0.0068433230562631635,\n        -0.04507825700231171,\n        -0.017960678005457777,\n        0.0038143608924012073,\n        0.006103586605911513,\n        -0.016134168251503083,\n        -0.011306094445657021,\n        0.026667040545093463,\n        0.004697174095366399,\n        0.012402000298029837,\n        0.003847847059777466,\n        0.0034581917232106756,\n        0.01695001051669956,\n        0.00956482212399439,\n        0.018581691321802374,\n        -0.01464860729539411,\n        0.022064235965127632,\n        -0.007640898826936291,\n        -0.011044295024697693,\n        0.009619617416613031,\n        -0.01864257560114922,\n        0.005102050268939267,\n        0.04607675024290365,\n        0.02279483986670951,\n        0.02656962793331259,\n        0.010697258171446301,\n        -0.02167458179271401,\n        0.007074680803210336,\n        -0.020018545040698377,\n        0.013905827283000891,\n        -0.024730940205901487,\n        0.00031202873023137407,\n        0.033486010914072675,\n        0.011981903054620257,\n        -0.017193543908796807,\n        -0.012651623608177823,\n        0.0007587625548169068,\n        0.01771714275071546,\n        0.02722717144473628,\n        0.011573982853344553,\n        -0.0030776687025830256,\n        -0.007884433150356073,\n        -0.020870917500973946,\n        -0.010965146579133833,\n        0.02893191263999728,\n        -0.0008204072590128778,\n        0.004715439192905946,\n        0.011324359543196567,\n        -0.0169621866275109,\n        -0.000922387367539462,\n        0.04123041227084057,\n        0.004974194586162438,\n        0.0011126488196456286,\n        -0.014794728075710487,\n        -0.0011057994080682985,\n        0.03484980238016542,\n        0.01714483760290637,\n        0.005217729375243486,\n        -0.0023744624473104685,\n        0.02552242838683021,\n        -0.02515712643603927,\n        0.03273105479086812,\n        0.004344048721048069,\n        -0.01563492349385218,\n        -0.0040213654864031615,\n        0.03248751767348073,\n        -0.00988141683757236,\n        -0.0019406664971615454,\n        0.006727643949958944,\n        0.007884433150356073,\n        -0.01177489892627957,\n        0.0029924317359522287,\n        0.036578899522339246,\n        -0.023537621741747797,\n        0.004030498035172935,\n        -0.011336536585330443,\n        -0.025059711961613333,\n        -0.0014893664563987844,\n        -0.011464392268107273,\n        -0.028006481652208592,\n        -0.01591498708102852,\n        0.034703681599849046,\n        0.02479182448524833,\n        0.017558845859587745,\n        0.0050289898787810785,\n        0.015756690189900804,\n        0.008943808807649795,\n        -0.0029330701689487012,\n        0.004484080980297506,\n        0.021163159061606696,\n        -0.031148078429010666,\n        -0.02373244882795461,\n        -0.028907558555729528,\n        -0.034630621209690855,\n        -0.013905827283000891,\n        0.013918003393812233,\n        -0.005951377304528199,\n        0.05031425287207854,\n        0.02263654297558179,\n        0.010599844628342896,\n        -0.0012823619788121467,\n        0.026496567543154402,\n        0.013114339102072168,\n        -0.01704742312848043,\n        -0.02393945388761783,\n        0.015233090416659613,\n        0.0005239799856657528,\n        -0.0009573954905594797,\n        -0.023111435511610014,\n        -0.032341396893164356,\n        -0.004404932534733647,\n        0.016268112921008118,\n        -0.01220108422509482,\n        -0.009790091349874625,\n        -0.004219237531635342,\n        0.007080769324277274,\n        -0.02902932711442322,\n        -0.0007503910711805006,\n        0.006167514447299927,\n        0.026131265592363465,\n        0.003071580414346721,\n        -0.015208737263714394,\n        0.0038569796085472395,\n        -0.007580015013250712,\n        -0.02221035674544401,\n        -0.01638987961705674,\n        0.008091438210019293,\n        0.03492286277032361,\n        0.02177199440449488,\n        0.010709435213580176,\n        -0.025400661690781586,\n        0.0022557393133034133,\n        -0.0036499750145452853,\n        0.03684678886134931,\n        0.015147852984367549,\n        -0.006033570243456161,\n        0.0008987949304816611,\n        0.041887955782264265,\n        0.007939228442974714,\n        0.003534296141071699,\n        0.0012663800184650432,\n        0.02093179991767572,\n        0.01768061255563637,\n        -0.008371502728518169,\n        -0.010995587787484723,\n        0.0009596786277519231,\n        -0.0007922485475701901,\n        0.025473722080939773,\n        0.008456740160810232,\n        0.00498941565599915,\n        0.006685025233812912,\n        -0.005184243207867228,\n        -0.0027899934163351614,\n        -0.022575658696234947,\n        -0.0117261916890666,\n        0.005942244755758426,\n        -0.028006481652208592,\n        -0.0043166510747387485,\n        0.00202742582688971,\n        -0.010021449562483064,\n        0.0031202874187290573,\n        0.0067093788524193974,\n        -0.021077920697992098,\n        -0.004176618815489311,\n        -0.010855555993896553,\n        0.034825450158542735,\n        -0.0031750827113476983,\n        -0.01884957879816737,\n        0.00035559858861922524,\n        0.020883093611785288,\n        0.005193375756637001,\n        0.0033942638818222613,\n        0.004608892635371499,\n        -0.0060822770150078635,\n        0.021747642182872198,\n        -0.009296933716306858,\n        -0.05567201357524893,\n        -0.0022009440206847727,\n        0.004152265196882826,\n        0.008085349223291089,\n        0.010812936812089254,\n        -0.013284813966656294,\n        0.007366922363843087,\n        0.007543484818171619,\n        0.023768979023033703,\n        0.01826509567690187,\n        -0.020274256406252033,\n        -0.017510139553697308,\n        -0.001758015521766076,\n        0.005470396247433041,\n        -0.00885248331995206,\n        0.0012458317837330528,\n        0.002133972151593523,\n        -0.009540468971049173,\n        0.011080825219776786,\n        -0.011421774017622507,\n        0.0004710872685690425,\n        -0.00795749354051426,\n        0.003637798438072676,\n        0.0018402084606940373,\n        -0.011975814999214586,\n        0.0068737647302753195,\n        -0.0040213654864031615,\n        -0.0027184552728590247,\n        -0.010088421897235581,\n        0.012943865168810574,\n        -0.014100654369207702,\n        -0.020140313599392067,\n        -0.02656962793331259,\n        -0.003382087072519019,\n        -0.011494834407780695,\n        0.01777802703006231,\n        -0.03297458818296536,\n        -0.029808637321895533,\n        -0.0029665561034943264,\n        -0.01704742312848043,\n        0.010812936812089254,\n        0.02101703828129032,\n        -0.017765850919250967,\n        -0.02044473127083616,\n        -0.011987992041348462,\n        0.02137016225862485,\n        0.01685259604227362,\n        -0.005013768808944367,\n        0.008870748417491607,\n        -0.00475805744339071,\n        -0.009960566214458752,\n        0.009461319594162779,\n        -0.0712582289005656,\n        0.0025814670413124227,\n        -0.0012298498233859494,\n        0.013589231638100387,\n        0.004551053315050023,\n        0.028298723212841343,\n        0.001368360185199286,\n        -0.023768979023033703,\n        0.029540749845530536,\n        -0.007555661394644227,\n        0.01646294000721493,\n        -0.002118751314587445,\n        -0.015050439441264142,\n        0.001223761418734328,\n        0.004255767726714437,\n        -0.01780238111433006,\n        0.01483125827078958,\n        0.0006392783556764844,\n        0.007269508355078415,\n        -0.013041278711913979,\n        0.004764145964457648,\n        -0.015744514079089462,\n        -0.01687695012654137,\n        -0.004879825070761868,\n        0.013954533588891326,\n        0.018374686262139152,\n        0.021297101868466662,\n        0.006313635227616302,\n        -0.006666760136273366,\n        0.03635971835186468,\n        -0.01873998821293009,\n        0.03100195764869429,\n        0.004751969387985039,\n        0.013126516144206044,\n        -0.0007188076539491479,\n        0.025960790727779334,\n        0.04688041453464371,\n        -0.012371559089678947,\n        -0.036773728471191126,\n        0.0008782467539573291,\n        -0.0025312380230786686,\n        -0.0016575574852985679,\n        0.01256638617588576,\n        -0.021248395562576225,\n        -0.0023485870476831995,\n        -0.003537340401605168,\n        -0.030173939272686474,\n        -0.002333365977846488,\n        -0.023038375121451824,\n        -0.018118974896585493,\n        0.013138693186339919,\n        0.01408847825839636,\n        -0.02722717144473628,\n        -0.01845992462575375,\n        -0.00532123143941383,\n        0.005765682301429894,\n        -0.007074680803210336,\n        -0.014977379051105955,\n        0.0007808328616079732,\n        -0.010977322689945175,\n        0.0005308293972430829,\n        -0.004508434598903991,\n        -0.02167458179271401,\n        -0.011464392268107273,\n        -0.03372954430616992,\n        -0.00036815584317766376,\n        0.00492853184231357,\n        0.0025510251344696335,\n        0.007324303647697055,\n        0.009187343131069576,\n        0.022076413938584043,\n        -0.007750489412173572,\n        0.02751941300536903,\n        0.025595488776988397,\n        -0.010076244855101705,\n        0.022819193950977264,\n        0.007531308241699009,\n        0.0022542172994519955,\n        -0.009114282740911387,\n        0.01686477215308496,\n        0.01630464311608721,\n        0.02477964837443699,\n        0.009077752545832294,\n        0.005595207902507034,\n        0.00397874677025713,\n        -0.011573982853344553,\n        -0.008414120979002933,\n        -0.03614053718139012,\n        -0.02768988600730809,\n        0.008779422929793872,\n        -0.007799196183725276,\n        0.02382986330238055,\n        0.008274089185414764,\n        0.047343129097215525,\n        0.01971412736925428,\n        -0.010045802715428282,\n        0.028956266724265035,\n        -0.007129476095828977,\n        0.00842629802113681,\n        -0.04354398880898976,\n        -0.004712394699541843,\n        0.007068592282143398,\n        0.027446352615210844,\n        -0.014989556093239832,\n        0.005884405435436949,\n        0.013479641052863107,\n        -0.01243244243770326,\n        -0.021150981088150285,\n        -0.007342568745236602,\n        -0.005345585058020315,\n        -0.001621027290219474,\n        0.02005507523577747,\n        0.0297599310160051,\n        0.017315310604845428,\n        0.0007157634516233373,\n        -0.009363906051059374,\n        0.00014926007940407055,\n        0.007750489412173572,\n        0.00927866861876731,\n        0.002952857280339666,\n        0.04174183500194789,\n        -0.02083438730589485,\n        0.00255559140885452,\n        -0.005595207902507034,\n        0.034703681599849046,\n        -0.014685137490473205,\n        0.005333408015886439,\n        -0.00361648907999966,\n        -0.007403452558922181,\n        0.0002553308329869735,\n        -0.023099259400798672,\n        0.008645479191611372,\n        -0.02525454091046521,\n        0.02683751540967759,\n        -0.02263654297558179,\n        0.0008021421614733307,\n        0.01922705872241472,\n        -0.02496229934983246,\n        -0.025765963641572524,\n        -0.008018377819861106,\n        0.008079261167885418,\n        0.04797632038701653,\n        -0.015050439441264142,\n        0.014977379051105955,\n        0.0291754478947396,\n        0.011914931651190275,\n        0.013089985949126949,\n        0.01788761761529959,\n        0.007056415705670789,\n        -0.00487373654969493,\n        0.0379913991569675,\n        -0.001421633347551192,\n        -0.01659688467671996,\n        -0.018033738395615964,\n        -0.023318440571273236,\n        0.03268234662233261,\n        -0.0022907474945310894,\n        -0.03426531925889992,\n        0.00275194120740465,\n        0.04415282787716809,\n        -0.007890522137084277,\n        -0.01591498708102852,\n        0.003793051767158825,\n        -0.02995475810221191,\n        0.006648495038733818,\n        -0.002681925077779931,\n        -0.013089985949126949,\n        -0.035799587452221865,\n        0.0065206393559569895,\n        -0.027714240091575842,\n        0.025595488776988397,\n        -0.02214947432874223,\n        0.0220155296592372,\n        0.021406692453703944,\n        -0.00669111375487985,\n        -0.010161482287393768,\n        0.0033973079095250967,\n        -0.01125129915303838,\n        -0.016048931750533554,\n        -0.01417371475936589,\n        0.04069463359282044,\n        -0.002732154096013685,\n        0.008822041180278637,\n        0.02362285824271733,\n        -0.006109674661317184,\n        -0.0154400945450003,\n        -0.011969726943808915,\n        0.016511648175750432,\n        0.02250259830607676,\n        0.004751969387985039,\n        -0.018058092479883717,\n        -0.02674010093525165,\n        0.027446352615210844,\n        -0.007853991942005183,\n        -0.004124867550573505,\n        -8.579600571483929e-06,\n        -0.011433950128433849,\n        -0.006240574837458115,\n        -0.0002587555387756386,\n        0.026179971898253898,\n        0.00922387332614867,\n        -0.004514523119970929,\n        0.0026012541527033876,\n        -0.023050551232263166,\n        0.005214684881879384,\n        -0.03365648391601173,\n        -0.022855724146056355,\n        0.015610569409584427,\n        -0.008207116850662246,\n        -0.020103783404312972,\n        0.004794587638469804,\n        0.01069117011604063,\n        -0.003808272604164903,\n        0.012919512015865357,\n        -0.0016195052763680563,\n        0.02477964837443699,\n        0.037260795255385615,\n        -0.034508856376287304,\n        -0.01322392968730945,\n        -0.026886221715568023,\n        0.016182876420038586,\n        -0.006812880916589741,\n        -0.015099146678477112,\n        -0.00663631846226121,\n        0.013187399492230354,\n        0.014198068843633642,\n        -0.028883206334106844,\n        -0.0009376082627531984,\n        0.007756577467579243,\n        0.0025860333156973096,\n        0.01904440774701925,\n        0.02927286050652047,\n        0.006514551300551319,\n        0.046515112583852776,\n        0.01780238111433006,\n        0.008371502728518169,\n        -0.024475228840347828,\n        -0.009156901922718686,\n        0.004627157732911046,\n        -0.01779020314087365,\n        -0.0016042843229466615,\n        -0.007172094346313742,\n        -0.023476737462400952,\n        0.005041166455253688,\n        -0.0038508910874803016,\n        -0.007677429022015385,\n        0.024925769154753367,\n        -0.006240574837458115,\n        -0.004070072257954865,\n        -0.010264983885902844,\n        -0.008395855881463386,\n        -0.019823717954491563,\n        -0.016475117980671337,\n        -0.02956510206715322,\n        -0.00016400534528923882,\n        -0.01621940661511768,\n        0.017644082360557273,\n        -0.007927052332163372,\n        -0.012943865168810574,\n        -0.02487706098621786,\n        0.02939462906521416,\n        0.005449087122190659,\n        -0.0006427030614651495,\n        0.0076530754034089,\n        -0.007762665988646182,\n        -0.002808258513874708,\n        -0.0033516451656762296,\n        -0.003960481672717583,\n        -0.026350446762838025,\n        0.014746020838497517,\n        0.03190303455221523,\n        0.011573982853344553,\n        0.01759537605466684,\n        0.013211753576498108,\n        -0.005972686429770582,\n        -0.006551081495630413,\n        -0.01572015999482171,\n        -0.010819025798817458,\n        0.006060967889765481,\n        -0.0005932351083647627,\n        -0.003926995971002592,\n        -0.0160245776662658,\n        0.014368542776895235,\n        -0.009570910179400061,\n        0.018910463077514216,\n        -0.014380718887706577,\n        -0.014977379051105955,\n        0.007610456687262868,\n        0.009169078033530028,\n        -0.006971178739039992,\n        -0.0205421457452621,\n        0.002692579640401122,\n        -0.014295482386737047,\n        0.008809865069467295,\n        0.009315198813846404,\n        0.01807026859069506,\n        0.014965202008972079,\n        -0.015391388239109864,\n        -0.009144724880584812,\n        -0.05128839016575767,\n        -0.013918003393812233,\n        -0.006471932584405287,\n        0.007884433150356073,\n        -0.0008858571724603681,\n        -0.0004897329277791022,\n        -0.005123359394181649,\n        0.0005300683321097157,\n        0.0160245776662658,\n        -0.02006725320923388,\n        -0.01978718775941247,\n        -0.016548178370829527,\n        0.013455287899917888,\n        0.02742199853094309,\n        0.00022983579130341283,\n        -0.010636374823421989,\n        0.040280627198784134,\n        -0.029053679336045905,\n        0.035215104330956364,\n        0.003689549470157848,\n        0.007202536485987164,\n        0.021333632063545757,\n        -0.0020167710314378854,\n        0.013905827283000891,\n        -0.022770487645086827,\n        -0.020140313599392067,\n        -0.006776350721510647,\n        0.02073697283146891,\n        -0.008505446466700668,\n        0.0065206393559569895,\n        -0.009771826252335077,\n        -0.022563482585423605,\n        5.046684381197405e-05,\n        -0.01788761761529959,\n        -0.004788499583064133,\n        -0.0349959231604818,\n        -0.010873821091436099,\n        -0.030466180833319225,\n        0.038307996664513067,\n        -0.009522203873509626,\n        -0.03626230574008381,\n        -0.005089873692466658,\n        -0.013771882613495857,\n        -0.0006773306810223128,\n        0.016645590982610398,\n        -0.02778730048173403,\n        -0.014599900058181141,\n        -0.012542033022940541,\n        -0.002832612132481193,\n        0.014940848856026862,\n        -0.023026199010640482,\n        0.0011194982312229588,\n        0.007239066681066259,\n        0.016085461945612646,\n        -0.015622745520395769,\n        0.0362135975715483,\n        0.23165013379412028,\n        -0.0033151149705971357,\n        0.012286321657386884,\n        0.0026484389104036725,\n        0.015379211196975988,\n        0.005716975064216924,\n        -0.00022355716402419357,\n        -0.0030457047818888182,\n        0.007787019607252667,\n        0.016828241958005866,\n        -0.028103896126634532,\n        0.0031233314464318928,\n        -0.0009056443420589912,\n        0.014234599038712735,\n        -0.014989556093239832,\n        0.00523294997941893,\n        -0.005665224264962386,\n        -0.01408847825839636,\n        -0.0422045495645197,\n        0.001707786503532322,\n        0.0016590796155653024,\n        -0.03436273559597093,\n        -0.011105178372722005,\n        -0.013528348290076077,\n        0.0061066306336143485,\n        -0.009077752545832294,\n        0.005826565649454206,\n        0.014940848856026862,\n        0.03684678886134931,\n        -0.004127912043937608,\n        -0.02581466994746296,\n        -0.008079261167885418,\n        -0.02873708555379047,\n        0.008505446466700668,\n        -0.0003523641636658166,\n        0.014368542776895235,\n        0.028298723212841343,\n        -0.003981791263621233,\n        0.03039312044316104,\n        -0.0361648894030128,\n        -0.014551193752290704,\n        -0.03156208854833711,\n        -0.014526839668022953,\n        -0.0018386863304273027,\n        0.01422242199657886,\n        -0.005455175643257596,\n        0.004514523119970929,\n        -0.01988460223383841,\n        0.02268524928147223,\n        0.004423197632273194,\n        -0.023001844926372732,\n        -0.002592121603933614,\n        -0.007360833842776149,\n        0.02083438730589485,\n        0.007239066681066259,\n        -0.0032055243853598542,\n        0.0223321253041377,\n        0.006885941306747929,\n        -0.01640205759051315,\n        0.0033151149705971357,\n        -0.016828241958005866,\n        0.042350670344836076,\n        -0.01422242199657886,\n        0.013528348290076077,\n        -0.018898286966702874,\n        0.0007267986341226996,\n        -0.033559071304230866,\n        -0.009053399392887075,\n        -0.0009771827183657612,\n        -0.010545049335724255,\n        -0.01688912623735271,\n        0.0032755407478152064,\n        0.015890634859405835,\n        -0.007951405485108589,\n        -0.01630464311608721,\n        -0.016645590982610398,\n        0.008146233502637934,\n        0.002191811471914999,\n        0.009217785270742998,\n        0.04481037138859178,\n        -0.00638669561777449,\n        -0.005196419784339837,\n        -0.012000168152159804,\n        0.011019941871752474,\n        -0.046003689852745465,\n        -0.014161538648554548,\n        0.03407049403533818,\n        0.02523018682619746,\n        -0.006252751413930724,\n        -0.03533687288965005,\n        0.004544964793983085,\n        -0.003759565599782567,\n        -0.007306038550157508,\n        0.01732748857830184,\n        -0.009485673678430532,\n        0.010240630732957627,\n        -0.010989499732079052,\n        0.0035099427552958474,\n        -0.025303247216355646,\n        -0.0019010921579642993,\n        -0.011756633828740023,\n        -0.006234486316391177,\n        0.015525331977292363,\n        -0.0037869632460918873,\n        0.015281797653872583,\n        -0.01685259604227362,\n        0.0253276013006234,\n        0.0030776687025830256,\n        0.007062504226737727,\n        -0.025498074302562457,\n        -0.03594570823253824,\n        -0.007683517077421056,\n        -0.004681953025529687,\n        -0.002161369797902843,\n        -0.0023927275448500152,\n        -0.018825226576544687,\n        -0.02410992688955689,\n        0.008657655302422714,\n        -0.01022845369082375,\n        -0.015768866300712146,\n        0.01153745265826546,\n        -0.0017930235865784355,\n        0.003899598091862638,\n        -0.008828130167006842,\n        -0.012152377919204385,\n        0.007202536485987164,\n        -0.007153829248774194,\n        -0.0027732505654776657,\n        0.019726303480065623,\n        -0.014332012581816142,\n        0.006207088670081857,\n        -0.015805396495791237,\n        0.025839024031730714,\n        0.006965090217973055,\n        0.00484633890338561,\n        0.014185891801499767,\n        -0.022466068110997665,\n        0.00013070960426738278,\n        -0.00879768802733342,\n        -0.0012366992349632795,\n        0.0022009440206847727,\n        -0.0032024803576570188,\n        0.003333380068136683,\n        -0.01601240155545446,\n        -0.012822097541439417,\n        0.003019829382261549,\n        0.03850282188807481,\n        -0.011610513048423648,\n        -0.005927023685921714,\n        -0.008067084125751542,\n        -0.020103783404312972,\n        -0.0002933831001251435,\n        -0.024450876618725144,\n        -0.04437200904764265,\n        0.017948501894646435,\n        -0.02907803342031366,\n        0.009236050368282546,\n        -0.0333398901337563,\n        0.029199800116362282,\n        -0.01195754990167504,\n        -0.028761437775413155,\n        -0.007969670582648136,\n        0.007805284704792213,\n        0.013150869297151261,\n        -0.04568709607049003,\n        -0.0314646722112661,\n        -0.14748456433188797,\n        0.005260347625728251,\n        0.015342681001896894,\n        0.0033151149705971357,\n        0.02191811518481126,\n        -0.003293805845354753,\n        0.016328997200354963,\n        -0.005452131149893494,\n        0.004904178223707086,\n        0.01836251015132781,\n        -0.024146457084635985,\n        -0.021991175574969445,\n        0.007178182867380679,\n        -0.016828241958005866,\n        -0.01393018043594611,\n        -0.0016149390019831696,\n        -0.017193543908796807,\n        -0.0006925515762360491,\n        0.023513267657480047,\n        0.011415685030894303,\n        0.032000450889286235,\n        -0.01035630937360058,\n        0.0029071945364907985,\n        0.014185891801499767,\n        0.0022070325417517106,\n        0.002007638482668112,\n        -0.0042618557821201076,\n        0.027641179701417655,\n        -0.014758197880631391,\n        -0.0154400945450003,\n        -0.004429285687678865,\n        -0.004791543610766969,\n        -0.007835726844465636,\n        -0.021491930817318542,\n        0.02873708555379047,\n        -0.023415853183054107,\n        0.03051488713920966,\n        -0.02900497303015547,\n        0.007500866102025587,\n        0.01130000639025135,\n        0.03165950116011798,\n        0.021711111987793106,\n        0.027007990274261717,\n        -0.018301625871980965,\n        -0.030173939272686474,\n        0.003540384662138637,\n        0.04853645128665935,\n        0.005914847109449105,\n        0.01940970969781019,\n        0.0043410046933452335,\n        0.009680500764637343,\n        -0.009150812935990483,\n        -6.996863945143492e-05,\n        -0.007646986882341962,\n        0.02372027271714327,\n        0.00847500525834978,\n        0.005296877820807345,\n        0.025765963641572524,\n        -0.015026086288318925,\n        0.033559071304230866,\n        0.0023912055309985975,\n        -0.03141596776802073,\n        0.014478133362132517,\n        0.007494778046619916,\n        -0.004070072257954865,\n        -0.008925543710110248,\n        -0.026618334239203026,\n        0.017181367797985465,\n        -0.032901527792807174,\n        0.00988141683757236,\n        0.0010365442853692887,\n        -0.009290845660901187,\n        0.01512349983142233,\n        -0.019434061919432873,\n        -0.022648719086393133,\n        0.011202592847147945,\n        -0.03506898355063998,\n        0.030198293356954224,\n        -0.010636374823421989,\n        -0.022831370061788606,\n        -0.009303022703035062,\n        0.020213373989550254,\n        0.035020279107394615,\n        -0.0008044252986657742,\n        -0.009960566214458752,\n        0.009412613288272344,\n        -0.006368430520234943,\n        0.014246775149524077,\n        -0.020517791660994347,\n        -0.01535485804403077,\n        0.03458191676644549,\n        0.0051050942966421025,\n        -0.015427918434188958,\n        -0.029199800116362282,\n        -0.021881584989732163,\n        0.0169621866275109,\n        0.014441603167053422,\n        0.019872424260382,\n        -0.024353462144299204,\n        -0.02459699739904152,\n        0.0064049607153140375,\n        0.014624254142448893,\n        -0.01388147319873314,\n        -0.03251187362039355,\n        0.025498074302562457,\n        0.011190415805014068,\n        -0.0006510746033092141,\n        0.014307658497548389,\n        0.03141596776802073,\n        -0.009217785270742998,\n        -0.0008493269773812742,\n        0.015890634859405835,\n        0.033802604696328106,\n        0.018776518408009184,\n        0.0009589175626185559,\n        0.014478133362132517,\n        0.030441826749051472,\n        0.004295341949496366,\n        0.011196503860419739,\n        0.012968218321755792,\n        0.02610691150809571,\n        -0.020079429320045222,\n        -0.009710942904310765,\n        -0.012919512015865357,\n        -0.015805396495791237,\n        0.017254428188143652,\n        -0.07393710738950574,\n        -0.0500707194799813,\n        0.005528236033415785,\n        0.024170811168903735,\n        0.018155505091664588,\n        0.02196682335334676,\n        0.0031172431581955886,\n        0.009924036019379658,\n        -0.01826509567690187,\n        0.004170530294422373,\n        0.013357874356814483,\n        -0.014441603167053422,\n        -0.0135161712479422,\n        -0.03730950342392112,\n        0.02381768532892414,\n        -0.023391500961431423,\n        -0.0008196461938795105,\n        0.0172300741038759,\n        -0.04746489765590922,\n        0.011744456786606147,\n        -0.0068189694376566785,\n        0.009412613288272344,\n        0.004870692521992095,\n        -0.014051948063317266,\n        -0.013869297087921797,\n        0.0011096045591121597,\n        -0.01820421326020009,\n        0.0015464448862098684,\n        -0.001826509637539377,\n        0.01864257560114922,\n        -0.015391388239109864,\n        -0.021114450893071193,\n        0.007208624541392835,\n        -0.011975814999214586,\n        0.02571725547303702,\n        -0.0066545835598007565,\n        -0.01640205759051315,\n        0.0058113450452787615,\n        0.017278780409766336,\n        -0.02241736180510723,\n        0.010003184464943518,\n        0.010210188593284205,\n        0.0006255795325218243,\n        -0.028858852249839095,\n        0.013296990077467636,\n        0.0067580856239711,\n        -0.01441724908278567,\n        0.01899569957848375,\n        0.012712506956202135,\n        -0.0021887674442121635,\n        -0.05328537664694156,\n        -0.022490422195265418,\n        -0.02231994733068129,\n        -0.0016332040995227165,\n        0.03891683200740125,\n        -0.02100486030783391,\n        0.036944201473130184,\n        0.014356365734761359,\n        -0.006289281609009817,\n        0.0005144668752254665,\n        0.011939284804135492,\n        -0.012797744388494198,\n        -0.03385131286486361,\n        0.01478255103357661,\n        0.006060967889765481,\n        0.024925769154753367,\n        -0.0029041502759573298,\n        0.011513099505320241,\n        0.040816402151514136,\n        -0.006831146014129288,\n        -0.01787544150448825,\n        0.025059711961613333,\n        -0.010094509952641252,\n        0.03950131512866675,\n        -0.009290845660901187,\n        0.00818276369771703,\n        0.006447578965798802,\n        -0.023513267657480047,\n        -0.0012321329605783926,\n        -0.005010724781241532,\n        -0.028225662822683156,\n        0.003808272604164903,\n        -0.014575546905235923,\n        -0.0080122888331329,\n        0.015659275715474864,\n        0.023403677072242765,\n        0.0003957437703222406,\n        0.010672905018501083,\n        0.00379914005539513,\n        -0.03295023596134267,\n        -0.005516058991281908,\n        0.022186004523821325,\n        0.03299894040458804,\n        0.00908992958796617,\n        -0.005589119381440096,\n        0.013491818094996982,\n        0.01285862773651851,\n        0.012280233601981213,\n        0.024316931949220112,\n        0.020310786601331128,\n        -0.03967178813060581,\n        -0.022490422195265418,\n        -0.051580631726390415,\n        0.018484276847376434,\n        -0.0174979615802409,\n        -0.017753672945794555,\n        0.010447634861298315,\n        -0.00012119652293092568,\n        0.00837759078392384,\n        0.004270988330889881,\n        0.003537340401605168,\n        -0.0012009300468098945,\n        -0.011659220285636618,\n        -0.015391388239109864,\n        -0.011476569310241148,\n        0.012182819127555273,\n        -0.012091493639857539,\n        0.006225353767621403,\n        0.010538960348996049,\n        -0.000308604024442709,\n        0.0014064123941297975,\n        -0.008158409613449276,\n        0.0033120709428943003,\n        -0.007068592282143398,\n        -0.002692579640401122,\n        -0.029443335371104596,\n        -0.0045114786266068265,\n        -0.009899681935111907,\n        -0.008876836472897278,\n        0.025595488776988397,\n        -0.008974250947323218,\n        -0.030295705968735098,\n        0.003519075304065621,\n        -0.02825001690695091,\n        -0.003954393617311912,\n        0.0029406804710364236,\n        -0.0023805509683774064,\n        0.0022877032339976206,\n        -0.013966710631025203,\n        -0.005549545158658167,\n        0.01854516112672328,\n        -0.0017382284103751114,\n        -0.03441144003921629,\n        -0.0226000127805027,\n        0.028030835736476346,\n        -0.007561749915711165,\n        -0.006076188959602193,\n        0.004228370080405116,\n        -0.023379322987975012,\n        -0.013029102601102637,\n        0.010520695251456502,\n        0.003147685065038378,\n        0.005482573289566917,\n        0.018058092479883717,\n        -0.04174183500194789,\n        -0.005738284655120574,\n        0.00015744132586096413,\n        -0.026715748713628966,\n        0.009735296057255984,\n        -0.03877071122708488,\n        -0.008188851753122698,\n        -0.022660897059849545,\n        0.01195754990167504,\n        -0.010338044276061033,\n        0.04558967973341902,\n        0.018606045406070124,\n        -0.0013584665130884869,\n        -0.011093002261910663,\n        0.0033729545237492454,\n        -0.014599900058181141,\n        -0.017120483518638617,\n        0.007860079997410854,\n        -0.0166942991511459,\n        0.0006940736482951253,\n        -0.008164498600177482,\n        0.0007477273723175444,\n        0.03494721871723643,\n        0.004697174095366399,\n        -0.006660672080867695,\n        0.0012587695999620042,\n        -0.03560476222866012,\n        0.04232631812321339,\n        0.026667040545093463,\n        -0.01027716092803672,\n        -0.01970195125844294,\n        0.014612077100315016,\n        0.048755632457133914,\n        0.032390105061699856,\n        0.002697145914786009,\n        -0.023123611622421356,\n        0.01051460719605083,\n        0.0009010780676741044,\n        -0.01761973013893459,\n        0.008895101570436825,\n        0.00039384113659265166,\n        0.02929721459078822,\n        0.015561862172371457,\n        -0.0035586497596781837,\n        0.01986024814957066,\n        0.004602804114304562,\n        0.0008417165588782353,\n        -0.019908954455461095,\n        0.0051050942966421025,\n        0.0007450637316622465,\n        -0.005930068179285817,\n        -0.00848109331375545,\n        -0.03268234662233261,\n        -0.01648729409148268,\n        -0.020237726211172938,\n        -0.0020548234731990306,\n        -0.009169078033530028,\n        0.013163046339285138,\n        0.00852980055096842,\n        0.003208568645893323,\n        0.017741496834983213,\n        0.0038508910874803016,\n        -0.033218121575062605,\n        -0.027105402886042587,\n        -0.004557141370455694,\n        0.020091605430856564,\n        -0.017096131297015933,\n        0.024828354680327427,\n        -0.004721527248311617,\n        0.007153829248774194,\n        0.043446576197208896,\n        -0.005336452509250541,\n        -0.011476569310241148,\n        0.0187521661863865,\n        0.0072938619736849,\n        0.001800634121496791,\n        0.004246635177944663,\n        -0.0026986679286374266,\n        0.016523824286561774,\n        -0.02515712643603927,\n        -0.038673298615304004,\n        -0.033607779472766365,\n        -0.003747389023309958,\n        0.007555661394644227,\n        0.017583199943855498,\n        0.020237726211172938,\n        0.0010304558807176674,\n        0.03755303681601837,\n        -0.003455147462677207,\n        -0.019214880748958312,\n        0.0021035302447507333,\n        0.0020730885707385773,\n        0.009412613288272344,\n        0.022380831610028136,\n        -0.0015921076300587358,\n        -0.009242138423688217,\n        -0.01939753172435378,\n        0.0032207454551965655,\n        -0.014125008453475455,\n        -0.00694073659936657,\n        -0.0010532872526421012,\n        -0.009449143483351437,\n        0.00501681330230847,\n        -0.0009277147070577159,\n        0.005619561521113519,\n        -0.015208737263714394,\n        0.017485785469429558,\n        0.009759650141523735,\n        0.014478133362132517,\n        0.007646986882341962,\n        0.01714483760290637,\n        -0.014198068843633642,\n        0.014819081228655703,\n        -0.004252723233350334,\n        -0.004532788217510476,\n        -0.02686186949394534,\n        -0.04463989466136258,\n        -0.007056415705670789,\n        -0.020030723014154785,\n        -0.018861756771623783,\n        -0.031805621940434355,\n        0.014819081228655703,\n        0.033559071304230866,\n        -0.004003100388863615,\n        0.026058205202205274,\n        -0.01003362660461694,\n        -0.007379098940315696,\n        0.001573842532519189,\n        0.00810970330755884,\n        -0.024548289230506018,\n        -0.042277609954677886,\n        -0.029881697712053724,\n        0.007750489412173572,\n        -0.02927286050652047,\n        0.015391388239109864,\n        -0.023610682131905987,\n    ],\n    [\n        -0.010870544254823462,\n        0.008424977783520493,\n        -0.015566032401265804,\n        0.005520867191394592,\n        -0.004337823955717872,\n        0.009384862160173927,\n        -0.022095695168354728,\n        -0.004139121627537611,\n        -0.01929552110702138,\n        -0.015517121202224905,\n        0.018953142713735088,\n        0.0033626542472875477,\n        0.016250791050483538,\n        -0.0020160640151948394,\n        0.0051846015338351936,\n        -0.025702906807830633,\n        0.0245657191018233,\n        0.004823880276755345,\n        0.03705033665028672,\n        0.024541262570980275,\n        0.017608080083497495,\n        0.01102950611736767,\n        -0.004429532686750201,\n        0.0017332955054553726,\n        -0.028466397935544594,\n        0.021789999708687825,\n        -0.0005842612016596588,\n        -0.013267199527085532,\n        0.020872913329687107,\n        -0.022976100476381208,\n        0.03426238899172974,\n        -0.037612818233224786,\n        -0.011488050238190604,\n        -0.008956888702904776,\n        -0.002601471733153087,\n        -0.033210795418382684,\n        -0.024211110580470343,\n        -0.009054711100986573,\n        0.02242584715886466,\n        -0.016825499036197962,\n        0.009433774290537402,\n        0.029835915233980066,\n        0.006165885374976274,\n        -0.018879774983851166,\n        -0.03477596123827205,\n        0.0024149972047330507,\n        0.019821319756340057,\n        -0.046759236668259825,\n        -0.0227193162157552,\n        0.04079205548410896,\n        0.0245168079027824,\n        0.01013687440656483,\n        -0.038322031550640394,\n        0.007471206608255241,\n        -0.022303570092584987,\n        0.00787472539732652,\n        -0.022731542618531563,\n        0.02314729060434693,\n        0.019796863225497032,\n        0.0007684429303131616,\n        -0.0003376028621554022,\n        0.001460461879294275,\n        -0.018867548581074804,\n        0.028759865129789987,\n        -0.015113602413153628,\n        0.0013588180318529328,\n        0.017449118220953286,\n        0.018060511002932246,\n        -0.015566032401265804,\n        0.020970735727768905,\n        0.02410105991696703,\n        -0.002995819323158231,\n        -0.0186596755194897,\n        0.005523923792088682,\n        0.016226336382285666,\n        0.005435272127411731,\n        -0.02834411900661977,\n        -0.0010523579563512173,\n        -0.0009262584511817647,\n        -0.0014681043123520763,\n        0.025923008134837253,\n        -0.027855005153565635,\n        -0.02330625246689114,\n        0.024247795376734882,\n        0.026265386528123547,\n        -0.005077607936687261,\n        -0.005462784793287559,\n        0.05331335596619177,\n        -0.006872042557359079,\n        -0.0007623290304330493,\n        -0.0010622930727602303,\n        0.027977284082490457,\n        0.003909850032787432,\n        0.01818278993185707,\n        -0.008443319250330187,\n        0.01096836665290526,\n        -0.0028979966922457897,\n        0.0272191577033888,\n        -0.0009086809017149501,\n        -0.03560745348461248,\n        -0.024602402035442686,\n        -0.023673087391020458,\n        -0.010699355058180317,\n        -0.016788816102578576,\n        -0.008131509657952526,\n        -0.0038028564356395,\n        0.004710773012557945,\n        0.026412121987891394,\n        -0.001632415808187553,\n        -0.020909596263306494,\n        -0.01742466355275541,\n        0.024675769765326608,\n        0.013707402181098772,\n        -0.05116125575781162,\n        -0.006165885374976274,\n        0.005575892523146247,\n        -0.010032937875772276,\n        0.002633569765731338,\n        -0.002337044806638635,\n        0.0028735410927253403,\n        -0.014979097081452444,\n        0.030447306153313876,\n        0.018366206462599153,\n        -0.01592063905997361,\n        0.01702114569500671,\n        -0.0007978661462457786,\n        -0.03196355704887204,\n        -0.01868413018768757,\n        -0.019234383505204122,\n        -0.015908412657197248,\n        0.05248186371985134,\n        0.015113602413153628,\n        0.03548517455568766,\n        0.0037875715695238972,\n        -0.020579444272796565,\n        0.03499606256527867,\n        -0.0011188468212742523,\n        0.023880960452605564,\n        0.007929750729078174,\n        -0.03384664286855952,\n        0.006706967027765402,\n        0.01735129582287149,\n        0.003653065306500138,\n        0.005490297459163386,\n        0.0025586742011616567,\n        0.038860056602735435,\n        0.023624176191979557,\n        -0.014123148304268987,\n        0.016104057453360843,\n        -0.009476571356867544,\n        -0.012056644091194273,\n        0.019980281618884266,\n        0.006214796574017173,\n        -0.021459847718177893,\n        0.02729252543327272,\n        0.021362025320096095,\n        -0.0009713485501090847,\n        0.013438389655051253,\n        0.0015345931772751116,\n        0.007079916084605475,\n        0.0068292454910289365,\n        0.014514438827918754,\n        0.018647447254068184,\n        -0.030985331205408913,\n        0.0035613565754678087,\n        0.004936988006614034,\n        0.02765936035740204,\n        0.007214421881967946,\n        -0.015663854799347603,\n        -0.01796268860485045,\n        0.008920204837962813,\n        0.0003958761231828331,\n        -0.02580072920591243,\n        0.031156521333374633,\n        -0.009659988818932203,\n        0.025727363338673658,\n        0.013193832728524185,\n        -0.0004172748309708873,\n        -0.014355476965374545,\n        -0.01847625712610246,\n        -0.037025880119443695,\n        0.0014810963787011456,\n        0.014062008839806576,\n        0.006670283628484728,\n        -0.017449118220953286,\n        0.0136095788516944,\n        -0.005542265724559663,\n        -0.007428409076263811,\n        0.02110524105947009,\n        0.03470259164574298,\n        0.006407385235147965,\n        0.03827312221424465,\n        0.023342935400510526,\n        0.007825814198285621,\n        -0.6198044427809697,\n        0.014465527628877855,\n        0.01847625712610246,\n        -0.03245267276457133,\n        0.00047879613768941594,\n        0.025531716679864914,\n        -0.013487300854092152,\n        0.01581059025911545,\n        -0.008742901508608911,\n        0.02555617321070794,\n        -0.02203455756653747,\n        0.039300259256748675,\n        -0.0026442690323138737,\n        -0.011860999295030678,\n        0.008492230449371085,\n        -0.021484304249020918,\n        -0.013254972192986596,\n        -0.029787004034939165,\n        -0.015480438268605519,\n        0.022511443154170096,\n        0.0034543632111505205,\n        0.05184601626967451,\n        -0.006187283908141345,\n        -0.01375631338013967,\n        -0.004438703885816336,\n        -0.0042277737578758495,\n        0.007593485071518776,\n        -0.04313979676336241,\n        -0.0017180106393397698,\n        0.027683816888245064,\n        -0.010149102671986342,\n        -0.00641961303490819,\n        0.01599400678985753,\n        0.007715763069121023,\n        0.04269959783463947,\n        0.014587805626480101,\n        -0.021068558125850703,\n        -0.007605712871279,\n        0.010405886932612348,\n        0.03328416501091176,\n        -0.012246175685969687,\n        -0.003992387564753627,\n        0.013083782065020874,\n        -0.014930184951088969,\n        -0.014416616429836956,\n        -0.011286290377993677,\n        0.01908764804543627,\n        0.032892871693294266,\n        -0.004998127005415157,\n        -0.009568280553561162,\n        -0.004493729217567991,\n        -0.006505207633229763,\n        0.003316799881771383,\n        0.003637780673215179,\n        0.009996254010830314,\n        0.015737222529231525,\n        0.01908764804543627,\n        0.017449118220953286,\n        0.0036775211388512313,\n        0.005585063256551093,\n        0.013010415266459525,\n        0.021924506903034158,\n        0.005899929915284133,\n        0.02540943961358524,\n        0.008718445909088463,\n        0.01517474187761604,\n        -0.004677146679632649,\n        0.019760180291877646,\n        -0.0066091441640223165,\n        0.009592736153081611,\n        -0.018170561666435558,\n        -0.016617625974612856,\n        -0.022169062898238653,\n        -0.014453299363456342,\n        0.04360445594821867,\n        0.035803098280776074,\n        0.013328338991547943,\n        0.010901113987054668,\n        -0.025287160684660418,\n        0.005759309985210905,\n        -0.008192649122414937,\n        0.018757497917571496,\n        -0.016837727301619476,\n        -0.0051662600670255,\n        0.003310685981891271,\n        -0.013352794591068393,\n        -0.03949590405291227,\n        0.011439139039149705,\n        0.01154918877133044,\n        0.010210241205126178,\n        0.014783451353966272,\n        0.01803605447208922,\n        -0.010412001065323105,\n        -0.0006442539752004985,\n        0.021912278637612647,\n        0.019234383505204122,\n        -0.014294337500912134,\n        0.017449118220953286,\n        0.0174124352873339,\n        -0.02668113451393891,\n        -0.001335126582506006,\n        -0.01488127375204807,\n        0.002132228578578262,\n        -0.006340132103636086,\n        0.01819501633463343,\n        0.018965370979156602,\n        -0.0033595974137628133,\n        0.047223895853116094,\n        0.016458664112068647,\n        -0.01224006155325893,\n        -0.0064379545017178835,\n        -0.02060390080363959,\n        -0.028539763802783367,\n        0.016128512121558716,\n        0.021141925855734628,\n        -0.021288659452857323,\n        0.01934443416870743,\n        -0.014538894427439202,\n        0.0008131509541537203,\n        0.010998936385136465,\n        0.017045600363204582,\n        0.0008536556863786171,\n        0.017449118220953286,\n        -0.001281629900347362,\n        0.019038736846395374,\n        -0.0018005485205519305,\n        -0.005744025119095302,\n        0.012276745418200893,\n        -0.03771064063130658,\n        -0.009800609214666718,\n        0.01847625712610246,\n        -0.002943851057761954,\n        0.012227834219159994,\n        -0.026974601708184304,\n        0.013206060993945697,\n        -0.008669534710047564,\n        0.01680104436800009,\n        -0.013670718316156811,\n        0.013328338991547943,\n        -0.009562166420850405,\n        -0.022633720220449766,\n        -0.012178923020119095,\n        0.009543824022718136,\n        -0.022010101035694445,\n        0.006395156969726453,\n        -0.02187559570399326,\n        -0.030618496281279595,\n        0.005349677529090159,\n        0.023379618334129913,\n        -0.010791063323551358,\n        0.017314612889252103,\n        -0.004133007960488142,\n        -0.004912532407093584,\n        -0.00463129208128584,\n        -0.01702114569500671,\n        -0.011757062764238125,\n        -0.0002250685650689913,\n        0.007978661928119073,\n        -0.02751262676027934,\n        -0.038713321142967584,\n        0.01288813726885728,\n        0.019112104576279296,\n        -0.013878591377741918,\n        0.0057256831866243215,\n        0.008907977503863877,\n        -0.0029728920239848267,\n        -0.045536454829592204,\n        0.027463715561238444,\n        0.0013855664311399158,\n        -0.03668350358880256,\n        -0.015578260666687316,\n        -0.012356226349472997,\n        0.0003102812920306163,\n        -0.0004100145603113386,\n        0.024235567111313368,\n        0.027781639286326862,\n        -0.009244242695761988,\n        0.007642396270559675,\n        -0.048030931568613495,\n        -0.010931683719285873,\n        0.015076919479534242,\n        0.015578260666687316,\n        -0.011738720366105855,\n        -0.01539484320462266,\n        0.023685313793796816,\n        -0.00372643233789213,\n        0.017008917429585196,\n        -0.00498895627201031,\n        0.0009789909249592252,\n        0.01949116776583013,\n        0.009537710821329957,\n        0.01658094304099347,\n        -0.00942154602511589,\n        0.01154918877133044,\n        -0.008492230449371085,\n        -0.018109422201973147,\n        0.002508234468943069,\n        -0.02450457963736089,\n        0.01697223449596581,\n        0.04313979676336241,\n        0.01708228329682397,\n        0.023220656471585704,\n        -0.0007917522463656662,\n        -0.02270708795033369,\n        -0.0006648884746073691,\n        -0.022743770883953077,\n        0.016348613448565336,\n        -0.02611865293100085,\n        0.004732171545723016,\n        0.028026195281531354,\n        0.010069621740714237,\n        -0.02078731733438167,\n        -0.011426910773728193,\n        -0.0023187031069982983,\n        0.015676083064769114,\n        0.033259708480068734,\n        0.00934817922655454,\n        -0.0072939028132400505,\n        -0.00555143645796451,\n        -0.017901549140388037,\n        -0.012068872356615785,\n        0.04091433068774348,\n        0.00015447192730198443,\n        0.00684758695783863,\n        0.01673990490353768,\n        -0.01658094304099347,\n        0.008944660437483263,\n        0.030398394954272975,\n        0.0037722867034082944,\n        -0.014575578292381165,\n        -0.011775404231047816,\n        0.007813585932864109,\n        0.038444310479565216,\n        0.01791377740580955,\n        0.01404978150570764,\n        -0.01129851864341519,\n        0.017118968093088507,\n        -0.014037553240286127,\n        0.04309088742696666,\n        -0.0047963680765408055,\n        0.0024868357029473537,\n        0.0022086524434949883,\n        0.03064295281212262,\n        -0.012288972752299829,\n        -0.00545972772693218,\n        -0.001183042886430754,\n        0.015358159339680696,\n        -0.011922137828170512,\n        0.009763925349724756,\n        0.02166772264240815,\n        -0.01477122308854476,\n        -0.0016477006743031558,\n        -0.010167444138796035,\n        -0.01819501633463343,\n        -0.000492934545714091,\n        -0.016042917988898432,\n        -0.03215920184503564,\n        -0.022902732746497286,\n        0.03849321981596096,\n        0.025005919893191387,\n        0.020506078405557793,\n        0.010283608003687526,\n        0.011145670913581738,\n        0.02159435491252423,\n        -0.005206000532661553,\n        0.009115850565448985,\n        0.019784634960075518,\n        -0.03480041404382477,\n        -0.016849955567040987,\n        -0.029273433651042,\n        -0.04348217701929385,\n        -0.015945095590816635,\n        0.017216790491170305,\n        0.00034734691191720413,\n        0.03700142731389098,\n        0.028246296608537974,\n        0.005444442860816578,\n        -0.014392160830316508,\n        0.013303883392027495,\n        0.012392909283092383,\n        -0.016605397709191342,\n        -0.02518933828657862,\n        0.011628669702602545,\n        -0.001863216168946065,\n        0.0003230822917324744,\n        -0.003072243188074957,\n        -0.014477755894299367,\n        -0.01653203184195257,\n        0.012368453683571933,\n        -0.0010103248073639534,\n        -0.013658490982057873,\n        0.0019258838173401994,\n        0.0026427407319668285,\n        -0.02856422033362639,\n        -0.009892317480037759,\n        0.0010752851391092994,\n        0.019222155239782608,\n        -0.0017883207207917058,\n        -0.02220574583185804,\n        0.013059326465500424,\n        0.0022850765412423583,\n        -0.0065480051652211935,\n        -0.0073489281449917055,\n        0.017987143273048324,\n        0.027463715561238444,\n        0.01708228329682397,\n        0.014489983228398303,\n        -0.03406674419556614,\n        -0.023110605808082392,\n        -0.009024141368755368,\n        0.03357763220515715,\n        0.0016721562738236052,\n        -0.014563350026959652,\n        -0.0034727049107908577,\n        0.04247949650763285,\n        0.023624176191979557,\n        0.006872042557359079,\n        0.0016996689396994327,\n        0.011738720366105855,\n        0.004068811895331641,\n        0.0032954013486063117,\n        0.00928703976209213,\n        0.0070004351533333705,\n        0.010350861600860694,\n        0.029835915233980066,\n        0.011628669702602545,\n        -0.0019488110000982818,\n        0.01380522457918057,\n        0.008284357387785978,\n        -0.00465574768080629,\n        -0.019515622434028,\n        -0.008088712591622383,\n        -0.0038425969012755522,\n        -0.02580072920591243,\n        -0.012423479015323589,\n        0.001863216168946065,\n        0.0003337816456265015,\n        0.01261912474280976,\n        0.010882772520244974,\n        -0.014917957616990033,\n        -0.0017103683226972904,\n        -0.0017913776707317618,\n        0.03399337832832737,\n        0.005722626120268943,\n        -0.019747952026456135,\n        0.004188033292239797,\n        0.022682631419490666,\n        0.005355791196139627,\n        -0.0011616442368503608,\n        0.004175805492479573,\n        -0.004246115224685543,\n        0.02964027043781647,\n        -0.017216790491170305,\n        -0.04150126880152457,\n        0.00836995245176884,\n        0.002147513444693865,\n        0.01224006155325893,\n        0.01415983216921095,\n        0.007018776620143064,\n        0.00682313135831818,\n        0.004509013618022305,\n        0.013597351517595462,\n        0.011231265977564598,\n        -0.021973418102075058,\n        -0.014489983228398303,\n        0.008871293638921914,\n        0.006107802976869241,\n        -0.008174306724282668,\n        0.0031119836537110094,\n        -7.890773860642866e-05,\n        -0.013523984719034115,\n        0.02132534238647671,\n        -0.00559423398995594,\n        -0.013096010330442387,\n        -0.016947777965122784,\n        -0.0030279173557364817,\n        -0.008339382719537634,\n        -7.857338652572441e-05,\n        0.008773471240840117,\n        -0.01742466355275541,\n        -0.012221720086449239,\n        -0.019161015775320197,\n        0.010454798131653247,\n        -0.0028062879612134606,\n        -0.016226336382285666,\n        -0.023905415120803436,\n        -0.00451818481708844,\n        -0.02380759272272164,\n        0.01080329158897287,\n        -0.034531403380422404,\n        -0.020799545599803185,\n        -0.0051662600670255,\n        -0.0232695676706266,\n        0.019515622434028,\n        0.006083347377348791,\n        -0.019601218429333437,\n        -0.01930774937244289,\n        -0.004842222209226326,\n        0.012961504067418627,\n        0.018781952585769368,\n        -0.004105495294612315,\n        0.00047115373373544505,\n        -0.02219351942908168,\n        -0.022413618893443146,\n        0.013267199527085532,\n        -0.058938160619701495,\n        0.005245740998297605,\n        -0.001507080511399284,\n        0.015492665602704457,\n        0.004496785818262081,\n        0.02834411900661977,\n        0.018781952585769368,\n        -0.017449118220953286,\n        0.03484932710551082,\n        -0.0033932239795187533,\n        0.013230516593466145,\n        -0.00548418332645263,\n        -0.012912592868377728,\n        0.01347507258867064,\n        0.0037600589036480697,\n        -0.00545972772693218,\n        0.017045600363204582,\n        0.00756291533928757,\n        0.006196454641546192,\n        -0.00111273292139414,\n        0.002703879730767952,\n        -0.013450616989150191,\n        -0.015089146813633178,\n        -0.009030255501466123,\n        0.01642198117844926,\n        0.013511756453612602,\n        0.010711582392279253,\n        0.012062758223905028,\n        -0.006505207633229763,\n        0.04326207569228723,\n        -0.016874410235238863,\n        0.0271702465043479,\n        0.0025525603012815446,\n        0.013047099131401488,\n        -0.006596916364262092,\n        0.01752248595083721,\n        0.045047339113892915,\n        -0.004539583350253511,\n        -0.02844194140470157,\n        0.0051846015338351936,\n        -0.017608080083497495,\n        -0.017656993145183545,\n        -0.0030600153883147325,\n        -0.015859501458156348,\n        0.00354607194218285,\n        0.011628669702602545,\n        -0.018781952585769368,\n        -0.0033473696140025886,\n        -0.02132534238647671,\n        -0.01949116776583013,\n        0.01176929009833706,\n        0.00671308069481487,\n        -0.014648945090942514,\n        -0.022902732746497286,\n        -0.0029667781241047146,\n        0.0037692298698835604,\n        -0.001721067589279826,\n        -0.008125395525241769,\n        0.004310311289842044,\n        -0.01752248595083721,\n        -0.006074176643943945,\n        -0.005490297459163386,\n        -0.02033488827759207,\n        -0.014954640550609417,\n        -0.032990697816666366,\n        -0.007312244745711032,\n        -0.002651911465371675,\n        -0.00023653215644803244,\n        0.016837727301619476,\n        0.026632223314898014,\n        0.014465527628877855,\n        -0.020298205343972683,\n        0.023452986064013834,\n        0.01027138066958859,\n        -0.01614074038698023,\n        0.017877092609545012,\n        0.018207244600054944,\n        -0.002654968531727053,\n        0.02099519039596678,\n        0.018146105135592533,\n        0.0190631933772384,\n        0.0068292454910289365,\n        0.007770788400872678,\n        -0.0015269507442173102,\n        -0.003931248565952504,\n        -0.010118532939755136,\n        -0.005047038670117344,\n        -0.023122834073503906,\n        -0.014783451353966272,\n        -0.0010882772054583688,\n        -0.015529349467646418,\n        0.01110287291592902,\n        0.0068047894258472,\n        0.04247949650763285,\n        0.019564533633068898,\n        -0.006535777365460968,\n        0.03198801357971506,\n        -0.009684444418452651,\n        0.0036683501726157406,\n        -0.04575655615659882,\n        -0.010570962927867314,\n        0.008003117527639523,\n        0.027928372883449556,\n        0.006340132103636086,\n        -0.00234927260639886,\n        0.012392909283092383,\n        0.002739034829701581,\n        -0.015455981737762494,\n        0.006670283628484728,\n        0.007752446934062985,\n        -0.01096836665290526,\n        0.024614630300864197,\n        0.012215605953738481,\n        0.015211425742558,\n        -0.011781518363758573,\n        -0.0021108298125825467,\n        0.00483305147582148,\n        -0.0035949831412237484,\n        0.008535028447023803,\n        -0.0021582127112764003,\n        0.05209057412752415,\n        -0.012570213543768862,\n        0.001759279638153511,\n        6.911592218282395e-05,\n        0.03443358098234061,\n        -0.0336265452668432,\n        -0.0032709455162552186,\n        -0.007055460019423737,\n        -0.005514753058683835,\n        -0.0003234644250268967,\n        -0.014722311889503861,\n        -0.008437205117619431,\n        -0.02308615113988452,\n        0.010901113987054668,\n        -0.005218228332421777,\n        -0.008956888702904776,\n        0.01950339603125164,\n        -0.025702906807830633,\n        -0.024834731627870817,\n        -0.009415431892405133,\n        -0.005306879997098728,\n        0.042283851711469256,\n        -0.004353108821833475,\n        0.014930184951088969,\n        0.024846958030647178,\n        0.022755999149374588,\n        0.021484304249020918,\n        0.015260336941598899,\n        -0.00545972772693218,\n        -0.006407385235147965,\n        0.0394225381856735,\n        -0.0011203752380366196,\n        -0.02166772264240815,\n        -0.018745269652149982,\n        -0.02743925903039542,\n        0.04088987788219076,\n        -0.0018219472865476456,\n        -0.03741717343706119,\n        0.0030966990204260507,\n        0.03555854042292643,\n        -0.0017913776707317618,\n        -0.015431526138242046,\n        0.008082598458911627,\n        -0.035754185219090025,\n        0.012924820202476666,\n        -0.010216355337836934,\n        -0.020359342945789945,\n        -0.03834648808148342,\n        0.006285106771884431,\n        -0.04194147145553781,\n        0.021129697590313114,\n        -0.01808496567113012,\n        0.024663541499905097,\n        0.023220656471585704,\n        -0.0034849327105510824,\n        -0.007055460019423737,\n        0.0067191948275256265,\n        -0.006071119577588567,\n        -0.00926258416257168,\n        -0.015517121202224905,\n        0.04800647503777047,\n        -0.017595853680721134,\n        -0.010191899738316485,\n        0.026436576656089266,\n        -0.016238562785062027,\n        -0.027855005153565635,\n        -0.0020038362154346148,\n        0.01714342276128638,\n        0.020078104016966063,\n        -0.011414683439629257,\n        -0.017118968093088507,\n        -0.03311297302030089,\n        0.022291341827163476,\n        1.760139459893834e-05,\n        -0.0014895030783477917,\n        -0.0020099501153147273,\n        -0.006645827563302991,\n        -0.01499132441555138,\n        0.01869635845310908,\n        0.026143109461843873,\n        0.012026074358963067,\n        -0.0003718025696453145,\n        0.003023331989034059,\n        -0.017815955007727754,\n        -0.0023920701383902906,\n        -0.03878669073549666,\n        -0.007483434408015466,\n        0.021264202922014298,\n        -0.022169062898238653,\n        -0.029689181636857367,\n        0.006113917109579997,\n        0.011066189982309634,\n        0.008522800181602291,\n        0.012545757944248411,\n        -0.005257968798057829,\n        0.014062008839806576,\n        0.02183891090772872,\n        -0.04177027946492694,\n        -0.0070921438843657,\n        -0.022340253026204373,\n        0.016690993704496778,\n        -0.014893502017469583,\n        -0.018292838732715228,\n        0.012502959946595693,\n        0.004524298484137908,\n        0.005563664257724734,\n        -0.033357530878150535,\n        -0.008516686048891536,\n        -0.008834609773979953,\n        -0.0022178234097304786,\n        0.01364626271663636,\n        0.020371571211211456,\n        0.014942413216510481,\n        0.058938160619701495,\n        0.01769367607880293,\n        -0.005053152337166812,\n        -0.03198801357971506,\n        -0.008486117247982905,\n        0.007471206608255241,\n        -0.004539583350253511,\n        0.0009232014430340475,\n        -0.01022858267193587,\n        -0.022914961011918797,\n        0.0035949831412237484,\n        -0.00047497492116051524,\n        -0.01121292357943233,\n        0.026143109461843873,\n        -0.018439574192483075,\n        0.004762741277954221,\n        0.0030401451554967064,\n        -0.00932983775974485,\n        -0.03034948375523208,\n        -0.024431211907476963,\n        -0.029297890181885028,\n        -0.010540393195636108,\n        -0.01239902341580314,\n        0.0033229137816514955,\n        -0.0024730793700094397,\n        -0.004612950148814859,\n        -0.025067059357653798,\n        0.02743925903039542,\n        0.009146419366357614,\n        -0.008687876176857257,\n        0.019686812561993724,\n        -0.019723495495613107,\n        -0.005377190194965986,\n        -0.012435707280745101,\n        -0.003515502209951644,\n        -0.03179236878355147,\n        0.015297019875218285,\n        0.04088987788219076,\n        0.0013977942309001405,\n        0.004267514223511902,\n        0.0006377579420259638,\n        0.0017974915706118742,\n        0.002201010010437187,\n        -0.018989825647354474,\n        -0.004857507075341929,\n        0.007709649402071554,\n        0.007275561346430358,\n        -0.012227834219159994,\n        -0.024015465784306748,\n        0.028735410461592115,\n        -0.004053527029216038,\n        0.01698446089874217,\n        -0.01653203184195257,\n        -0.012582440877867798,\n        0.015798361993693937,\n        0.0103814313330919,\n        -0.006994321020622614,\n        -0.015541576801745356,\n        -0.00810093992572132,\n        -0.012521302344727963,\n        0.002528104701761095,\n        0.0075751431390477944,\n        0.014979097081452444,\n        0.013365022856489906,\n        -0.013218288328044633,\n        -0.018965370979156602,\n        -0.05429158367230005,\n        -0.015150286278095589,\n        -0.014220970702350785,\n        -0.0012808656337585174,\n        -0.002402769404972826,\n        0.0053282785302637995,\n        0.0005781473017795465,\n        0.0001792141850009115,\n        0.016409752913027747,\n        -0.034678138840190255,\n        -0.018121650467394657,\n        0.0035246731761871346,\n        0.01528479254111935,\n        0.030887508807327116,\n        -0.004129950894132765,\n        -0.02039602774205448,\n        0.03201247011055809,\n        -0.02866204273170819,\n        0.02937125791176895,\n        0.018158333401014044,\n        0.017277929955632716,\n        0.016226336382285666,\n        0.0014191929968958557,\n        0.020127015216006964,\n        -0.011824315430088715,\n        -0.011200696245333392,\n        -0.0033901669131633752,\n        0.012154467420598647,\n        -0.002057333014008581,\n        0.010570962927867314,\n        0.002188782210676962,\n        -0.03996056323776853,\n        -0.002940793991406576,\n        -0.02308615113988452,\n        -0.01277808660535397,\n        -0.035803098280776074,\n        -0.029248978982844127,\n        -0.03389555593024557,\n        0.034140113788095214,\n        0.0048911334082672245,\n        -0.0234163012677493,\n        -0.01047313959846294,\n        -0.01847625712610246,\n        -0.010479253731173697,\n        0.013328338991547943,\n        -0.02138648185093912,\n        -0.01807273926835376,\n        -0.013291655126605982,\n        -0.01181820129737796,\n        0.011775404231047816,\n        -0.014758995754445824,\n        -0.00892631897067357,\n        0.00917087589720064,\n        0.011255721577085048,\n        -0.011781518363758573,\n        0.028784321660633015,\n        0.24475231800349256,\n        -0.0122584039513912,\n        0.01841511766164005,\n        -0.0002575487600454949,\n        0.02650994438597319,\n        0.013132693264061773,\n        0.004918646074143052,\n        -0.0033412557141224764,\n        0.006749764559756832,\n        0.014257654567292747,\n        -0.011402455174207744,\n        0.007391725676983136,\n        9.129081275932169e-06,\n        0.009598849354469792,\n        -0.01272917540631307,\n        0.0006618315246673129,\n        -0.0084066363167108,\n        -0.011347429842456088,\n        -0.03203692664140111,\n        -0.0018800294518240349,\n        0.0007932807213356942,\n        -0.03509388496336047,\n        -0.023379618334129913,\n        -0.015639400131149728,\n        0.017216790491170305,\n        -0.010430342532132798,\n        -0.0060680625112331885,\n        0.020151469884204836,\n        0.028172928878654052,\n        -0.008987458435135981,\n        -0.01917324404074171,\n        -0.01675213316895919,\n        -0.027365893163156647,\n        0.00991677307955821,\n        -0.0016003177756093022,\n        0.020078104016966063,\n        0.03577864174993305,\n        -0.001575862059673531,\n        0.042552862374871624,\n        -0.027023512907225204,\n        -0.007098257551415168,\n        -0.029444623779007723,\n        -0.019368888836905303,\n        -0.0016614568908257478,\n        0.008859065373500402,\n        0.001059236122820174,\n        0.0020298203481327534,\n        -0.015786133728272426,\n        0.02866204273170819,\n        -0.007037118552614044,\n        -0.02016369814962635,\n        -0.0006178877092079377,\n        -0.004304197622792576,\n        0.02976254750409614,\n        0.00923812856305123,\n        -0.002387484538857223,\n        0.012937048467898178,\n        0.0015399428105663793,\n        -0.03404229139001342,\n        0.00365917920638025,\n        -0.024663541499905097,\n        0.04025403043201393,\n        -0.017461346486374797,\n        0.01653203184195257,\n        -0.028955511788598735,\n        0.008015344861738459,\n        -0.01769367607880293,\n        -0.003267888682730484,\n        0.002994290789980542,\n        -0.014477755894299367,\n        -0.008449433383040944,\n        -0.0049858992056549326,\n        0.02098296399319042,\n        -0.0025158769020008705,\n        -0.026192020660884774,\n        -0.012252289818680444,\n        0.009880090145938823,\n        0.009696672683874166,\n        0.004863620742391397,\n        0.03614547853670752,\n        -0.011426910773728193,\n        0.00336876814716766,\n        -0.005792936318136201,\n        -0.003069186354550223,\n        -0.04230830451702198,\n        -0.013291655126605982,\n        0.03350426633791838,\n        0.01791377740580955,\n        -0.007917522463656661,\n        -0.027145791836150027,\n        0.005001184071770535,\n        -0.009384862160173927,\n        -0.013511756453612602,\n        0.015590488000786254,\n        -0.0032831733160154433,\n        0.012765858339932457,\n        -0.019821319756340057,\n        0.0028383859937917114,\n        -0.025213792954776496,\n        -0.015113602413153628,\n        -0.03189019118163327,\n        -0.011329088375646395,\n        0.008889635105731607,\n        -0.008797926840360567,\n        0.010191899738316485,\n        -0.02347744073221171,\n        0.0270724241062661,\n        0.0036836350387313434,\n        0.01791377740580955,\n        -0.021410936519136996,\n        -0.025751818006871534,\n        -0.010320291868629488,\n        -0.006141429775455825,\n        -0.006535777365460968,\n        -0.003228148217094432,\n        -0.024431211907476963,\n        -0.008620622579684089,\n        0.019209926974361094,\n        -0.0015743336429111638,\n        -0.018598536055027284,\n        0.009904545745459273,\n        -0.00026385372657281833,\n        0.0010959196385161702,\n        -0.0025326900684635185,\n        -0.011689809167064956,\n        0.014648945090942514,\n        -0.00554837985727042,\n        -0.019637901362952823,\n        0.006927067889110734,\n        -0.013621807117115912,\n        0.017999371538469835,\n        -0.02027374881312966,\n        0.03318634261282996,\n        0.007067687819183962,\n        1.5989326151765977e-05,\n        0.006688625095294421,\n        -0.013047099131401488,\n        -0.0016477006743031558,\n        -0.015822816661891812,\n        0.002436395970728766,\n        0.004915589473448962,\n        0.0019778520827364765,\n        -0.0039129070991428105,\n        -0.000335883320538163,\n        -0.0018708586020038664,\n        0.01005127934258197,\n        0.032550495162653126,\n        -0.009476571356867544,\n        -0.005141804001843763,\n        -0.009904545745459273,\n        -0.022120151699197753,\n        -0.01132297424293564,\n        -0.020016964552503652,\n        -0.035460718024844635,\n        -0.004282798623966217,\n        -0.021080786391272217,\n        0.004484558018501856,\n        -0.031107610134333736,\n        0.025262704153817393,\n        -0.012093327956136235,\n        -0.0339200124610886,\n        -0.0023202314073453435,\n        0.004729114945028926,\n        0.020127015216006964,\n        -0.05277533091409674,\n        -0.023868732187184053,\n        -0.14800570925556392,\n        -0.006358473570445779,\n        -0.0007978661462457786,\n        -0.00046580404223651626,\n        0.019136561107122325,\n        -0.011640897968024057,\n        0.01939334536774833,\n        0.002347744073221171,\n        0.00590910064868898,\n        0.017436891818176925,\n        -0.017094511562245483,\n        -0.008284357387785978,\n        0.007263333546670133,\n        -0.013230516593466145,\n        -0.008724559110476643,\n        -0.0028995252254234785,\n        -0.0038701095671513797,\n        0.008009231660350278,\n        0.021423164784558506,\n        -0.002836857460614022,\n        0.02682786811106161,\n        -0.01840288939621854,\n        0.005973296713845481,\n        0.011934366093592027,\n        0.005851018716243234,\n        -0.0016782701737037176,\n        -0.008217104721935386,\n        0.020860685064265597,\n        -0.015260336941598899,\n        -0.006927067889110734,\n        -0.0032923442822509336,\n        -0.0058357338501276316,\n        -0.0002839150260380556,\n        -0.009678330285741896,\n        0.018439574192483075,\n        -0.01364626271663636,\n        0.03135216612953823,\n        -0.028417486736503697,\n        0.007581257271758551,\n        0.009537710821329957,\n        0.027463715561238444,\n        0.024492351371939374,\n        0.029591357376130417,\n        -0.01615296865240174,\n        -0.029884826433020963,\n        0.002974420557162516,\n        0.04389792314246407,\n        -0.00017692147254586937,\n        0.015089146813633178,\n        0.012643580342330209,\n        0.023440757798592324,\n        -0.009831178946897924,\n        -0.013988642041245229,\n        -0.005319107796858953,\n        0.012533529678826899,\n        0.015492665602704457,\n        0.0006988971154500703,\n        0.014062008839806576,\n        -0.008559484046544254,\n        0.02346521432943535,\n        0.009990140809442133,\n        -0.02729252543327272,\n        0.01621410811686415,\n        -0.0068292454910289365,\n        -0.0027512626294618056,\n        -0.014758995754445824,\n        -0.01499132441555138,\n        0.013193832728524185,\n        -0.02523824948561952,\n        0.004475387285097009,\n        0.01035697573357145,\n        0.0017164822225774028,\n        0.016898866766081887,\n        -0.02353858019667412,\n        -0.011695923299775712,\n        0.013670718316156811,\n        -0.040963243749429536,\n        0.028735410461592115,\n        0.00463129208128584,\n        -0.026094198262802976,\n        -0.009941228679078658,\n        0.021472075983599407,\n        0.023563036727517146,\n        0.0052946521973385036,\n        -0.027634905689204164,\n        0.010570962927867314,\n        -0.014942413216510481,\n        0.02773272808728596,\n        -0.03201247011055809,\n        -0.0012212549353044391,\n        0.03568081935185125,\n        0.003601097041103861,\n        -0.010815518923071808,\n        -0.03993610670692551,\n        -0.016458664112068647,\n        0.018109422201973147,\n        0.01769367607880293,\n        0.02787946168440866,\n        -0.020738406135340774,\n        -0.014636716825521,\n        0.0020481622806037343,\n        0.01730238462383059,\n        -0.02602083053291905,\n        -0.029126700053919305,\n        0.020738406135340774,\n        0.01890423151469419,\n        -0.003833425935040062,\n        0.011384113707398051,\n        0.023905415120803436,\n        -0.006768106026566525,\n        -0.002761961896044341,\n        0.0169600062305443,\n        0.03034948375523208,\n        0.01933220590328592,\n        -0.0022514499754864186,\n        0.009996254010830314,\n        0.025287160684660418,\n        0.014172059503309886,\n        0.0065480051652211935,\n        0.008094825793010563,\n        0.030104927760027583,\n        -0.016336387045788974,\n        -0.013462845254571703,\n        -0.003931248565952504,\n        -0.012692491541371108,\n        0.008907977503863877,\n        -0.09009467822778583,\n        -0.05091670162525228,\n        0.0021948961105570743,\n        0.03118097600157251,\n        0.013768540714238608,\n        0.01786486620676865,\n        -0.006043606911712739,\n        0.006590802697212623,\n        -0.01093779785199663,\n        0.011481936105479849,\n        0.022254657030898937,\n        -0.010448683998942492,\n        -0.01636084171398685,\n        -0.020200381083245737,\n        0.03144998852762003,\n        -0.03081414107744319,\n        -0.01213001088975562,\n        0.017840409675925626,\n        -0.05199275172944236,\n        0.015553805067166868,\n        -0.014220970702350785,\n        0.014404388164415444,\n        -0.001826532653250069,\n        -0.013976414707146292,\n        -0.016703221969918292,\n        0.01283922606981638,\n        -0.01631193051494595,\n        -0.003095170487248362,\n        0.00014778484203215394,\n        0.02220574583185804,\n        -0.015688311330190628,\n        -0.024859186296068692,\n        -0.002205595609970254,\n        -0.014220970702350785,\n        0.01846402886068095,\n        -0.005150975200909898,\n        -0.016690993704496778,\n        0.004142178693892989,\n        0.020799545599803185,\n        -0.029077788854878404,\n        0.009005799901945674,\n        0.009971798411309865,\n        -0.0004596901423564039,\n        -0.0339200124610886,\n        0.00530382293074335,\n        0.0007963376712757504,\n        -0.02010255868516394,\n        0.029273433651042,\n        0.006364587703156535,\n        -0.003851767634680399,\n        -0.07341591278871056,\n        -0.020970735727768905,\n        -0.01714342276128638,\n        0.002337044806638635,\n        0.050134118715307596,\n        -0.017241245159368177,\n        0.02998264883110276,\n        0.005719569519574853,\n        -0.011426910773728193,\n        0.022939415680116673,\n        0.019002053912775988,\n        -0.010570962927867314,\n        -0.03196355704887204,\n        0.0194667112349871,\n        0.008767357108129361,\n        0.01742466355275541,\n        -0.009360406560653478,\n        0.013010415266459525,\n        0.04064532002434112,\n        -0.0033932239795187533,\n        -0.01857407952418426,\n        0.027414804362197544,\n        -0.010412001065323105,\n        0.03983828430884371,\n        -0.004735228612078394,\n        0.023673087391020458,\n        0.008382179785867775,\n        -0.03034948375523208,\n        0.016874410235238863,\n        -0.021093012794048578,\n        -0.02624093185992567,\n        0.0021108298125825467,\n        -0.013157149794904798,\n        -0.002798645528155659,\n        0.013169377129003734,\n        0.01609182918793933,\n        -0.0028047594280357713,\n        0.007642396270559675,\n        0.005954955247035788,\n        -0.031719002916312695,\n        -0.015663854799347603,\n        0.01154918877133044,\n        0.02915115658476233,\n        0.0033626542472875477,\n        -0.007110485351175392,\n        0.0055361520575101944,\n        0.006208682906967704,\n        0.005756252918855527,\n        0.024736907367143866,\n        0.008914090705252058,\n        -0.04367782181545744,\n        -0.02602083053291905,\n        -0.0465391353412532,\n        0.016690993704496778,\n        -0.013047099131401488,\n        -0.03179236878355147,\n        0.00879181270764981,\n        -0.006257594106008603,\n        0.013768540714238608,\n        -0.0006339367837047241,\n        -0.0046037794154100125,\n        -0.015040235614592279,\n        -0.02143539304998002,\n        -0.00932983775974485,\n        -0.013572895918075013,\n        0.003457420044675255,\n        -0.005896872848928755,\n        0.007489548540726222,\n        0.013634034451214848,\n        -0.006596916364262092,\n        0.009996254010830314,\n        -0.012521302344727963,\n        0.010289722136398283,\n        -0.007611826538328469,\n        -0.0002728335388496062,\n        -0.03149890158930608,\n        -0.011616442368503607,\n        -0.006101689309819773,\n        -0.0060894615100595476,\n        0.026314299589809596,\n        -0.01255798527834735,\n        -0.016018463320700557,\n        0.011347429842456088,\n        -0.030936420006368013,\n        0.004139121627537611,\n        0.005930499647515339,\n        -0.011952707560401718,\n        -0.000626676483941345,\n        -0.024149972978653084,\n        0.0009522425838799031,\n        0.009757811217014,\n        0.005731797319335078,\n        -0.03135216612953823,\n        -0.02765936035740204,\n        0.025262704153817393,\n        -0.01013687440656483,\n        -0.01000236814354107,\n        0.011591986768983159,\n        -0.022230202362701065,\n        -0.011206809446721573,\n        0.013096010330442387,\n        0.002333987740283257,\n        0.0009079166933337666,\n        0.01402532590618719,\n        -0.03656122465987773,\n        -0.01971126909283675,\n        0.003335141814242364,\n        -0.02462685856628571,\n        0.008510572847503355,\n        -0.03257494796820585,\n        -0.0010034466408949964,\n        -0.029224522452001103,\n        0.011426910773728193,\n        -0.0002157066340496964,\n        0.049767285653823434,\n        0.028417486736503697,\n        0.0035307870760672468,\n        -0.0058357338501276316,\n        -0.005514753058683835,\n        -0.019906913889000344,\n        -0.01534593200558176,\n        -0.005343563396379402,\n        -0.004071868496025731,\n        0.006560232964981418,\n        -0.005630917389236614,\n        0.003225091150739054,\n        0.03308852021474817,\n        0.01022858267193587,\n        -0.008094825793010563,\n        0.01643420944387077,\n        -0.036732412925198306,\n        0.03648785506734866,\n        0.023783136191878614,\n        -0.01796268860485045,\n        -0.024113288182388545,\n        0.005844904583532478,\n        0.05453613780485939,\n        0.02812401767961315,\n        0.004022957296984832,\n        -0.02137425358551761,\n        0.011591986768983159,\n        -0.0011509448538525031,\n        0.000743605139290629,\n        0.026045287063762076,\n        -0.00509900693551362,\n        0.009678330285741896,\n        0.014110920038847475,\n        -0.0007600362888741766,\n        0.014367705230796057,\n        -0.006364587703156535,\n        0.003009575656096145,\n        -0.01659317130641498,\n        -0.004365336621593699,\n        0.006572460764741643,\n        -0.011377999574687294,\n        -0.014037553240286127,\n        -0.03533843909591981,\n        -0.0174124352873339,\n        -0.02523824948561952,\n        -0.01109675971454084,\n        -0.003763115970003448,\n        0.042234938649783206,\n        0.010039052008483032,\n        0.0060680625112331885,\n        0.02033488827759207,\n        0.0036652933390910066,\n        -0.03524061669783801,\n        -0.016495348908333183,\n        -0.010546506397024289,\n        0.008583939646064702,\n        -0.02699905823902733,\n        0.023183973537966317,\n        -0.0016568715241233245,\n        0.00749566220777569,\n        0.03436021511510184,\n        -0.004958386539779105,\n        -0.01834175179440128,\n        0.013352794591068393,\n        0.0022269943759659692,\n        -0.0016354727581276093,\n        -0.0007879310298367655,\n        -0.0005162438617665956,\n        0.0030875280541905604,\n        -0.009617191752602061,\n        -0.03257494796820585,\n        -0.035020515370831395,\n        -0.005554493524319888,\n        -0.0033412557141224764,\n        0.004129950894132765,\n        0.015358159339680696,\n        -0.0032526038166148814,\n        0.03450694684957938,\n        -0.002204067076792565,\n        -0.02094627919692588,\n        0.00931149536161258,\n        -0.0019595103830961393,\n        0.00986786188051731,\n        0.02397878285068736,\n        0.008541141648411984,\n        -0.011585872636272402,\n        -0.025067059357653798,\n        -0.004836108542176858,\n        -0.02176554504048995,\n        0.006202568774256948,\n        0.016898866766081887,\n        -0.007734105001592003,\n        0.016825499036197962,\n        -0.008865179506211159,\n        0.012368453683571933,\n        -0.00859005377877546,\n        0.02849085260374247,\n        0.020652812002680487,\n        0.009678330285741896,\n        0.013230516593466145,\n        0.01614074038698023,\n        -0.010191899738316485,\n        0.01847625712610246,\n        -0.0015330646440974225,\n        0.007679079669840348,\n        -0.020420482410252357,\n        -0.03198801357971506,\n        -0.021190837054775525,\n        -0.005325221929569709,\n        -0.01615296865240174,\n        -0.0283685755374628,\n        0.007031004419903288,\n        0.030936420006368013,\n        -0.003763115970003448,\n        0.021129697590313114,\n        -0.0007688250636075839,\n        -0.009513255221809507,\n        0.006165885374976274,\n        0.01167758183296602,\n        -0.02452903430555876,\n        -0.04115888854559313,\n        -0.02426002177951124,\n        0.004897247540977982,\n        -0.037612818233224786,\n        0.006315676038454348,\n        -0.015468210003184006,\n    ],\n    [\n        -0.013962267574017065,\n        -0.0016541318756113305,\n        0.011166953967462602,\n        -0.007102669059975833,\n        -0.01741530076914786,\n        0.00518312560587697,\n        -0.02086118699453019,\n        -0.006698742800263344,\n        -0.016257141492592306,\n        -0.02151890751442914,\n        0.015413542948553592,\n        0.010316206591030188,\n        0.00988010918856212,\n        0.025493827826042877,\n        -0.020317851518220915,\n        -0.03963482552312862,\n        0.012153535678633644,\n        0.020260658996426078,\n        0.03554551830527997,\n        0.0008990041487734446,\n        -0.011903315368982726,\n        0.009887258952278436,\n        -0.014162443262944231,\n        -0.0037425739455923023,\n        -0.04426746635464131,\n        0.031742175559050755,\n        0.008907827004823713,\n        -0.020089079568396333,\n        -0.0006300178048430804,\n        -0.01374064445658618,\n        0.043295184170902896,\n        -0.028596553332720483,\n        -0.009822916666767281,\n        -0.016657492870446638,\n        -0.010344803783250221,\n        -0.013876477860002191,\n        -0.021561802371436577,\n        -0.02106136175213474,\n        0.013225906172496943,\n        -0.014670031783317153,\n        0.04034973856482241,\n        0.009065107836743441,\n        -0.010673664043199697,\n        -0.009293879786568026,\n        -0.016242841965159672,\n        0.006602229371996612,\n        -0.00899361578751597,\n        0.0019284800766676243,\n        -0.038576749900084875,\n        0.015999772350547687,\n        0.02962602990089896,\n        0.003674657243884297,\n        -0.03523095477879529,\n        -0.0015075745251128068,\n        -0.029597432708678924,\n        0.009908706380782156,\n        -0.021847766843056,\n        -0.0023717266607753726,\n        -0.004950778308532919,\n        -0.012182131939531063,\n        -0.0007846179410304984,\n        0.0008069590317910928,\n        -0.014448408665886269,\n        0.011524411419632112,\n        -0.025551020347837718,\n        -0.003281454465593013,\n        -0.013969416406410766,\n        0.02263417193397726,\n        0.007066923501023405,\n        0.010309057758636487,\n        0.008893528408713694,\n        0.010609321757688542,\n        -0.019045305335430453,\n        0.008743396409187667,\n        0.025894179203897208,\n        -0.01571380601628303,\n        -0.012389457392174544,\n        0.013676302171075025,\n        -0.015742403208503068,\n        0.0007707664961910681,\n        0.0007475318013812612,\n        -0.030827085897107184,\n        -0.014219636716061685,\n        0.02294873359781672,\n        -0.010995374539432856,\n        0.010080284877489286,\n        0.014541347212294843,\n        0.03683236029021261,\n        -0.012346562535167107,\n        -0.011688841083945542,\n        0.012346562535167107,\n        0.031113050368726608,\n        0.025722599775867463,\n        0.017501090483162736,\n        -0.0042894829067758105,\n        0.014641435522419734,\n        -0.024249876972827218,\n        0.03374393431096764,\n        0.008764843837691385,\n        -0.02845357109691077,\n        -0.020303553853433513,\n        -0.02243399717637271,\n        -0.030798488704887148,\n        -0.01910249785722529,\n        -0.020946974845899833,\n        -0.014176741859054248,\n        0.02918278366603719,\n        0.008793440098588805,\n        0.007556639474750768,\n        -0.01635722887139458,\n        -0.01471292664032459,\n        0.048042210046005264,\n        -0.006534312670288606,\n        -0.05819398790404464,\n        0.004528979036513563,\n        -0.02466452787811418,\n        -0.0009633464342845995,\n        -0.017958636245457137,\n        -0.011517261655915796,\n        0.0013771027459920718,\n        0.004761326333857613,\n        0.02414978959402494,\n        0.006863172930238082,\n        -0.02746698938573973,\n        0.025879881539109806,\n        -0.009629889810233817,\n        -0.025207861491778224,\n        -0.0009338562200919869,\n        -0.021018466895127305,\n        -0.02786734262623929,\n        0.05807960286045496,\n        0.02569400444629266,\n        0.018044425959472008,\n        -0.012482395938583118,\n        -0.01157445510903325,\n        0.015942577966107617,\n        -0.0015629804208858547,\n        -0.002496836582770178,\n        -0.013004283055066058,\n        -0.019002410478423014,\n        0.012532439627984256,\n        0.01272546648451772,\n        -0.0013485062522639987,\n        0.01823030305228916,\n        -0.0020678882455264663,\n        0.030455329848827657,\n        0.019274077285255035,\n        0.0018659251156702215,\n        0.01458424206930228,\n        -0.017300915725558186,\n        0.0023913868811806654,\n        -0.008328746435223319,\n        0.0058479954238309295,\n        -0.025651109589285223,\n        -0.0017086440509198387,\n        0.01233226393905709,\n        -0.007456551630287185,\n        0.001170671479474437,\n        0.008064228460784998,\n        0.004014241218085631,\n        0.01478441868955206,\n        0.009365371835795496,\n        0.00625907051593712,\n        -0.0205466234680455,\n        0.007309994046958008,\n        0.020174869282411204,\n        0.03302902126927385,\n        0.013855030431498473,\n        -0.023577858788140865,\n        -0.005744332697509188,\n        0.024950494212378833,\n        0.00440029493115256,\n        -0.017029247056080932,\n        0.012217877964144797,\n        0.0041643732176116595,\n        0.01386932902760849,\n        -0.006276943528243987,\n        -0.010945330850031718,\n        -0.021547502844003943,\n        0.0014709352456958394,\n        -0.015156173806508973,\n        -0.020417938897023192,\n        0.04037833389439721,\n        0.005394025009055995,\n        -0.014641435522419734,\n        -0.009165195215545716,\n        0.021890661700063437,\n        0.010301908926242786,\n        0.0050115461778472235,\n        0.00882918612320254,\n        0.004850690464069336,\n        0.040406929223972016,\n        0.024221281643252414,\n        0.0039927937895819126,\n        -0.6067044998852985,\n        -6.674391187703517e-05,\n        -0.010580724565468509,\n        -0.05567749086803851,\n        -0.025007686734173674,\n        0.004725580309243877,\n        -0.0008413642428773652,\n        0.001796221089448464,\n        -0.005297511580789263,\n        0.030169363514563,\n        -0.040521317992852156,\n        0.030197960706783038,\n        0.0397492105667183,\n        -0.01534205089932612,\n        -0.006673720955562776,\n        -0.02465023021332678,\n        0.008528922124150485,\n        -0.040235349795942274,\n        -0.012639676770502848,\n        0.01105256799255031,\n        -0.0047577514519994545,\n        0.020761097753082686,\n        0.01406235495281934,\n        -0.013690599835862427,\n        0.008636159266669075,\n        -0.008936423265721131,\n        -0.0005339512950162813,\n        -0.023434876552331153,\n        0.020761097753082686,\n        0.04060710770686703,\n        -0.021104256609142176,\n        0.005565604437085741,\n        0.03297182688483378,\n        -0.017958636245457137,\n        0.027710060862996946,\n        0.005386875711000986,\n        -0.013290248458008098,\n        0.017772759152639987,\n        0.008364492459837053,\n        0.030369540134812783,\n        -0.01797293391024454,\n        0.010051688616591867,\n        0.00843598357774191,\n        -0.02570830211108006,\n        0.006219750540787841,\n        -0.010480637186666232,\n        0.030712698990872277,\n        0.025079176920755914,\n        0.00559062628178631,\n        -0.011381428252499786,\n        -0.0011304575510299654,\n        -0.00016174925961943629,\n        0.012418053653071963,\n        0.01271831765212402,\n        0.019988990326948827,\n        0.033400775454908146,\n        0.020031885183956263,\n        -0.006087491553568681,\n        -0.01784424933922223,\n        -0.007506595319688322,\n        0.013604810121847555,\n        0.0035942293869953533,\n        -0.019045305335430453,\n        0.012031999940005035,\n        0.010852392303623145,\n        0.00846457983863933,\n        0.0014905953496858054,\n        -0.004911458333383641,\n        -0.0006675508047245874,\n        0.007871201604251534,\n        0.001069689798130988,\n        -0.009987346331080713,\n        -0.015456437805561028,\n        -0.015513630327355867,\n        0.017615477389397644,\n        0.04655518957817762,\n        0.036003062204929145,\n        0.0012823767586544186,\n        0.0016282163104462222,\n        -0.0034083518285168975,\n        -0.011245594849083775,\n        -0.009408266692802933,\n        -0.03708972943225723,\n        -0.015427840613340994,\n        0.008450281242529311,\n        -0.003179579413031005,\n        -0.012060596200902454,\n        0.026065758631926957,\n        0.020589518325052937,\n        0.012653975366612865,\n        0.019717323520116806,\n        0.02843927343212337,\n        -0.005401174307111003,\n        -0.013054326744467196,\n        0.009801469238263564,\n        0.027681463670776913,\n        -0.0054512179965121406,\n        0.011452920301727256,\n        0.020160569754978572,\n        -0.03866253961409975,\n        -0.011588753705143267,\n        0.0011143719796521767,\n        0.0022037218817731307,\n        -0.0055942006979831605,\n        0.004915032749580491,\n        -0.0007073178729367894,\n        -0.008679054123676512,\n        0.019316972142262474,\n        0.024821809641356524,\n        -0.02791023748324673,\n        -0.018430479672538937,\n        -0.0345446370666763,\n        -0.022376802791932642,\n        0.006634400514752189,\n        0.000789979798156428,\n        -0.028281991668881023,\n        0.0006635294118801402,\n        -0.012875598484043748,\n        0.011896166536589025,\n        -0.002400323154503446,\n        0.0012895258238787735,\n        0.004482509763309275,\n        -0.001991035037665027,\n        -0.01687196715548382,\n        0.013261652197110677,\n        0.018087320816479447,\n        -0.0008029376389466456,\n        -0.006162557553331695,\n        -0.004539702750765422,\n        -0.0270809356726728,\n        -0.018473374529546376,\n        -0.002178700037072562,\n        0.013990863834914484,\n        -0.025665407254072625,\n        0.0065307377884304485,\n        -0.01157445510903325,\n        0.012282220249655952,\n        0.00037086157111536263,\n        0.022905840603454512,\n        -0.011002524303149172,\n        -0.026265935252176735,\n        -0.014577093236908579,\n        0.021876364035276034,\n        -0.029540240186884087,\n        0.0007015092137862535,\n        -0.0061804300999772546,\n        -0.026809268865840778,\n        -0.02340627936011112,\n        0.01128134087369751,\n        0.029011204238007446,\n        0.003528099893385773,\n        -0.010373400044147642,\n        -0.022248118220910332,\n        0.010823796042725724,\n        -0.003136684556023568,\n        -0.006534312670288606,\n        0.026952252964295723,\n        0.0019785241153147423,\n        -0.019717323520116806,\n        -0.015413542948553592,\n        -0.01314726529087577,\n        0.011074015421054028,\n        -0.0067309139430189215,\n        -0.014727225236434606,\n        -0.007999886175273844,\n        0.0024378561543849527,\n        0.0020106952580703197,\n        0.02851076361870561,\n        -0.010073136045095585,\n        -0.031827965273065625,\n        0.012418053653071963,\n        0.015928280301320215,\n        0.030912875611122055,\n        0.005229594879081257,\n        0.0111526563026752,\n        0.003544185464763562,\n        -0.02153320517921654,\n        0.013233055004890644,\n        -0.031055857846931767,\n        0.0005339512950162813,\n        -0.003070555062413988,\n        0.01784424933922223,\n        -0.009930153809285873,\n        -0.014148144666834212,\n        0.02629453058175154,\n        0.011488665395018376,\n        0.012618229341999129,\n        -0.012954239365664921,\n        0.002459303582888671,\n        0.015299156042318685,\n        0.003935600802125767,\n        -0.019531446427299655,\n        -0.004861414178321196,\n        0.02519356382699082,\n        -0.003914153373622048,\n        0.0009821128760176894,\n        0.012925642173444886,\n        -0.0030133618421271883,\n        -0.00713126578653456,\n        0.03254287831475942,\n        0.03837657514248033,\n        -0.006348435111810151,\n        0.02249118969816755,\n        -0.018759339001165797,\n        -0.0036228258807234266,\n        -0.01818740819528172,\n        0.005547731424778873,\n        -0.0096155912141238,\n        0.0014789780313847337,\n        0.016471615777629487,\n        0.004554001346875439,\n        -0.006276943528243987,\n        -0.003329711179726379,\n        -0.011738885704669294,\n        0.026237338059956702,\n        0.027624271148982072,\n        -0.015442139209451011,\n        0.019302674477475072,\n        0.004443189788159997,\n        -0.007835455579637798,\n        -0.002795313140893155,\n        0.01680047510625635,\n        0.005844420541972771,\n        0.008264404149712164,\n        -0.0111526563026752,\n        -0.010280461497739066,\n        0.0013699536807677169,\n        0.01810161848126685,\n        -0.01642872092062205,\n        0.0019785241153147423,\n        -0.016257141492592306,\n        -0.01534205089932612,\n        0.025865583874322404,\n        0.010616470590082243,\n        0.007735367735174215,\n        0.005097335891862097,\n        0.010730856564994536,\n        -0.0010768389797706696,\n        0.03297182688483378,\n        -0.015127576614288938,\n        -0.017100739105308405,\n        0.014505602119003723,\n        0.024821809641356524,\n        -0.004586172489631017,\n        0.005397599425252845,\n        -0.0029686797770213263,\n        0.04172237398906038,\n        -0.0035763566075191393,\n        -0.0062697942301889785,\n        0.01864495395757612,\n        -0.02778155291222442,\n        0.004736304023495737,\n        -0.02746698938573973,\n        -0.019931797805153986,\n        -0.004797071892810041,\n        -0.012746913913021438,\n        -0.008393088720734474,\n        0.004911458333383641,\n        0.017829951674434828,\n        0.024693125070334214,\n        0.004221566205067805,\n        -0.011531560252025813,\n        -0.005558455139030733,\n        0.01772986429563255,\n        -0.00011784907622876172,\n        -0.019159690379020128,\n        0.016514510634636926,\n        -0.029154186473817158,\n        -0.002048228257951827,\n        -0.015999772350547687,\n        -0.034087093167027134,\n        -0.011924762797486443,\n        0.004092881634045495,\n        0.0011483303305061794,\n        0.04832817451762469,\n        0.0231489102180665,\n        0.025236458683998257,\n        0.0007881925318503392,\n        0.013883626692395892,\n        0.021876364035276034,\n        -0.0006648698761616226,\n        -0.017501090483162736,\n        0.016443018585409454,\n        -0.00791409646125897,\n        -0.006805979942781935,\n        -0.010259014069235349,\n        -0.04375272807055207,\n        -0.0018409031545543258,\n        0.006026723684254377,\n        0.02596567125312468,\n        -0.00016666428561692783,\n        0.00885778238409996,\n        -0.009629889810233817,\n        -0.0026040737252887693,\n        -0.0021751253880450574,\n        0.005090186593807089,\n        0.03508797068034034,\n        -0.029911996235163614,\n        -0.003864109451390257,\n        -0.030712698990872277,\n        0.005726460150863628,\n        -0.01144577053801094,\n        -0.022591277076969823,\n        0.025665407254072625,\n        0.05210292193427911,\n        0.014855909807456916,\n        0.003999943087636922,\n        -0.008421684981631893,\n        0.011753183369456697,\n        -0.010116030902103022,\n        0.02856795800314568,\n        -0.0017354533365494865,\n        0.013032879315963478,\n        0.008257255317318463,\n        0.03749008267275679,\n        -0.010509233447563653,\n        -0.006459246670525593,\n        0.004160798801414809,\n        -0.005025844308295934,\n        0.014033758691921921,\n        -0.005433345449866581,\n        -0.0037247011661160883,\n        -0.0048042211908650495,\n        -0.0036639335296324376,\n        0.023635051309935703,\n        0.020417938897023192,\n        0.018930918429195545,\n        0.014741523832544625,\n        -0.01688626482027122,\n        -0.0032314105433612216,\n        -0.01534205089932612,\n        -0.00846457983863933,\n        0.0048399667498174774,\n        -0.0323141045022896,\n        -0.02956883737910412,\n        -0.017858547004009632,\n        -0.018015828767251975,\n        -0.010466338590556215,\n        0.02545093296903544,\n        -0.006895344072993659,\n        0.006319838385251424,\n        -0.005383301294804135,\n        0.025593915204845153,\n        -0.011731735940952979,\n        0.015199068663516408,\n        0.023849525594972887,\n        0.009694232095744972,\n        0.031970945646230105,\n        -0.001330633356372458,\n        0.010387698640257658,\n        0.0006036553794457023,\n        0.03137042137341646,\n        0.012553887056487974,\n        -0.04306641035843308,\n        -0.01327594986189808,\n        0.01285415105554003,\n        0.013161563886985788,\n        0.025007686734173674,\n        -0.01655740549164436,\n        0.017744161960419953,\n        -0.0002470920842982079,\n        0.036403411720138244,\n        0.04435325606865618,\n        -0.002582626296785051,\n        -0.012861299887933731,\n        0.005676415995801183,\n        0.009908706380782156,\n        -0.029769012136708673,\n        0.022476892033380148,\n        0.0030866406337917767,\n        -0.041293425418986014,\n        0.021819171513481197,\n        -0.008679054123676512,\n        -0.006266219813992128,\n        -0.0069096422034423685,\n        0.0166288956782266,\n        -0.024492948450084435,\n        -0.03648920143415312,\n        0.015170471471296375,\n        0.02210513598510062,\n        -0.02465023021332678,\n        -0.014970295782369209,\n        0.013447529289927826,\n        -0.023291892453876212,\n        -0.019588638949094496,\n        -0.019831710426351713,\n        0.012818405030926294,\n        -0.009715679524248691,\n        0.026437514680206484,\n        -0.015156173806508973,\n        -0.014634286690026033,\n        -0.0035513345299879166,\n        -0.012696870223620302,\n        -0.004686260334094599,\n        0.027452691720952327,\n        -0.005619223008345037,\n        -0.014827313546559497,\n        -0.00847172867103303,\n        -0.0027524182838857183,\n        0.026509004866788723,\n        0.008893528408713694,\n        0.0035227380362598437,\n        -0.00779971002068537,\n        0.0033654569715094607,\n        0.00912230035853828,\n        -0.07303560097803677,\n        0.010680812875593398,\n        -0.047556070816781294,\n        -0.0011197338367781062,\n        0.007435104201783467,\n        0.019173989906452762,\n        -0.00688104594254495,\n        -0.027767253384791784,\n        0.018673549287150926,\n        0.012375158796064527,\n        -0.010108882069709321,\n        0.0008824717753710496,\n        -0.02673777867925854,\n        0.002291298803886429,\n        0.007399358177169731,\n        -0.016986352199073497,\n        0.01741530076914786,\n        -0.005311809711237972,\n        0.0021411670371910547,\n        0.011095462849557746,\n        -0.0315420008014462,\n        -0.01494169952147179,\n        -0.016342931206607177,\n        -0.010566426900681106,\n        0.010466338590556215,\n        0.04152219550616537,\n        0.0231346125532791,\n        0.0002074367165921575,\n        0.0003460629819079384,\n        0.042151318833844285,\n        -0.016171351778577432,\n        0.02197645141407831,\n        0.0067702339181682,\n        0.013905074120899611,\n        0.0004727367691965293,\n        0.02243399717637271,\n        0.014298276666360242,\n        -0.016771879776681545,\n        -0.034172882881042005,\n        0.02203364393587315,\n        -0.002030355245644959,\n        0.016857667628051187,\n        0.030626909276857402,\n        -0.026895058579855653,\n        0.009515502903998909,\n        -0.023291892453876212,\n        -0.042523076744769045,\n        0.010666514279483381,\n        -0.005172401891625111,\n        -0.006562908931186026,\n        0.003077704127638343,\n        0.0032760926084670836,\n        -0.038776928382979886,\n        -0.028010324862049,\n        -0.002244829530682142,\n        0.0008739821876575489,\n        -0.0013887201807084705,\n        -0.015699508351495632,\n        -0.002450367309565891,\n        -0.0015924706350784672,\n        0.021647592085451448,\n        0.01754398534017017,\n        -0.013290248458008098,\n        -0.023720841023950577,\n        -0.03594586782048908,\n        0.013104370433868334,\n        0.0029043374915101714,\n        -0.002260915102059931,\n        0.009944451474073275,\n        0.014798716354339462,\n        0.017372405912140426,\n        -0.029139888809029756,\n        -0.009737126952752409,\n        0.018945216093982947,\n        -0.004664812905590881,\n        0.012525290795590555,\n        0.017686969438625116,\n        0.02537944091980797,\n        0.0020142696742671703,\n        0.02582268901731497,\n        0.013812135574491036,\n        -0.001537958459769959,\n        0.0007229566422899718,\n        0.015871087779525377,\n        0.004614768750528435,\n        -0.013912223884615927,\n        -0.004339527061838256,\n        -0.03740429295874192,\n        -0.006444948540076883,\n        0.01157445510903325,\n        0.002993701854552549,\n        -0.0028292714917471577,\n        0.02000328985438146,\n        0.03763306677121173,\n        0.011517261655915796,\n        -0.02896830938100001,\n        -0.014276829237856522,\n        -0.005940933970239503,\n        -0.014376917547981413,\n        -0.02746698938573973,\n        0.014684330379427171,\n        0.0135404678363364,\n        0.035802883722034134,\n        -0.013290248458008098,\n        0.007295695916509298,\n        0.024478650785297033,\n        -0.017157931627103242,\n        -0.00883633495559624,\n        -0.0014244658560762253,\n        -0.004682685917897748,\n        0.0028650172835302393,\n        0.0436669383565372,\n        0.009472608046991474,\n        0.006087491553568681,\n        -0.015327753234538718,\n        -0.007099094643778983,\n        -0.03851955924093527,\n        0.012139237082523626,\n        0.0022484039468789927,\n        -0.006691593502208336,\n        0.052560465833928274,\n        0.005483389139267718,\n        -0.013447529289927826,\n        -0.01870214647937096,\n        0.02191925889228347,\n        -0.01275406274541514,\n        -0.010116030902103022,\n        -0.010652216614695979,\n        -0.017343810582565622,\n        -0.018630654430143487,\n        -0.028339184190675864,\n        -0.0016139180635821855,\n        -0.015156173806508973,\n        0.03551691925041471,\n        0.00021224004208349745,\n        -0.01193906139359646,\n        0.024807510113923893,\n        -0.005504836567771437,\n        -0.02916848413860456,\n        0.0205323258032581,\n        -0.017644074581617677,\n        0.058222583233619445,\n        0.00506873916530337,\n        0.02334908683831628,\n        0.05667836838135173,\n        0.02067530803906781,\n        0.017172231154535877,\n        0.018173110530494318,\n        -0.01013747833060674,\n        -0.008321597602829618,\n        0.02982620652114874,\n        0.021461713129989072,\n        -0.011338533395492349,\n        -0.012146385914917327,\n        -0.00467911103603959,\n        0.013983715002520783,\n        -0.00402496493233749,\n        -0.018201705860069122,\n        0.029268573380052065,\n        0.01571380601628303,\n        -0.00044034225453248047,\n        -0.03568849867844446,\n        0.002552242362127899,\n        -0.0354597285912651,\n        -0.0028274842836487324,\n        -0.009379669500582898,\n        0.004260886645878392,\n        -0.0008771099182451201,\n        0.013104370433868334,\n        -0.009315327215071743,\n        0.006773808800026359,\n        -0.0009124087915882685,\n        0.016042667207555122,\n        -0.013082923005364615,\n        -0.009379669500582898,\n        -0.009958750070183292,\n        -0.019059603000217855,\n        -0.002008907817141241,\n        -0.012282220249655952,\n        -0.0003887344087992401,\n        0.04089307217848645,\n        -0.015013190639376645,\n        -0.016071262537129927,\n        0.014884506068354337,\n        -0.0244643512578644,\n        -0.036432010775003514,\n        0.0005254617073027807,\n        0.013068625340577213,\n        0.032171124129125116,\n        -0.019245480093035002,\n        -0.012296517914443354,\n        -0.02675207634404594,\n        0.00713126578653456,\n        0.0062340486712365506,\n        -0.009208090072553153,\n        -0.006391329968817587,\n        -0.0006849768403838584,\n        -0.024736019927341653,\n        0.005222445581026249,\n        0.020575220660265535,\n        0.029340063566634305,\n        -0.015056085496384082,\n        -0.004568299477324149,\n        -0.003935600802125767,\n        -0.011631648562150704,\n        -0.019960394997374023,\n        -0.0006014212529073438,\n        0.006380606254565728,\n        0.0010303695901510556,\n        -0.014755821497332027,\n        0.014176741859054248,\n        -0.000719382051470131,\n        -0.010559277136964789,\n        0.012453799677685699,\n        0.025536722683050316,\n        0.02773865805521698,\n        0.036088851918944016,\n        -0.025279353541005696,\n        0.032228314788274724,\n        -0.04598325690964831,\n        0.002525433076498251,\n        -0.023835227930185485,\n        0.0021375923881635506,\n        -0.01363340731406759,\n        -0.016657492870446638,\n        0.005133081450814525,\n        -0.005894464697035216,\n        -0.013955118741623364,\n        0.004693409632149608,\n        -0.007449402332232177,\n        0.00383551272483153,\n        0.012296517914443354,\n        0.021876364035276034,\n        0.03059831208463737,\n        -0.008814887527092523,\n        0.012174983107137362,\n        -0.037575872386771667,\n        -0.023892420451980322,\n        0.0065772075272960435,\n        -0.026408917487986447,\n        0.013461827886037843,\n        0.00010746048532323111,\n        -0.007771113759787951,\n        0.00872909781307765,\n        0.009908706380782156,\n        0.014770120093442043,\n        0.020060482376176296,\n        -0.010073136045095585,\n        0.018916620764408143,\n        -0.005733608983257329,\n        0.007249226643305011,\n        -0.03763306677121173,\n        -0.02479321244913649,\n        -0.03385831935455732,\n        -0.00872909781307765,\n        -0.013476126482147861,\n        0.007985587579163825,\n        -0.02530795073322573,\n        -0.011788929394070433,\n        -0.02813900943307131,\n        -0.0022484039468789927,\n        0.008736247576793966,\n        -0.002300235310039863,\n        -0.004621918048583445,\n        -0.004511106489868002,\n        0.023320489646096246,\n        0.027181024914120305,\n        -0.024021105023002632,\n        -0.01000879375958443,\n        0.0006528056976282811,\n        0.02459303582888671,\n        0.006380606254565728,\n        -0.002834633348873087,\n        0.009558397761006346,\n        0.006552185216934167,\n        0.012410904820678262,\n        -0.01104541916015661,\n        -0.0011947997201257933,\n        0.019145392714232726,\n        0.02878243228818286,\n        0.014384066380375114,\n        -0.012253623057435919,\n        0.04552571300999914,\n        0.004836392333620627,\n        0.01568521068670823,\n        -0.014741523832544625,\n        -0.011195551159682637,\n        0.009901556617065838,\n        0.027552779099754603,\n        -0.003629975178778435,\n        -0.004239439217374673,\n        -0.008879229812603678,\n        -0.02336338450310368,\n        0.012632527938109147,\n        -0.004067859789344927,\n        -6.881045855233454e-05,\n        0.019159690379020128,\n        -0.026237338059956702,\n        -0.01040199630504506,\n        -0.04598325690964831,\n        -0.015871087779525377,\n        -0.014512750951397424,\n        0.008128570746296153,\n        -0.027638568813769474,\n        -0.014384066380375114,\n        -0.008478878434749346,\n        0.00596953069679823,\n        0.03551691925041471,\n        0.0060910659697655314,\n        -0.01220357936803478,\n        -0.006201877528480973,\n        -0.004503957191812994,\n        0.027810148241799223,\n        0.008150018174799871,\n        -0.00441816747779812,\n        0.00935822207207918,\n        -0.0022037218817731307,\n        0.03594586782048908,\n        0.02479321244913649,\n        0.0020678882455264663,\n        0.037890432187965895,\n        0.009422564357590335,\n        0.006977559370811682,\n        -0.0410646516065162,\n        -0.0018462650116802554,\n        -0.02570830211108006,\n        -0.011388578016216101,\n        0.011896166536589025,\n        0.007642429188765641,\n        -0.017501090483162736,\n        -0.02283434855422704,\n        0.009851512927664702,\n        -0.020203464611986008,\n        -0.01810161848126685,\n        -0.026594794580803598,\n        -0.021418818272981633,\n        -0.020375044040015756,\n        0.014591391833018596,\n        -0.0017023885897446964,\n        -0.03068410179865224,\n        -0.006398478801211288,\n        -0.004017815634282482,\n        -0.0014611051354931927,\n        0.031627786790170614,\n        -0.034315863254206484,\n        -0.01707214191308837,\n        -0.009937302641679574,\n        -0.007756815163677933,\n        0.017258020868550748,\n        -0.0030169364911546924,\n        -0.0044253167758531295,\n        -0.001075945375721457,\n        0.02302022564704419,\n        0.0061732812675835535,\n        0.020846887467097557,\n        0.1944565708581383,\n        -0.003982070075330054,\n        -0.007091945345723974,\n        0.03099866532513693,\n        0.024092597072230104,\n        0.018888023572188106,\n        0.009186642644049435,\n        -0.005537007710527014,\n        0.00727424848800558,\n        0.01628573682216711,\n        -0.0358314827768994,\n        -0.0009704955577166177,\n        -0.013433231625140424,\n        -0.0013547617134391408,\n        -0.0005692501683594299,\n        -0.010323356354746504,\n        -0.022505487362954952,\n        -0.020961274373332464,\n        -0.048614142714534576,\n        -0.013183011315489506,\n        0.003267156335144303,\n        -0.02119004632315705,\n        -0.020618115517272974,\n        -0.0021340177391360464,\n        0.01324735360100066,\n        -0.0017068568428214134,\n        0.005658542983494315,\n        0.014212486952345367,\n        0.020074780040963698,\n        -0.006859598514041231,\n        -0.02404970221522267,\n        0.006251921683543419,\n        -0.04912888099862381,\n        0.022476892033380148,\n        -0.013197309911599522,\n        0.006838151085537513,\n        0.026537602059008757,\n        0.00860041324205534,\n        0.035030780021190734,\n        -0.014870208403566934,\n        0.0018409031545543258,\n        -0.017029247056080932,\n        -0.028853922474765103,\n        -0.015670911159275595,\n        -0.011645946226938106,\n        0.0019159691543173397,\n        -0.018930918429195545,\n        -0.0054512179965121406,\n        0.0005558455255446059,\n        0.003461970399776193,\n        -0.03282884278637884,\n        -0.0003351158666437761,\n        0.006041021814703086,\n        0.009129450122254596,\n        0.019788815569344274,\n        -0.017115036770095807,\n        0.03734709857430185,\n        0.003817639945355316,\n        -0.018416180145106306,\n        0.015985472823115052,\n        -0.011603051369930669,\n        0.04318079540202276,\n        -0.030569716755062565,\n        -0.01000879375958443,\n        -0.009815766903050966,\n        -0.003932026385928916,\n        -0.03254287831475942,\n        -0.022677066790984697,\n        -0.0015415329923821363,\n        -0.008500325863253064,\n        -0.016114157394137362,\n        -0.014927400925361772,\n        0.005733608983257329,\n        -0.011488665395018376,\n        -0.005179550724018812,\n        -0.031999544701095374,\n        0.009758574381256126,\n        0.013533319003942699,\n        -0.009150897550758314,\n        0.04664097929219249,\n        -0.02818190429007875,\n        -0.01582819292251794,\n        -0.021676187415026252,\n        -0.001520085563878418,\n        -0.0010616470124420936,\n        -0.011753183369456697,\n        0.0449823793963351,\n        0.017686969438625116,\n        -0.009701380928138673,\n        -0.022820050889439638,\n        0.0021769125961434827,\n        -0.025093476448188545,\n        0.008636159266669075,\n        0.015384945756333557,\n        -0.0008578966162797602,\n        0.02956883737910412,\n        -0.00818576326809099,\n        0.031055857846931767,\n        -0.01988890294814655,\n        -0.006795256228530076,\n        -0.01431972409486396,\n        0.03428726792463168,\n        0.027195322578907707,\n        -0.005797951268768484,\n        -0.00922953750105687,\n        -0.007849754175747816,\n        0.02353496393113343,\n        0.04795642033199039,\n        -0.00011433036476582838,\n        -0.021876364035276034,\n        -0.0109167345891343,\n        -0.001944565648045413,\n        0.004446764204356847,\n        -0.0035513345299879166,\n        0.002366364803649443,\n        -0.033572354882937895,\n        -0.020060482376176296,\n        -0.01406235495281934,\n        -0.023778035408390647,\n        -0.00833589526761702,\n        -0.0007247439085960605,\n        -0.01601407001533509,\n        -0.009515502903998909,\n        0.00370325373761237,\n        -0.010852392303623145,\n        -0.004907883451525483,\n        -0.027281112292922582,\n        -0.01680047510625635,\n        0.0011662032263977202,\n        -0.019545744092087057,\n        0.01650021110720429,\n        -0.00331898746547452,\n        0.02532224839801313,\n        0.013719197028082462,\n        -0.0008525347591538307,\n        0.015027489235486663,\n        0.010251864305519033,\n        -0.011295638538484911,\n        0.010509233447563653,\n        -0.010802348614222006,\n        0.020489430946250664,\n        0.013204458743993223,\n        0.012639676770502848,\n        -0.000852981561178437,\n        0.0015138301027032759,\n        -0.005601349996038169,\n        0.030169363514563,\n        -0.014176741859054248,\n        -0.011688841083945542,\n        -0.0072528010595018615,\n        -0.014498453286610022,\n        0.006645124229004049,\n        -0.010158925759110458,\n        -0.04192254874666493,\n        0.00466123848939403,\n        -0.0323141045022896,\n        -0.0031223861927442047,\n        -0.030455329848827657,\n        0.036517800489018384,\n        -0.02249118969816755,\n        -0.01350472274304528,\n        -0.002187636310395342,\n        -0.014534198379901142,\n        -0.01458424206930228,\n        -0.015499332662568465,\n        -0.03720411820113737,\n        -0.18381864632029402,\n        -0.00020888889593170733,\n        0.024092597072230104,\n        -0.018030126432039377,\n        0.02996918875695845,\n        0.010051688616591867,\n        0.02569400444629266,\n        -0.014384066380375114,\n        0.0062626453977952775,\n        0.01974592071233684,\n        -0.0038390873738590346,\n        -0.022848646219014442,\n        -0.01981741276156431,\n        -0.0023538538812991586,\n        -0.022677066790984697,\n        -0.004696984048346458,\n        -0.02956883737910412,\n        -0.005683565293856192,\n        0.03663218553260806,\n        -0.001075945375721457,\n        0.045296942922819786,\n        -0.023577858788140865,\n        0.018687848814583557,\n        0.007728218902780514,\n        0.01575670087329047,\n        -0.0031760047640035007,\n        -0.023034523311831593,\n        0.015199068663516408,\n        0.001164415901883968,\n        -3.487299560930869e-06,\n        0.00011706714358186895,\n        0.028467868761698174,\n        0.013647704978854992,\n        -0.01850196985912118,\n        -0.00064967796704071,\n        -0.01053068087606737,\n        0.017515390010595367,\n        -0.02236250512714524,\n        -0.007059774202968397,\n        -0.02210513598510062,\n        0.011131208874171482,\n        0.014140995834440511,\n        0.017758459625207355,\n        -0.023978210165995197,\n        -0.01780135448221479,\n        0.0135404678363364,\n        0.026837866058060815,\n        -0.009901556617065838,\n        0.011345683159208664,\n        0.00016253119226632907,\n        0.005744332697509188,\n        -0.016171351778577432,\n        -0.0016228544533202925,\n        0.0026147974395406286,\n        0.04907168661418374,\n        0.0019803113234131676,\n        0.000371755204268407,\n        0.009050809240633425,\n        -0.016071262537129927,\n        0.003349371400131672,\n        0.008057078697068681,\n        -0.02636602263097901,\n        0.006645124229004049,\n        0.00909370409764086,\n        -0.00519742373632568,\n        0.004600470620079726,\n        -0.028625150524940517,\n        0.013283099625614397,\n        -0.04604045129408838,\n        -0.001604087953379539,\n        -0.0016675365184261543,\n        0.0034995033996577,\n        0.008128570746296153,\n        -0.020317851518220915,\n        0.001785497375196605,\n        0.009672784667241254,\n        -0.038691138668965015,\n        0.04209412817469468,\n        0.017100739105308405,\n        -0.020375044040015756,\n        -0.004861414178321196,\n        0.05150239393617499,\n        0.016199947108152236,\n        0.00019369697225887883,\n        0.009901556617065838,\n        0.01935986699926991,\n        -0.012153535678633644,\n        0.017772759152639987,\n        -0.0005017801522607039,\n        -0.013690599835862427,\n        0.04466781586985041,\n        -0.010873839732126862,\n        -0.019145392714232726,\n        -0.023577858788140865,\n        -0.025665407254072625,\n        0.006541461502682307,\n        -0.012925642173444886,\n        -0.0008735353856329426,\n        -0.009501205239211507,\n        -0.012939940769554903,\n        0.004968651320839787,\n        0.0058015256849653345,\n        -0.02999778594917849,\n        -0.016185649443364834,\n        0.051559588320615066,\n        -0.004114329062549214,\n        -0.009687082332028656,\n        0.0345446370666763,\n        0.019445656713284784,\n        0.010595023161578525,\n        -0.003935600802125767,\n        0.03022655789900307,\n        0.030541119562842528,\n        0.025007686734173674,\n        0.0039213026716770575,\n        0.012782659937635174,\n        0.015999772350547687,\n        -0.003159919192625712,\n        0.013104370433868334,\n        0.018745041336378394,\n        0.014455558429602585,\n        -0.013011431887459759,\n        -0.01232511510666339,\n        -0.023577858788140865,\n        -0.022076538792880584,\n        -0.0111598051350689,\n        -0.10289039910346985,\n        -0.014426961237382551,\n        0.00935107323968548,\n        0.021819171513481197,\n        0.007242077345250003,\n        -0.001462892460006945,\n        -0.00022106476041928457,\n        0.027123830529680235,\n        -0.015270559781421264,\n        0.027567078627187235,\n        0.010873839732126862,\n        -0.0022948734529139336,\n        -0.012675422795116582,\n        -0.017286616198125552,\n        0.020818292137522752,\n        -0.023635051309935703,\n        -0.012060596200902454,\n        -0.023706543359163175,\n        -0.004621918048583445,\n        0.010873839732126862,\n        0.006151833839079836,\n        0.010544979472177387,\n        0.011145506538958884,\n        -0.029139888809029756,\n        -0.006462821086722443,\n        0.019903200612933953,\n        -0.04358114864252232,\n        -0.0032510707637665144,\n        0.008743396409187667,\n        0.009915855213175857,\n        0.009508354071605208,\n        0.004096456515903654,\n        0.009994495163474414,\n        -0.007385060046721022,\n        0.01848767219433378,\n        -0.011352831991602365,\n        -0.005050866152996502,\n        -0.021404520608194234,\n        0.023563561123353463,\n        0.019188287571240165,\n        -0.013826434170601054,\n        -0.0005710374346655186,\n        0.002060739180302111,\n        -0.013640556146461291,\n        0.01831609276630403,\n        0.00846457983863933,\n        -0.0007457445350751724,\n        0.022920138268241914,\n        -0.004957927606587928,\n        -0.022862945746447077,\n        -0.042523076744769045,\n        -0.006448522956273734,\n        -0.0016121307390684334,\n        -0.018988110950990383,\n        0.023191805075073936,\n        -0.019431359048497382,\n        0.034172882881042005,\n        0.011781780561676732,\n        -0.020346448710440952,\n        -0.00266484136177242,\n        -0.012675422795116582,\n        -0.007499446487294622,\n        -0.01575670087329047,\n        0.022677066790984697,\n        0.00035343553545609156,\n        0.011245594849083775,\n        -0.02453584330709187,\n        0.0006885513729960359,\n        0.022662769126197295,\n        -0.00859326440966164,\n        -0.011617349966040686,\n        0.042952025314843406,\n        -0.011231296252973757,\n        0.03728990791515224,\n        -0.028539360810925642,\n        0.009522652667715226,\n        0.011138357706565183,\n        -0.01650021110720429,\n        0.009765723213649827,\n        0.010866690899733161,\n        -0.043523954258082254,\n        -3.306476499468488e-05,\n        0.0002491027807204315,\n        -0.02673777867925854,\n        0.010973927110929137,\n        0.013347441911125552,\n        0.0001710207945317456,\n        0.01601407001533509,\n        0.019059603000217855,\n        -0.027767253384791784,\n        0.015156173806508973,\n        0.03866253961409975,\n        0.036860959345077875,\n        -0.0150846817572815,\n        0.008064228460784998,\n        0.013190160147883207,\n        0.007074072333417106,\n        0.023377682167891083,\n        -0.028753835095962826,\n        0.022505487362954952,\n        -0.03280024745680404,\n        -0.036088851918944016,\n        -0.07881210342131761,\n        0.029940591564738418,\n        -0.027038040815665364,\n        -0.00872194898068395,\n        0.01835898762331147,\n        0.008914975837217414,\n        0.00609821526782054,\n        -0.00925098492956059,\n        -0.011467217966514658,\n        0.012947089601948604,\n        -0.008607563005771656,\n        -0.009444011786094053,\n        -0.01168169225155184,\n        0.00165949373273726,\n        0.011388578016216101,\n        0.010695111471703416,\n        0.010416294901155077,\n        0.0005250148470705109,\n        0.03128463165940158,\n        0.005358279450103567,\n        0.014469856094389987,\n        0.00016476530425277167,\n        0.01640012372840202,\n        -0.0315420008014462,\n        -0.01767266991119248,\n        0.002355641089397584,\n        -0.006237623553094708,\n        0.019931797805153986,\n        -0.004729155191102036,\n        -0.03688955467465268,\n        0.009329625811181762,\n        -0.012017701343895017,\n        -0.006823852489427496,\n        0.015456437805561028,\n        0.0026290955699893384,\n        -0.023048822839264224,\n        0.017829951674434828,\n        0.0008878336324969791,\n        0.044439045782671056,\n        -0.008328746435223319,\n        -0.02179057432126116,\n        -0.0296832224226938,\n        0.03508797068034034,\n        -0.01740100310436046,\n        0.0018301794403024667,\n        0.006341285813755142,\n        -0.009494055475495191,\n        -0.001683622089803943,\n        0.0023163208814176517,\n        -0.010023092355694447,\n        -0.006144684541024827,\n        -0.013826434170601054,\n        -0.021275836037171925,\n        -0.010344803783250221,\n        -0.002139379596261976,\n        -0.04552571300999914,\n        0.015299156042318685,\n        -0.03517376039435522,\n        0.004907883451525483,\n        -0.008257255317318463,\n        0.012382307628458229,\n        -0.01314726529087577,\n        0.03497358563675067,\n        0.01747249515358793,\n        -0.011388578016216101,\n        0.0021858491022969167,\n        -0.00650929035992673,\n        -0.005880166566586507,\n        -0.0009249197721462164,\n        -0.008364492459837053,\n        -0.02283434855422704,\n        0.010173224355220476,\n        -0.01772986429563255,\n        0.0003138918682561927,\n        0.039034297525024506,\n        -0.010752303993498254,\n        -0.020289254326000882,\n        0.012339412771450791,\n        -0.02739549919915749,\n        0.025665407254072625,\n        0.020460833754030627,\n        -0.0046505147751421715,\n        -0.00044011882441634555,\n        0.020260658996426078,\n        0.019974692662161425,\n        0.03837657514248033,\n        -0.01075945375721457,\n        -0.017000651726506128,\n        -0.011931912561202759,\n        -0.002042866400825897,\n        -0.008557518385047903,\n        0.0005160784573324039,\n        0.0038676838675871074,\n        0.013526170171548998,\n        0.037575872386771667,\n        0.005086612177610238,\n        -0.011510112823522095,\n        -4.887106327922085e-05,\n        -0.014727225236434606,\n        -0.015999772350547687,\n        0.0015317028821794899,\n        -0.006287667242495847,\n        0.013132967626088368,\n        -0.012618229341999129,\n        -0.04132202074856082,\n        0.013118669029978351,\n        -0.02788164029102669,\n        -0.009186642644049435,\n        -0.01602836768012249,\n        0.027238217435915143,\n        -0.008629010434275374,\n        -0.013290248458008098,\n        -0.0037818941535722344,\n        0.015184770067406391,\n        -0.015427840613340994,\n        -0.01128848970609121,\n        -0.01950284923507962,\n        0.0029418704913916787,\n        -0.024478650785297033,\n        0.02532224839801313,\n        -0.0010339441227632331,\n        0.0205323258032581,\n        0.05087327060849608,\n        -0.013268801029504378,\n        0.011124059110455166,\n        0.015070384092494098,\n        -0.00598382882724694,\n        -0.01481301495044948,\n        0.0006125918273914727,\n        -0.00259871186816284,\n        0.013118669029978351,\n        -0.002573689790631617,\n        -0.03820499571445058,\n        -0.03337218012533334,\n        -0.006123237112521109,\n        -0.015313454638428701,\n        0.0021590398166672687,\n        0.02543663530424804,\n        0.0012046298303284397,\n        0.03972061523714349,\n        0.018001531102464573,\n        -0.014755821497332027,\n        6.853119273503973e-05,\n        -0.002386025024054736,\n        0.024979089541953638,\n        0.024764615256916457,\n        -0.01987460528335915,\n        -0.019459954378072186,\n        -0.021418818272981633,\n        0.009687082332028656,\n        -0.01249669360337052,\n        -0.01562801630226816,\n        -0.026308830109184174,\n        0.0028971884262858167,\n        0.0016443018818240109,\n        -0.011460069134120957,\n        -0.0064342248258250235,\n        -0.01521336632830381,\n        0.010859541136016846,\n        0.03048392704104769,\n        0.024492948450084435,\n        0.002702374361653927,\n        0.008614711838165357,\n        -0.019674428663109367,\n        0.01156730627663955,\n        0.013404634432920389,\n        0.001860563258544292,\n        -0.0025576042192538284,\n        -0.0397778058962931,\n        0.012053447368508753,\n        -0.015999772350547687,\n        -0.02270566398320473,\n        -0.01582819292251794,\n        0.009108002693750878,\n        0.01589968310910018,\n        0.009665634903524938,\n        0.023306191981308844,\n        0.002600499076261265,\n        0.0119962539153913,\n        -0.01559942004137074,\n        0.007964140150660107,\n        -0.03508797068034034,\n        -0.03308621192842346,\n        -0.03523095477879529,\n        0.0205323258032581,\n        -0.02027495666121348,\n        -0.007635279890710632,\n        -0.03863394428452495,\n    ],\n]\n"}
{"type": "test_file", "path": "ix/chains/tests/test_config.py", "content": "from abc import ABC\nfrom enum import Enum\nfrom typing import Literal, Optional\n\nfrom langchain.chains.conversational_retrieval.base import (\n    BaseConversationalRetrievalChain,\n)\nfrom langchain.chat_models.base import BaseChatModel\nfrom langchain.llms.fireworks import Fireworks\nfrom langchain.llms.llamacpp import LlamaCpp\n\nimport pytest\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom langchain_core.vectorstores import VectorStoreRetriever\nfrom pydantic import BaseModel, SecretStr\nfrom ix.api.components.types import NodeTypeField, InputType\n\n\nclass ChoicesEnum(str, Enum):\n    CPP = \"cpp\"\n    GO = \"go\"\n\n\nclass MockModel(BaseModel):\n    field1: str\n    field2: int\n    field3: bool = False\n    literal: Literal[\"foo\", \"bar\"] = \"bar\"\n    field_with_default: str = \"default\"\n    optional: Optional[str] = None\n    choices_enum: ChoicesEnum\n    secret_key: Optional[SecretStr] = None\n\n    @classmethod\n    def loader(\n        cls,\n        choices_enum: ChoicesEnum,\n        field1: str,\n        field2: int,\n        field3: bool = False,\n        field_with_default: str = \"default\",\n        literal: Literal[\"foo\", \"bar\"] = \"bar\",\n        optional: Optional[str] = None,\n    ):\n        pass\n\n\nclass TestABC(ABC):\n    field1: str\n    field2: int\n    field3: bool = False\n    field_with_default: str = \"default\"\n    literal: Literal[\"foo\", \"bar\"] = \"bar\"\n    optional: Optional[str] = None\n    choices_enum: ChoicesEnum\n\n\n@pytest.fixture\ndef field_overrides():\n    return {\n        \"field1\": {\n            \"name\": \"field1\",\n            \"label\": \"Custom Field 1\",\n            \"type\": \"str\",\n            \"default\": \"custom_default\",\n        }\n    }\n\n\n@pytest.fixture\ndef valid_field_config():\n    return {\n        \"name\": \"test_field\",\n        \"label\": \"Test Field\",\n        \"type\": \"int\",\n        \"default\": 0,\n        \"required\": True,\n    }\n\n\nclass TestFieldConfig:\n    def test_slider_without_min_max(self, valid_field_config):\n        valid_field_config[\"input_type\"] = InputType.SLIDER\n        with pytest.raises(\n            ValueError, match=\"'min' and 'max' are required for 'SLIDER' input type.\"\n        ):\n            NodeTypeField(**valid_field_config)\n\n    def test_select_without_choices(self, valid_field_config):\n        valid_field_config[\"input_type\"] = InputType.SELECT\n        with pytest.raises(\n            ValueError, match=\"'choices' are required for 'SELECT' input type.\"\n        ):\n            NodeTypeField(**valid_field_config)\n\n    def test_slider_without_step(self, valid_field_config):\n        valid_field_config[\"input_type\"] = InputType.SLIDER\n        valid_field_config[\"min\"] = 0\n        valid_field_config[\"max\"] = 100\n        with pytest.raises(\n            ValueError, match=\"'step' is required for 'SLIDER' input type.\"\n        ):\n            NodeTypeField(**valid_field_config)\n\n\nclass GetFieldsBase:\n    \"\"\"Base for common tests for getting fields from a model or method\"\"\"\n\n    field_source = None\n\n    def test_field_kwargs(self, field_overrides):\n        \"\"\"field options may be passed as kwargs.\"\"\"\n        fields = NodeTypeField.get_fields(\n            self.field_source,\n            **field_overrides,\n        )\n        field = fields[0]\n        assert field[\"name\"] == \"field1\"\n\n    def test_field_with_default(self, field_overrides):\n        fields = NodeTypeField.get_fields(\n            self.field_source,\n            include=[\"field_with_default\"],\n            field_options=field_overrides,\n        )\n\n        field = fields[0] if fields[0][\"name\"] == \"field_with_default\" else fields[1]\n        assert field[\"default\"] == \"default\"\n\n    def test_get_literal_field(self, field_overrides):\n        fields = NodeTypeField.get_fields(\n            self.field_source,\n            include=[\"literal\"],\n            field_options=field_overrides,\n        )\n\n        field = fields[0] if fields[0][\"name\"] == \"literal\" else fields[1]\n        assert field[\"choices\"] == [\n            {\"value\": \"foo\", \"label\": \"Foo\"},\n            {\"value\": \"bar\", \"label\": \"Bar\"},\n        ]\n\n    def test_get_fields_overrides_include(self, field_overrides):\n        expected_fields_include = [\n            NodeTypeField(\n                name=\"field1\",\n                label=\"Custom Field 1\",\n                type=\"str\",\n                default=\"custom_default\",\n                required=True,\n            ).model_dump(),\n            NodeTypeField(\n                name=\"field2\", label=\"Field2\", type=\"int\", default=None, required=True\n            ).model_dump(),\n        ]\n\n        assert (\n            NodeTypeField.get_fields(\n                self.field_source,\n                include=[\"field1\", \"field2\"],\n                field_options=field_overrides,\n            )\n            == expected_fields_include\n        )\n\n    def test_get_fields_literal(self, field_overrides):\n        expected = [\n            NodeTypeField(\n                name=\"literal\",\n                label=\"Literal\",\n                type=\"str\",\n                input_type=\"select\",\n                default=\"bar\",\n                required=False,\n                choices=[\n                    {\"value\": \"foo\", \"label\": \"Foo\"},\n                    {\"value\": \"bar\", \"label\": \"Bar\"},\n                ],\n            ).model_dump(),\n        ]\n\n        assert (\n            NodeTypeField.get_fields(\n                self.field_source,\n                include=[\"literal\"],\n            )\n            == expected\n        )\n\n    def test_get_fields_optional(self, field_overrides):\n        expected = [\n            NodeTypeField(\n                name=\"optional\",\n                label=\"Optional\",\n                default=None,\n                type=\"str\",\n                required=False,\n            ).model_dump(),\n        ]\n\n        assert (\n            NodeTypeField.get_fields(\n                self.field_source,\n                include=[\"optional\"],\n            )\n            == expected\n        )\n\n    def test_get_fields_overrides_exclude(self, field_overrides):\n        expected_fields_exclude = [\n            NodeTypeField(\n                name=\"field2\", label=\"Field2\", type=\"int\", default=None, required=True\n            ).model_dump(),\n            NodeTypeField(\n                name=\"field3\",\n                label=\"Field3\",\n                type=\"boolean\",\n                default=False,\n                required=False,\n            ).model_dump(),\n        ]\n\n        assert (\n            NodeTypeField.get_fields(\n                self.field_source,\n                include=[\"field1\", \"field2\", \"field3\"],\n                exclude=[\"field1\"],\n                field_options=field_overrides,\n            )\n            == expected_fields_exclude\n        )\n\n    def test_get_enum_choices(self, field_overrides):\n        expected = [\n            NodeTypeField(\n                name=\"choices_enum\",\n                label=\"Choices_enum\",\n                default=None,\n                type=\"str\",\n                input_type=\"select\",\n                required=True,\n                choices=[\n                    {\"label\": \"CPP\", \"value\": \"cpp\"},\n                    {\"label\": \"GO\", \"value\": \"go\"},\n                ],\n            ).model_dump(),\n        ]\n\n        fields = NodeTypeField.get_fields(\n            self.field_source,\n            include=[\"choices_enum\"],\n        )\n        assert fields == expected\n\n\nclass TestGetFieldsFromModel(GetFieldsBase):\n    field_source = MockModel\n\n    def test_exclude_non_allowed_type(self, field_overrides):\n        # Extend TestModel with a field of non-allowed type\n        class TestModel2(BaseModel):\n            field1: str\n            field2: int\n            field3: bool = False\n            field4: MockModel  # non-allowed type\n\n        expected_fields = [\n            NodeTypeField(\n                name=\"field1\", label=\"Field1\", type=\"str\", default=None, required=True\n            ).model_dump(),\n            NodeTypeField(\n                name=\"field2\", label=\"Field2\", type=\"int\", default=None, required=True\n            ).model_dump(),\n        ]\n\n        assert (\n            NodeTypeField.get_fields(TestModel2, include=[\"field1\", \"field2\", \"field4\"])\n            == expected_fields\n        )\n\n    def test_secret(self):\n        actual = NodeTypeField.get_fields(\n            MockModel,\n            include=[\"secret_key\"],\n        )\n        expected = [\n            NodeTypeField(\n                name=\"secret_key\",\n                label=\"Secret_key\",\n                type=\"str\",\n                required=False,\n                input_type=\"secret\",\n                secret_key=None,\n            ).model_dump()\n        ]\n        assert actual == expected\n\n\nclass TestGetFieldsFromMethod(GetFieldsBase):\n    field_source = MockModel.loader\n\n\nclass TestGetFieldsFromABC(GetFieldsBase):\n    field_source = TestABC\n\n\nclass TestTroubleCases:\n    def test_default_string(self):\n        \"\"\"\n        Defaults weren't being detected properly for\n        pydantic v1 models.\n        \"\"\"\n        fields = NodeTypeField.get_fields(\n            VectorStoreRetriever,\n            include=[\n                \"search_type\",\n            ],\n        )\n\n        assert fields[0][\"default\"] == \"similarity\"\n\n    def test_checkbox(self):\n        \"\"\"Checkbox wasn't being detected properly.\n\n        input_field needs to be optional for boolean fields to\n        default to checkbox because it's handled in the UI\n        \"\"\"\n        fields = NodeTypeField.get_fields(\n            BaseChatModel,\n            include=[\n                \"verbose\",\n            ],\n        )\n        assert fields[0][\"type\"] == \"bool\"\n        assert fields[0][\"input_type\"] is None\n\n    def test_optional_str(self):\n        \"\"\"Testing Optional[str] field from Chroma.__init__\"\"\"\n        actual = NodeTypeField.get_fields(\n            Chroma.__init__,\n            include=[\n                \"persist_directory\",\n            ],\n        )\n\n        assert actual[0][\"required\"] is False\n        assert actual[0][\"default\"] is None\n        assert actual[0][\"type\"] == \"str\"\n\n    def test_optional_bool(self):\n        \"\"\"Testing Optional[bool] field from BaseConversationalRetrievalChain\"\"\"\n        actual = NodeTypeField.get_fields(\n            BaseConversationalRetrievalChain,\n            include=[\n                \"rephrase_question\",\n            ],\n        )\n        assert actual[0][\"required\"] is False\n        assert actual[0][\"default\"] is True\n        assert actual[0][\"type\"] == \"bool\"\n\n    def test_optional_int(self):\n        \"\"\"Testing Optional[int] field from LlamaCpp\"\"\"\n        actual = NodeTypeField.get_fields(\n            LlamaCpp,\n            include=[\n                \"top_k\",\n            ],\n        )\n        assert actual[0][\"required\"] is False\n        assert actual[0][\"default\"] == 40\n        assert actual[0][\"type\"] == \"int\"\n\n    def test_optional_list(self):\n        \"\"\"Testing Optional[List[str]] field from LlamaCpp\"\"\"\n        actual = NodeTypeField.get_fields(\n            LlamaCpp,\n            include=[\n                \"stop\",\n            ],\n        )\n        assert actual[0][\"required\"] is False\n        assert actual[0][\"default\"] == []\n        assert actual[0][\"type\"] == \"list\"\n\n    def test_secret_str(self):\n        fields = NodeTypeField.get_fields(\n            Fireworks,\n            include=[\"fireworks_api_key\"],\n            field_options={\n                \"fireworks_api_key\": {\n                    \"input_type\": \"secret\",\n                    \"secret_key\": \"Fireworks.ai API\",\n                    \"style\": {\"width\": \"100%\"},\n                },\n            },\n        )\n\n        assert fields[0][\"type\"] == \"str\", fields[0]\n        assert fields[0][\"input_type\"] == \"secret\", fields[0]\n        assert fields[0][\"secret_key\"] == \"Fireworks.ai API\", fields[0]\n"}
{"type": "test_file", "path": "ix/chains/tests/test_llm_chain.py", "content": "from copy import deepcopy\n\nimport pytest\nfrom langchain.prompts import ChatPromptTemplate\n\nfrom ix.chains.llm_chain import LLMChain, TEMPLATE_CLASSES\nfrom ix.chains.loaders.prompts import create_message\nfrom ix.chains.tests.mock_configs import OPENAI_LLM, MOCK_MEMORY\nfrom ix.chains.tests.mock_memory import MockMemory\nfrom ix.chains.tests.test_config_loader import unpack_chain_flow\n\nPROMPT_TEMPLATE = {\n    \"class_path\": \"ix.runnable.prompt.ChatPrompt\",\n    \"config\": {\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"template\": \"Say hello to {name} and answer user question\",\n                \"partial_variables\": {\n                    \"name\": \"test user\",\n                },\n            },\n            {\n                \"role\": \"user\",\n                \"template\": \"Question: {user_input}\",\n                \"input_variables\": [\"user_input\"],\n            },\n            {\"role\": \"assistant\", \"template\": \"Answer: ANSWER\"},\n        ],\n    },\n}\n\n\nEXAMPLE_CONFIG = {\n    \"class_path\": \"ix.chains.llm_chain.LLMChain\",\n    \"config\": {\n        \"llm\": OPENAI_LLM,\n        \"memory\": MOCK_MEMORY,\n        \"prompt\": PROMPT_TEMPLATE,\n    },\n}\n\n\n@pytest.mark.django_db\nclass TestChatPromptTemplate:\n    def test_create_message(self):\n        message = {\n            \"role\": \"user\",\n            \"template\": \"hello {name} i will answer {user_input}\",\n            \"input_variables\": [\"user_input\"],\n            \"partial_variables\": {\"name\": \"test user\"},\n        }\n\n        result = create_message(message)\n\n        assert isinstance(result, TEMPLATE_CLASSES[\"user\"])\n        assert result.prompt.partial_variables == {\"name\": \"test user\"}\n\n    def test_from_config(self, load_chain):\n        config = deepcopy(PROMPT_TEMPLATE)\n        flow = load_chain(config)\n        chain = unpack_chain_flow(flow)\n        assert isinstance(chain, ChatPromptTemplate)\n        assert len(chain.messages) == 3\n        assert isinstance(chain.messages[0], TEMPLATE_CLASSES[\"system\"])\n        assert isinstance(chain.messages[1], TEMPLATE_CLASSES[\"user\"])\n        assert isinstance(chain.messages[2], TEMPLATE_CLASSES[\"assistant\"])\n\n\n@pytest.mark.django_db\nclass TestLLMChain:\n    def test_from_config(self, load_chain, mock_openai_key):\n        config = deepcopy(EXAMPLE_CONFIG)\n        flow = load_chain(config)\n        chain = unpack_chain_flow(flow)\n\n        assert isinstance(chain, LLMChain)\n        assert (\n            chain.prompt.messages[0].prompt.partial_variables\n            == EXAMPLE_CONFIG[\"config\"][\"prompt\"][\"config\"][\"messages\"][0][\n                \"partial_variables\"\n            ]\n        )\n        assert chain.prompt.messages[1].prompt.partial_variables == {}\n        assert isinstance(chain.memory, MockMemory)\n"}
{"type": "test_file", "path": "ix/chains/tests/test_coder.py", "content": "import pytest\n\nfrom ix.api.artifacts.types import Artifact\nfrom ix.chains.models import Chain\nfrom ix.conftest import aload_fixture\n\n\n@pytest.mark.django_db\nclass TestFlowCoder:\n    async def test_create_flow_coder(self, anode_types, aix_context, aix_handler):\n        \"\"\"Sanity check that fixture can be loaded and initialized\"\"\"\n        await aload_fixture(\"agent/code2\")\n        chain = await Chain.objects.aget(agent__alias=\"code\")\n\n        # init flow\n        await chain.aload_chain(context=aix_context)\n\n    @pytest.mark.openai_api\n    async def test_invoke_flow_coder(self, anode_types, aix_context, aix_handler):\n        \"\"\"Test running coder flow\"\"\"\n        await aload_fixture(\"agent/code2\")\n        chain = await Chain.objects.aget(agent__alias=\"code\")\n\n        # init flow\n        runnable = await chain.aload_chain(context=aix_context)\n\n        result = await runnable.ainvoke(\n            input={\"user_input\": \"write a python fizzbuzz\"},\n            config={\"callbacks\": [aix_handler]},\n        )\n        assert isinstance(result, list)\n        assert len(result) >= 1\n        assert isinstance(result[0], Artifact)\n"}
{"type": "test_file", "path": "ix/chains/tests/test_planning.py", "content": "import uuid\n\nimport pytest\nfrom django.core.management import call_command\n\nfrom ix.agents.callback_manager import IxCallbackManager\nfrom ix.chains.models import Chain\nfrom ix.task_log.models import Plan, Artifact\nfrom ix.task_log.tests.fake import fake_task\n\n\n@pytest.mark.skip()\n@pytest.mark.django_db\nclass TestPlannerV1:\n    def test_create_planner_v1(self):\n        call_command(\"create_planner_v1\")\n        chain = Chain.objects.get()\n\n        task = fake_task()\n        callback_manager = IxCallbackManager(task)\n        chain_runner = chain.load_chain(callback_manager)\n        artifact_id = chain_runner.run(user_input=\"create a django app for cat memes\")\n\n        assert uuid.UUID(artifact_id)\n        artifact = Artifact.objects.get(pk=artifact_id)\n        assert Plan.objects.filter(pk=artifact.storage[\"plan_id\"]).exists()\n"}
{"type": "test_file", "path": "ix/chains/tests/test_config_loader.py", "content": "import uuid\nfrom copy import deepcopy\nfrom functools import reduce\nfrom operator import or_\n\nimport pytest\nfrom unittest.mock import MagicMock\n\nfrom langchain.chains import ConversationalRetrievalChain\nfrom langchain_community.document_loaders.generic import GenericLoader\nfrom langchain_community.document_loaders.parsers import LanguageParser\nfrom langchain_community.embeddings import OpenAIEmbeddings\nfrom langchain.prompts.chat import ChatPromptValue\nfrom langchain.schema.runnable import (\n    RunnableSequence,\n    RunnableMap,\n    RunnableBranch,\n    RunnableLambda,\n)\nfrom langchain.schema.runnable.base import RunnableEach\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_community.vectorstores import Redis\nfrom langchain_core.runnables import RunnablePassthrough, Runnable\nfrom langchain_core.utils.function_calling import convert_to_openai_function\n\nfrom ix.chains.fixture_src.agents import OPENAI_FUNCTIONS_AGENT_CLASS_PATH\nfrom ix.chains.fixture_src.lcel import (\n    RUNNABLE_MAP_CLASS_PATH,\n    RUNNABLE_BRANCH_CLASS_PATH,\n)\nfrom ix.chains.loaders.context import IxContext\nfrom langchain.agents import AgentExecutor\nfrom langchain.base_language import BaseLanguageModel\nfrom langchain.memory import (\n    ConversationBufferMemory,\n    ConversationSummaryBufferMemory,\n    CombinedMemory,\n)\nfrom langchain.schema import (\n    BaseChatMessageHistory,\n    BaseMemory,\n    AIMessage,\n    SystemMessage,\n)\nfrom langchain.tools import BaseTool\n\nfrom ix.chains.fixture_src.tools import GOOGLE_SEARCH\nfrom ix.chains.loaders.core import (\n    aload_chain_flow,\n    BranchPlaceholder,\n    MapPlaceholder,\n    ainit_chain_flow,\n    SequencePlaceholder,\n    ImplicitJoin,\n)\nfrom ix.chains.loaders.memory import get_memory_session\nfrom ix.chains.loaders.tools import extract_tool_kwargs, get_runnable_tool\nfrom ix.chains.models import Chain\nfrom ix.chains.tests.mock_configs import (\n    CONVERSATIONAL_RETRIEVAL_CHAIN,\n    EMBEDDINGS,\n    LANGUAGE_PARSER,\n    DOCUMENT_LOADER,\n    GOOGLE_SEARCH_CONFIG,\n    MEMORY,\n    LLM_REPLY_WITH_HISTORY,\n    MEMORY_WITH_BACKEND,\n    MEMORY_WITH_SCOPE,\n    MEMORY_WITH_LLM,\n    AGENT_MEMORY,\n    REDIS_VECTORSTORE,\n    OPENAI_LLM,\n    PROMPT_CHAT,\n    PROMPT_CHAT_0,\n    PROMPT_CHAT_1,\n    PROMPT_CHAT_2,\n    TEXT_SPLITTER,\n)\nfrom ix.chains.tests.mock_memory import MockMemory\nfrom ix.chains.tests.mock_runnable import MockRunnable\nfrom ix.conftest import aload_fixture\nfrom ix.memory.artifacts import ArtifactMemory\nfrom ix.runnable.documents import RunLoader, RunTransformer\nfrom ix.runnable.ix import IxNode\nfrom ix.task_log.tests.fake import afake_chain_node, afake_chain, afake_chain_edge\nfrom ix.utils.importlib import import_class\n\n\ndef unpack_chain_flow(runnable: RunnableSequence) -> Runnable:\n    \"\"\"Helper to unpack the default sequence to get to the first node\n    added by the flow.\n\n    All chain flows are wrapped in a default sequence that includes a passthrough\n    and then the actual flow. This helper asserts and unpacks the structure since\n    most tests care about the first node unique to the flow.\n    \"\"\"\n    if isinstance(runnable, RunnableSequence) and isinstance(\n        runnable.steps[0], RunnablePassthrough\n    ):\n        type_mask = runnable.steps[0]\n        runnable = reduce(or_, runnable.steps[1:])\n        assert isinstance(type_mask, RunnablePassthrough)\n\n    if isinstance(runnable, RunnableSequence):\n        return runnable\n    elif isinstance(runnable, IxNode):\n        assert isinstance(runnable, IxNode)\n        return runnable.child\n    return runnable\n\n\n@pytest.mark.django_db\nclass TestLoadMemory:\n    def test_load_memory(self, load_chain):\n        instance = load_chain(MEMORY)\n        assert isinstance(instance, ConversationBufferMemory)\n\n    def test_load_multiple(self, load_chain, mock_openai_key):\n        \"\"\"Test loading multiple memories into a CombinedMemory\"\"\"\n        MEMORY2 = deepcopy(MEMORY)\n        MEMORY2[\"config\"][\"memory_key\"] = \"chat_history2\"\n\n        LLM_CONFIG = deepcopy(LLM_REPLY_WITH_HISTORY)\n        LLM_CONFIG[\"config\"][\"memory\"] = [MEMORY, MEMORY2]\n        flow = load_chain(LLM_CONFIG)\n        chain = unpack_chain_flow(flow)\n        instance = chain.memory\n        assert isinstance(instance, CombinedMemory)\n        assert len(instance.memories) == 2\n        assert instance.memories[0].memory_key == \"chat_history\"\n        assert instance.memories[1].memory_key == \"chat_history2\"\n\n    def test_load_backend(self, load_chain):\n        \"\"\"\n        A memory class can have a backend that separates memory logic from\n        the storage system. ChatMemory works this way.\n        \"\"\"\n        instance = load_chain(MEMORY_WITH_BACKEND)\n        assert isinstance(instance, ConversationBufferMemory)\n        assert isinstance(instance.chat_memory, BaseChatMessageHistory)\n\n    def test_load_memory_with_scope(self, chat, load_chain):\n        \"\"\"\n        Test loading with a scope.\n\n        Not all memories support sessions, for example ChatMemory\n        adds scoping to the backend.\n        \"\"\"\n        chat = chat[\"chat\"]\n        chat_id = chat.task.leading_chats.first().id\n        instance = load_chain(MEMORY_WITH_SCOPE)\n        assert isinstance(instance, ArtifactMemory)\n        assert instance.session_id == f\"tests_chat_{chat_id}\"\n\n    def test_load_llm(self, load_chain, mock_openai):\n        \"\"\"\n        Memory classes may optionally load an llm. (e.g. SummaryMemory)\n        \"\"\"\n        instance = load_chain(MEMORY_WITH_LLM)\n        assert isinstance(instance, ConversationSummaryBufferMemory)\n        assert isinstance(instance.llm, BaseLanguageModel)\n\n    def test_load_class_with_config(self, chat, mocker, load_chain):\n        \"\"\"\n        Test loading a class whose config is defined in MEMORY_CLASSES.\n        This tests configuring an external class with the required config\n        to integrate into Ix\n        \"\"\"\n        chat = chat[\"chat\"]\n        chat_id = chat.task.leading_chats.first().id\n\n        # patch MEMORY_CLASSES to setup the test\n        from ix.chains.loaders import memory\n\n        mock_memory_classes = {\n            MockMemory: {\n                \"supports_session\": True,\n            }\n        }\n        mocker.patch.object(memory, \"MEMORY_CLASSES\", mock_memory_classes)\n\n        # load a memory that will use the mock class config\n        instance = load_chain(\n            {\n                \"class_path\": \"ix.chains.tests.mock_memory.MockMemory\",\n                \"config\": {\n                    \"session_scope\": \"chat\",\n                    \"session_prefix\": \"tests\",\n                },\n            },\n        )\n        assert isinstance(instance, MockMemory)\n        assert instance.session_id == f\"tests_chat_{chat_id}\"\n\n\n@pytest.mark.django_db\nclass TestLoadChatMemoryBackend:\n    def test_load_chat_memory_backend(self, chat, load_chain):\n        chat = chat[\"chat\"]\n        chat_id = chat.task.leading_chats.first().id\n\n        # Config\n        config = {\n            \"class_path\": \"langchain.memory.RedisChatMessageHistory\",\n            \"config\": {\n                \"url\": \"redis://redis:6379/0\",\n                \"session_scope\": \"chat\",\n                \"session_prefix\": \"tests\",\n            },\n        }\n\n        # Run\n        backend = load_chain(config)\n        assert backend.session_id == f\"tests_chat_{chat_id}\"\n\n    def test_load_defaults(self, chat, load_chain):\n        \"\"\"\n        ChatMemoryBackend should always load session_id. If `session` isn't present then\n        load the `chat` scope by default.\n        \"\"\"\n        chat = chat[\"chat\"]\n        chat_id = chat.task.leading_chats.first().id\n\n        # Config\n        config = {\n            \"class_path\": \"langchain.memory.RedisChatMessageHistory\",\n            \"config\": {\n                \"url\": \"redis://redis:6379/0\",\n            },\n        }\n\n        # Run\n        backend = load_chain(config)\n        assert backend.session_id == f\"chat_{chat_id}\"\n\n\n@pytest.mark.django_db\nclass TestGetMemorySession:\n    \"\"\"Test parsing the session scope from the chain config and runtime context.\"\"\"\n\n    @pytest.mark.parametrize(\n        \"config, cls, expected\",\n        [\n            # No scope - defaults to chat\n            (\n                {\n                    \"session_scope\": \"\",\n                    \"session_prefix\": \"123\",\n                    \"session_key\": \"session_id\",\n                },\n                BaseChatMessageHistory,\n                (\"123_chat_1000\", \"session_id\"),\n            ),\n            (\n                {\n                    \"session_scope\": None,\n                    \"session_prefix\": \"123\",\n                    \"session_key\": \"session_id\",\n                },\n                BaseChatMessageHistory,\n                (\"123_chat_1000\", \"session_id\"),\n            ),\n            (\n                {\"session_prefix\": \"123\", \"session_key\": \"session_id\"},\n                BaseChatMessageHistory,\n                (\"123_chat_1000\", \"session_id\"),\n            ),\n            # agent, task, user scopes\n            (\n                {\n                    \"session_scope\": \"agent\",\n                    \"session_prefix\": \"456\",\n                    \"session_key\": \"session_id\",\n                },\n                BaseMemory,\n                (\"456_agent_1001\", \"session_id\"),\n            ),\n            (\n                {\n                    \"session_scope\": \"task\",\n                    \"session_prefix\": \"789\",\n                    \"session_key\": \"session_id\",\n                },\n                BaseMemory,\n                (\"789_task_1002\", \"session_id\"),\n            ),\n            (\n                {\n                    \"session_scope\": \"user\",\n                    \"session_prefix\": \"321\",\n                    \"session_key\": \"session_id\",\n                },\n                BaseChatMessageHistory,\n                (\"321_user_1003\", \"session_id\"),\n            ),\n            # custom session_id_key\n            (\n                {\"session_scope\": \"chat\", \"session_key\": \"chat_session\"},\n                BaseChatMessageHistory,\n                (\"chat_1000\", \"chat_session\"),\n            ),\n            # no session prefix\n            (\n                {\"session_scope\": \"chat\", \"session_key\": \"session_id\"},\n                BaseChatMessageHistory,\n                (\"chat_1000\", \"session_id\"),\n            ),\n            # custom session prefix\n            (\n                {\"session_scope\": \"chat\", \"session_prefix\": \"static_session_id\"},\n                BaseChatMessageHistory,\n                (\"static_session_id_chat_1000\", \"session_id\"),\n            ),\n        ],\n    )\n    def test_get_memory_session(self, task, config, cls, expected):\n        \"\"\"Test various scope configurations.\"\"\"\n        context = MagicMock()\n        context.task = task\n        context.chat_id = \"1000\"\n        context.agent_id = \"1001\"\n        context.task_id = \"1002\"\n        context.user_id = \"1003\"\n\n        result = get_memory_session(config, context, cls)\n        assert result == expected\n\n    def test_parse_scope_unsupported_scope(self, task):\n        config = {\n            \"session_scope\": \"unsupported_scope\",\n            \"session_id\": \"123\",\n            \"session_id_key\": \"session_id\",\n        }\n        cls = BaseChatMessageHistory\n        context = IxContext.from_task(task=task)\n        with pytest.raises(ValueError) as excinfo:\n            get_memory_session(config, context, cls)\n        assert \"unknown scope\" in str(excinfo.value)\n\n\nclass TestLoadChain:\n    def test_load_chain(self):\n        pass\n\n\nclass TestExtractToolKwargs:\n    @pytest.fixture\n    def kwargs(self):\n        return {\n            \"return_direct\": False,\n            \"verbose\": False,\n            \"tool_key1\": \"tool_value1\",\n            \"tool_key2\": \"tool_value2\",\n        }\n\n    def test_extract_tool_kwargs_returns_dict(self, kwargs):\n        result = extract_tool_kwargs(kwargs)\n        assert isinstance(result, dict)\n\n    def test_extract_tool_kwargs_only_includes_tool_kwargs(self, kwargs):\n        node_kwargs = kwargs.copy()\n        tool_kwargs = extract_tool_kwargs(node_kwargs)\n        expected_node_kwargs = {\"tool_key1\": \"tool_value1\", \"tool_key2\": \"tool_value2\"}\n        expected_tool_kwargs = {\n            \"return_direct\": False,\n            \"verbose\": False,\n        }\n        assert tool_kwargs == expected_tool_kwargs\n        assert expected_node_kwargs == node_kwargs\n\n\n@pytest.fixture()\ndef mock_google_api_key(monkeypatch):\n    monkeypatch.setenv(\"GOOGLE_API_KEY\", \"MOCK_KEY\")\n    monkeypatch.setenv(\"GOOGLE_CSE_ID\", \"MOCK_ID\")\n\n\n@pytest.mark.django_db\nclass TestGoogleTools:\n    async def test_load_tools(self, aload_chain, mock_google_api_key):\n        \"\"\"Test that tools can be loaded.\"\"\"\n        config = {\n            \"class_path\": GOOGLE_SEARCH[\"class_path\"],\n            \"name\": \"tester\",\n            \"description\": \"test\",\n            \"config\": {},\n        }\n\n        flow = await aload_chain(config)\n        instance = unpack_chain_flow(flow)\n        assert isinstance(instance, BaseTool)\n\n\n@pytest.mark.django_db\nclass TestLoadAgents:\n    # list of known agents. This list may not be exhaustive\n    # of all agents available since functions are dynamically\n    # loaded from LangChain code.\n    KNOWN_AGENTS = [\n        \"initialize_zero_shot_react_description\",\n        \"initialize_conversational_react_description\",\n        \"initialize_chat_zero_shot_react_description\",\n        \"initialize_chat_conversational_react_description\",\n        \"initialize_structured_chat_zero_shot_react_description\",\n        \"initialize_openai_functions\",\n        \"initialize_openai_multi_functions\",\n    ]\n\n    def test_init_functions(self):\n        \"\"\"Test that agent init wrappers were generated.\"\"\"\n        from ix.chains.loaders.agents import FUNCTION_NAMES\n\n        for name in self.KNOWN_AGENTS:\n            assert name in FUNCTION_NAMES\n\n    @pytest.mark.parametrize(\n        \"agent_name\",\n        [\n            \"initialize_zero_shot_react_description\",\n            \"initialize_conversational_react_description\",\n            \"initialize_chat_zero_shot_react_description\",\n            \"initialize_chat_conversational_react_description\",\n            \"initialize_structured_chat_zero_shot_react_description\",\n            \"initialize_openai_functions\",\n            \"initialize_openai_multi_functions\",\n        ],\n    )\n    async def test_load_agents(\n        self, agent_name, aload_chain, mock_openai, mock_google_api_key\n    ):\n        \"\"\"Test that agent can be loaded.\"\"\"\n\n        config = {\n            \"class_path\": f\"ix.chains.loaders.agents.{agent_name}\",\n            \"name\": \"tester\",\n            \"description\": \"test\",\n            \"config\": {\"tools\": [GOOGLE_SEARCH_CONFIG], \"llm\": OPENAI_LLM},\n        }\n\n        sequence = await aload_chain(config)\n        instance = unpack_chain_flow(sequence)\n        assert isinstance(instance, AgentExecutor)\n\n    async def test_agent_memory(self, mock_openai, aload_chain, mock_google_api_key):\n        config = {\n            \"class_path\": OPENAI_FUNCTIONS_AGENT_CLASS_PATH,\n            \"name\": \"tester\",\n            \"description\": \"test\",\n            \"config\": {\n                \"tools\": [GOOGLE_SEARCH_CONFIG],\n                \"llm\": OPENAI_LLM,\n                \"memory\": AGENT_MEMORY,\n            },\n        }\n        flow = await aload_chain(config)\n        executor = unpack_chain_flow(flow)\n        assert isinstance(executor, AgentExecutor)  # sanity check\n\n        # 1. test that prompt includes placeholders\n        # 2. test that memory keys are correct\n        # 3. test that memory is loaded for agent\n        result = await executor.acall(inputs={\"input\": \"foo\", \"user_input\": \"bar\"})\n\n        # verify response contains memory\n        assert result[\"chat_history\"][0].content == \"bar\"\n        assert result[\"chat_history\"][1].content == \"mock llm response\"\n\n        # call second time to smoke test\n        await executor.acall(inputs={\"input\": \"foo\", \"user_input\": \"bar\"})\n\n    async def test_agent_memory_misconfigured(\n        self, mock_openai, aload_chain, mock_google_api_key\n    ):\n        \"\"\"test agent/memory misconfigurations that should raise errors\n        - memory class must have `return_messages=True`\n        \"\"\"\n        config = {\n            \"class_path\": \"ix.chains.loaders.agents.initialize_zero_shot_react_description\",\n            \"name\": \"tester\",\n            \"description\": \"test\",\n            \"config\": {\n                \"tools\": [GOOGLE_SEARCH_CONFIG],\n                \"llm\": OPENAI_LLM,\n                \"memory\": MEMORY,\n            },\n        }\n        with pytest.raises(ValueError) as excinfo:\n            await aload_chain(config)\n            assert \"Agents require return_messages=True\" in str(excinfo.value)\n\n\n@pytest.mark.django_db\nclass TestLoadTools:\n    def test_get_runnable_tool(self):\n        runnable = MockRunnable()\n        tool = get_runnable_tool(\n            name=\"test\", description=\"this is a test\", runnable=runnable\n        )\n        assert isinstance(tool, BaseTool)\n        assert tool.name == \"test\"\n        assert (\n            tool.description\n            == \"this is a test\\n\\nInput docs:\\nMock input for the mock runnable\"\n        )\n        assert tool.args_schema.schema() == {\n            \"description\": \"Mock input for the mock runnable\",\n            \"properties\": {\n                \"value\": {\n                    \"default\": \"input\",\n                    \"title\": \"Value\",\n                    \"type\": \"string\",\n                    \"description\": \"this is a mock value\",\n                },\n            },\n            \"title\": \"MockRunnableInput\",\n            \"type\": \"object\",\n        }\n\n        response = tool(dict(value=1))\n        assert response == {\"default\": \"output\", \"value\": \"1\"}\n\n        # verify it converts correctly to openai function\n        fn = convert_to_openai_function(tool)\n        assert fn == {\n            \"description\": \"this is a test\\n\\nInput docs:\\nMock input for the mock runnable\",\n            \"name\": \"test\",\n            \"parameters\": {\n                \"properties\": {\n                    \"value\": {\n                        \"default\": \"input\",\n                        \"type\": \"string\",\n                        \"description\": \"this is a mock value\",\n                    },\n                },\n                \"type\": \"object\",\n            },\n        }\n\n    async def test_aget_runnable_tool(self):\n        runnable = MockRunnable()\n        tool = get_runnable_tool(\n            name=\"test\", description=\"this is a test\", runnable=runnable\n        )\n        assert isinstance(tool, BaseTool)\n        response = await tool.ainvoke(dict(value=1))\n        assert response == {\"default\": \"output\", \"value\": \"1\"}\n\n\n@pytest.mark.django_db\nclass TestLoadRetrieval:\n    \"\"\"Test loading retrieval components.\n\n    This is a test of loading mechanism for the various retrieval components.\n    It is not an exhaustive test that all retrieval components work as expected.\n    The tests verify that any special loading logic for the components is working.\n    \"\"\"\n\n    async def test_load_language_parser(self, aload_chain):\n        component = await aload_chain(LANGUAGE_PARSER)\n        assert isinstance(component, LanguageParser)\n        assert component.language == \"python\"\n\n    async def test_load_document_loader(self, aload_chain):\n        flow = await aload_chain(DOCUMENT_LOADER)\n        instance = unpack_chain_flow(flow)\n        assert isinstance(instance, RunLoader)\n        assert instance.initializer == GenericLoader.from_filesystem\n\n    async def test_load_text_splitter(self, aload_chain):\n        flow = await aload_chain(TEXT_SPLITTER)\n        instance = unpack_chain_flow(flow)\n        assert isinstance(instance, RunTransformer)\n        assert isinstance(instance.transformer, RecursiveCharacterTextSplitter)\n\n    async def test_load_embeddings(self, aload_chain):\n        component = await aload_chain(EMBEDDINGS)\n        assert isinstance(component, OpenAIEmbeddings)\n\n    async def test_load_vectorstore(\n        self, clean_redis, aload_chain, mock_openai_embeddings\n    ):\n        component = await aload_chain(REDIS_VECTORSTORE)\n        assert isinstance(component, Redis)\n\n    async def test_load_conversational_chain(\n        self, clean_redis, aload_chain, mock_openai_embeddings\n    ):\n        \"\"\"Test loading a fully configured conversational chain.\"\"\"\n        flow = await aload_chain(CONVERSATIONAL_RETRIEVAL_CHAIN)\n        instance = unpack_chain_flow(flow)\n        assert isinstance(instance, ConversationalRetrievalChain)\n\n\n@pytest.mark.django_db\nclass TestFlowComponents:\n    \"\"\"Testing flow components: sequences, maps, branches, eachs, etc.\"\"\"\n\n    async def assert_basic_sequence(self, runnable: RunnableSequence):\n        # TODO: it's not coming back as runnable sequence\n        assert isinstance(runnable, RunnableSequence)\n        assert len(runnable.steps) == 2\n        assert isinstance(\n            runnable.steps[0].child, import_class(PROMPT_CHAT[\"class_path\"])\n        )\n        assert isinstance(\n            runnable.steps[1].child, import_class(OPENAI_LLM[\"class_path\"])\n        )\n\n        # test invoking chain\n        output = await runnable.ainvoke(input={\"user_input\": \"hello!\"})\n        assert output == AIMessage(content=\"mock llm response\")\n\n    async def test_basic_sequence(self, anode_types, aix_context, mock_openai):\n        \"\"\"Testing a basic flow loaded from node graph.\n\n        chat_input -> prompt -> LLM -> output\n        \"\"\"\n        chain = await afake_chain()\n        prompt = await afake_chain_node(chain=chain, root=True, config=PROMPT_CHAT)\n        llm = await afake_chain_node(chain=chain, config=OPENAI_LLM, root=False)\n        await afake_chain_edge(chain=chain, source=prompt, target=llm, relation=\"LINK\")\n\n        flow = await chain.aload_chain(context=aix_context)\n        runnable = unpack_chain_flow(flow)\n        await self.assert_basic_sequence(runnable)\n\n    async def test_parallel(self, aix_context, mock_openai):\n        \"\"\"Test creating a RunnableParallel from node graph.\"\"\"\n\n        foo_hash = str(uuid.uuid4())\n        bar_hash = str(uuid.uuid4())\n        RUNNABLE_MAP = {\n            \"class_path\": RUNNABLE_MAP_CLASS_PATH,\n            \"config\": {\n                \"steps\": [\"foo\", \"bar\"],\n                \"steps_hash\": [foo_hash, bar_hash],\n            },\n        }\n\n        chain = await afake_chain()\n        runnable_map = await afake_chain_node(\n            chain=chain, root=False, config=RUNNABLE_MAP\n        )\n        prompt0 = await afake_chain_node(chain=chain, root=True, config=PROMPT_CHAT_0)\n        prompt1 = await afake_chain_node(chain=chain, root=True, config=PROMPT_CHAT_1)\n        await afake_chain_edge(\n            chain=chain,\n            source=prompt0,\n            target=runnable_map,\n            relation=\"LINK\",\n            source_key=\"out\",\n            target_key=foo_hash,\n        )\n        await afake_chain_edge(\n            chain=chain,\n            source=prompt1,\n            target=runnable_map,\n            relation=\"LINK\",\n            source_key=\"out\",\n            target_key=bar_hash,\n        )\n\n        # test loaded runnable\n        flow = await chain.aload_chain(context=aix_context)\n        runnable = unpack_chain_flow(flow)\n        assert isinstance(runnable, RunnableMap)\n        assert len(runnable.steps) == 2\n        assert isinstance(\n            runnable.steps[\"foo\"].child, import_class(PROMPT_CHAT_0[\"class_path\"])\n        )\n        assert isinstance(\n            runnable.steps[\"bar\"].child, import_class(PROMPT_CHAT_1[\"class_path\"])\n        )\n\n        # test invoking chain\n        output = await runnable.ainvoke(input={\"input\": \"hello!\"})\n        assert output == {\n            \"bar\": ChatPromptValue(messages=[SystemMessage(content=\"You are bot 1.\")]),\n            \"foo\": ChatPromptValue(messages=[SystemMessage(content=\"You are bot 0.\")]),\n        }\n\n    async def test_branch(self, aix_context, mock_openai):\n        foo_uuid = str(uuid.uuid4())\n        bar_uuid = str(uuid.uuid4())\n\n        RUNNABLE_BRANCH = {\n            \"class_path\": RUNNABLE_BRANCH_CLASS_PATH,\n            \"config\": {\n                \"branches\": [\"foo\", \"bar\"],\n                \"branches_hash\": [foo_uuid, bar_uuid],\n            },\n        }\n\n        chain = await afake_chain()\n        runnable_branch = await afake_chain_node(\n            chain=chain, root=True, config=RUNNABLE_BRANCH\n        )\n        prompt0 = await afake_chain_node(chain=chain, root=False, config=PROMPT_CHAT_0)\n        prompt1 = await afake_chain_node(chain=chain, root=False, config=PROMPT_CHAT_1)\n        prompt2 = await afake_chain_node(chain=chain, root=False, config=PROMPT_CHAT_2)\n        await afake_chain_edge(\n            chain=chain,\n            source=runnable_branch,\n            target=prompt0,\n            relation=\"LINK\",\n            source_key=\"default\",\n            target_key=\"in\",\n        )\n        await afake_chain_edge(\n            chain=chain,\n            source=runnable_branch,\n            target=prompt1,\n            relation=\"LINK\",\n            source_key=foo_uuid,\n            target_key=\"in\",\n        )\n        await afake_chain_edge(\n            chain=chain,\n            source=runnable_branch,\n            target=prompt2,\n            relation=\"LINK\",\n            source_key=bar_uuid,\n            target_key=\"in\",\n        )\n\n        flow = await chain.aload_chain(context=aix_context)\n        runnable = unpack_chain_flow(flow)\n\n        assert isinstance(runnable, RunnableBranch)\n        assert len(runnable.branches) == 2\n        assert isinstance(runnable.default, IxNode)\n        assert isinstance(\n            runnable.default.child, import_class(PROMPT_CHAT_0[\"class_path\"])\n        )\n        assert isinstance(runnable.branches[0][0], RunnableLambda)\n        assert isinstance(\n            runnable.branches[0][1].child, import_class(PROMPT_CHAT_1[\"class_path\"])\n        )\n        assert isinstance(runnable.branches[1][0], RunnableLambda)\n        assert isinstance(\n            runnable.branches[1][1].child, import_class(PROMPT_CHAT_2[\"class_path\"])\n        )\n\n        # test invoking chain\n        output = await runnable.ainvoke(input={\"input\": \"hello!\"})\n        assert output == ChatPromptValue(\n            messages=[SystemMessage(content=\"You are bot 0.\")]\n        )\n        output = await runnable.ainvoke(input={\"foo\": True})\n        assert output == ChatPromptValue(\n            messages=[SystemMessage(content=\"You are bot 1.\")]\n        )\n        output = await runnable.ainvoke(input={\"bar\": True})\n        assert output == ChatPromptValue(\n            messages=[SystemMessage(content=\"You are bot 2.\")]\n        )\n\n    async def test_each(self, aix_context, mock_openai, lcel_flow_each_in_sequence):\n        \"\"\"Test RunnableEach\"\"\"\n        chain = lcel_flow_each_in_sequence[\"chain\"]\n        flow = await chain.aload_chain(context=aix_context)\n        runnable = unpack_chain_flow(flow)\n\n        assert isinstance(runnable, RunnableSequence)\n        assert len(runnable.steps) == 2\n        assert isinstance(runnable.steps[0], IxNode)\n        assert isinstance(runnable.steps[0].child, RunnableEach)\n        assert isinstance(runnable.steps[1], IxNode)\n        assert isinstance(runnable.steps[1].child, MockRunnable)\n\n        output = await runnable.ainvoke(input=[\"one\", \"two\", \"three\"])\n        assert output == {\n            \"input\": [\n                {\"input\": \"one\", \"node1\": 0},\n                {\"input\": \"two\", \"node1\": 0},\n                {\"input\": \"three\", \"node1\": 0},\n            ],\n            \"node2\": 0,\n        }\n\n\nMOCK_PLAN_RESPONSE = dict(name=\"plan_coding\", arguments={\"agent_id\": 1})\n\n\n@pytest.mark.skip(reason=\"Test is having an issue with the return type.\")\n@pytest.mark.django_db\nclass TestRunnableBinding:\n    async def test_bind_functions(self, anode_types, aix_context, mock_openai):\n        \"\"\"Test a flow with plan agent\"\"\"\n        await aload_fixture(\"agent/plan\")\n        chain = await Chain.objects.aget(agent__alias=\"plan\")\n\n        # test loaded flow\n        await aload_chain_flow(chain)\n\n        # init flow\n        runnable = await ainit_chain_flow(chain, context=aix_context)\n        output = await runnable.ainvoke(input={\"user_input\": \"code a fizzbuzz\"})\n\n        # HAX: using standard mocked response\n        assert output == {\n            \"user_input\": \"test\",\n            \"chat_output\": MOCK_PLAN_RESPONSE,\n        }\n\n\n@pytest.mark.django_db\nclass TestLoadFlow:\n    \"\"\"\n    Tests that validate loading various configurations of LCEL flows constructed\n    by nodes & edges in the database can be loaded into the intermediate data structures\n    needed to convert them into Runnable components.\n\n    These tests construct nodes & edges then validate the loaded placeholder flow.\n    These tests do not init or invoke the loaded flows.\n    The intent is just to validate the intermediate structures.\n    \"\"\"\n\n    async def test_sequence(self, lcel_sequence, aix_context):\n        fixture = lcel_sequence\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n\n        assert flow == [\n            fixture[\"nodes\"][0],\n            fixture[\"nodes\"][1],\n        ]\n\n    async def test_map(self, lcel_map, aix_context):\n        \"\"\"Test a map from the start of a chain\"\"\"\n        fixture = lcel_map\n        chain = fixture[\"chain\"]\n\n        # assert state of fixture\n        assert isinstance(fixture[\"map\"], MapPlaceholder)\n        assert len(fixture[\"map\"].map) == 2\n        assert fixture[\"map\"].map == {\n            \"a\": fixture[\"node1\"],\n            \"b\": fixture[\"node2\"],\n        }\n        # assert flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"map\"]\n\n    async def test_map_with_one_branch(self, lcel_map_with_one_branch, aix_context):\n        fixture = lcel_map_with_one_branch\n        chain = fixture[\"chain\"]\n\n        # assert state of fixture\n        assert isinstance(fixture[\"map\"], MapPlaceholder)\n        assert fixture[\"map\"].map == {\n            \"a\": fixture[\"node1\"],\n        }\n        # assert flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"map\"]\n\n    async def test_sequence_in_map_start(self, lcel_sequence_in_map_start, aix_context):\n        \"\"\"Test a map with a nested sequence. First node in chain is the map.\"\"\"\n        fixture = lcel_sequence_in_map_start\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"map\"]\n\n    async def test_sequence_in_map_in_sequence(\n        self, lcel_sequence_in_map_in_sequence, aix_context\n    ):\n        \"\"\"Test a map containing a sequence, that is contained in a sequence.\n\n        Tests that sequence_in_map works when the map is not the first node in the chain.\n        \"\"\"\n        fixture = lcel_sequence_in_map_in_sequence\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"node1\"],\n            fixture[\"map\"],\n            fixture[\"node4\"],\n        ]\n\n    async def test_sequence_in_map_in_sequence_n2(\n        self, lcel_sequence_in_map_in_sequence_n2, aix_context\n    ):\n        \"\"\"Test a map containing a sequence, that is contained in a sequence.\n\n        Tests that sequence_in_map works when the map is not the first node in the chain.\n        \"\"\"\n        fixture = lcel_sequence_in_map_in_sequence_n2\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"node1\"],\n            fixture[\"map\"],\n            fixture[\"node4\"],\n            fixture[\"node5\"],\n        ]\n\n    async def test_map_in_sequence_start(self, lcel_map_in_sequence_start, aix_context):\n        \"\"\"Test a sequence starting with a map. First node in chain is a map\"\"\"\n        fixture = lcel_map_in_sequence_start\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"map\"],\n            fixture[\"node2\"],\n        ]\n\n    async def test_map_in_sequence_start_n2(\n        self, lcel_map_in_sequence_start_n2, aix_context\n    ):\n        \"\"\"Test a sequence starting with a map. First node in chain is a map\"\"\"\n        fixture = lcel_map_in_sequence_start_n2\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"map\"],\n            fixture[\"node2\"],\n            fixture[\"node3\"],\n        ]\n\n    async def test_map_in_sequence(self, lcel_map_in_sequence, aix_context):\n        \"\"\"Test a sequence with a nested map. First node in chain is the first node of sequence.\"\"\"\n        fixture = lcel_map_in_sequence\n        chain = lcel_map_in_sequence[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"node1\"],\n            fixture[\"map\"],\n            fixture[\"node2\"],\n        ]\n\n    async def test_map_in_sequence_n2(self, lcel_map_in_sequence_n2, aix_context):\n        \"\"\"Test a sequence with a nested map. First node in chain is the first node of sequence.\"\"\"\n        fixture = lcel_map_in_sequence_n2\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"node1\"],\n            fixture[\"map\"],\n            fixture[\"node2\"],\n            fixture[\"node3\"],\n        ]\n\n    async def test_map_in_map(self, lcel_map_in_map, aix_context):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"map\"]\n\n    async def test_map_in_map_in_sequence_start(\n        self, lcel_map_in_map_in_sequence_start, aix_context\n    ):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map_in_sequence_start\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"map\"],\n            fixture[\"node3\"],\n        ]\n\n    async def test_map_in_map_in_sequence_start_n2(\n        self, lcel_map_in_map_in_sequence_start_n2, aix_context\n    ):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map_in_sequence_start_n2\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"map\"],\n            fixture[\"node3\"],\n            fixture[\"node4\"],\n        ]\n\n    async def test_map_in_map_in_sequence(\n        self, lcel_map_in_map_in_sequence, aix_context\n    ):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map_in_sequence\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"node1\"],\n            fixture[\"map\"],\n        ]\n\n    async def test_map_in_map_in_sequence_n2(\n        self, lcel_map_in_map_in_sequence_n2, aix_context\n    ):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map_in_sequence_n2\n        chain = fixture[\"chain\"]\n        _, flow = await aload_chain_flow(chain)\n        assert flow == [\n            fixture[\"node1\"],\n            fixture[\"map\"],\n            fixture[\"node4\"],\n            fixture[\"node5\"],\n        ]\n\n    async def test_branch(self, lcel_branch, aix_context):\n        fixture = lcel_branch\n        chain = fixture[\"chain\"]\n\n        # sanity check setup\n        assert isinstance(fixture[\"branch\"], BranchPlaceholder)\n        assert fixture[\"branch\"].default == fixture[\"node1\"]\n        assert fixture[\"branch\"].branches == [\n            (\"a\", fixture[\"node2\"]),\n            (\"b\", fixture[\"node3\"]),\n        ]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"branch\"]\n\n    async def test_branch_in_branch(self, lcel_branch_in_branch, aix_context):\n        \"\"\"Test a branch with a nested branch\"\"\"\n        fixture = lcel_branch_in_branch\n        chain = fixture[\"chain\"]\n\n        # sanity check setup\n        assert isinstance(fixture[\"branch\"], BranchPlaceholder)\n        assert fixture[\"branch\"].default == fixture[\"node5\"]\n        assert fixture[\"branch\"].branches == [\n            (\"a\", fixture[\"inner_branch\"]),\n            (\"b\", fixture[\"node4\"]),\n        ]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"branch\"]\n\n    async def test_branch_in_default_branch(\n        self, lcel_branch_in_default_branch, aix_context\n    ):\n        \"\"\"Test a branch with a nested branch\"\"\"\n        fixture = lcel_branch_in_default_branch\n        chain = fixture[\"chain\"]\n\n        # sanity check setup\n        assert isinstance(fixture[\"branch\"], BranchPlaceholder)\n        assert fixture[\"branch\"].default == fixture[\"inner_branch\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"branch\"]\n\n    async def test_sequence_in_branch(self, lcel_sequence_in_branch, aix_context):\n        \"\"\"Test a branch with a nested sequence\"\"\"\n        fixture = lcel_sequence_in_branch\n        chain = fixture[\"chain\"]\n\n        # sanity check setup\n        assert isinstance(fixture[\"branch\"], BranchPlaceholder)\n        assert fixture[\"branch\"].branches == [\n            (\"a\", fixture[\"inner_sequence\"]),\n            (\"b\", fixture[\"node1\"]),\n        ]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"branch\"]\n\n    async def test_sequence_in_default_branch(\n        self, lcel_sequence_in_default_branch, aix_context\n    ):\n        \"\"\"Test a branch with a nested sequence\"\"\"\n        fixture = lcel_sequence_in_default_branch\n        chain = fixture[\"chain\"]\n\n        # sanity check setup\n        assert isinstance(fixture[\"branch\"], BranchPlaceholder)\n        assert fixture[\"branch\"].default == fixture[\"inner_sequence\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"branch\"]\n\n    async def test_map_in_branch(self, lcel_map_in_branch, aix_context):\n        \"\"\"Test a branch with a nested map\"\"\"\n        fixture = lcel_map_in_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"branch\"]\n\n    async def test_map_in_default_branch(self, lcel_map_in_default_branch, aix_context):\n        \"\"\"Test a branch with a nested map\"\"\"\n        fixture = lcel_map_in_default_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"branch\"]\n\n    async def test_branch_in_sequence(self, lcel_branch_in_sequence, aix_context):\n        \"\"\"Test a sequence with a nested branch.\n\n        implicit maps are inherently flaky so this test requires manually checking\n        the loaded flow.\n        \"\"\"\n        fixture = lcel_branch_in_sequence\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n\n        # Verify the class of the flow using isinstance\n        assert isinstance(flow, SequencePlaceholder)\n        assert flow.steps[0] == fixture[\"node0\"]\n        assert isinstance(flow.steps[1], BranchPlaceholder)\n\n        # default branch\n        default = flow.steps[1].default\n        assert isinstance(default, SequencePlaceholder)\n        assert isinstance(default.steps[0], ImplicitJoin)\n        assert default.steps[0].source == [fixture[\"node1\"]]\n        assert default.steps[0].target.node == fixture[\"node4\"]\n        assert default.steps[1] == fixture[\"node5\"]\n\n        # branch a\n        label_a, branch_a = flow.steps[1].branches[0]\n        assert label_a == \"a\"\n        assert isinstance(branch_a, SequencePlaceholder)\n        assert isinstance(branch_a.steps[0], ImplicitJoin)\n        assert branch_a.steps[0].source == [fixture[\"node2\"]]\n        assert branch_a.steps[0].target.node == fixture[\"node4\"]\n        assert branch_a.steps[1] == fixture[\"node5\"]\n\n        # branch b\n        label_b, branch_b = flow.steps[1].branches[1]\n        assert label_b == \"b\"\n        assert isinstance(branch_b, SequencePlaceholder)\n        assert isinstance(branch_b.steps[0], ImplicitJoin)\n        assert branch_b.steps[0].source == [fixture[\"node3\"]]\n        assert branch_b.steps[0].target.node == fixture[\"node4\"]\n        assert branch_b.steps[1] == fixture[\"node5\"]\n\n        # The maps are implicit maps so the mapped value isn't used but verifying\n        # it was parsed as expected. This value is one of the source nodes randomly\n        # based on the order the graph was parsed.\n        assert default.steps[0].target.map[\"in\"] in [\n            fixture[\"node1\"],\n            fixture[\"node2\"],\n            fixture[\"node3\"],\n        ]\n        assert branch_a.steps[0].target.map[\"in\"] in [\n            fixture[\"node1\"],\n            fixture[\"node2\"],\n            fixture[\"node3\"],\n        ]\n        assert branch_b.steps[0].target.map[\"in\"] in [\n            fixture[\"node1\"],\n            fixture[\"node2\"],\n            fixture[\"node3\"],\n        ]\n\n    @pytest.mark.skip(reason=\"not supported yet\")\n    async def test_branch_in_map_in_sequence(\n        self, lcel_branch_in_map_in_sequence, aix_context\n    ):\n        fixture = lcel_branch_in_map_in_sequence\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"sequence\"]\n\n    @pytest.mark.skip(reason=\"not supported yet\")\n    async def test_branch_in_map_start(self, lcel_branch_in_map_start, aix_context):\n        fixture = lcel_branch_in_map_start\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"map\"]\n\n    async def test_join_after_branch(self, lcel_join_after_branch, aix_context):\n        \"\"\"Test a join after a branch\n\n        The join is two sequences that link to the same node/placeholder/component\n        instance. This way when instantiated the chain only has one instance of\n        the component.\n\n                  |--> *: [node1]---|\n        [branch]--+                 |\n                  |--> a: [node2] --|\n                  +                 +--> [node4] --> [node5]\n                  |--> b: [node3] --|\n\n        This is structured as separate sequences for both `a` and `b`, but `node4`\n        and `node5` are the same component instance.\n\n                  |--> *: [node1] --> [node4] --> [node5]\n        [branch]--+\n                  |--> a: [node2] --> [node4] --> [node5]\n                  +\n                  |--> b: [node3] --> [node4] --> [node5]\n        \"\"\"\n        fixture = lcel_join_after_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n\n        # root is a branch\n        assert isinstance(flow, BranchPlaceholder)\n        assert flow.node == fixture[\"branch_node\"]\n\n        # default branch\n        default = flow.default\n        assert isinstance(default, SequencePlaceholder)\n        assert isinstance(default.steps[0], ImplicitJoin)\n        assert default.steps[0].source == [fixture[\"node1\"]]\n        assert default.steps[0].target.node == fixture[\"node4\"]\n        assert default.steps[1] == fixture[\"node5\"]\n\n        # branch a\n        label_a, branch_a = flow.branches[0]\n        assert label_a == \"a\"\n        assert isinstance(branch_a, SequencePlaceholder)\n        assert isinstance(branch_a.steps[0], ImplicitJoin)\n        assert branch_a.steps[0].source == [fixture[\"node2\"]]\n        assert branch_a.steps[0].target.node == fixture[\"node4\"]\n        assert branch_a.steps[1] == fixture[\"node5\"]\n\n        # branch b\n        label_b, branch_b = flow.branches[1]\n        assert label_b == \"b\"\n        assert isinstance(branch_b, SequencePlaceholder)\n        assert isinstance(branch_b.steps[0], ImplicitJoin)\n        assert branch_b.steps[0].source == [fixture[\"node3\"]]\n        assert branch_b.steps[0].target.node == fixture[\"node4\"]\n        assert branch_b.steps[1] == fixture[\"node5\"]\n\n        # The maps are implicit maps so the mapped value isn't used but verifying\n        # it was parsed as expected. This value is one of the source nodes randomly\n        # based on the order the graph was parsed.\n        assert default.steps[0].target.map[\"in\"] in [\n            fixture[\"node1\"],\n            fixture[\"node2\"],\n            fixture[\"node3\"],\n        ]\n        assert branch_a.steps[0].target.map[\"in\"] in [\n            fixture[\"node1\"],\n            fixture[\"node2\"],\n            fixture[\"node3\"],\n        ]\n        assert branch_b.steps[0].target.map[\"in\"] in [\n            fixture[\"node1\"],\n            fixture[\"node2\"],\n            fixture[\"node3\"],\n        ]\n\n        # verify that the joined nodes are the same instances\n        # HAX: disabling this since the optimization was disabled to support\n        #      implicit joins\n        # assert flow.branches[0][1][1] == fixture[\"node4\"]\n        # assert flow.branches[1][1][1] == fixture[\"node4\"]\n        # assert flow.branches[0][1][2] == fixture[\"node5\"]\n        # assert flow.branches[1][1][2] == fixture[\"node5\"]\n\n    async def test_each(self, lcel_flow_each):\n        fixture = lcel_flow_each\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"each\"]\n\n    async def test_sequence_in_each(self, lcel_flow_each_sequence):\n        fixture = lcel_flow_each_sequence\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        assert flow == fixture[\"each\"]\n\n\n@pytest.mark.django_db\nclass TestFlow:\n    \"\"\"Test loading, initializing, and invoking flows:\n    sequences, maps, branches, joins, and various permutations of these.\n    \"\"\"\n\n    async def test_sequence(self, lcel_sequence, aix_context):\n        fixture = lcel_sequence\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\"input\": \"test\", \"sequence_0\": 0, \"sequence_1\": 1}\n\n    async def test_map(self, lcel_map, aix_context):\n        \"\"\"Test a map from the start of a chain\"\"\"\n        fixture = lcel_map\n        chain = fixture[\"chain\"]\n\n        # assert flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0},\n            \"b\": {\"input\": \"test\", \"node2\": 0},\n        }\n\n    async def test_map_with_one_branch(self, lcel_map_with_one_branch, aix_context):\n        fixture = lcel_map_with_one_branch\n        chain = fixture[\"chain\"]\n\n        # assert flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0},\n        }\n\n    async def test_sequence_in_map_start(self, lcel_sequence_in_map_start, aix_context):\n        \"\"\"Test a map with a nested sequence. First node in chain is the map.\"\"\"\n        fixture = lcel_sequence_in_map_start\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0},\n            \"b\": {\"input\": \"test\", \"sequence_0\": 0, \"sequence_1\": 1},\n            \"c\": {\"input\": \"test\", \"node2\": 0},\n        }\n\n    async def test_sequence_in_map_in_sequence(\n        self, lcel_sequence_in_map_in_sequence, aix_context\n    ):\n        \"\"\"Test a map containing a sequence, that is contained in a sequence.\n\n        Tests that sequence_in_map works when the map is not the first node in the chain.\n        \"\"\"\n        fixture = lcel_sequence_in_map_in_sequence\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0, \"node2\": 0},\n            \"b\": {\"input\": \"test\", \"node1\": 0, \"sequence_0\": 0, \"sequence_1\": 1},\n            \"c\": {\"input\": \"test\", \"node1\": 0, \"node3\": 0},\n            \"node4\": 0,\n        }\n\n    async def test_sequence_in_map_in_sequence_n2(\n        self, lcel_sequence_in_map_in_sequence_n2, aix_context\n    ):\n        \"\"\"Test a map containing a sequence, that is contained in a sequence.\n\n        Tests that sequence_in_map works when the map is not the first node in the chain.\n        \"\"\"\n        fixture = lcel_sequence_in_map_in_sequence_n2\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0, \"node2\": 0},\n            \"b\": {\"input\": \"test\", \"node1\": 0, \"sequence_0\": 0, \"sequence_1\": 1},\n            \"c\": {\"input\": \"test\", \"node1\": 0, \"node3\": 0},\n            \"node4\": 0,\n            \"node5\": 0,\n        }\n\n    async def test_map_in_sequence_start(self, lcel_map_in_sequence_start, aix_context):\n        \"\"\"Test a sequence starting with a map. First node in chain is a map\"\"\"\n        fixture = lcel_map_in_sequence_start\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"a\": 0},\n            \"b\": {\"input\": \"test\", \"b\": 0},\n            \"c\": {\"input\": \"test\", \"c\": 0},\n            \"node2\": 0,\n        }\n\n    async def test_map_in_sequence_start_n2(\n        self, lcel_map_in_sequence_start_n2, aix_context\n    ):\n        \"\"\"Test a sequence starting with a map. First node in chain is a map\"\"\"\n        fixture = lcel_map_in_sequence_start_n2\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"a\": 0},\n            \"b\": {\"input\": \"test\", \"b\": 0},\n            \"c\": {\"input\": \"test\", \"c\": 0},\n            \"node2\": 0,\n            \"node3\": 0,\n        }\n\n    async def test_map_in_sequence(self, lcel_map_in_sequence, aix_context):\n        \"\"\"Test a sequence with a nested map. First node in chain is the first node of sequence.\"\"\"\n        fixture = lcel_map_in_sequence\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0, \"a\": 0},\n            \"b\": {\"input\": \"test\", \"node1\": 0, \"b\": 0},\n            \"c\": {\"input\": \"test\", \"node1\": 0, \"c\": 0},\n            \"node2\": 0,\n        }\n\n    async def test_map_in_sequence_n2(self, lcel_map_in_sequence_n2, aix_context):\n        \"\"\"Test a sequence with a nested map. First node in chain is the first node of sequence.\"\"\"\n        fixture = lcel_map_in_sequence_n2\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0, \"a\": 0},\n            \"b\": {\"input\": \"test\", \"node1\": 0, \"b\": 0},\n            \"c\": {\"input\": \"test\", \"node1\": 0, \"c\": 0},\n            \"node2\": 0,\n            \"node3\": 0,\n        }\n\n    async def test_map_in_map(self, lcel_map_in_map, aix_context):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0},\n            \"b\": {\n                \"a\": {\"input\": \"test\", \"a\": 0},\n                \"b\": {\"input\": \"test\", \"b\": 0},\n                \"c\": {\"input\": \"test\", \"c\": 0},\n            },\n            \"c\": {\"input\": \"test\", \"node2\": 0},\n        }\n\n    async def test_map_in_map_in_sequence_start(\n        self, lcel_map_in_map_in_sequence_start, aix_context\n    ):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map_in_sequence_start\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0},\n            \"b\": {\n                \"a\": {\"input\": \"test\", \"a\": 0},\n                \"b\": {\"input\": \"test\", \"b\": 0},\n                \"c\": {\"input\": \"test\", \"c\": 0},\n            },\n            \"c\": {\"input\": \"test\", \"node2\": 0},\n            \"node3\": 0,\n        }\n\n    async def test_map_in_map_in_sequence_start_n2(\n        self, lcel_map_in_map_in_sequence_start_n2, aix_context\n    ):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map_in_sequence_start_n2\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0},\n            \"b\": {\n                \"a\": {\"input\": \"test\", \"a\": 0},\n                \"b\": {\"input\": \"test\", \"b\": 0},\n                \"c\": {\"input\": \"test\", \"c\": 0},\n            },\n            \"c\": {\"input\": \"test\", \"node2\": 0},\n            \"node3\": 0,\n            \"node4\": 0,\n        }\n\n    async def test_map_in_map_in_sequence(\n        self, lcel_map_in_map_in_sequence, aix_context\n    ):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map_in_sequence\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0, \"node2\": 0},\n            \"b\": {\n                \"a\": {\"input\": \"test\", \"node1\": 0, \"a\": 0},\n                \"b\": {\"input\": \"test\", \"node1\": 0, \"b\": 0},\n                \"c\": {\"input\": \"test\", \"node1\": 0, \"c\": 0},\n            },\n            \"c\": {\"input\": \"test\", \"node1\": 0, \"node3\": 0},\n        }\n\n    async def test_map_in_map_in_sequence_n2(\n        self, lcel_map_in_map_in_sequence_n2, aix_context\n    ):\n        \"\"\"Test a map with a nested map\"\"\"\n        fixture = lcel_map_in_map_in_sequence_n2\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\n            \"a\": {\"input\": \"test\", \"node1\": 0, \"node2\": 0},\n            \"b\": {\n                \"a\": {\"input\": \"test\", \"node1\": 0, \"a\": 0},\n                \"b\": {\"input\": \"test\", \"node1\": 0, \"b\": 0},\n                \"c\": {\"input\": \"test\", \"node1\": 0, \"c\": 0},\n            },\n            \"c\": {\"input\": \"test\", \"node1\": 0, \"node3\": 0},\n            \"node4\": 0,\n            \"node5\": 0,\n        }\n\n    async def test_branch(self, lcel_branch, aix_context):\n        fixture = lcel_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow (default branch)\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n\n        # default branch\n        assert output == {\"input\": \"test\", \"node1\": 0}\n\n        # named branches\n        assert await flow.ainvoke(input={\"a\": 1}) == {\"a\": 1, \"node2\": 0}\n        assert await flow.ainvoke(input={\"b\": 1}) == {\"b\": 1, \"node3\": 0}\n\n        # test branch ordering, first branch (a) will execute when both are present\n        assert await flow.ainvoke(input={\"a\": 1, \"b\": 1}) == {\n            \"a\": 1,\n            \"b\": 1,\n            \"node2\": 0,\n        }\n\n        # test that falsy key will not trigger branch\n        assert await flow.ainvoke(input={\"a\": 0, \"b\": 0}) == {\n            \"a\": 0,\n            \"b\": 0,\n            \"node1\": 0,\n        }\n\n    async def test_branch_in_branch(self, lcel_branch_in_branch, aix_context):\n        \"\"\"Test a branch with a nested branch\"\"\"\n        fixture = lcel_branch_in_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {\"input\": \"test\", \"node5\": 0}\n\n    async def test_branch_in_default_branch(\n        self, lcel_branch_in_default_branch, aix_context\n    ):\n        \"\"\"Test a branch with a nested branch\"\"\"\n        fixture = lcel_branch_in_default_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n\n        # default branches\n        assert await flow.ainvoke(input={\"input\": \"test\"}) == {\n            \"input\": \"test\",\n            \"inner_default\": 0,\n        }\n        assert await flow.ainvoke(input={\"inner_a_in\": 1}) == {\n            \"inner_a_in\": 1,\n            \"inner_a\": 0,\n        }\n        assert await flow.ainvoke(input={\"inner_b_in\": 1}) == {\n            \"inner_b_in\": 1,\n            \"inner_b\": 0,\n        }\n\n        # non-default branch (inner_a params have no effect)\n        assert await flow.ainvoke(input={\"a_in\": 1, \"inner_a_in\": 1}) == {\n            \"a_in\": 1,\n            \"inner_a_in\": 1,\n            \"a\": 0,\n        }\n        assert await flow.ainvoke(input={\"b_in\": 1, \"inner_a_in\": 1}) == {\n            \"b_in\": 1,\n            \"inner_a_in\": 1,\n            \"b\": 0,\n        }\n\n    async def test_sequence_in_branch(self, lcel_sequence_in_branch, aix_context):\n        \"\"\"Test a branch with a nested sequence\"\"\"\n        fixture = lcel_sequence_in_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        assert await flow.ainvoke(input={\"input\": \"test\"}) == {\n            \"input\": \"test\",\n            \"default\": 0,\n        }\n        assert await flow.ainvoke(input={\"a\": 1}) == {\n            \"a\": 1,\n            \"sequence_0\": 0,\n            \"sequence_1\": 1,\n        }\n        assert await flow.ainvoke(input={\"b\": 1}) == {\"b\": 1, \"node1\": 0}\n\n    async def test_sequence_in_default_branch(\n        self, lcel_sequence_in_default_branch, aix_context\n    ):\n        \"\"\"Test a branch with a nested sequence\"\"\"\n        fixture = lcel_sequence_in_default_branch\n        chain = fixture[\"chain\"]\n\n        # sanity check setup\n        assert isinstance(fixture[\"branch\"], BranchPlaceholder)\n        assert fixture[\"branch\"].default == fixture[\"inner_sequence\"]\n\n        # test loaded flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        assert await flow.ainvoke(input={\"input\": \"test\"}) == {\n            \"input\": \"test\",\n            \"sequence_0\": 0,\n            \"sequence_1\": 1,\n        }\n        assert await flow.ainvoke(input={\"a\": 1}) == {\"a\": 0}\n        assert await flow.ainvoke(input={\"b\": 1}) == {\"b\": 0}\n\n    async def test_map_in_branch(self, lcel_map_in_branch, aix_context):\n        \"\"\"Test a branch with a nested map\"\"\"\n        fixture = lcel_map_in_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        assert await flow.ainvoke(input={\"input\": \"test\"}) == {\n            \"input\": \"test\",\n            \"default\": 0,\n        }\n        assert await flow.ainvoke(input={\"a\": 1}) == {\"a\": 1, \"node1\": 0}\n        assert await flow.ainvoke(input={\"b\": 1}) == {\n            \"a\": {\"b\": 1, \"a\": 0},\n            \"b\": {\"b\": 0},\n            \"c\": {\"b\": 1, \"c\": 0},\n        }\n\n    async def test_map_in_default_branch(self, lcel_map_in_default_branch, aix_context):\n        \"\"\"Test a branch with a nested map\"\"\"\n        fixture = lcel_map_in_default_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        assert await flow.ainvoke(input={\"input\": \"test\"}) == {\n            \"a\": {\"input\": \"test\", \"a\": 0},\n            \"b\": {\"input\": \"test\", \"b\": 0},\n            \"c\": {\"input\": \"test\", \"c\": 0},\n        }\n        assert await flow.ainvoke(input={\"a\": 1}) == {\"a\": 0}\n        assert await flow.ainvoke(input={\"b\": 1}) == {\"b\": 0}\n\n    async def test_branch_in_sequence(self, lcel_branch_in_sequence, aix_context):\n        fixture = lcel_branch_in_sequence\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        assert await flow.ainvoke(input={\"input\": \"test\"}) == {\n            \"input\": \"test\",\n            \"node0\": 0,\n            \"node1\": 0,\n            \"node4\": 0,\n            \"node5\": 0,\n        }\n        assert await flow.ainvoke(input={\"a\": 1}) == {\n            \"a\": 1,\n            \"node0\": 0,\n            \"node2\": 0,\n            \"node4\": 0,\n            \"node5\": 0,\n        }\n        assert await flow.ainvoke(input={\"b\": 1}) == {\n            \"b\": 1,\n            \"node0\": 0,\n            \"node3\": 0,\n            \"node4\": 0,\n            \"node5\": 0,\n        }\n\n    @pytest.mark.skip(reason=\"not supported yet\")\n    async def test_branch_in_map_in_sequence(\n        self, lcel_branch_in_map_in_sequence, aix_context\n    ):\n        fixture = lcel_branch_in_map_in_sequence\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        _, flow = await aload_chain_flow(chain)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {}\n\n    @pytest.mark.skip(reason=\"not supported yet\")\n    async def test_branch_in_map_start(self, lcel_branch_in_map_start, aix_context):\n        fixture = lcel_branch_in_map_start\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        output = await flow.ainvoke(input={\"input\": \"test\"})\n        assert output == {}\n\n    async def test_join_after_branch(self, lcel_join_after_branch, aix_context):\n        \"\"\"Test a join after a branch\n\n        The join is two sequences that link to the same node/placeholder/component\n        instance. This way when instantiated the chain only has one instance of\n        the component.\n\n                  |--> *: [node1]---|\n        [branch]--+                 |\n                  |--> a: [node2] --|\n                  +                 +--> [node4] --> [node5]\n                  |--> b: [node3] --|\n\n        This is structured as separate sequences for both `a` and `b`, but `node4`\n        and `node5` are the same component instance.\n\n                  |--> *: [node1] --> [node4] --> [node5]\n        [branch]--+\n                  |--> a: [node2] --> [node4] --> [node5]\n                  +\n                  |--> b: [node3] --> [node4] --> [node5]\n        \"\"\"\n        fixture = lcel_join_after_branch\n        chain = fixture[\"chain\"]\n\n        # test loaded flow\n        flow = await ainit_chain_flow(chain, context=aix_context)\n\n        # default\n        assert await flow.ainvoke(input={\"input\": \"test\"}) == {\n            \"input\": \"test\",\n            \"node1\": 0,\n            \"node4\": 0,\n            \"node5\": 0,\n        }\n        assert await flow.ainvoke(input={\"a\": 1}) == {\n            \"a\": 1,\n            \"node2\": 0,\n            \"node4\": 0,\n            \"node5\": 0,\n        }\n        assert await flow.ainvoke(input={\"b\": 1}) == {\n            \"b\": 1,\n            \"node3\": 0,\n            \"node4\": 0,\n            \"node5\": 0,\n        }\n\n    async def test_each(self, lcel_flow_each, aix_context: IxContext):\n        \"\"\"\n        Test invoking a RunnableEach\n        :param lcel_flow_each:\n        :param aix_context:\n        :return:\n        \"\"\"\n        fixture = lcel_flow_each\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        runnable = unpack_chain_flow(flow)\n\n        # validate loaded instance\n        assert isinstance(runnable, RunnableEach)\n        assert isinstance(runnable.bound, IxNode)\n        assert isinstance(runnable.bound.child, MockRunnable)\n\n        # validate output\n        result = await runnable.ainvoke(input=[\"value1\", \"value2\", \"value3\"])\n        assert result == [\n            {\"input\": \"value1\", \"node1\": 0},\n            {\"input\": \"value2\", \"node1\": 0},\n            {\"input\": \"value3\", \"node1\": 0},\n        ]\n\n    async def test_sequence_in_each(\n        self, lcel_flow_each_sequence, aix_context: IxContext\n    ):\n        \"\"\"Sequence in the RunnableEach's workflow\"\"\"\n        fixture = lcel_flow_each_sequence\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        runnable_each = unpack_chain_flow(flow)\n\n        # validate loaded instance\n        assert isinstance(runnable_each, RunnableEach)\n        assert isinstance(runnable_each.bound, RunnableSequence)\n\n        # validate output\n        result = await flow.ainvoke(input=[\"value1\", \"value2\", \"value3\"])\n        assert result == [\n            {\"input\": \"value1\", \"node1\": 0, \"node2\": 0},\n            {\"input\": \"value2\", \"node1\": 0, \"node2\": 0},\n            {\"input\": \"value3\", \"node1\": 0, \"node2\": 0},\n        ]\n\n    async def test_each_in_sequence(\n        self, lcel_flow_each_in_sequence, aix_context: IxContext\n    ):\n        \"\"\"A RunnableEach in sequence with other nodes.\"\"\"\n        fixture = lcel_flow_each_in_sequence\n        chain = fixture[\"chain\"]\n        flow = await ainit_chain_flow(chain, context=aix_context)\n        runnable = unpack_chain_flow(flow)\n\n        # validate loaded instance\n        assert isinstance(runnable, RunnableSequence)\n        runnable_each = runnable.first\n        assert isinstance(runnable_each.child, RunnableEach)\n        assert isinstance(runnable_each.child.bound, IxNode)\n        assert isinstance(runnable_each.child.bound.child, MockRunnable)\n\n        # validate output\n        result = await flow.ainvoke(input=[\"value1\", \"value2\", \"value3\"])\n        assert result == {\n            \"input\": [\n                {\"input\": \"value1\", \"node1\": 0},\n                {\"input\": \"value2\", \"node1\": 0},\n                {\"input\": \"value3\", \"node1\": 0},\n            ],\n            \"node2\": 0,\n        }\n\n\n@pytest.mark.django_db\nclass TestExampleFlows:\n    \"\"\"\n    Tests for example flows that may be tricky. Generally something that was\n    tested in TestLoadFlow and TestFlow but didnt work in the UX created flow.\n    \"\"\"\n\n    async def test_pirate_flow(self, anode_types, aix_context, mock_openai_streaming):\n        \"\"\"Test a flow with a pirate component\"\"\"\n\n        await aload_fixture(\"agent/pirate\")\n        chain = await Chain.objects.aget(agent__alias=\"pirate\")\n\n        # init flow\n        runnable = await ainit_chain_flow(chain, context=aix_context)\n\n        # TODO: Disabling for now. need to mock redis memory because\n        #  it's returning empty. Was tested manually with @pirate\n        # verify context map works as expected\n        # gather_context = runnable.first\n        # context = await gather_context.ainvoke(input={\"user_input\": \"test\"})\n        # assert context == {\n        #    \"user_input\": \"test\",\n        #    \"memories\": {\"chat_history\": \"mock memory\"},\n        # }\n\n        output = await runnable.ainvoke(input={\"user_input\": \"test\"})\n        assert output == {\n            \"user_input\": \"test\",\n            \"chat_output\": AIMessage(content=\"mock llm response\"),\n        }\n\n    @pytest.mark.skip(reason=\"mocks for streaming not working\")\n    async def test_each(self, anode_types, aix_context):\n        await aload_fixture(\"agent/each\")\n        chain = await Chain.objects.aget(agent__alias=\"each\")\n\n        # init flow\n        runnable = await chain.aload_chain(context=aix_context)\n        output = await runnable.ainvoke(input={\"user_input\": \"test\"})\n        assert output == [\n            {\n                \"content\": \"Graceful feline leaps,\\nWhiskers twitch, eyes gleam with pride,\\nCats, nature's delight.\",\n                \"additional_kwargs\": {},\n                \"type\": \"AIMessageChunk\",\n                \"example\": False,\n            },\n            {\n                \"content\": \"Vast expanse above,\\nStars and planets dance in space,\\nMysteries unfold.\",\n                \"additional_kwargs\": {},\n                \"type\": \"AIMessageChunk\",\n                \"example\": False,\n            },\n        ]\n"}
{"type": "test_file", "path": "ix/chains/tests/test_import_langchain.py", "content": "import json\nimport pytest\nfrom django.core.management import call_command\n\nfrom ix.chains.models import NodeType\n\n\n@pytest.mark.django_db\ndef test_imported_components(snapshot):\n    \"\"\"\n    This test double checks any changes to imported component definitions to catch\n    mistakes in the import process. I.e. this catches changes that may be bugs but\n    don't raise exceptions.\n\n    This means if you change a component or change the import process you will\n    need to update the snapshot.\n\n    Note that a failing snapshot doesn't mean there is a bug, it just means you\n    need to update the snapshot.\n    \"\"\"\n    NodeType.objects.all().delete()\n    call_command(\"import_langchain\")\n\n    # Ensure you generate a unique name for each snapshot to avoid overwriting\n    snapshot.snapshot_dir = \"/var/app/test_data/snapshots/components/\"\n\n    nodes = list(NodeType.objects.all().order_by(\"class_path\"))\n    for node in nodes:\n        # Create a dictionary containing only the fields you want to snapshot\n        node_dict = {\n            \"name\": node.name,\n            \"description\": node.description,\n            \"class_path\": node.class_path,\n            \"type\": node.type,\n            \"display_type\": node.display_type,\n            \"connectors\": node.connectors,\n            \"fields\": node.fields,\n            \"child_field\": node.child_field,\n            \"config_schema\": node.config_schema,\n        }\n        as_json = json.dumps(node_dict, indent=4, sort_keys=True)\n        snapshot.assert_match(as_json, snapshot_name=f\"{node.class_path}.json\")\n"}
{"type": "test_file", "path": "ix/datasources/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "ix/chains/tests/test_routing.py", "content": "import logging\nfrom copy import deepcopy\nfrom unittest.mock import MagicMock\n\nimport pytest\nfrom langchain.schema import HumanMessage\n\nfrom ix.chains.models import ChainNode\nfrom ix.chains.routing import MapSubchain\nfrom ix.chains.tests.mock_chain import MOCK_CHAIN_CONFIG\nfrom ix.chains.tests.mock_configs import (\n    LLM_REPLY,\n    LLM_REPLY_WITH_HISTORY,\n    LLM_REPLY_WITH_HISTORY_AND_MEMORY,\n)\nfrom ix.task_log.tests.fake import fake_chain\n\nlogger = logging.getLogger(__name__)\n\n\nMAP_SUBCHAIN = {\n    \"name\": \"refine\",\n    \"description\": \"testing MapSubchain\",\n    \"class_path\": \"ix.chains.routing.MapSubchain\",\n    \"config\": {\n        \"input_variables\": [\"input1\"],\n        \"map_input\": \"input1\",\n        \"map_input_to\": \"mock_chain_input\",\n        \"output_key\": \"output1\",\n        \"chains\": [MOCK_CHAIN_CONFIG],\n    },\n}\n\n\nMAP_SUBCHAIN_WITH_MEMORY = {\n    \"name\": \"refine\",\n    \"description\": \"testing MapSubchain\",\n    \"class_path\": \"ix.chains.routing.MapSubchain\",\n    \"config\": {\n        \"input_variables\": [\"user_inputs\"],\n        \"map_input\": \"user_inputs\",\n        \"map_input_to\": \"user_input\",\n        \"output_key\": \"output1\",\n        \"memory\": [\n            {\n                \"class_path\": \"ix.chains.tests.mock_memory.MockMemory\",\n                \"config\": {},\n            }\n        ],\n        \"chains\": [LLM_REPLY_WITH_HISTORY],\n    },\n}\n\n\nEMPTY_SEQUENCE = {\n    \"name\": \"test sequence\",\n    \"description\": \"testing SequentialChain\",\n    \"class_path\": \"langchain.chains.SequentialChain\",\n    \"config\": {\n        \"input_variables\": [\"user_input\"],\n    },\n}\n\nSEQUENCE = {\n    \"name\": \"test sequence\",\n    \"description\": \"testing SequentialChain\",\n    \"class_path\": \"langchain.chains.SequentialChain\",\n    \"config\": {\n        \"input_variables\": [\"user_input\"],\n        \"chains\": [LLM_REPLY],\n    },\n}\n\n# memory configured on sequence\nSEQUENCE_WITH_MEMORY = {\n    \"class_path\": \"langchain.chains.SequentialChain\",\n    \"config\": {\n        \"chains\": [LLM_REPLY_WITH_HISTORY],\n        \"memory\": [\n            {\n                \"class_path\": \"ix.chains.tests.mock_memory.MockMemory\",\n                \"config\": {},\n            }\n        ],\n        \"input_variables\": [\"user_input\"],\n    },\n}\n\nSEQUENCE_WITH_LLM_WITH_MEMORY = {\n    \"name\": \"test sequence\",\n    \"description\": \"testing SequentialChain\",\n    \"class_path\": \"langchain.chains.SequentialChain\",\n    \"config\": {\n        \"input_variables\": [\"user_input\"],\n        \"chains\": [LLM_REPLY_WITH_HISTORY_AND_MEMORY],\n    },\n}\n\n\n@pytest.fixture\ndef mock_subchain_config():\n    config = deepcopy(MAP_SUBCHAIN)\n    config[\"config\"][\"chains\"] = [MOCK_CHAIN_CONFIG]\n    yield config\n\n\n@pytest.mark.skip(reason=\"DEPRECATED!\")\n@pytest.mark.django_db\nclass TestSequentialChain:\n    \"\"\"Test loading sequences\"\"\"\n\n    def test_load(self, load_chain, mock_openai):\n        mock_openai.__dict__[\"completion_with_retry\"] = MagicMock(\n            return_value=mock_openai.get_mock_content()\n        )\n\n        # create chain\n        chain = load_chain(SEQUENCE)\n\n        # verify result\n        result = chain.run(user_input=\"test1\")\n        assert result == \"mock llm response\"\n\n    def test_with_memory(self, load_chain, mock_openai):\n        mock_openai.__dict__[\"completion_with_retry\"] = MagicMock(\n            return_value=mock_openai.get_mock_content()\n        )\n\n        # create chain\n        chain = load_chain(SEQUENCE_WITH_MEMORY)\n\n        # verify result\n        result = chain.run(user_input=\"test1\")\n        assert result == \"mock llm response\"\n        messages = mock_openai.completion_with_retry.call_args_list[0].kwargs[\n            \"messages\"\n        ]\n        system_message = messages[0]\n        assert system_message[\"content\"] == \"You are a test bot! HISTORY: mock memory\"\n\n    def test_with_memory_on_chain(self, load_chain, mock_openai):\n        mock_openai.__dict__[\"completion_with_retry\"] = MagicMock(\n            return_value=mock_openai.get_mock_content()\n        )\n\n        # create chain\n        chain = load_chain(SEQUENCE_WITH_LLM_WITH_MEMORY)\n\n        # pre-seed memory\n        chain.chains[0].memory.chat_memory.messages = [\n            HumanMessage(content=\"this is a seeded memory\")\n        ]\n\n        # verify result\n        result = chain.run(user_input=\"test1\")\n        assert result == \"mock llm response\"\n        messages = mock_openai.completion_with_retry.call_args_list[0].kwargs[\n            \"messages\"\n        ]\n        system_message = messages[0]\n        assert (\n            system_message[\"content\"]\n            == \"You are a test bot! HISTORY: Human: this is a seeded memory\"\n        )\n\n\n@pytest.fixture()\ndef mock_mapsubchain(load_chain) -> MapSubchain:\n    yield load_chain(MAP_SUBCHAIN)\n\n\n# TODO: move these tests to RunnableEachSequence\n@pytest.mark.skip(reason=\"DEPRECATED!\")\n@pytest.mark.django_db\nclass TestMapSubchain:\n    def test_from_config(self, node_types, mock_subchain_config, ix_context):\n        \"\"\"Testing importing from a config object\"\"\"\n        chain = fake_chain()\n        ChainNode.objects.create_from_config(chain, mock_subchain_config, root=True)\n        instance = chain.load_chain(ix_context)\n        assert isinstance(instance, MapSubchain)\n\n    def test_load_chain(self, mock_mapsubchain):\n        assert isinstance(mock_mapsubchain, MapSubchain)\n\n    def test_call(self, mock_mapsubchain):\n        chain = mock_mapsubchain\n        inputs = {\"input1\": [\"test1\", \"test2\", \"test3\"]}\n        output = chain.run(**inputs)\n        assert output == [\"test1\", \"test2\", \"test3\"]\n\n    def test_call_nested_input_map(self, mock_subchain_config, load_chain, mock_openai):\n        # setup nested map_input\n        config = mock_subchain_config[\"config\"]\n        config[\"map_input\"] = \"input1.level2\"\n        chain = load_chain(mock_subchain_config)\n\n        # run test\n        inputs = {\"input1\": {\"level2\": [\"test1\", \"test2\", \"test3\"]}}\n        output = chain.run(**inputs)\n        assert output == [\"test1\", \"test2\", \"test3\"]\n\n    async def test_acall(self, mock_mapsubchain):\n        chain = mock_mapsubchain\n        inputs = {\"input1\": [\"test1\", \"test2\", \"test3\"]}\n        output = await chain.arun(**inputs)\n        assert output == [\"test1\", \"test2\", \"test3\"]\n\n    async def test_acall_nested_input_map(\n        self, mock_subchain_config, aload_chain, mock_openai\n    ):\n        # setup nested map_input\n        config = mock_subchain_config[\"config\"]\n        config[\"map_input\"] = \"input1.level2\"\n        chain = await aload_chain(mock_subchain_config)\n\n        # run test\n        inputs = {\"input1\": {\"level2\": [\"test1\", \"test2\", \"test3\"]}}\n        output = await chain.arun(**inputs)\n        assert output == [\"test1\", \"test2\", \"test3\"]\n\n    def test_memory(self, load_chain, mock_openai):\n        mock_openai.__dict__[\"completion_with_retry\"] = MagicMock(\n            return_value=mock_openai.get_mock_content()\n        )\n\n        # create chain\n        chain = load_chain(MAP_SUBCHAIN_WITH_MEMORY)\n\n        # run chain\n        inputs = {\"user_inputs\": [\"test1\", \"test2\", \"test3\"]}\n        output = chain.run(**inputs)\n        assert output == [\"mock llm response\", \"mock llm response\", \"mock llm response\"]\n\n        # assert memory was in the prompts\n        call_args_list = mock_openai.completion_with_retry.call_args_list\n        assert len(call_args_list) == 3\n        system_message1 = call_args_list[0].kwargs[\"messages\"][0][\"content\"]\n        system_message2 = call_args_list[1].kwargs[\"messages\"][0][\"content\"]\n        system_message3 = call_args_list[2].kwargs[\"messages\"][0][\"content\"]\n        assert \"HISTORY: mock memory\" in system_message1\n\n        # memories are only saved at the end of the chain since memory is added to the sequence\n        assert \"Human: test1\" not in system_message2\n        assert \"Human: test1\" not in system_message3\n        assert \"Human: test2\" not in system_message3\n"}
{"type": "test_file", "path": "ix/data/tests/test_endpoints.py", "content": "from ix.data.models import Schema, Data\nfrom ix.data.tests.fake import afake_schema, FakeSchema\nfrom ix.ix_users.tests.mixins import OwnershipTestsMixin\nfrom ix.server.fast_api import app\nimport pytest\nfrom uuid import uuid4\nfrom httpx import AsyncClient\n\n\n@pytest.mark.django_db\nclass TestSchema:\n    async def test_create_schema(self, auser):\n        data = {\n            \"name\": \"Test Schema\",\n            \"type\": \"json\",\n            \"description\": \"A test schema\",\n            \"value\": {},\n            \"meta\": {},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/schemas/\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we created the schema\n        assert result[\"name\"] == \"Test Schema\"\n        assert result[\"type\"] == \"json\"\n\n    async def test_get_schema(self, auser):\n        schema = await Schema.objects.acreate(\n            name=\"Test Schema\", type=\"json\", description=\"A test schema\"\n        )\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/schemas/{schema.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we got the correct schema detail\n        assert result[\"id\"] == str(schema.id)\n        assert result[\"name\"] == \"Test Schema\"\n\n    async def test_update_schema(self, auser):\n        schema = await Schema.objects.acreate(\n            name=\"Test Schema\", type=\"json\", description=\"A test schema\"\n        )\n        update_data = {\n            \"name\": \"Updated Schema\",\n            \"type\": \"json\",\n            \"description\": \"An updated test schema\",\n            \"value\": {},\n            \"meta\": {},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/schemas/{schema.id}\", json=update_data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we updated the schema\n        assert result[\"name\"] == \"Updated Schema\"\n\n    async def test_delete_schema(self, auser):\n        schema = await Schema.objects.acreate(\n            name=\"Test Schema\", type=\"json\", description=\"A test schema\"\n        )\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/schemas/{schema.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"id\"] == str(schema.id)\n\n        # Ensure the schema is deleted\n        assert not await Schema.objects.filter(id=schema.id).aexists()\n\n    async def test_schema_not_found(self, auser):\n        non_existent_schema_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/schemas/{non_existent_schema_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Schema not found\"\n\n\n@pytest.mark.django_db\nclass TestSchemaOwnership(OwnershipTestsMixin):\n    object_type = \"schemas\"\n\n    async def setup_object(self, **kwargs):\n        return await Schema.objects.acreate(\n            name=\"Test Schema\", type=\"json\", description=\"A test schema\", **kwargs\n        )\n\n    async def get_create_data(self):\n        return {\n            \"name\": \"New Schema\",\n            \"type\": \"json\",\n            \"description\": \"New schema\",\n            \"value\": {},\n            \"meta\": {},\n        }\n\n    async def get_update_data(self, instance):\n        return {\n            \"name\": \"Updated Schema\",\n            \"type\": \"json\",\n            \"description\": \"Updated schema\",\n            \"value\": {},\n            \"meta\": {},\n        }\n\n\n@pytest.mark.django_db\nclass TestData:\n    async def test_create_data(self, auser):\n        schema = await afake_schema()\n        datum = FakeSchema().model_dump()\n        data = {\n            \"name\": \"Test Data\",\n            \"description\": \"A test data\",\n            \"schema_id\": str(schema.id),\n            \"value\": datum,\n            \"meta\": {},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.post(\"/data/\", json=data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we created the data\n        assert result[\"name\"] == \"Test Data\"\n        assert result[\"schema_id\"] == str(schema.id)\n        assert result[\"value\"] == datum\n        assert result[\"meta\"] == {}\n\n    async def test_get_data(self, auser):\n        schema = await afake_schema()\n        datum = FakeSchema().model_dump()\n\n        data_obj = await Data.objects.acreate(\n            name=\"Test Data\", schema=schema, description=\"A test data\", value=datum\n        )\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/data/{data_obj.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we got the correct data detail\n        assert result[\"id\"] == str(data_obj.id)\n        assert result[\"name\"] == \"Test Data\"\n        assert result[\"schema_id\"] == str(schema.id)\n        assert result[\"value\"] == datum\n        assert result[\"meta\"] == {}\n\n    async def test_update_data(self, auser):\n        schema = await afake_schema()\n        data_obj = await Data.objects.acreate(\n            name=\"Test Data\", schema=schema, description=\"A test data\"\n        )\n        datum = FakeSchema().model_dump()\n        update_data = {\n            \"name\": \"Updated Data\",\n            \"description\": \"An updated test data\",\n            \"schema_id\": str(schema.id),\n            \"value\": datum,\n            \"meta\": {},\n        }\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.put(f\"/data/{data_obj.id}\", json=update_data)\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n\n        # Check that we updated the data\n        assert result[\"name\"] == \"Updated Data\"\n        assert result[\"value\"] == datum\n\n    async def test_delete_data(self, auser):\n        schema = await afake_schema()\n        data_obj = await Data.objects.acreate(\n            name=\"Test Data\", schema=schema, description=\"A test data\"\n        )\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.delete(f\"/data/{data_obj.id}\")\n\n        assert response.status_code == 200, response.content\n        result = response.json()\n        assert result[\"id\"] == str(data_obj.id)\n\n        # Ensure the data is deleted\n        assert not await Data.objects.filter(id=data_obj.id).aexists()\n\n    async def test_data_not_found(self, auser):\n        non_existent_data_id = uuid4()\n\n        async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n            response = await ac.get(f\"/data/{non_existent_data_id}\")\n\n        assert response.status_code == 404\n        result = response.json()\n        assert result[\"detail\"] == \"Data not found\"\n\n\n@pytest.mark.django_db\nclass TestDataOwnership(OwnershipTestsMixin):\n    object_type = \"data\"\n\n    async def setup_object(self, **kwargs):\n        schema = await afake_schema()\n        return await Data.objects.acreate(\n            name=\"Test Data\", schema=schema, description=\"A test data\", **kwargs\n        )\n\n    async def get_create_data(self):\n        schema = await afake_schema()\n        return {\n            \"name\": \"New Data\",\n            \"description\": \"New data\",\n            \"schema_id\": str(schema.id),\n            \"value\": {},\n            \"meta\": {},\n        }\n\n    async def get_update_data(self, instance):\n        return {\n            \"name\": \"Updated Data\",\n            \"description\": \"Updated data\",\n            \"schema_id\": str(instance.schema_id),\n            \"value\": {},\n            \"meta\": {},\n        }\n"}
{"type": "test_file", "path": "ix/chains/tests/test_moderator.py", "content": "import pytest\n\nfrom ix.chains.tests.test_config_loader import unpack_chain_flow\n\n\n@pytest.mark.django_db\nclass TestChatModerator:\n    def test_agent_prompt(self, chat):\n        \"\"\"Test that the agent prompt is formatted correctly\"\"\"\n\n        flow = chat[\"instance\"]\n        chat_moderator = unpack_chain_flow(flow)\n        agent_prompt = chat_moderator.agent_prompt(chat[\"chat\"])\n\n        assert (\n            agent_prompt\n            == \"\"\"0. agent_1: to test selections\\n1. agent_2: to test selections\"\"\"\n        )\n\n    async def test_acall(self, mock_openai, achat, mocker, aix_handler):\n        # mock start_agent_loop since the task is async and makes this test flaky\n        mocker.patch(\"ix.chains.moderator.start_agent_loop\")\n\n        mock_openai.return_value = dict(\n            name=\"delegate_to_agent\", arguments={\"agent_id\": 1}\n        )\n\n        flow = achat[\"instance\"]\n        chat_moderator = unpack_chain_flow(flow)\n\n        result = await chat_moderator.acall(\n            {\"user_input\": \"say hello to agent 1\", \"chat_id\": str(achat[\"chat\"].id)},\n            callbacks=[aix_handler],\n        )\n\n        assert result[\"text\"] == \"Delegating to @agent_2\"\n        assert \"chat_history\" in result\n"}
{"type": "source_file", "path": "bin/vault_unseal.py", "content": "import subprocess\nimport json\nimport sys\nimport os\nimport argparse\n\n\ndef unseal_vault(vault_address, unseal_file_path):\n    print(\"Unsealing Vault...\")\n\n    # Load unseal data to get the unseal key\n    with open(unseal_file_path, \"r\") as f:\n        unseal_data = json.load(f)\n\n    unseal_key = unseal_data[\"unseal_keys_b64\"][0]\n\n    # Set Vault address for the environment\n    env = {**os.environ, \"VAULT_ADDR\": vault_address}\n\n    try:\n        subprocess.run(\n            [\"vault\", \"operator\", \"unseal\", unseal_key],\n            capture_output=True,\n            check=True,\n            text=True,\n            env=env,\n        )\n\n        print(\"Vault unsealed successfully.\")\n\n    except subprocess.CalledProcessError as e:\n        print(f\"An error occurred while unsealing Vault: {e}\", file=sys.stderr)\n        sys.exit(1)\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Unseal HashiCorp Vault.\")\n    parser.add_argument(\n        \"-a\",\n        \"--address\",\n        type=str,\n        required=True,\n        help=\"Vault server address (e.g., 'https://127.0.0.1:8200').\",\n    )\n    parser.add_argument(\n        \"-f\",\n        \"--file\",\n        type=str,\n        required=True,\n        help=\"Path to the JSON file containing the unseal key.\",\n    )\n\n    args = parser.parse_args()\n\n    unseal_vault(args.address, args.file)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"type": "source_file", "path": "client_config/ix_env.py", "content": "IX_ENV = \"\"\"\n# ==================================================================\n# GLOBAL ENVIRONMENT DEFAULTS:\n#\n# These values are set in the environment of app and worker containers\n# They are used by defaults by the corresponding components.\n# ==================================================================\n\n# OpenAI is the default LLM used by predefined agents.\nOPENAI_API_KEY={OPENAI_API_KEY}\n\n# ==================================================================\n# OPTIONAL SETUP:\n#\n# These values are only required when using the corresponding\n# features.\n# ==================================================================\n\n# LangSmith logging (requires a LangSmith account)\n# LANGCHAIN_TRACING_V2=true\n# LANGCHAIN_ENDPOINT=https://api.smith.langchain.com\n# LANGCHAIN_API_KEY=\n# LANGCHAIN_PROJECT=default\n\n# llms\nGOOGLE_API_KEY=\nANTHROPIC_API_KEY=\n\n# Pinecone\nPINECONE_API_KEY=\nPINECONE_ENV=\n\n# search\nGOOGLE_API_KEY=\nGOOGLE_CX_ID=\nWOLFRAM_APP_ID=\n\n# METAPHOR\nMETAPHOR_API_KEY=\n\"\"\"\n"}
{"type": "source_file", "path": "ix/agents/migrations/0001_initial.py", "content": "# Generated by Django 4.2 on 2023-04-19 02:43\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport uuid\n\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name=\"Agent\",\n            fields=[\n                (\n                    \"id\",\n                    models.UUIDField(\n                        default=uuid.uuid4,\n                        editable=False,\n                        primary_key=True,\n                        serialize=False,\n                    ),\n                ),\n                (\"name\", models.CharField(max_length=255)),\n                (\"purpose\", models.TextField()),\n                (\"created_at\", models.DateTimeField(auto_now_add=True)),\n                (\"model\", models.CharField(max_length=255)),\n                (\"system_prompt\", models.TextField()),\n                (\"commands\", models.JSONField(blank=True, null=True)),\n                (\"config\", models.JSONField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name=\"Resource\",\n            fields=[\n                (\n                    \"id\",\n                    models.UUIDField(\n                        default=uuid.uuid4,\n                        editable=False,\n                        primary_key=True,\n                        serialize=False,\n                    ),\n                ),\n                (\n                    \"type\",\n                    models.CharField(\n                        choices=[\n                            (\"vector_memory\", \"Vector Memory\"),\n                            (\"database\", \"Database\"),\n                            (\"file_system\", \"File System\"),\n                            (\"cache\", \"Cache\"),\n                            (\"api\", \"API\"),\n                            (\"knowledge_base\", \"Knowledge Base\"),\n                            (\"image_database\", \"Image Database\"),\n                            (\"audio_database\", \"Audio Database\"),\n                            (\"video_database\", \"Video Database\"),\n                            (\"cloud_storage\", \"Cloud Storage\"),\n                            (\"content_delivery_network\", \"Content Delivery Network\"),\n                            (\"message_queue\", \"Message Queue\"),\n                            (\"stream_processing\", \"Stream Processing\"),\n                        ],\n                        max_length=32,\n                    ),\n                ),\n                (\"config\", models.JSONField()),\n                (\n                    \"agent\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        related_name=\"resources\",\n                        to=\"agents.agent\",\n                    ),\n                ),\n            ],\n        ),\n    ]\n"}
{"type": "source_file", "path": "ix/agents/migrations/0008_agent_group_agent_user.py", "content": "# Generated by Django 4.2.6 on 2023-10-06 21:56\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        (\"agents\", \"0007_agent_is_test\"),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name=\"agent\",\n            name=\"group\",\n            field=models.ForeignKey(\n                null=True, on_delete=django.db.models.deletion.CASCADE, to=\"auth.group\"\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"agent\",\n            name=\"user\",\n            field=models.ForeignKey(\n                null=True,\n                on_delete=django.db.models.deletion.CASCADE,\n                to=settings.AUTH_USER_MODEL,\n            ),\n        ),\n    ]\n"}
{"type": "source_file", "path": "bin/vault.py", "content": "import os\nimport sys\nimport time\nimport json\nimport requests\nimport argparse\nimport subprocess\n\n\ndef check_vault_status(vault_address):\n    try:\n        response = requests.get(f\"{vault_address}/v1/sys/health\", verify=False)\n        return response.status_code, response.json()\n    except requests.RequestException as e:\n        print(f\"Error checking Vault status ({vault_address}): {e}\", file=sys.stderr)\n        return None, None\n\n\ndef initialize_vault(vault_address, unseal_file_path, token_file_path):\n    print(\"Initializing Vault...\")\n    try:\n        result = subprocess.run(\n            [\n                \"vault\",\n                \"operator\",\n                \"init\",\n                f\"-address={vault_address}\",\n                \"-key-shares=1\",\n                \"-key-threshold=1\",\n                \"-format=json\",\n            ],\n            capture_output=True,\n            check=True,\n            text=True,\n        )\n\n        vault_output = json.loads(result.stdout)\n\n        with open(unseal_file_path, \"w\") as unseal_file:\n            json.dump(vault_output, unseal_file, indent=2)\n\n        root_token = vault_output[\"root_token\"]\n        with open(token_file_path, \"w\") as token_file:\n            token_file.write(f\"VAULT_DEV_ROOT_TOKEN_ID={root_token}\")\n\n        print(\"Vault initialized.\")\n        return vault_output[\"unseal_keys_b64\"]\n\n    except subprocess.CalledProcessError as e:\n        print(f\"An error occurred while initializing Vault: {e}\", file=sys.stderr)\n        sys.exit(1)\n\n\ndef unseal_vault(vault_address, unseal_keys):\n    print(\"Unsealing Vault...\")\n    headers = {\"Content-Type\": \"application/json\"}\n    for key in unseal_keys:\n        payload = {\"key\": key}\n        response = requests.put(\n            f\"{vault_address}/v1/sys/unseal\",\n            headers=headers,\n            data=json.dumps(payload),\n            verify=False,\n        )\n        if response.status_code != 200:\n            print(f\"Error unsealing Vault: {response.content}\", file=sys.stderr)\n            sys.exit(1)\n\n    print(\"Vault unsealed.\")\n\n\ndef print_docker_logs():\n    print(\"Vault container logs:\")\n    if os.environ.get(\"WAIT_FOR_VAULT_ECHO_LOGS\", 1) in {1, True, \"1\", \"true\", \"True\"}:\n        try:\n            output = subprocess.check_output([\"docker-compose\", \"logs\", \"vault\"])\n            print(output.decode())\n        except subprocess.CalledProcessError as e:\n            print(f\"Error: {e}\")\n    else:\n        pass\n\n\ndef manage_vault(vault_address, vault_dir, unseal_file, token_file):\n    unseal_file_path = os.path.join(vault_dir, unseal_file)\n    token_file_path = os.path.join(vault_dir, token_file)\n\n    # Check Vault status and wait if necessary\n    for _ in range(10):\n        status_code, vault_status = check_vault_status(vault_address)\n        if status_code is not None:\n            break\n        print(\"Vault is not responding. Waiting...\")\n        time.sleep(3)\n    else:\n        print(\"Vault did not respond after several attempts. Exiting.\")\n        print_docker_logs()\n        sys.exit(1)\n\n    if vault_status[\"initialized\"]:\n        print(\"Vault is already initialized.\")\n        if vault_status[\"sealed\"]:\n            with open(unseal_file_path, \"r\") as unseal_file:\n                vault_data = json.load(unseal_file)\n                unseal_keys = vault_data[\"unseal_keys_b64\"]\n            unseal_vault(vault_address, unseal_keys)\n    else:\n        unseal_keys = initialize_vault(vault_address, unseal_file_path, token_file_path)\n        unseal_vault(vault_address, unseal_keys)\n    enable_kv_secrets_engine(vault_address, unseal_file_path)\n\n\ndef enable_kv_secrets_engine(vault_address, unseal_file_path):\n    print(\"Checking if KV secrets engine is enabled...\")\n\n    # Load unseal data to get the root token\n    with open(unseal_file_path, \"r\") as f:\n        unseal_data = json.load(f)\n    root_token = unseal_data[\"root_token\"]\n\n    try:\n        # List enabled secrets engines\n        response = requests.get(\n            f\"{vault_address}/v1/sys/mounts\",\n            headers={\"X-Vault-Token\": root_token},\n            verify=False,\n        )\n        if response.status_code != 200:\n            print(f\"An error occurred: {response.content}\", file=sys.stderr)\n            sys.exit(1)\n\n        engines = response.json()\n        if engines.get(\"secret/\", {}).get(\"type\", None) == \"kv\":\n            print(\"KV secrets engine is already enabled.\")\n            return\n\n        print(\"Enabling KV secrets engine...\")\n\n        response = requests.post(\n            f\"{vault_address}/v1/sys/mounts/secret\",\n            headers={\"X-Vault-Token\": root_token},\n            json={\"type\": \"kv\", \"options\": {\"version\": \"2\"}},\n            verify=False,\n        )\n        if response.status_code != 204:\n            print(f\"An error occurred: {response.content}\", file=sys.stderr)\n            sys.exit(1)\n\n        print(\"KV secrets engine enabled.\")\n\n    except requests.exceptions.RequestException as e:\n        print(f\"An error occurred: {e}\", file=sys.stderr)\n        sys.exit(1)\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Manage Vault initialization and unsealing process\"\n    )\n    parser.add_argument(\"--vault-addr\", required=True, help=\"Vault server address\")\n    parser.add_argument(\n        \"--vault-dir\", default=\".vault/\", help=\"Directory to store Vault files\"\n    )\n    parser.add_argument(\n        \"--unseal-file\",\n        default=\"keys\",\n        help=\"File to store the unseal keys and other related data\",\n    )\n    parser.add_argument(\n        \"--token-file\", default=\".client.env\", help=\"File to store the root token\"\n    )\n    args = parser.parse_args()\n\n    if not os.path.exists(args.vault_dir):\n        os.makedirs(args.vault_dir)\n\n    manage_vault(args.vault_addr, args.vault_dir, args.unseal_file, args.token_file)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"type": "source_file", "path": "ix/agents/migrations/0005_alter_agent_config.py", "content": "# Generated by Django 4.2.2 on 2023-07-14 18:15\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"agents\", \"0004_agent_alias\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"agent\",\n            name=\"config\",\n            field=models.JSONField(default=dict),\n        ),\n    ]\n"}
{"type": "source_file", "path": "bin/get_uuid.py", "content": "from uuid import uuid4\n\n\ndef main():\n    print(f\"{uuid4()}\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"type": "source_file", "path": "ix/api/agents/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/api/agents/endpoints.py", "content": "from asgiref.sync import sync_to_async\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db.models import Q\nfrom fastapi import HTTPException, APIRouter, Depends\nfrom typing import Optional\nfrom pydantic import BaseModel\nfrom uuid import UUID\nfrom ix.agents.models import Agent\nfrom ix.api.auth import get_request_user\nfrom ix.api.chains.endpoints import DeletedItem\nfrom ix.api.agents.types import Agent as AgentPydantic, AgentPage\n\n__all__ = [\"router\", \"AgentCreateUpdate\"]\n\n\nrouter = APIRouter()\n\n\nclass AgentCreateUpdate(BaseModel):\n    name: str\n    alias: str\n    purpose: str\n    chain_id: UUID\n    model: str = \"gpt-4\"\n    config: dict = {}\n\n\n@router.post(\n    \"/agents/\",\n    operation_id=\"create_agent\",\n    response_model=AgentPydantic,\n    tags=[\"Agents\"],\n)\nasync def create_agent(\n    agent: AgentCreateUpdate, user: AbstractUser = Depends(get_request_user)\n):\n    agent_obj = Agent(user=user, **agent.model_dump())\n    await agent_obj.asave()\n    return AgentPydantic.model_validate(agent_obj)\n\n\n@router.get(\n    \"/agents/{agent_id}\",\n    operation_id=\"get_agent\",\n    response_model=AgentPydantic,\n    tags=[\"Agents\"],\n)\nasync def get_agent(agent_id: str, user: AbstractUser = Depends(get_request_user)):\n    try:\n        query = Agent.objects.filter(pk=agent_id)\n        agent = await Agent.filter_owners(user, query).aget()\n    except Agent.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Agent not found\")\n    return AgentPydantic.model_validate(agent)\n\n\n@router.get(\n    \"/agents/\", operation_id=\"get_agents\", response_model=AgentPage, tags=[\"Agents\"]\n)\nasync def get_agents(\n    search: Optional[str] = None,\n    chat_id: Optional[UUID] = None,\n    limit: int = 10,\n    offset: int = 0,\n    user: AbstractUser = Depends(get_request_user),\n):\n    query = Agent.objects.filter(is_test=False).order_by(\"alias\")\n    query = Agent.filter_owners(user, query)\n    if chat_id:\n        query = query.filter(chats__id=chat_id)\n    if search:\n        query = query.filter(Q(name__icontains=search) | Q(alias__icontains=search))\n\n    # punting on async implementation of pagination until later\n    return await sync_to_async(AgentPage.paginate)(\n        output_model=AgentPydantic, queryset=query, limit=limit, offset=offset\n    )\n\n\n@router.put(\n    \"/agents/{agent_id}\",\n    operation_id=\"update_agent\",\n    response_model=AgentPydantic,\n    tags=[\"Agents\"],\n)\nasync def update_agent(\n    agent_id: str,\n    agent: AgentCreateUpdate,\n    user: AbstractUser = Depends(get_request_user),\n):\n    try:\n        query = Agent.objects.filter(pk=agent_id)\n        agent_obj = await Agent.filter_owners(user, query).aget()\n    except Agent.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Agent not found\")\n    for attr, value in agent.model_dump().items():\n        setattr(agent_obj, attr, value)\n    await agent_obj.asave()\n    return agent_obj\n\n\n@router.delete(\n    \"/agents/{agent_id}\",\n    operation_id=\"delete_agent\",\n    response_model=DeletedItem,\n    tags=[\"Agents\"],\n)\nasync def delete_agent(agent_id: str, user: AbstractUser = Depends(get_request_user)):\n    try:\n        query = Agent.objects.filter(pk=agent_id)\n        agent = await Agent.filter_owners(user, query).aget()\n    except Agent.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Agent not found\")\n    await agent.adelete()\n    return DeletedItem(id=agent_id)\n"}
{"type": "source_file", "path": "ix/agents/migrations/0002_agent_agent_class_path.py", "content": "# Generated by Django 4.2 on 2023-04-23 21:15\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"agents\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name=\"agent\",\n            name=\"agent_class_path\",\n            field=models.CharField(\n                default=\"ix.agents.auto_agent.AutoAgent\", max_length=255\n            ),\n            preserve_default=False,\n        ),\n    ]\n"}
{"type": "source_file", "path": "ix/agents/prompt_builder.py", "content": "import logging\nfrom typing import List, Dict, Iterable\n\nfrom ix.utils.count_tokens import num_tokens_from_messages\n\nlogger = logging.getLogger(__name__)\n\n\nclass ExceedsMaxToken(Exception):\n    pass\n\n\nclass PromptBuilder:\n    \"\"\"\n    A class to build text prompts with token count restrictions.\n\n    This class allows you to create a prompt builder object with an optional tokenizer and\n    a maximum token limit. By default, it uses OpenAI's tiktoken tokenizer. You can add\n    clauses using the `add` method, which will raise an ExceedsMaxToken exception if the\n    new string causes the total tokens to exceed the limit. The `to_prompt` method returns\n    a string containing the joined clauses, separated by two newline characters.\n\n    Example usage:\n\n        prompt_builder = PromptBuilder(max_token_limit=20)\n\n        try:\n            prompt_builder.add(\"This is a sample clause.\")\n            prompt_builder.add(\"Here is another clause.\")\n            prompt = prompt_builder.to_prompt()\n            print(prompt)\n        except ExceedsMaxToken as e:\n            print(e)\n    \"\"\"\n\n    def __init__(\n        self,\n        max_token_limit: int,\n        model: str = \"gpt-3.5-turbo-0301\",\n    ):\n        \"\"\"\n        Initialize the PromptBuilder with an optional tokenizer and max_token_limit.\n\n        :param tokenizer: An instance of OpenAITokenizer or a custom tokenizer.\n        :param max_token_limit: The maximum number of tokens allowed in the prompt.\n        \"\"\"\n        self.model = model\n        self.max_token_limit = max_token_limit\n        self.messages: List[str] = []\n        self.total_tokens = 0\n\n    def count_tokens(self, messages: List[Dict[str, str]]) -> int:\n        \"\"\"\n        Count the tokens in the given text using the tokenizer.\n\n        :param messages: The text to count tokens for.\n        :return: The number of tokens in the text.\n        \"\"\"\n        try:\n            return num_tokens_from_messages(messages, self.model)\n        except Exception:\n            logger.error(f\"Error counting tokens for messages={messages}\")\n            raise\n\n    def add(self, message: Dict[str, str]) -> int:\n        \"\"\"\n        Add a string to the internal list of clauses.\n\n        :param message: The text to be added as a new clause.\n        :raises ExceedsMaxToken: If the new string causes the total tokens to exceed the max_token_limit.\n        :return: The number of tokens in the text.\n        \"\"\"\n        token_count = self.count_tokens([message])\n        self._add(message, token_count)\n        return token_count\n\n    def _add(self, message: Dict[str, str], token_count: int):\n        \"\"\"Internal method for adding tokens while respecting instance token limit\"\"\"\n        if (\n            self.max_token_limit is not None\n            and self.total_tokens + token_count > self.max_token_limit\n        ):\n            raise ExceedsMaxToken(\n                f\"Adding this string will exceed the max token limit of {self.max_token_limit}\"\n            )\n\n        self.messages.append(message)\n        self.total_tokens += token_count\n        logger.debug(f\"Added to prompt token_count={token_count} message={message}\")\n        return token_count\n\n    def add_max(\n        self, messages: Iterable[Dict[str, str]], max_tokens: int = None\n    ) -> int:\n        \"\"\"\n        Add messages up to the local max `max_tokens`. Will also raise ExceedsMaxToken\n        if instance token limit is exceeded. This method is useful for limiting categories\n        of messages within the prompt. (e.g. limit chat history to `n`)\n\n        :param messages: iterable of messages to add\n        :param max_tokens: will not add more than this limit\n        :return: The number of tokens added\n        \"\"\"\n        tokens = 0\n        for message in messages:\n            try:\n                token_count = self.count_tokens([message])\n                if max_tokens and tokens + token_count > max_tokens:\n                    # exceeded local max tokens\n                    return tokens\n\n                self._add(message, token_count)\n                tokens += token_count\n\n            except ExceedsMaxToken:\n                # exceeded prompt max tokens\n                break\n        return tokens\n"}
{"type": "source_file", "path": "ix/api/artifacts/types.py", "content": "from pydantic import BaseModel, UUID4\nfrom typing import Dict, Any, List\nfrom datetime import datetime\n\nfrom ix.utils.graphene.pagination import QueryPage\n\n\nclass ArtifactBase(BaseModel):\n    task_id: UUID4\n    key: str\n    artifact_type: str = \"file\"\n    name: str\n    description: str\n    storage: Dict[str, Any]\n\n\nclass ArtifactCreate(ArtifactBase):\n    pass\n\n\nclass ArtifactUpdate(ArtifactBase):\n    pass\n\n\nclass Artifact(ArtifactBase):\n    id: UUID4\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\n\nclass ArtifactContent(Artifact):\n    data: Any\n\n\nclass ArtifactPage(QueryPage[Artifact]):\n    # override objects, FastAPI isn't detecting QueryPage type\n    objects: List[Artifact]\n"}
{"type": "source_file", "path": "ix/api/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/agents/history.py", "content": "import logging\nfrom functools import cached_property\nfrom typing import Dict, Any, Optional, Union\nfrom uuid import UUID\n\nfrom ix.task_log.models import Task, TaskLogMessage\n\nlogger = logging.getLogger(__name__)\n\n\nclass TaskHistory:\n    \"\"\"\n    Placeholder for code that updates the task history. Originally part of AgentProcess, this\n    was moved here after AgentProcess was turned into a wrapper around Langchain. This code\n    will likely be integrated into langchain memory classes at a later date.\n    \"\"\"\n\n    # indicates if the agent should be allowed to run autonomously\n    ALLOWS_AUTONOMOUS = True\n\n    # Messages useful for humans and debugging, but aren't included in the prompt context\n    EXCLUDED_MSG_TYPES = {\n        \"AUTH_REQUEST\",\n        \"AUTHORIZE\",\n        \"AUTONOMOUS\",\n        \"FEEDBACK_REQUEST\",\n        \"THOUGHT\",\n        \"SYSTEM\",\n    }\n\n    def __init__(self, task_id: str) -> None:\n        self.task_id = task_id\n        self.history = []\n        self.last_message = None\n\n        self.autonomous = False\n\n        # task init\n        self.update_message_history()\n        logger.info(\"AgentProcess initialized\")\n\n    @cached_property\n    def task(self):\n        return Task.objects.get(pk=self.task_id)\n\n    def query_message_history(self, since=None):\n        \"\"\"Fetch message history from persistent store for context relevant messages\"\"\"\n\n        # base query, selects messages relevant for chat context\n        query = TaskLogMessage.objects.filter(task_id=self.task_id).order_by(\n            \"created_at\"\n        )\n\n        # filter to only new messages\n        if since:\n            query = query.filter(created_at__gt=since)\n\n        return query\n\n    def update_message_history(self):\n        \"\"\"\n        Update message history with the most recent messages since the last update.\n        Initial startup will load all history into memory. Subsequent updates will\n        only load new messages.\n        \"\"\"\n\n        last_message_at = self.last_message.created_at if self.last_message else None\n        logger.debug(\n            f\"AgentProcess updating message history, last_message_at={last_message_at}\"\n        )\n\n        # fetch unseen messages and save the last timestamp for the next iteration\n        messages = list(self.query_message_history(last_message_at))\n        if messages:\n            self.last_message = messages[-1]\n        logger.debug(\n            f\"AgentProcess fetched n={len(messages)} messages from persistence\"\n        )\n\n        # process AUTONOMOUS messages if supported by the agent\n        # toggle autonomous mode based on latest AUTONOMOUS message\n        if self.ALLOWS_AUTONOMOUS:\n            for message in reversed(messages):\n                if message.content[\"type\"] == \"AUTONOMOUS\":\n                    autonomous = message.content[\"enabled\"]\n                    if autonomous != self.autonomous:\n                        self.autonomous = autonomous\n                        logger.info(\n                            f\"AgentProcess toggled autonomous mode to {autonomous}\"\n                        )\n                    break\n\n        # format all message instance for use in the prompt\n        formatted_messages = [\n            message.as_message()\n            for message in messages\n            if message.content[\"type\"] not in self.EXCLUDED_MSG_TYPES\n        ]\n        self.add_history(*formatted_messages)\n\n        logger.info(\n            f\"AgentProcess loaded n={len(messages)} chat messages from persistence\"\n        )\n\n    def get_input(self, input_id: Optional[UUID] = None) -> Union[Dict[str, Any], bool]:\n        \"\"\"get input for chain\"\"\"\n\n        # 1. use input_id message if present\n        if input_id:\n            message = TaskLogMessage.objects.get(id=input_id)\n            return {\"user_input\": message.content[\"feedback\"]}\n\n        # 2. load the last message from the queue\n        try:\n            self.last_message = TaskLogMessage.objects.filter(\n                task_id=self.task_id\n            ).latest(\"created_at\")\n        except TaskLogMessage.DoesNotExist:\n            self.last_message = None\n\n        logger.debug(f\"task_id={self.task_id} last message={self.last_message}\")\n\n        if not self.last_message:\n            logger.info(f\"first tick for task_id={self.task_id}\")\n            return {\"user_input\": self.INITIAL_INPUT}\n            # TODO load initial auth from either message stream or task\n\n        elif self.last_message.content[\"type\"] == \"FEEDBACK\":\n            return {\"user_input\": self.last_message.content[\"feedback\"]}\n\n        elif self.last_message.content[\"type\"] == \"AUTHORIZE\":\n            logger.info(f\"resuming with user authorization for task_id={self.task_id}\")\n            # auth/feedback resume, run command that was authorized\n            # by default only a single command is authorized.\n            # authorized_for = self.last_message.content.get(\"n\", 1) - 1\n            authorized_msg = TaskLogMessage.objects.get(\n                pk=self.last_message.content[\"message_id\"]\n            )\n            [reference_field, reference_value] = list(\n                authorized_msg.content[\"storage\"].items()\n            )[0]\n            return dict(\n                user_input=f\"execute {reference_field}={reference_value}\",\n                **authorized_msg.content[\"storage\"],\n            )\n\n        elif self.last_message.content[\"type\"] in [\"AUTH_REQUEST\", \"FEEDBACK_REQUEST\"]:\n            # if last message is an unfulfilled feedback request then exit\n            logger.info(\n                f\"Exiting, missing response to type={self.last_message.content['type']}\"\n            )\n            return False\n\n    def add_history(self, *history_messages: Dict[str, Any]):\n        logger.debug(f\"adding history history_messages={history_messages}\")\n        self.history.extend(history_messages)\n"}
{"type": "source_file", "path": "ix/api/chats/types.py", "content": "from enum import Enum\n\nfrom pydantic import BaseModel\nfrom typing import Optional, List, Any, Dict\nfrom uuid import UUID\nfrom datetime import datetime\nfrom ix.api.agents.types import Agent\nfrom ix.api.artifacts.types import Artifact\nfrom ix.agents.models import Agent as AgentModel\nfrom ix.utils.graphene.pagination import QueryPage\n\n\nclass ChatNew(BaseModel):\n    name: Optional[str]\n    lead_id: Optional[UUID] = None\n    autonomous: bool = False\n\n\nclass Chat(BaseModel):\n    id: UUID\n    name: str\n    created_at: datetime\n    lead_id: UUID\n    autonomous: bool = False\n    task_id: UUID\n\n    class Config:\n        from_attributes = True\n\n    @classmethod\n    def model_validate(cls, instance: Any) -> \"Chat\":\n        return cls(\n            id=instance.id,\n            name=instance.name,\n            created_at=instance.created_at,\n            lead_id=instance.lead_id,\n            task_id=instance.task_id,\n        )\n\n\nclass ChatQueryPage(QueryPage[Chat]):\n    # override objects, FastAPI isn't detecting QueryPage type\n    objects: List[Chat]\n\n\nclass ChatInList(Chat):\n    agents: List[Agent]\n\n    @classmethod\n    def model_validate(cls, instance: Any) -> \"Chat\":\n        agent_query = AgentModel.objects.filter(chats__id=instance.id)\n        agents = [Agent.model_validate(agent) for agent in agent_query]\n        return cls(\n            id=instance.id,\n            name=instance.name,\n            created_at=instance.created_at,\n            lead_id=instance.lead_id,\n            task_id=instance.task_id,\n            agents=agents,\n        )\n\n\nclass ChatUpdate(BaseModel):\n    name: Optional[str]\n    lead_id: Optional[UUID]\n    autonomous: Optional[bool]\n\n\nclass ChatAgentAction(BaseModel):\n    chat_id: UUID\n    agent_id: Optional[UUID] = None\n\n\nclass Task(BaseModel):\n    id: UUID\n\n    class Config:\n        from_attributes = True\n\n\nclass Plan(BaseModel):\n    id: UUID\n\n    class Config:\n        from_attributes = True\n\n\nclass ChatGraph(BaseModel):\n    chat: Chat\n    lead: Agent\n    agents: List[Agent]\n    task: Task\n    plans: List[Plan]\n    artifacts: List[Artifact]\n\n\nclass RoleChoice(str, Enum):\n    SYSTEM = \"SYSTEM\"\n    ASSISTANT = \"ASSISTANT\"\n    USER = \"USER\"\n\n\nclass ChatInput(BaseModel):\n    \"\"\"An input to a chat.\"\"\"\n\n    text: str\n    artifact_ids: Optional[List[UUID]] = None\n\n\nclass ChatMessage(BaseModel):\n    \"\"\"A message in a chat.\"\"\"\n\n    id: UUID\n    agent_id: Optional[UUID]\n    created_at: datetime\n    parent_id: Optional[UUID]\n    role: RoleChoice\n    content: Dict[str, Any]\n\n    class Config:\n        from_attributes = True\n\n\nclass ChatMessageQueryPage(QueryPage[ChatMessage]):\n    # override objects, FastAPI isn't detecting QueryPage type\n    objects: List[ChatMessage]\n"}
{"type": "source_file", "path": "ix/api/agents/types.py", "content": "from datetime import datetime\nfrom typing import List\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, Field\n\nimport logging\n\nfrom ix.utils.graphene.pagination import QueryPage\n\nlogger = logging.getLogger(__name__)\n\n\nclass Agent(BaseModel):\n    id: UUID\n    name: str\n    alias: str\n    purpose: str\n    chain_id: UUID\n    model: str\n    created_at: datetime\n    config: dict = Field(default_factory=dict)\n\n    class Config:\n        from_attributes = True\n\n\nclass AgentPage(QueryPage[Agent]):\n    # override objects, FastAPI isn't detecting QueryPage type\n    objects: List[Agent]\n"}
{"type": "source_file", "path": "ix/agents/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/api/artifacts/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/agents/migrations/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/agents/migrations/0004_agent_alias.py", "content": "# Generated by Django 4.2 on 2023-05-08 00:56\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"agents\", \"0003_remove_agent_commands_remove_agent_system_prompt_and_more\"),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name=\"agent\",\n            name=\"alias\",\n            field=models.CharField(default=\"planner\", max_length=63),\n            preserve_default=False,\n        ),\n    ]\n"}
{"type": "source_file", "path": "ix/agents/migrations/0006_remove_agent_agent_class_path.py", "content": "# Generated by Django 4.2.2 on 2023-07-27 16:57\n\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"agents\", \"0005_alter_agent_config\"),\n    ]\n\n    operations = [\n        migrations.RemoveField(\n            model_name=\"agent\",\n            name=\"agent_class_path\",\n        ),\n    ]\n"}
{"type": "source_file", "path": "ix/agents/models.py", "content": "import uuid\nfrom django.db import models\n\nfrom ix.chains.models import Chain\nfrom ix.ix_users.models import OwnedModel\n\n\nclass Agent(OwnedModel):\n    MODEL_CHOICES = (\n        (\"gpt4\", \"GPT4\"),\n        (\"gpt-3.5-turbo\", \"GPT3.5\"),\n    )\n\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=255)\n    alias = models.CharField(max_length=63)\n    purpose = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    # default model config\n    model = models.CharField(max_length=255)\n    config = models.JSONField(default=dict)\n\n    # agent config\n    chain = models.ForeignKey(Chain, on_delete=models.CASCADE, null=True)\n    is_test = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.name\n\n\nclass Resource(models.Model):\n    RESOURCE_TYPE_CHOICES = (\n        (\"vector_memory\", \"Vector Memory\"),\n        (\"database\", \"Database\"),\n        (\"file_system\", \"File System\"),\n        (\"cache\", \"Cache\"),\n        (\"api\", \"API\"),\n        (\"knowledge_base\", \"Knowledge Base\"),\n        (\"image_database\", \"Image Database\"),\n        (\"audio_database\", \"Audio Database\"),\n        (\"video_database\", \"Video Database\"),\n        (\"cloud_storage\", \"Cloud Storage\"),\n        (\"content_delivery_network\", \"Content Delivery Network\"),\n        (\"message_queue\", \"Message Queue\"),\n        (\"stream_processing\", \"Stream Processing\"),\n    )\n\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    type = models.CharField(max_length=32, choices=RESOURCE_TYPE_CHOICES)\n    config = models.JSONField()\n\n    agent = models.ForeignKey(Agent, on_delete=models.CASCADE, related_name=\"resources\")\n\n    def __str__(self):\n        return f\"{self.type} for {self.agent.name}\"\n"}
{"type": "source_file", "path": "ix/api/components/endpoints.py", "content": "import logging\nfrom typing import Optional, List\nfrom uuid import UUID\n\nfrom asgiref.sync import sync_to_async\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db.models import Q\nfrom fastapi import APIRouter, HTTPException, Query, Depends\n\nfrom ix.api.auth import get_request_user\nfrom ix.api.chains.endpoints import DeletedItem\nfrom ix.chains.models import NodeType\nfrom ix.api.components.types import NodeType as NodeTypePydantic, NodeTypePage\n\nlogger = logging.getLogger(__name__)\nrouter = APIRouter()\n\n\n@router.get(\n    \"/node_types/\",\n    operation_id=\"get_node_types\",\n    response_model=NodeTypePage,\n    tags=[\"Components\"],\n)\nasync def get_node_types(\n    search: Optional[str] = None,\n    class_path: Optional[str] = None,\n    types: Optional[List[str]] = Query(None, alias=\"types\"),\n    limit: int = 50,\n    offset: int = 0,\n    user: AbstractUser = Depends(get_request_user),\n):\n    query = NodeType.filtered_owners(user).order_by(\"name\")\n\n    if search:\n        query = query.filter(\n            Q(name__icontains=search)\n            | Q(description__icontains=search)\n            | Q(type__icontains=search)\n            | Q(class_path__icontains=search)\n        )\n    if class_path:\n        query = query.filter(class_path=class_path)\n\n    if types:\n        query = query.filter(type__in=types)\n\n    # punting on async implementation of pagination until later\n    return await sync_to_async(NodeTypePage.paginate)(\n        output_model=NodeTypePydantic, queryset=query, limit=limit, offset=offset\n    )\n\n\nclass NodeTypeDetail(NodeTypePydantic):\n    config_schema: Optional[dict] = None\n\n\n@router.get(\n    \"/node_types/{node_type_id}\",\n    operation_id=\"get_node_type\",\n    response_model=NodeTypeDetail,\n    tags=[\"Components\"],\n)\nasync def get_node_type_detail(\n    node_type_id: UUID, user: AbstractUser = Depends(get_request_user)\n):\n    query = NodeType.filtered_owners(user)\n\n    try:\n        node_type = await query.aget(id=node_type_id)\n    except NodeType.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Node type not found\")\n    return NodeTypeDetail.from_orm(node_type)\n\n\n@router.post(\n    \"/node_types/\",\n    operation_id=\"create_node_type\",\n    response_model=NodeTypePydantic,\n    tags=[\"Components\"],\n)\nasync def create_node_type(\n    node_type: NodeTypePydantic, user: AbstractUser = Depends(get_request_user)\n):\n    node_type_obj = NodeType(\n        **node_type.model_dump(exclude=\"display_groups\"), user=user\n    )\n    await node_type_obj.asave()\n    return NodeTypePydantic.from_orm(node_type_obj)\n\n\n@router.put(\n    \"/node_types/{node_type_id}\",\n    operation_id=\"update_node_type\",\n    response_model=NodeTypePydantic,\n    tags=[\"Components\"],\n)\nasync def update_node_type(\n    node_type_id: UUID,\n    node_type: NodeTypePydantic,\n    user: AbstractUser = Depends(get_request_user),\n):\n    query = NodeType.filtered_owners(user)\n    try:\n        existing_node_type = await query.aget(id=node_type_id)\n    except NodeType.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Node type not found\")\n\n    for field, value in node_type.dict(exclude_unset=True).items():\n        setattr(existing_node_type, field, value)\n\n    await existing_node_type.asave()\n    return NodeTypePydantic.from_orm(existing_node_type)\n\n\n@router.delete(\n    \"/node_types/{node_type_id}\",\n    operation_id=\"delete_node_type\",\n    response_model=DeletedItem,\n    tags=[\"Components\"],\n)\nasync def delete_node_type(\n    node_type_id: UUID, user: AbstractUser = Depends(get_request_user)\n):\n    query = NodeType.filtered_owners(user)\n    try:\n        instance = await query.aget(id=node_type_id)\n    except NodeType.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Node type not found\")\n\n    await instance.adelete()\n    return DeletedItem(id=node_type_id)\n"}
{"type": "source_file", "path": "ix/api/chains/types.py", "content": "from dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import (\n    List,\n    Optional,\n    Literal,\n)\nfrom uuid import UUID, uuid4\nfrom pydantic import BaseModel, Field, model_validator\n\nfrom ix.api.components.types import NodeType\nfrom ix.utils.graphene.pagination import QueryPage\n\n\nclass Chain(BaseModel):\n    id: Optional[UUID]\n    name: str\n    description: str\n    created_at: Optional[datetime]\n    is_agent: bool = True\n\n    # agent pass through properties\n    alias: Optional[str] = None\n\n    class Config:\n        from_attributes = True\n\n\nclass CreateChain(BaseModel):\n    name: str\n    description: Optional[str]\n    is_agent: bool = False\n\n    # agent pass through properties\n    alias: Optional[str] = None\n\n    @model_validator(mode=\"before\")\n    def validate_chain(cls, values):\n        if values.get(\"is_agent\") and not values.get(\"alias\"):\n            values[\"alias\"] = \"unnamed\"\n        return values\n\n\nclass UpdateChain(CreateChain):\n    pass\n\n\nclass ChainQueryPage(QueryPage[Chain]):\n    # override objects, FastAPI isn't detecting QueryPage type\n    objects: List[Chain]\n\n\nclass Position(BaseModel):\n    x: float\n    y: float\n\n\n@dataclass\nclass InputConfig:\n    to_input: List[str]\n    to_config: List[str]\n    to_bind: List[str]\n\n\nclass Node(BaseModel):\n    id: UUID = Field(default_factory=uuid4)\n    chain_id: UUID\n    class_path: str = Field(..., title=\"The path to the class\")\n    node_type_id: Optional[UUID]\n    root: bool = False\n\n    config: dict = Field(default_factory=dict)\n    name: Optional[str]\n    description: Optional[str]\n    position: Position = {\"x\": 0, \"y\": 0}\n\n    class Config:\n        from_attributes = True\n\n    def get_input_keys(self, node_type: NodeType) -> List[str]:\n        \"\"\"Input keys for this node. Includes both the static \"in\" and subfields.\"\"\"\n        keys = [\"in\"]\n        if in_connector := node_type.connector_map.get(\"in\"):\n            if in_connector.from_field:\n                field_value = self.config.get(in_connector.from_field)\n                if field_value:\n                    keys.extend(field_value)\n            elif in_connector.fields:\n                keys.extend(in_connector.fields)\n        return keys\n\n    def get_output_keys(self, node_type: NodeType) -> List[str]:\n        \"\"\"Output keys for this node. Includes both the static \"out\" and subfields.\"\"\"\n        keys = [\"out\"]\n        if out_connector := node_type.connector_map.get(\"out\"):\n            if out_connector.from_field:\n                field_value = self.config.get(out_connector.from_field)\n                keys.extend(field_value)\n            elif out_connector.fields:\n                keys.extend(out_connector.fields)\n        return keys\n\n    def get_config_keys(self, node_type: NodeType) -> List[str]:\n        keys = []\n        for key, connector in node_type.connector_map.items():\n            if connector.init_type == \"config\":\n                keys.append(key)\n        return keys\n\n    def get_bind_keys(self, node_type: NodeType) -> List[str]:\n        keys = []\n        for key, connector in node_type.connector_map.items():\n            if connector.init_type == \"bind\":\n                keys.append(key)\n        return keys\n\n\nclass Edge(BaseModel):\n    id: UUID = Field(default_factory=uuid4)\n    source_id: UUID\n    target_id: UUID\n    source_key: Optional[str] = None\n    target_key: Optional[str] = None\n    chain_id: UUID\n    relation: Literal[\"LINK\", \"PROP\", \"GRAPH\"]\n    input_map: Optional[dict] = None\n\n    class Config:\n        from_attributes = True\n\n    @model_validator(mode=\"after\")\n    def validate_edge(cls, instance: \"Edge\") -> \"Edge\":\n        if instance.relation == \"PROP\" and not instance.target_key:\n            raise ValueError(\"'target_key' is required for 'PROP' relation type.\")\n\n        return instance\n"}
{"type": "source_file", "path": "ix/agents/migrations/0003_remove_agent_commands_remove_agent_system_prompt_and_more.py", "content": "# Generated by Django 4.2 on 2023-05-04 01:53\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"chains\", \"0001_initial\"),\n        (\"agents\", \"0002_agent_agent_class_path\"),\n    ]\n\n    operations = [\n        migrations.RemoveField(\n            model_name=\"agent\",\n            name=\"commands\",\n        ),\n        migrations.RemoveField(\n            model_name=\"agent\",\n            name=\"system_prompt\",\n        ),\n        migrations.AddField(\n            model_name=\"agent\",\n            name=\"chain\",\n            field=models.ForeignKey(\n                null=True,\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"chains.chain\",\n            ),\n        ),\n    ]\n"}
{"type": "source_file", "path": "ix/api/chats/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/api/chains/endpoints.py", "content": "import logging\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom asgiref.sync import sync_to_async\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db.models import Q\nfrom fastapi import APIRouter, HTTPException, Depends\nfrom pydantic import BaseModel\n\n\nfrom ix.agents.models import Agent\nfrom ix.chains.models import Chain\nfrom ix.api.auth import get_request_user\nfrom ix.api.chains.types import (\n    Chain as ChainPydantic,\n    ChainQueryPage,\n    CreateChain,\n    UpdateChain,\n)\nfrom ix.chat.models import Chat\nfrom ix.task_log.models import Task\n\nlogger = logging.getLogger(__name__)\nrouter = APIRouter()\n\n\nclass DeletedItem(BaseModel):\n    id: UUID\n\n\n@router.get(\n    \"/chains/\",\n    operation_id=\"get_chains\",\n    response_model=ChainQueryPage,\n    tags=[\"Chains\"],\n)\nasync def get_chains(\n    search: Optional[str] = None,\n    limit: int = 10,\n    offset: int = 0,\n    is_agent: Optional[bool] = None,\n    user: AbstractUser = Depends(get_request_user),\n):\n    query = Chain.filtered_owners(user)\n\n    if search:\n        query = query.filter(Q(name__icontains=search))\n\n    if is_agent is not None:\n        query = query.filter(is_agent=is_agent)\n\n    query = query.order_by(\"-created_at\")\n\n    # punting on async implementation of pagination until later\n    return await sync_to_async(ChainQueryPage.paginate)(\n        output_model=ChainPydantic, queryset=query, limit=limit, offset=offset\n    )\n\n\nasync def create_chain_agent(chain: Chain, alias: str) -> Agent:\n    \"\"\"Create a non-test agent for a chain.\"\"\"\n    return await Agent.objects.acreate(\n        name=chain.name,\n        alias=alias,\n        purpose=chain.description,\n        chain=chain,\n        is_test=False,\n    )\n\n\nasync def create_chain_chat(chain: Chain) -> Chat:\n    \"\"\"Create a test chat for a chain.\"\"\"\n\n    # HAX: a shared fake user is used for all chains\n    user_model = get_user_model()\n    user = await user_model.objects.alatest(\"id\")\n\n    # Create objects for test chat. It's likely that most chains\n    # will be tested in the chat. Better to create test chat\n    # by default on chain creation where it's easy and optimize later.\n    agent = await Agent.objects.acreate(\n        name=chain.name,\n        alias=\"test\",\n        purpose=chain.description,\n        chain=chain,\n        is_test=True,\n    )\n    task = await Task.objects.acreate(\n        agent=agent,\n        chain=chain,\n        user=user,\n    )\n    return await Chat.objects.acreate(\n        name=f\"Test Chat: {chain.name}\",\n        lead=agent,\n        task=task,\n        is_test=True,\n    )\n\n\nasync def create_chain_instance(**kwargs) -> Chain:\n    \"\"\"Create a chain. Includes creating a test agent, task, and chat.\"\"\"\n\n    alias = kwargs.pop(\"alias\", \"\")\n    chain = Chain(**kwargs)\n    await chain.asave()\n\n    # create test chat\n    await create_chain_chat(chain)\n\n    # create agent if chain is an agent.\n    if chain.is_agent:\n        await create_chain_agent(chain, alias)\n\n    return chain\n\n\n@router.post(\n    \"/chains/\",\n    operation_id=\"create_chain\",\n    response_model=ChainPydantic,\n    tags=[\"Chains\"],\n)\nasync def create_chain(\n    chain: CreateChain, user: AbstractUser = Depends(get_request_user)\n):\n    new_chain = await create_chain_instance(**chain.model_dump(), user=user)\n    return ChainPydantic.model_validate(new_chain)\n\n\n@router.get(\n    \"/chains/{chain_id}\",\n    operation_id=\"get_chain\",\n    response_model=ChainPydantic,\n    tags=[\"Chains\"],\n)\nasync def get_chain_detail(\n    chain_id: UUID, user: AbstractUser = Depends(get_request_user)\n):\n    query = Chain.filtered_owners(user)\n    try:\n        chain = await query.aget(id=chain_id)\n    except Chain.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chain not found\")\n    response = ChainPydantic.model_validate(chain)\n\n    # fetch pass through properties so a second query isn't needed\n    if chain.is_agent:\n        agent = await Agent.objects.aget(chain=chain, is_test=False)\n        response.alias = agent.alias\n\n    return response\n\n\nasync def sync_chain_agent(chain: Chain, alias: str) -> None:\n    \"\"\"Sync the state of Chain and Agent objects.\n\n    If chain.is_agent is True, then an agent should exist.\n    Adjust the state of the agent to match the chain.\n    \"\"\"\n    if chain.is_agent:\n        if not await Agent.objects.filter(chain=chain).aexists():\n            await create_chain_agent(chain, alias=alias)\n        else:\n            # sync properties to existing agent\n            await Agent.objects.filter(chain=chain, is_test=False).aupdate(\n                name=chain.name,\n                alias=alias,\n                purpose=chain.description,\n            )\n    else:\n        # destroy agent if it exists\n        if await Agent.objects.filter(chain=chain, is_test=False).aexists():\n            await Agent.objects.filter(chain=chain, is_test=False).adelete()\n\n\n@router.put(\n    \"/chains/{chain_id}\",\n    operation_id=\"update_chain\",\n    response_model=ChainPydantic,\n    tags=[\"Chains\"],\n)\nasync def update_chain(\n    chain_id: UUID, chain: UpdateChain, user: AbstractUser = Depends(get_request_user)\n):\n    query = Chain.filtered_owners(user)\n    try:\n        existing_chain = await query.aget(id=chain_id)\n    except Chain.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chain not found\")\n    as_dict = chain.model_dump(exclude={\"alias\"})\n    for field, value in as_dict.items():\n        setattr(existing_chain, field, value)\n    await existing_chain.asave(update_fields=as_dict.keys())\n\n    # create / destroy agent if needed.\n    await sync_chain_agent(existing_chain, alias=chain.alias)\n\n    # sync properties to test agent\n    await Agent.objects.filter(chain=existing_chain, is_test=True).aupdate(\n        name=chain.name,\n        purpose=chain.description,\n    )\n\n    response = ChainPydantic.model_validate(existing_chain)\n    response.alias = chain.alias\n    return response\n\n\n@router.delete(\n    \"/chains/{chain_id}\",\n    operation_id=\"delete_chain\",\n    response_model=DeletedItem,\n    tags=[\"Chains\"],\n)\nasync def delete_chain(chain_id: UUID, user: AbstractUser = Depends(get_request_user)):\n    query = Chain.filtered_owners(user)\n    try:\n        existing_chain = await query.aget(id=chain_id)\n    except Chain.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chain not found\")\n    await existing_chain.adelete()\n    return DeletedItem(id=chain_id)\n"}
{"type": "source_file", "path": "ix/agents/prompts.py", "content": "CONSTRAINTS_CLAUSE = \"\"\"\nCONSTRAINTS:\n\n1. ~4000 word limit for short term memory. Your short term memory is short, so immediately save important information to files.\n2. If you are unsure how you previously did something or want to recall past events, thinking about similar events will help you remember.\n3. No user assistance\n4. Exclusively use the given commands to complete the task.\n\"\"\"\n\nRESOURCES_CLAUSE = \"\"\"\nRESOURCES:\n\n1. Internet access for searches and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\"\"\"\n\nSELF_EVALUATION_CLAUSE = \"\"\"\nPERFORMANCE EVALUATION:\n\n1. Continuously review and analyze your actions to ensure you are performing to the best of your abilities.\n2. Constructively self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions and strategies to refine your approach.\n4. Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.\n\"\"\"\n\nCOMMAND_FORMAT = \"\"\"\n###START###\n{\n    \"thoughts\":\n    {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\": [\"short list of steps\",\"that conveys\",\"long-term plan\"],\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":{\n            \"arg name\": \"value\"\n        }\n    }\n}\n###END###\n\"\"\"\n\nFORMAT_CLAUSE = \"\"\"\nCOMMAND FORMAT:\n###START###\n{\n    \"thoughts\":\n    {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\": [\"short list of steps\",\"that conveys\",\"long-term plan\"],\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":{\n            \"arg name\": \"value\"\n        }\n    }\n}\n###END###\n\nINPUT_REQUEST FORMAT:\n###START###\n{\n    \"question\": \"request for user input\"\n}\n###END###\n\nIF YOU REQUIRE INPUT TO PROCEED FORMAT OUTPUT AS INPUT_REQUEST, OTHERWISE AS COMMAND FORMAT\n\"\"\"\n\n\nPROMPT_TEMPLATE = f\"\"\"\n    You are {{name}}, {{role}}\n\n    {CONSTRAINTS_CLAUSE}\n\n    {{commands_clause}}\n\n    {RESOURCES_CLAUSE}\n\n    {SELF_EVALUATION_CLAUSE}\n\n    {FORMAT_CLAUSE}\n    \"\"\"\n"}
{"type": "source_file", "path": "ix/__init__.py", "content": "# This will make sure the app is always imported when\r\n# Django starts so that shared_task will use this app.\r\nfrom ix.server.celery import app as celery_app\r\n\r\n__all__ = (\"celery_app\",)\r\n"}
{"type": "source_file", "path": "ix/api/auth.py", "content": "from django.contrib.auth import get_user_model\n\n\ndef _get_request_user():\n    \"\"\"\n    Get the current user from the request\n    \"\"\"\n    # HAX: for now return the fake user\n    user_model = get_user_model()\n    return user_model.objects.earliest(\"id\")\n\n\ndef get_request_user():\n    return _get_request_user()\n"}
{"type": "source_file", "path": "ix/api/components/types.py", "content": "import inspect\nimport re\nfrom abc import ABC\nfrom dataclasses import dataclass\nfrom enum import Enum\nfrom functools import cached_property\nfrom typing import (\n    Dict,\n    List,\n    Any,\n    Optional,\n    Type,\n    Literal,\n    get_args,\n    get_origin,\n    Callable,\n    Union,\n    Set,\n)\nfrom uuid import UUID, uuid4\nfrom pydantic import BaseModel, Field, model_validator, SecretStr\nfrom pydantic.v1 import SecretStr as SecretStrV1\nfrom pydantic_core import PydanticUndefined\n\nfrom ix.utils.pydantic import get_model_fields, create_args_model\nfrom ix.utils.graphene.pagination import QueryPage\n\n\nclass InputType(str, Enum):\n    INPUT = \"input\"\n    SLIDER = \"slider\"\n    SECRET = \"secret\"\n    TEXTAREA = \"textarea\"\n    SELECT = \"select\"\n\n\nclass Choice(BaseModel):\n    label: str\n    value: Any\n\n\n@dataclass\nclass ParsedField:\n    \"\"\"Field parsed from a pydantic model or a method signature.\"\"\"\n\n    name: str\n    type_: Any\n    default: Any = None\n    required: bool = False\n    choices: List[Dict[str, str]] = None\n\n\ndef cap_first(s: str) -> str:\n    \"\"\"Capitalizes the first character of the input string.\"\"\"\n    return s[0].upper() + s[1:] if s else \"\"\n\n\ndef is_optional(type_hint) -> bool:\n    \"\"\"detect if type_hint is Optional[T]\"\"\"\n    return get_origin(type_hint) is Union and type(None) in get_args(type_hint)\n\n\ndef parse_enum_choices(enum_cls: Enum) -> List[Dict[str, str]]:\n    return [\n        {\"label\": name, \"value\": value.value}\n        for name, value in enum_cls.__members__.items()\n    ]\n\n\ndef parse_type(type_string: str) -> str:\n    # Pattern to match Optional or Optional[List]\n    pattern = re.compile(r\"(typing\\.)?Optional\\[(List\\[\\w+\\]|\\w+)\\]\")\n\n    match = pattern.match(type_string)\n    if match:\n        # If it's Optional[List[T]], return 'list'\n        if match.group(2).startswith(\"List\"):\n            return \"list\"\n        # If it's Optional[T], return T\n        else:\n            return match.group(2)\n    # If no match, return the original string\n    else:\n        return type_string\n\n\nclass NodeTypeField(BaseModel):\n    \"\"\"\n    Represents a field in a component that can be configured. This includes both\n    typing information and UX information.\n\n    This class includes `get_fields` helpers for auto-importing fields from Pydantic\n    model and python methods.\n\n    Set `parent` to indicate a field is a member of a nested object at property\n    with the name `parent`. Use `parent` to convert flat configs back into nested\n    objects.\n\n    Args:\n        name (str): The name of the field. Used to set and retrieve the value on the object.\n        parent (str): This field is a member of the property with this name.\n        label (str): The label for the field. Displayed in the user interface (UX).\n        type (str): The type of the field. Used for validation and formatting.\n        default (Any): The default value for the field when creating a new object.\n        required (bool, optional): Indicates if the field is required. Defaults to True.\n        input_type (InputType, optional): Selects the UX component for the field. Defaults to InputType.TEXT.\n        min (float, optional): The minimum value for the field (required for InputType.SLIDER). Defaults to None.\n        max (float, optional): The maximum value for the field (required for InputType.SLIDER). Defaults to None.\n        choices (List[Choice], optional): The choices for the field (required for InputType.SELECT). Defaults to None.\n        step (float, optional): The step value for the field (required for InputType.SLIDER). Defaults to None.\n        style (Dict[str, Any], optional): The Chakra UI style properties applied to the UX component. Defaults to None.\n    \"\"\"\n\n    name: str\n    description: Optional[str] = None\n    parent: Optional[str] = None\n    label: Optional[str] = \"\"\n    type: str\n    default: Optional[Any] = None\n    required: bool = False\n    choices: Optional[List[Choice]] = None\n\n    init_type: Literal[\"init\", \"bind\"] = \"init\"\n    \"\"\"Method te value received by this connector is initialized on the component instance.\n      - init: kwarg passed to initializer callable, e.g. __init__\n      - bind: bound with Runnable.bind()\"\"\"\n\n    # form & display properties\n    input_type: Optional[str] = None\n    min: Optional[float] = None\n    max: Optional[float] = None\n    step: Optional[float] = None\n    style: Optional[Dict[str, Any]] = None\n\n    secret_key: Optional[str] = None\n    \"\"\"Key for SecretType this field is part of. Fields with the same type are\n    grouped and stored together in secure storage. If not set then the\n    secret will be stored at `name`\"\"\"\n\n    @model_validator(mode=\"before\")\n    def validate_min_max(cls, values):\n        input_type = values.get(\"input_type\")\n        min_value = values.get(\"min\")\n        max_value = values.get(\"max\")\n        choices = values.get(\"choices\")\n        step = values.get(\"step\")\n\n        if input_type == InputType.SLIDER and (min_value is None or max_value is None):\n            raise ValueError(\"'min' and 'max' are required for 'SLIDER' input type.\")\n\n        if input_type == InputType.SELECT and choices is None:\n            raise ValueError(\"'choices' are required for 'SELECT' input type.\")\n\n        if input_type == InputType.SLIDER and step is None:\n            raise ValueError(\"'step' is required for 'SLIDER' input type.\")\n\n        return values\n\n    @classmethod\n    def get_fields_from_model(\n        cls,\n        model: Type[BaseModel] | Type[ABC],\n        include: Optional[List[str]] = None,\n        exclude: Optional[List[str]] = None,\n        field_options: Optional[Dict[str, Dict[str, Any]]] = None,\n        parent: Optional[str] = None,\n    ) -> List[\"NodeTypeField\"]:\n        field_objs = []\n\n        annotations = {}\n        if hasattr(model, \"__annotations__\"):\n            annotations.update(model.__annotations__)\n        if issubclass(model, ABC):\n            for base in model.__bases__:\n                if hasattr(base, \"__annotations__\"):\n                    annotations.update(base.__annotations__)\n\n        for field_name, field_type in annotations.items():\n            if include and field_name not in include:\n                continue\n            if exclude and field_name in exclude:\n                continue\n\n            # skip fields that aren't primitive types. objects are handled separately\n            # as connectors.\n            if isinstance(field_type, type) and issubclass(\n                field_type, (BaseModel, ABC)\n            ):\n                continue\n\n            default = None\n\n            if issubclass(model, BaseModel):\n                # Pydantic v2 compat: __fields__ renamed to model_fields\n                model_fields = get_model_fields(model)\n                model_field = model_fields.get(field_name)\n                if model_field:\n                    default = model_field.default\n                    if default is PydanticUndefined:\n                        default = None\n            elif hasattr(model, \"__fields__\"):\n                # Pydantic v1 compat\n                model_field = model.__fields__.get(field_name)\n                if model_field:\n                    default = model_field.default\n                    if default is PydanticUndefined:\n                        default = None\n\n            elif issubclass(model, ABC):\n                default = model.__dict__.get(field_name, None)\n            required = default is None and not is_optional(field_type)\n\n            field_objs.append(\n                ParsedField(\n                    name=field_name,\n                    type_=field_type,\n                    default=default,\n                    required=required,\n                )\n            )\n\n        return cls._get_fields(\n            field_objs,\n            field_options,\n            parent=parent,\n        )\n\n    @classmethod\n    def get_fields_from_method(\n        cls,\n        method: Callable,\n        include: Optional[List[str]] = None,\n        exclude: Optional[List[str]] = None,\n        field_options: Optional[Dict[str, Dict[str, Any]]] = None,\n        parent: Optional[str] = None,\n    ) -> List[\"NodeTypeField\"]:\n        fields = []\n        signature = inspect.signature(method)\n\n        # TODO: does not support @staticmethod, which drops first argument\n        #       when using inspect.signature.\n\n        for param_name, param in signature.parameters.items():\n            if include and param_name not in include:\n                continue\n            if exclude and param_name in exclude:\n                continue\n\n            if param.default is inspect._empty:\n                is_required = True\n                default = None\n            else:\n                is_required = False\n                default = param.default\n            fields.append(\n                ParsedField(\n                    name=param_name,\n                    type_=param.annotation,\n                    default=default,\n                    required=is_required,\n                )\n            )\n\n        return cls._get_fields(\n            fields,\n            field_options,\n            parent=parent,\n        )\n\n    @staticmethod\n    def _get_fields(\n        fields: List[ParsedField],\n        field_options: Optional[Dict[str, Dict[str, Any]]] = None,\n        parent: Optional[str] = None,\n    ) -> List[\"NodeTypeField\"]:\n        results: List[NodeTypeField] = []\n\n        for field in fields:\n            origin = get_origin(field.type_)\n            is_literal = origin is Literal\n            _is_optional = is_optional(field.type_)\n\n            root_field = field.type_\n            if is_literal:\n                root_field = str\n            elif _is_optional:\n                root_field = get_args(field.type_)[0]\n            elif isinstance(root_field, type) and issubclass(\n                root_field, (str, int, float, bool, list, Enum)\n            ):\n                pass\n            elif root_field in {\"str\", \"int\", \"float\", \"bool\", \"list\"}:\n                pass\n            elif isinstance(root_field, str):\n                root_field = parse_type(root_field)\n\n            if root_field is bool:\n                # Backwards compatibility for \"boolean\" type\n                # TODO: cleanup poor naming choice\n                field_type_name = \"boolean\"\n            else:\n                field_type_name = getattr(root_field, \"__name__\", str(root_field))\n\n            field_info = {\n                \"name\": field.name,\n                \"parent\": parent,\n                \"label\": cap_first(field.name),\n                \"type\": field_type_name,\n                \"default\": field.default,\n                \"required\": field.required,\n            }\n\n            if is_literal:\n                field_info[\"choices\"] = [\n                    {\"label\": cap_first(arg), \"value\": arg}\n                    for arg in get_args(field.type_)\n                ]\n            elif isinstance(root_field, type) and issubclass(root_field, Enum):\n                field_info[\"type\"] = \"str\"\n                field_info[\"choices\"] = parse_enum_choices(root_field)\n\n            if root_field in {SecretStr, SecretStrV1, \"SecretStr\"}:\n                field_info[\"type\"] = \"str\"\n                field_info[\"input_type\"] = \"secret\"\n\n            if field_info.get(\"choices\", None):\n                field_info[\"input_type\"] = \"select\"\n\n            if field_options and field.name in field_options:\n                field_info.update(field_options[field.name])\n\n            field = NodeTypeField(**field_info)\n            results.append(field)\n\n        return results\n\n    @classmethod\n    def get_fields(\n        cls,\n        obj: Callable | Type[BaseModel] | Type[ABC],\n        include: Optional[List[str]] = None,\n        exclude: Optional[List[str]] = None,\n        field_options: Optional[Dict[str, Dict[str, Any]]] = None,\n        parent: Optional[str] = None,\n        **kwargs,\n    ) -> List[Dict[str, Any]]:\n        # Setup field kwargs from legacy field_options and kwargs\n        field_kwargs = field_options or {}\n        field_kwargs.update(kwargs)\n\n        if field_kwargs:\n            include = set(include or []) | set(field_kwargs.keys())\n\n        if isinstance(obj, type) and issubclass(obj, BaseModel | ABC):\n            fields = cls.get_fields_from_model(\n                obj,\n                include=include,\n                exclude=exclude,\n                field_options=field_kwargs,\n                parent=parent,\n            )\n        elif isinstance(obj, Callable):\n            fields = cls.get_fields_from_method(\n                obj,\n                include=include,\n                exclude=exclude,\n                field_options=field_kwargs,\n                parent=parent,\n            )\n        else:\n            raise ValueError(f\"Invalid object type: {type(obj)}\")\n\n        return [field.model_dump() for field in fields]\n\n\nNodeTypes = Literal[\n    \"agent\",\n    \"branch\",\n    \"chain\",\n    \"chain_list\",\n    \"data\",\n    \"document_loader\",\n    \"embeddings\",\n    \"flow\",\n    \"index\",\n    \"llm\",\n    \"map\",\n    \"message\",\n    \"memory\",\n    \"memory_backend\",\n    \"output_parser\",\n    \"parser\",\n    \"prompt\",\n    \"retriever\",\n    \"root\",\n    \"schema\",\n    \"store\",\n    \"tool\",\n    \"toolkit\",\n    \"text_splitter\",\n    \"vectorstore\",\n]\n\n\nclass Connector(BaseModel):\n    \"\"\"\n    A connection point for a property on a node.\n    \"\"\"\n\n    key: str\n    label: Optional[str] = None\n    type: Literal[\"source\", \"target\"]\n    required: bool = False\n\n    # Simplified categorization of AI workflow components. Class inheritance\n    # can't be checked in JS so these categories are used for a proxy instead.\n    source_type: NodeTypes | List[NodeTypes]\n\n    # The object type this should be converted to. Used when the source will\n    # be converted to another type. e.g. VectorStore.as_retriever()\n    as_type: Optional[NodeTypes] = None\n\n    # Indicate this connector expects a template that will be lazy loaded.\n    # Loading the root component will initiate this property as a NodeTemplate\n    # instance with a reference to the connected node. The component may then\n    # initialize node and any nodes that branch from it at runtime by calling\n    # the NodeTemplate.format(input=variables) method. Given variables will\n    # replace {variables} in any of the node's config values.\n    template: Optional[bool] = False\n\n    # Allow more than one connection to this connector\n    multiple: bool = False\n\n    # Way in which the value received by this connector is initialized on\n    # the component instance.\n    #  - init: kwarg passed to initializer callable, e.g. __init__\n    #  - bind: bound with Runnable.bind()\n    init_type: Optional[Literal[\"init\", \"bind\"]] = \"init\"\n\n    # Set of acceptable init_mode. If None, all input_modes are accepted.\n    # If any connector is init_mode \"input\" then the component will be\n    # lazy loaded.\n    #  - init: value is set at init time\n    #  - input: value is set at runtime\n    init_modes: Optional[Literal[\"init\", \"input\"]] = None\n\n    # List of subfields provided by this connector.\n    fields: Optional[List[str]] = None\n\n    # When set subfield names are parsed from config[from_field]\n    from_field: Optional[str] = None\n\n    collection: Optional[Literal[\"list\", \"flow\", \"map\", \"map_tuples\"]] = None\n\n\nclass FieldGroup(BaseModel):\n    \"\"\"A group of fields\"\"\"\n\n    label: Optional[str] = None\n    class_path: Optional[str] = None\n\n\nclass SecretGroup(BaseModel):\n    \"\"\"A group of secret fields that are stored together\"\"\"\n\n    key: str\n    fields: List[NodeTypeField]\n\n    @cached_property\n    def fields_schema(self) -> dict:\n        \"\"\"JSON schema for the fields\"\"\"\n        field_names = [field.name for field in self.fields]\n        return create_args_model(field_names).model_json_schema()\n\n\nclass DisplayGroup(BaseModel):\n    \"\"\"A group of fields that are displayed together\"\"\"\n\n    key: str\n    label: Optional[str] = None\n    fields: List[str]\n\n\nclass NodeType(BaseModel):\n    \"\"\"A configuration object that maps a component into the IX platform. These config\n    objects are used to generate config forms for the UI, validate config input,\n    initialize components at runtime. They describe how to load, configure, connected,\n    and display components in the UI.\n\n    Components are primarily from LangChain, but may include custom components and those\n    from other libraries. The structure maps to any callable that returns an object,\n    including classes, functions, and [class|static] methods.\n    \"\"\"\n\n    id: UUID = Field(default_factory=uuid4)\n    \"\"\"Unique identifier for the node\"\"\"\n    name: Optional[str] = Field(default=None, max_length=255)\n    description: Optional[str] = None\n    class_path: str = Field(..., max_length=255)\n    \"\"\"Class path to the callable that instantiates the node. May be a class, function, or method.\"\"\"\n    context: Optional[str] = None\n    \"\"\"Config kwarg to set context to when loading the node. Used by IX internal components that need\n    to load other nodes (e.g. ChainReference)\"\"\"\n    child_field: Optional[str] = Field(None, max_length=32)\n    \"\"\"Child field of class_path that will be returned as the node.\"\"\"\n    type: str = Field(..., max_length=255)\n    \"\"\"Type of node. e.g. llm, retriever, parser, etc.\"\"\"\n    display_type: str = Field(default=\"node\", max_length=10)\n    \"\"\"unused\"\"\"\n    connectors: Optional[List[Connector]] = None\n    \"\"\"Class properties that are loaded from other nodes\"\"\"\n    fields: Optional[List[NodeTypeField]] = None\n    \"\"\"Node properties defined with IX internal field type\"\"\"\n    field_groups: Optional[Dict[str, FieldGroup]] = None\n    \"\"\"Groups of fields that are loaded into config together\"\"\"\n    config_schema: Optional[dict] = None\n    \"\"\"JSON schema for the config\"\"\"\n    display_groups: Optional[List[DisplayGroup]] = None\n    \"\"\"Groups of fields that are displayed together in the order the groups should be displayed\"\"\"\n\n    class Config:\n        from_attributes = True\n\n    @cached_property\n    def field_map(self) -> Dict[str, NodeTypeField]:\n        \"\"\"Dictionary of fields by key\"\"\"\n        return {field.name: field for field in self.fields or []}\n\n    @cached_property\n    def connector_map(self) -> Dict[str, Connector]:\n        \"\"\"Dictionary of connectors by key\"\"\"\n        return {connector.key: connector for connector in self.connectors or []}\n\n    @cached_property\n    def input_connectors(self) -> Dict[str, Connector]:\n        \"\"\"Dictionary of connectors by key\"\"\"\n        return {\n            connector.key: connector\n            for connector in self.connectors or []\n            if connector.type == \"target\"\n        }\n\n    @cached_property\n    def output_connectors(self) -> Dict[str, Connector]:\n        \"\"\"Dictionary of connectors by key\"\"\"\n        return {\n            connector.key: connector\n            for connector in self.connectors or []\n            if connector.type == \"source\"\n        }\n\n    @cached_property\n    def init_exclude(self) -> Set[str]:\n        \"\"\"Set of keys that should be excluded from config\"\"\"\n        return self.bind_points\n\n    @property\n    def has_input_fields(self) -> bool:\n        \"\"\"Does this node have fields that are lazy loaded from input?\n\n        - There are fields that may be lazy loaded\n        - There are connections with init_mode=\"input\"\n        \"\"\"\n        return any(field.init == \"bind\" for field in self.fields or [])\n\n    @cached_property\n    def bind_points(self) -> Set[str]:\n        \"\"\"Set of keys for connectors and fields for this NodeType that are added with\n        Runnable.bind().\n        \"\"\"\n        bound_connectors = {\n            connector.key\n            for connector in self.connectors or []\n            if connector.init_type == \"bind\"\n        }\n        bound_fields = {\n            field.name for field in self.fields or [] if field.init_type == \"bind\"\n        }\n        return bound_connectors | bound_fields\n\n    @cached_property\n    def secret_groups(self) -> List[SecretGroup]:\n        \"\"\"Build SecretGroups from raw list of fields\"\"\"\n        secret_groups = []\n        grouped_fields = {}\n\n        if not self.fields:\n            return secret_groups\n\n        for field in self.fields:\n            if field.input_type == \"secret\":\n                secret_key = field.secret_key or field.name\n                if secret_key not in grouped_fields:\n                    grouped_fields[secret_key] = []\n                grouped_fields[secret_key].append(field)\n\n        for secret_key, fields in grouped_fields.items():\n            secret_group = SecretGroup(key=secret_key, fields=fields)\n            secret_groups.append(secret_group)\n\n        return secret_groups\n\n    def get_config_schema(self) -> dict:\n        \"\"\"JSON schema for the config\"\"\"\n        title = self.class_path.split(\".\")[-1]\n        schema = self.generate_config_schema(title=title, fields=self.fields or [])\n        schema.update(**self.model_dump(include=\"display_groups\"))\n        return schema\n\n    @staticmethod\n    def generate_config_schema(title: str, fields: List[NodeTypeField]) -> dict:\n        \"\"\"Generates a JSON schema from a list of NodeTypeField objects.\"\"\"\n        schema = {\"title\": title, \"type\": \"object\", \"properties\": {}, \"required\": []}\n        for field in fields:\n            # Determine the type of the field for the JSON schema\n            if field.type in {\"str\", \"string\"}:\n                schema_type = \"string\"\n            elif field.type in {\"number\", \"float\", \"int\", \"integer\"}:\n                schema_type = \"number\"\n            elif field.type in {\"bool\", \"boolean\"}:\n                schema_type = \"boolean\"\n            elif field.type in {\"list\", \"set\"}:\n                schema_type = \"array\"\n            elif field.type in {\"Any\"}:\n                schema_type = None\n            else:\n                schema_type = \"object\"\n\n            if schema_type in {\"array\"}:\n                property = NodeType.build_array_property(schema, schema_type, field)\n            else:\n                property = NodeType.build_properties(schema, schema_type, field)\n\n            if field.required:\n                schema[\"required\"].append(field.name)\n\n            schema[\"properties\"][field.name] = property\n\n        return schema\n\n    @staticmethod\n    def build_array_property(schema, schema_type, field) -> dict:\n        items = []\n        if field.choices is not None:\n            items.extend([{\"type\": choice.value} for choice in field.choices])\n        property = {\n            \"type\": \"array\",\n            \"items\": {},\n            # \"additionalItems\": False,\n            \"minItems\": field.min,\n            \"maxItems\": field.max,\n            \"uniqueItems\": field.type == \"set\",\n        }\n\n        OPTIONAL_PROPERTIES = {\n            \"description\",\n            \"input_type\",\n            \"style\",\n        }\n        for schema_property in OPTIONAL_PROPERTIES:\n            if (field_value := getattr(field, schema_property, None)) is not None:\n                property[schema_property] = field_value\n\n        return property\n\n    @staticmethod\n    def build_properties(schema, schema_type, field) -> dict:\n        # mapping from properties to fields with different names\n        COMPAT_FIELDS = {\n            \"minimum\": \"min\",\n            \"maximum\": \"max\",\n            \"multipleOf\": \"step\",\n        }\n\n        OPTIONAL_PROPERTIES = {\n            \"description\",\n            \"input_type\",\n            \"label\",\n            \"minimum\",\n            \"maximum\",\n            \"multipleOf\",\n            \"style\",\n            \"parent\",\n            \"default\",\n            \"secret_key\",\n        }\n\n        property = {}\n        if schema_type:\n            property[\"type\"] = schema_type\n\n        for schema_property in OPTIONAL_PROPERTIES:\n            field_name = COMPAT_FIELDS.get(schema_property, schema_property)\n            if (field_value := getattr(field, field_name, None)) is not None:\n                property[schema_property] = field_value\n\n        if field.choices is not None:\n            property[\"enum\"] = [choice.value for choice in field.choices]\n\n        return property\n\n\nclass NodeTypePage(QueryPage[NodeType]):\n    # override objects, FastAPI isn't detecting QueryPage type\n    objects: List[NodeType]\n"}
{"type": "source_file", "path": "ix/api/editor/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/api/chains/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/api/artifacts/endpoints.py", "content": "from uuid import UUID\n\nfrom asgiref.sync import sync_to_async\nfrom django.db.models import Q\nfrom fastapi import HTTPException, APIRouter, Depends\nfrom fastapi.responses import FileResponse\nfrom typing import Optional\nfrom ix.api.artifacts.types import (\n    Artifact as ArtifactPydantic,\n    ArtifactCreate,\n    ArtifactUpdate,\n    ArtifactPage,\n)\nfrom ix.task_log.models import Artifact\nfrom ix.api.auth import get_request_user\n\n\nrouter = APIRouter()\n__all__ = [\"router\"]\n\n\n@router.post(\n    \"/artifacts/\",\n    operation_id=\"create_artifact\",\n    response_model=ArtifactPydantic,\n    tags=[\"Artifacts\"],\n)\nasync def create_artifact(data: ArtifactCreate, user=Depends(get_request_user)):\n    instance = Artifact(user=user, **data.model_dump())\n    await instance.asave()\n    return ArtifactPydantic.model_validate(instance)\n\n\n@router.get(\n    \"/artifacts/{artifact_id}\",\n    operation_id=\"get_artifact\",\n    response_model=ArtifactPydantic,\n    tags=[\"Artifacts\"],\n)\nasync def get_artifact(artifact_id: str, user=Depends(get_request_user)):\n    try:\n        query = Artifact.objects.filter(pk=artifact_id)\n        artifact = await Artifact.filter_owners(user, query).aget()\n    except Artifact.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Artifact not found\")\n    return ArtifactPydantic.model_validate(artifact)\n\n\n@router.get(\n    \"/artifacts/\",\n    operation_id=\"get_artifacts\",\n    response_model=ArtifactPage,\n    tags=[\"Artifacts\"],\n)\nasync def get_artifacts(\n    chat_id: Optional[UUID] = None,\n    search: Optional[str] = None,\n    limit: int = 10,\n    offset: int = 0,\n    user=Depends(get_request_user),\n):\n    query = (\n        Artifact.objects.filter(Q(name__icontains=search) | Q(key__icontains=search))\n        if search\n        else Artifact.objects.all()\n    )\n    query = Artifact.filter_owners(user, query)\n    if chat_id:\n        query = query.filter(task__leading_chats__id=chat_id)\n\n    # punting on async implementation of pagination until later\n    return await sync_to_async(ArtifactPage.paginate)(\n        output_model=ArtifactPydantic, queryset=query, limit=limit, offset=offset\n    )\n\n\n@router.put(\n    \"/artifacts/{artifact_id}\",\n    operation_id=\"update_artifact\",\n    response_model=ArtifactPydantic,\n    tags=[\"Artifacts\"],\n)\nasync def update_artifact(\n    artifact_id: str, data: ArtifactUpdate, user=Depends(get_request_user)\n):\n    try:\n        query = Artifact.objects.filter(pk=artifact_id)\n        instance = await Artifact.filter_owners(user, query).aget()\n    except Artifact.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Artifact not found\")\n    for attr, value in data.model_dump().items():\n        setattr(instance, attr, value)\n    await instance.asave()\n    return ArtifactPydantic.model_validate(instance)\n\n\n@router.get(\n    \"/artifacts/{artifact_id}/download\",\n    operation_id=\"download_artifact\",\n    tags=[\"Artifacts\"],\n    responses={\n        200: {\n            \"content\": {\"application/octet-stream\": {}},\n            \"description\": \"Download the artifact\",\n        },\n        404: {\"description\": \"Artifact not found\"},\n    },\n)\nasync def download_artifact(artifact_id: str, user=Depends(get_request_user)):\n    try:\n        query = Artifact.objects.filter(pk=artifact_id)\n        artifact = await Artifact.filter_owners(user, query).aget()\n    except Artifact.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Artifact not found\")\n\n    file_path = artifact.storage[\"id\"]\n    file_name = file_path.split(\"/\")[-1]\n\n    return FileResponse(\n        file_path, media_type=\"application/octet-stream\", filename=file_name\n    )\n"}
{"type": "source_file", "path": "ix/api/editor/types.py", "content": "from typing import Optional, List, Literal\nfrom uuid import UUID\n\nfrom pydantic import BaseModel, model_validator\n\nfrom ix.api.chains.types import Position\nfrom ix.api.components.types import NodeType as NodeTypePydantic\nfrom ix.api.chains.types import Node as NodePydantic\nfrom ix.api.chains.types import Edge as EdgePydantic\nfrom ix.api.chains.types import Chain as ChainPydantic\n\n\nclass PositionUpdate(BaseModel):\n    x: float\n    y: float\n\n\nclass UpdatedRoot(BaseModel):\n    roots: List[UUID]\n    old_roots: List[UUID]\n\n\nclass UpdateRoot(BaseModel):\n    node_ids: List[UUID]\n\n\nclass NewNodeEdge(BaseModel):\n    \"\"\"A new edge to be created with a node\"\"\"\n\n    id: Optional[UUID] = None\n    source_id: UUID | Literal[\"root\"]\n    target_id: UUID\n    source_key: str\n    target_key: str\n\n\nclass AddNode(BaseModel):\n    id: Optional[UUID] = None\n    chain_id: Optional[UUID] = None\n    class_path: str\n    name: Optional[str] = None\n    description: Optional[str] = None\n    config: Optional[dict] = None\n    position: Optional[Position] = None\n    root: Optional[bool] = False\n\n    # optionally add edges to other nodes\n    edges: Optional[List[NewNodeEdge]] = None\n\n    @model_validator(mode=\"before\")\n    def validate_root(cls, value) -> bool:\n        # set root automatically for root nodes\n        if value[\"class_path\"] == \"__ROOT__\":\n            value[\"root\"] = True\n\n        return value\n\n\nclass UpdateNode(BaseModel):\n    config: Optional[dict]\n    name: Optional[str]\n    description: Optional[str]\n    position: Optional[Position]\n\n\nclass UpdateEdge(BaseModel):\n    source_id: UUID\n    target_id: UUID\n    target_key: str\n    source_key: str\n\n\nclass GraphModel(BaseModel):\n    chain: ChainPydantic\n    nodes: List[NodePydantic]\n    edges: List[EdgePydantic]\n    types: List[NodeTypePydantic]\n\n\nclass GraphNodes(BaseModel):\n    nodes: List[NodePydantic]\n    types: List[NodeTypePydantic]\n"}
{"type": "source_file", "path": "ix/api/datasources/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/api/datasources/types.py", "content": "from uuid import UUID\nfrom typing import Dict, Any, Optional, List\nfrom pydantic import BaseModel\n\nfrom ix.utils.graphene.pagination import QueryPage\n\n\nclass DataSourceBase(BaseModel):\n    name: str\n    description: str\n    config: Dict[str, Any]\n    retrieval_chain: UUID\n    user_id: UUID  # Add the user_id property\n\n\nclass DataSourceCreate(DataSourceBase):\n    id: Optional[UUID] = None\n\n\nclass DataSource(DataSourceBase):\n    id: UUID\n\n    class Config:\n        orm_mode = True\n\n\nclass DataSourcePage(QueryPage[DataSource]):\n    # override objects, FastAPI isn't detecting QueryPage type\n    objects: List[DataSource]\n"}
{"type": "source_file", "path": "ix/agents/exceptions.py", "content": "from ix.task_log.models import TaskLogMessage\n\n\nclass AuthRequired(Exception):\n    \"\"\"Exception raised to break out of a chain and send an auth request to a user\"\"\"\n\n    def __init__(self, message: TaskLogMessage):\n        self.message = message\n\n\nclass ResponseParseError(Exception):\n    \"\"\"Exception thrown when response parsing fails\"\"\"\n\n\nclass MissingCommandMarkers(ResponseParseError):\n    \"\"\"Exception thrown when command markers are missing from response\"\"\"\n\n\nclass AgentQuestion(Exception):\n    \"\"\"Exception thrown when the agent needs to ask a question\"\"\"\n\n    def __init__(self, message: str):\n        self.message = message\n"}
{"type": "source_file", "path": "ix/api/components/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/api/chats/endpoints.py", "content": "import logging\nimport re\nfrom asgiref.sync import sync_to_async\nfrom django.contrib.auth.models import AbstractUser\nfrom fastapi import APIRouter, HTTPException\nfrom typing import Optional, Dict, Any\nfrom uuid import UUID\n\nfrom django.db.models import Q\nfrom django.conf import settings\nfrom fastapi.params import Depends\nfrom ix.api.auth import get_request_user\n\nfrom ix.api.chains.endpoints import DeletedItem\nfrom ix.chains.management.commands.create_ix_v2 import IX_AGENT_V2\nfrom ix.chat.models import Chat, Task\nfrom ix.agents.models import Agent\nfrom ix.api.agents.types import Agent as AgentPydantic\nfrom ix.api.chats.types import (\n    ChatGraph,\n    ChatNew,\n    ChatUpdate,\n    Chat as ChatPydantic,\n    Task as TaskPydantic,\n    Plan as PlanPydantic,\n    Artifact as ArtifactPydantic,\n    ChatAgentAction,\n    ChatMessage,\n    ChatInput,\n    ChatInList,\n    ChatQueryPage,\n    ChatMessageQueryPage,\n)\nfrom ix.task_log.models import UserFeedback, TaskLogMessage\nfrom ix.task_log.tasks.agent_runner import (\n    start_agent_loop,\n)\n\n\nlogger = logging.getLogger(__name__)\nrouter = APIRouter()\n\n\n@router.post(\n    \"/chats/\", operation_id=\"create_chat\", response_model=ChatPydantic, tags=[\"Chats\"]\n)\nasync def create_chat(chat: ChatNew, user: AbstractUser = Depends(get_request_user)):\n    # Check if user is authenticated\n    if user.is_anonymous:\n        raise Exception(\n            \"Authentication is required to create a task.\"\n        )  # pragma: no cover\n\n    # If agent is not provided, use the default agent\n    if chat.lead_id:\n        lead = await Agent.objects.aget(pk=chat.lead_id)\n    else:\n        lead = await Agent.objects.aget(pk=IX_AGENT_V2)\n\n    task = await Task.objects.acreate(\n        name=chat.name,\n        user=user,\n        agent=lead,\n        chain_id=lead.chain_id,\n        autonomous=chat.autonomous,\n    )\n\n    chat_obj = await Chat.objects.acreate(\n        user=user,\n        task=task,\n        lead=lead,\n        name=chat.name,\n    )\n\n    # Add default agents to chat\n    for agent_id in settings.DEFAULT_AGENTS:\n        try:\n            agent = await Agent.objects.aget(pk=agent_id)\n        except Agent.DoesNotExist:\n            logger.exception(f\"Default agent {agent_id} not found\")\n            raise\n        await chat_obj.agents.aadd(agent)\n\n    return ChatPydantic.model_validate(chat_obj)\n\n\n@router.get(\n    \"/chats/{chat_id}\",\n    operation_id=\"get_chat\",\n    response_model=ChatPydantic,\n    tags=[\"Chats\"],\n)\nasync def get_chat(chat_id: UUID, user: AbstractUser = Depends(get_request_user)):\n    query = Chat.filtered_owners(user)\n    try:\n        chat = await query.aget(pk=chat_id)\n    except Chat.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chat not found\")\n    return ChatPydantic.model_validate(chat)\n\n\n@router.get(\n    \"/chats/\", operation_id=\"get_chats\", response_model=ChatQueryPage, tags=[\"Chats\"]\n)\nasync def get_chats(\n    user: AbstractUser = Depends(get_request_user),\n    search: Optional[str] = None,\n    limit: int = 10,\n    offset: int = 0,\n):\n    query = Chat.filtered_owners(user)\n    if search:\n        query = query.filter(Q(name__icontains=search))\n    query = query.order_by(\"-created_at\")\n\n    # punting on async implementation of pagination until later\n    return await sync_to_async(ChatQueryPage.paginate)(\n        output_model=ChatInList, queryset=query, limit=limit, offset=offset\n    )\n\n\n@router.put(\n    \"/chats/{chat_id}\",\n    operation_id=\"update_chat\",\n    response_model=ChatPydantic,\n    tags=[\"Chats\"],\n)\nasync def update_chat(\n    chat_id: UUID, chat: ChatUpdate, user: AbstractUser = Depends(get_request_user)\n):\n    try:\n        chat_obj = await Chat.filtered_owners(user).aget(pk=chat_id)\n    except Chat.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chat not found\")\n\n    for attr, value in chat.model_dump().items():\n        if value is not None:\n            setattr(chat_obj, attr, value)\n    await chat_obj.asave()\n\n    return ChatPydantic.model_validate(chat_obj)\n\n\n@router.delete(\n    \"/chats/{chat_id}\",\n    operation_id=\"delete_chat\",\n    response_model=DeletedItem,\n    tags=[\"Chats\"],\n)\nasync def delete_chat(chat_id: UUID, user: AbstractUser = Depends(get_request_user)):\n    query = Chat.filtered_owners(user)\n    try:\n        chat = await query.aget(pk=chat_id)\n    except Chat.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chat not found\")\n    await chat.adelete()\n    return DeletedItem(id=chat_id)\n\n\n@router.delete(\n    \"/chats/{chat_id}/agents/{agent_id}\",\n    operation_id=\"remove_agent\",\n    response_model=ChatAgentAction,\n    tags=[\"Chats\"],\n)\nasync def remove_agent(\n    chat_id: UUID, agent_id: UUID, user: AbstractUser = Depends(get_request_user)\n):\n    try:\n        chat = await Chat.filtered_owners(user).aget(pk=chat_id)\n        agent = await Agent.filtered_owners(user).aget(pk=agent_id)\n        await chat.agents.aremove(agent)\n        return ChatAgentAction(chat_id=chat.id, agent_id=agent.id)\n    except Chat.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chat does not exist.\")\n    except Agent.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Agent does not exist.\")\n\n\n@router.put(\n    \"/chats/{chat_id}/agents/{agent_id}\",\n    operation_id=\"add_agent\",\n    response_model=ChatAgentAction,\n    tags=[\"Chats\"],\n)\nasync def add_agent(\n    chat_id: UUID, agent_id: UUID, user: AbstractUser = Depends(get_request_user)\n):\n    try:\n        chat = await Chat.filtered_owners(user).aget(pk=chat_id)\n        agent = await Agent.filtered_owners(user).aget(pk=agent_id)\n\n        # Check if the agent is already a lead or an agent\n        if chat.lead_id == agent.id or await chat.agents.filter(id=agent.id).aexists():\n            return ChatAgentAction(chat_id=chat.id)\n\n        await chat.agents.aadd(agent)\n        await chat.asave()\n        return ChatAgentAction(chat_id=chat.id, agent_id=agent.id)\n    except Chat.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chat does not exist.\")\n    except Agent.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Agent does not exist.\")\n\n\n@router.get(\n    \"/chats/{chat_id}/graph\",\n    operation_id=\"get_chat_graph\",\n    response_model=ChatGraph,\n    tags=[\"Chats\"],\n)\nasync def get_chat_graph(chat_id: str, user: AbstractUser = Depends(get_request_user)):\n    \"\"\"Chat and related objects\n\n    Single object containing objects needed to render the chat view.\n\n    TODO: this should be broken apart into smaller queries so the UI can\n          load this incrementally.\n    \"\"\"\n    try:\n        chat = await Chat.filtered_owners(user).aget(pk=chat_id)\n    except Chat.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chat does not exist.\")\n    lead = await Agent.filtered_owners(user).aget(pk=chat.lead_id)\n    task = await Task.objects.aget(pk=chat.task_id)\n    agents = [AgentPydantic.model_validate(agent) async for agent in chat.agents.all()]\n    plans = [\n        PlanPydantic.model_validate(plan) async for plan in task.created_plans.all()\n    ]\n    artifacts = [\n        ArtifactPydantic.model_validate(artifact)\n        async for artifact in task.artifacts.all()\n    ]\n    return ChatGraph(\n        chat=ChatPydantic.model_validate(chat),\n        lead=AgentPydantic.model_validate(lead),\n        agents=agents,\n        plans=plans,\n        task=TaskPydantic.model_validate(task),\n        artifacts=artifacts,\n    )\n\n\ndef get_artifacts(user_input):\n    \"\"\"Find all references to artifacts in user input.\"\"\"\n    # Pattern to find all instances of text enclosed in curly braces.\n    pattern = r\"\\{(.*?)\\}\"\n\n    # re.findall returns all non-overlapping matches of pattern in string, as a list of strings.\n    # The string is scanned left-to-right, and matches are returned in the order found.\n    matches = re.findall(pattern, user_input)\n\n    # Return the list of matches.\n    return matches\n\n\n@router.get(\n    \"/chats/{chat_id}/messages\",\n    operation_id=\"get_messages\",\n    response_model=ChatMessageQueryPage,\n    tags=[\"Chats\"],\n)\nasync def get_messages(\n    chat_id,\n    limit: int = 10,\n    offset: int = 0,\n    user: AbstractUser = Depends(get_request_user),\n):\n    try:\n        chat = await Chat.filtered_owners(user).aget(pk=chat_id)\n    except Chat.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chat does not exist.\")\n    task_id = chat.task_id\n    query = TaskLogMessage.objects.filter(\n        Q(task__root_id=task_id) | Q(task__id=task_id)\n    ).order_by(\"created_at\")\n\n    # punting on async implementation of pagination until later\n    return await sync_to_async(ChatMessageQueryPage.paginate)(\n        output_model=ChatMessage, queryset=query, limit=limit, offset=offset\n    )\n\n\n@router.post(\n    \"/chats/{chat_id}/messages\",\n    operation_id=\"send_message\",\n    response_model=ChatMessage,\n    tags=[\"Chats\"],\n)\nasync def send_message(\n    chat_id: str, chat_input: ChatInput, user: AbstractUser = Depends(get_request_user)\n):\n    try:\n        chat = await Chat.filtered_owners(user).aget(pk=chat_id)\n    except Chat.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chat does not exist.\")\n    text = chat_input.text\n    artifact_ids = [str(pk) for pk in chat_input.artifact_ids or []]\n\n    # save to persistent storage\n    message = await TaskLogMessage.objects.acreate(\n        task_id=chat.task_id,\n        role=\"USER\",\n        content=UserFeedback(\n            type=\"FEEDBACK\",\n            feedback=text,\n            artifact_ids=artifact_ids,\n        ),\n    )\n\n    # determine if user targeted a specific agent in the chat\n    # if so, forward the message to that agent\n    # otherwise, forward the message to the lead agent\n    task_id = chat.task_id\n    user_input = text.strip().lower()\n    if user_input.startswith(\"@\"):\n        # Find the first space or the end of the string\n        space_index = user_input.find(\" \")\n        if space_index == -1:\n            space_index = len(user_input)  # pragma: no cover\n\n        # Extract the agent name and find the agent\n        agent_alias = user_input[1:space_index]\n\n        agent = await Agent.objects.filter(\n            Q(leading_chats=chat, alias=agent_alias)\n            | Q(chats__id=chat.id, alias=agent_alias)\n        ).aget()\n\n        # delegate the task to the agent and run in this thread\n        task = await Task.objects.aget(pk=chat.task_id)\n        subtask = await task.adelegate_to_agent(agent)\n        task_id = subtask.id\n    else:\n        agent = await Agent.objects.aget(pk=chat.lead_id)\n\n    # resume task loop\n    logger.info(\n        f\"Requesting agent loop resume chat_id={chat.id} task_id={message.task_id} user_input={message.pk}\"\n    )\n\n    inputs = {\n        \"user_input\": text,\n        \"chat_id\": str(chat.id),\n        \"artifact_ids\": artifact_ids,\n    }\n\n    # Start agent loop. This does NOT check if the loop is already running\n    # the agent_runner task is responsible for blocking duplicate runners\n    await start_agent(task_id, agent, inputs, user=user)\n\n    return ChatMessage.model_validate(message)\n\n\n@router.post(\n    \"/chats/{chat_id}/messages/clear\", operation_id=\"clear_messages\", tags=[\"Chats\"]\n)\nasync def clear_messages(chat_id: str, user: AbstractUser = Depends(get_request_user)):\n    try:\n        chat = await Chat.filtered_owners(user).aget(pk=chat_id)\n    except Chat.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Chat does not exist.\")\n    except Agent.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Agent does not exist.\")\n\n    await TaskLogMessage.objects.filter(\n        Q(task__root_id=chat.task_id) | Q(task_id=chat.task_id)\n    ).adelete()\n    return DeletedItem(id=chat_id)\n\n\nasync def start_agent(\n    task_id: UUID, agent: Agent, inputs: Dict[str, Any], user: AbstractUser\n):\n    \"\"\"Shim for start_agent_loop\n\n    The async decorator on start_agent_loop sometimes causes issues in tests.\n    Moving the function into this shim allows it to work correctly.\n    \"\"\"\n    return start_agent_loop.delay(\n        str(task_id), chain_id=str(agent.chain_id), user_id=str(user.id), inputs=inputs\n    )\n"}
{"type": "source_file", "path": "ix/agents/process.py", "content": "import logging\nfrom typing import TypedDict, Optional, Any, Dict\n\nfrom asgiref.sync import sync_to_async\nfrom langchain.schema.runnable import RunnableConfig\n\nfrom ix.agents.models import Agent\nfrom ix.chains.callbacks import IxHandler\nfrom ix.chains.loaders.context import IxContext\nfrom ix.chains.models import Chain as ChainModel\nfrom ix.runnable_log.subscription import RunEventSubscription\nfrom ix.task_log.models import Task\n\n\n# logging\nlogger = logging.getLogger(__name__)\n\n\nclass UserInput(TypedDict):\n    authorized_ticks: int\n    feedback: Optional[str]\n\n\nclass ChatMessage(TypedDict):\n    role: str\n    content: str\n\n\nclass AgentProcess:\n    def __init__(\n        self,\n        task: Task,\n        agent: Agent,\n        chain: ChainModel,\n    ):\n        self.chain = chain\n        self.task = task\n        self.agent = agent\n\n    async def start(self, inputs: Optional[Dict[str, Any]] = None) -> bool:\n        \"\"\"\n        start agent loop\n        \"\"\"\n        logger.info(f\"starting process loop task_id={self.task.id} input_id={inputs}\")\n        response = await self.chat_with_ai(inputs)\n        logger.debug(f\"Response from model, task_id={self.task.id} response={response}\")\n        return True\n\n    async def chat_with_ai(self, user_input: Dict[str, Any]) -> Any:\n        handler = IxHandler(agent=self.agent, chain=self.chain, task=self.task)\n        context = await IxContext.afrom_task(task=self.task)\n\n        # send run events only for 1st level children which are currently all\n        # the root for\n        # if self.task.parent_id == self.task.root_id :\n        RunEventSubscription.on_run(chain_id=self.chain.id, task_id=handler.root_id)\n\n        try:\n            # TODO: chain loading needs to be made async\n            chain = await sync_to_async(self.chain.load_chain)(context=context)\n\n            logger.info(\n                f\"Sending request to chain={self.chain.name} prompt={user_input}\"\n            )\n\n            # auto-map user_input to other input keys if not provided.\n            # work around until chat input key can be configured per chain\n            inputs = user_input.copy()\n            if \"input\" not in inputs:\n                inputs[\"input\"] = user_input[\"user_input\"]\n            if \"question\" not in inputs:\n                inputs[\"question\"] = user_input[\"user_input\"]\n\n            return await chain.ainvoke(inputs, RunnableConfig(callbacks=[handler]))\n        except Exception as e:\n            # validation errors aren't caught by callbacks.\n            await handler.send_error_msg(e)\n            return None\n"}
{"type": "source_file", "path": "ix/chains/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/api/workspace/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/api/workspace/endpoints.py", "content": "import logging\nfrom pathlib import Path\n\nfrom django.conf import settings\nfrom fastapi import APIRouter, UploadFile, File, Form\n\nfrom ix.task_log.models import Artifact\nfrom ix.api.artifacts.types import (\n    Artifact as ArtifactPydantic\n)\n\nlogger = logging.getLogger(__name__)\nrouter = APIRouter()\n\n\n@router.post(\"/upload/\", operation_id=\"upload_file\", response_model=ArtifactPydantic)\nasync def upload_file(file: UploadFile = File(...), task_id: str = Form(None)):\n    file_location = Path(settings.WORKSPACE_DIR) / file.filename\n    with file_location.open(\"wb+\") as buffer:\n        buffer.write(file.file.read())\n\n    artifact = await Artifact.objects.acreate(\n        task_id=task_id,\n        artifact_type=\"file\",\n        name=file.filename,\n        key=file.filename,\n        description=\"\",\n        storage={\n            \"type\": \"write_file\",\n            \"id\": str(file_location),\n        }\n    )\n\n    return ArtifactPydantic.from_orm(artifact)\n"}
{"type": "source_file", "path": "ix/api/secrets/types.py", "content": "from uuid import UUID\nfrom typing import Optional, List, Dict, Any\nfrom pydantic import BaseModel, UUID4\nfrom ix.utils.graphene.pagination import QueryPage\n\n\nclass SecretTypeBase(BaseModel):\n    name: str\n    fields_schema: Dict[str, Any]\n\n\nclass SecretTypeEdit(SecretTypeBase):\n    pass\n\n\nclass SecretType(SecretTypeBase):\n    id: UUID\n    user_id: Optional[int]\n    group_id: Optional[int]\n\n    class Config:\n        from_attributes = True\n\n\nclass SecretTypePage(QueryPage[SecretType]):\n    objects: List[SecretType]\n\n\nclass Secret(BaseModel):\n    id: UUID4\n    user_id: Optional[int] = None\n    group_id: Optional[int] = None\n    type_id: UUID\n    name: str = \"default\"\n    path: str\n\n    type: SecretType\n\n    class Config:\n        from_attributes = True\n\n\nclass CreateSecret(BaseModel):\n    type_id: Optional[UUID] = None\n    type_key: Optional[str] = None\n    name: Optional[str] = \"default\"\n    value: Dict[str, Any]\n\n\nclass UpdateSecret(BaseModel):\n    name: str = \"default\"\n\n    # secrets value are only sent for updates when they are updated\n    # the values are never sent in responses so the user doesn't\n    # have them to re-send with other updates.\n    value: Optional[Dict[str, Any]] = None\n\n\nclass SecretPage(QueryPage[Secret]):\n    # override objects, FastAPI isn't detecting QueryPage type\n    objects: List[Secret]\n"}
{"type": "source_file", "path": "ix/api/secrets/__init__.py", "content": ""}
{"type": "source_file", "path": "ix/agents/callback_manager.py", "content": "import logging\nfrom functools import cached_property\n\nfrom langchain.callbacks.manager import CallbackManager\n\nfrom ix.agents.models import Agent\nfrom ix.chat.models import Chat\nfrom ix.task_log.models import Task\n\nlogger = logging.getLogger(__name__)\n\n\nclass IxCallbackManager(CallbackManager):\n    \"\"\"\n    Custom callback manager that adds iX functionality.\n    \"\"\"\n\n    stack_id: str\n    task: Task\n\n    def __init__(\n        self,\n        task: Task,\n        agent: Agent,\n        stack_id: str = None,\n        parent: \"IxCallbackHandler\" = None,  # noqa: F821\n    ):\n        super().__init__(handlers=[])\n\n        self.task = task\n        self.agent = agent\n        self.stack_id = stack_id or \"root\"\n        self.parent = parent\n\n    def child(self, stack_id: str) -> \"IxCallbackManager\":\n        \"\"\"Return a child clone with nested stack_id\"\"\"\n        child = type(self)(\n            parent=self,\n            task=self.task,\n            agent=self.agent,\n            stack_id=f\"{self.stack_id}.{stack_id}\",\n        )\n        child.think_msg = self.think_msg\n        return child\n\n    @property\n    def task_id(self) -> str:\n        return str(self.task.id)\n\n    @property\n    def agent_id(self) -> str:\n        return str(self.task.agent_id)\n\n    @property\n    def user_id(self) -> str:\n        # HAX: this is currently always the owner of the chat. Likely need to update\n        # this in the future to be the user making the request.\n        return str(self.task.user_id)\n\n    @cached_property\n    def chat_id(self) -> str:\n        task_id = self.task.root_id if self.task.root_id else self.task.id\n        try:\n            chat = Chat.objects.get(task_id=task_id)\n        except Chat.DoesNotExist:\n            return None\n        return chat.id\n"}
{"type": "source_file", "path": "ix/api/datasources/endpoints.py", "content": "from asgiref.sync import sync_to_async\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db.models import Q\nfrom fastapi import HTTPException, APIRouter, Depends\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom ix.api.auth import get_request_user\nfrom ix.datasources.models import DataSource\nfrom ix.api.chains.endpoints import DeletedItem\nfrom pydantic import BaseModel\nfrom ix.api.datasources.types import DataSource as DataSourcePydantic, DataSourcePage\n\n\nrouter = APIRouter()\n\n\nclass DataSourceCreateUpdate(BaseModel):\n    name: str\n    description: str\n    config: dict\n    retrieval_chain: UUID\n\n\n@router.post(\n    \"/datasources/\",\n    operation_id=\"create_datasource\",\n    response_model=DataSourcePydantic,\n    tags=[\"DataSources\"],\n)\nasync def create_datasource(\n    datasource: DataSourceCreateUpdate,\n    current_user: AbstractUser = Depends(get_request_user),\n):\n    # Assign the user_id to the created datasource\n    datasource_dict = datasource.dict()\n    datasource_dict[\"user_id\"] = current_user.id\n\n    datasource_obj = DataSource(**datasource_dict)\n    await datasource_obj.save()\n    return DataSourcePydantic.from_orm(datasource_obj)\n\n\n@router.get(\n    \"/datasources/{datasource_id}\",\n    operation_id=\"get_datasource\",\n    response_model=DataSourcePydantic,\n    tags=[\"DataSources\"],\n)\nasync def get_datasource(\n    datasource_id: UUID,\n    current_user: AbstractUser = Depends(get_request_user),  # Get the current user\n):\n    try:\n        datasource = await DataSource.objects.get(\n            pk=datasource_id, user_id=current_user.id\n        )\n    except DataSource.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"DataSource not found\")\n    return DataSourcePydantic.from_orm(datasource)\n\n\n@router.get(\n    \"/datasources/\",\n    operation_id=\"get_datasources\",\n    response_model=DataSourcePage,\n    tags=[\"DataSources\"],\n)\nasync def get_datasources(\n    search: Optional[str] = None,\n    limit: int = 10,\n    offset: int = 0,\n    current_user: AbstractUser = Depends(get_request_user),  # Get the current user\n):\n    query = DataSource.objects.filter(user_id=current_user.id)\n    if search:\n        query = query.filter(\n            Q(name__icontains=search) | Q(description__icontains=search)\n        )\n\n    # punting on async implementation of pagination until later\n    return await sync_to_async(DataSourcePage.paginate)(\n        output_model=DataSourcePydantic, queryset=query, limit=limit, offset=offset\n    )\n\n\n@router.put(\n    \"/datasources/{datasource_id}\",\n    operation_id=\"update_datasource\",\n    response_model=DataSourcePydantic,\n    tags=[\"DataSources\"],\n)\nasync def update_datasource(\n    datasource_id: UUID,\n    datasource: DataSourceCreateUpdate,\n    current_user: AbstractUser = Depends(get_request_user),  # Get the current user\n):\n    try:\n        datasource_obj = await DataSource.objects.get(\n            pk=datasource_id, user_id=current_user.id\n        )\n    except DataSource.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"DataSource not found\")\n\n    for attr, value in datasource.dict().items():\n        setattr(datasource_obj, attr, value)\n\n    await datasource_obj.save()\n    return DataSourcePydantic.from_orm(datasource_obj)\n\n\n@router.delete(\n    \"/datasources/{datasource_id}\",\n    operation_id=\"delete_datasource\",\n    response_model=DeletedItem,\n    tags=[\"DataSources\"],\n)\nasync def delete_datasource(\n    datasource_id: UUID,\n    current_user: AbstractUser = Depends(get_request_user),  # Get the current user\n):\n    try:\n        datasource = await DataSource.objects.get(\n            pk=datasource_id, user_id=current_user.id\n        )\n    except DataSource.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"DataSource not found\")\n\n    await datasource.delete()\n    return DeletedItem(id=str(datasource_id))\n"}
{"type": "source_file", "path": "ix/api/secrets/endpoints.py", "content": "import logging\nfrom uuid import UUID\n\nfrom django.contrib.auth.models import AbstractUser\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom typing import List, Optional\nfrom asgiref.sync import sync_to_async\n\nfrom ix.api.auth import get_request_user\nfrom ix.api.chains.endpoints import DeletedItem\nfrom ix.api.secrets.types import (\n    SecretType as SecretTypePydantic,\n    SecretTypeEdit,\n    SecretTypePage,\n    Secret as SecretPydantic,\n    SecretPage,\n    CreateSecret,\n    UpdateSecret,\n)\nfrom ix.secrets.models import SecretType, Secret, MissingSecret\nfrom ix.ix_users.models import User\nfrom ix.utils.pydantic import create_args_model\n\nlogger = logging.getLogger(__name__)\nrouter = APIRouter()\n\n\n@router.post(\n    \"/secret_types/\",\n    operation_id=\"create_secret_type\",\n    response_model=SecretTypePydantic,\n    tags=[\"Secrets\"],\n)\nasync def create_secret_type(\n    secret_type: SecretTypeEdit,\n    user: User = Depends(get_request_user),\n):\n    # create a new SecretType\n    secret_type_obj = await SecretType.objects.acreate(\n        user_id=user.id,\n        **secret_type.model_dump(),\n    )\n    return SecretTypePydantic.model_validate(secret_type_obj)\n\n\n@router.get(\n    \"/secret_types/{secret_type_id}\",\n    operation_id=\"get_secret_type\",\n    response_model=SecretTypePydantic,\n    tags=[\"Secrets\"],\n)\nasync def get_secret_type(secret_type_id: UUID, user: User = Depends(get_request_user)):\n    try:\n        secret_type = await SecretType.filtered_owners(user).aget(pk=secret_type_id)\n    except SecretType.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"SecretType not found\")\n    return SecretTypePydantic.model_validate(secret_type)\n\n\n@router.get(\n    \"/secret_types/\",\n    operation_id=\"get_secret_types\",\n    response_model=SecretTypePage,\n    tags=[\"Secrets\"],\n)\nasync def get_secret_types(\n    limit: int = 10,\n    offset: int = 0,\n    user: User = Depends(get_request_user),\n    search: Optional[str] = None,\n    key: Optional[str] = None,\n):\n    \"\"\"\n    List SecretTypes available to the user.\n    \"\"\"\n    query = SecretType.filtered_owners(user).all()\n    if search:\n        query = query.filter(name__icontains=search)\n    if key:\n        query = query.filter(name=key)\n\n    # Handling pagination manually for this example\n    query = query[offset : offset + limit]\n\n    # punting on async implementation of pagination until later\n    return await sync_to_async(SecretTypePage.paginate)(\n        output_model=SecretTypePydantic, queryset=query, limit=limit, offset=offset\n    )\n\n\n@router.put(\n    \"/secret_types/{secret_type_id}\",\n    operation_id=\"update_secret_type\",\n    response_model=SecretTypePydantic,\n    tags=[\"Secrets\"],\n)\nasync def update_secret_type(\n    secret_type_id: UUID,\n    secret_type: SecretTypeEdit,\n    user: User = Depends(get_request_user),\n):\n    try:\n        secret_type_obj = await SecretType.filtered_owners(\n            user, global_restricted=True\n        ).aget(pk=secret_type_id)\n    except SecretType.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"SecretType not found\")\n\n    for attr, value in secret_type.model_dump().items():\n        setattr(secret_type_obj, attr, value)\n    await secret_type_obj.asave()\n    return SecretTypePydantic.model_validate(secret_type_obj)\n\n\n@router.delete(\n    \"/secret_types/{secret_type_id}\",\n    operation_id=\"delete_secret_type\",\n    tags=[\"Secrets\"],\n)\nasync def delete_secret_type(\n    secret_type_id: UUID,\n    user: User = Depends(get_request_user),\n):\n    try:\n        secret_type_obj = await SecretType.filtered_owners(\n            user, global_restricted=True\n        ).aget(pk=secret_type_id)\n    except SecretType.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"SecretType not found\")\n\n    await secret_type_obj.adelete()\n    return DeletedItem(id=str(secret_type_id))\n\n\ndef create_secret_type_schema(fields: List[str]):\n    \"\"\"\n    Create a JSONSchema for a SecretType from a list of fields\n    \"\"\"\n    schema_model = create_args_model(fields)\n    return schema_model.schema()\n\n\nasync def create_secret_type_for_data(\n    user: AbstractUser, secret: CreateSecret | UpdateSecret\n) -> SecretType:\n    fields_schema = create_secret_type_schema(secret.value.keys())\n    return await SecretType.objects.acreate(\n        name=secret.type_key, user=user, fields_schema=fields_schema\n    )\n\n\nasync def validate_secret_type(secret: CreateSecret, user: AbstractUser) -> SecretType:\n    \"\"\"\n    Validate that the secret value matches the secret type\n    \"\"\"\n    if not secret.type_id:\n        # embedded type creation\n        return await create_secret_type_for_data(user, secret)\n    else:\n        # validate user can access type\n        try:\n            return await SecretType.filtered_owners(user).aget(pk=secret.type_id)\n        except SecretType.DoesNotExist:\n            raise HTTPException(status_code=422, detail=\"Invalid secret type\")\n\n\n@router.post(\n    \"/secrets/\",\n    operation_id=\"create_secret\",\n    response_model=SecretPydantic,\n    tags=[\"Secrets\"],\n)\nasync def create_secret(secret: CreateSecret, user: User = Depends(get_request_user)):\n    secret_type = await validate_secret_type(secret, user)\n\n    # Record secret in database\n    secret_kwargs = secret.model_dump(\n        exclude={\n            \"id\",\n            \"user_id\",\n            \"value\",\n            \"created_at\",\n            \"updated_at\",\n            \"type_id\",\n            \"type_key\",\n        }\n    )\n    secret_obj = Secret(user_id=user.id, type=secret_type, **secret_kwargs)\n    await secret_obj.asave()\n\n    # write to vault\n    await secret_obj.awrite(secret.value)\n\n    return SecretPydantic.model_validate(secret_obj)\n\n\n@router.get(\n    \"/secrets/{secret_id}\",\n    operation_id=\"get_secret\",\n    response_model=SecretPydantic,\n    tags=[\"Secrets\"],\n)\nasync def get_secret(secret_id: UUID, user: User = Depends(get_request_user)):\n    try:\n        secret_obj = await Secret.filtered_owners(user).aget(pk=secret_id)\n    except Secret.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Secret not found\")\n\n    # fetch secret type manually to avoid async weirdness\n    secret_obj.type = await SecretType.objects.aget(pk=secret_obj.type_id)\n\n    return SecretPydantic.model_validate(secret_obj)\n\n\n@router.put(\n    \"/secrets/{secret_id}\",\n    operation_id=\"update_secret\",\n    response_model=SecretPydantic,\n    tags=[\"Secrets\"],\n)\nasync def update_secret(\n    secret_id: UUID,\n    secret: UpdateSecret,\n    user: User = Depends(get_request_user),\n):\n    try:\n        secret_obj = await Secret.filtered_owners(user).aget(pk=secret_id)\n    except Secret.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Secret not found\")\n\n    secret_kwargs = secret.model_dump(\n        exclude={\n            \"id\",\n            \"user_id\",\n            \"group_id\",\n            \"value\",\n            \"created_at\",\n            \"updated_at\",\n            \"type_id\",\n            \"type_key\",\n        }\n    )\n\n    # update DB if needed\n    has_db_update = False\n    for attr, value in secret_kwargs.items():\n        if hasattr(secret_obj, attr) and getattr(secret_obj, attr) != value:\n            setattr(secret_obj, attr, value)\n            has_db_update = True\n    if has_db_update:\n        await secret_obj.asave()\n\n    # set user on secret to avoid extra query\n    secret_obj.user = user\n\n    # update vault value\n    if secret.value:\n        try:\n            current_value = await secret_obj.aread()\n        except MissingSecret:\n            current_value = {}\n        if current_value != secret.value:\n            current_value.update(secret.value)\n            await secret_obj.awrite(current_value)\n\n    # fetch secret type manually to avoid async weirdness\n    secret_obj.type = await SecretType.objects.aget(pk=secret_obj.type_id)\n\n    return SecretPydantic.model_validate(secret_obj)\n\n\n@router.get(\n    \"/secrets/\", operation_id=\"get_secrets\", response_model=SecretPage, tags=[\"Secrets\"]\n)\nasync def get_secrets(\n    secret_type: Optional[str] = None,\n    limit: int = 10,\n    offset: int = 0,\n    user: User = Depends(get_request_user),\n):\n    \"\"\"List endpoint used to retrieve secret metadata from the database.\n\n    Secret values must be fetched from vault. This endpoint fetches secrets for\n    use rendering choices in the UX. (e.g. to show a list of choices)\n    \"\"\"\n    query = Secret.filtered_owners(user).all()\n    if secret_type:\n        query = query.filter(type__name=secret_type)\n\n    # Handling pagination manually for this example\n    query = query[offset : offset + limit]\n\n    # punting on async implementation of pagination until later\n    # will need to handle select_related async as well\n    query.select_related(\"type\")\n    return await sync_to_async(SecretPage.paginate)(\n        output_model=SecretPydantic, queryset=query, limit=limit, offset=offset\n    )\n\n\n@router.delete(\n    \"/secrets/{secret_id}\",\n    operation_id=\"delete_secret\",\n    response_model=DeletedItem,\n    tags=[\"Secrets\"],\n)\nasync def delete_secret(secret_id: UUID, user: User = Depends(get_request_user)):\n    try:\n        secret = await Secret.filtered_owners(user).aget(pk=secret_id)\n    except Secret.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Secret not found\")\n\n    # set user on secret to avoid extra query\n    secret.user = user\n\n    # delete vault and database\n    try:\n        await secret.adelete_secure()\n    except MissingSecret:\n        logger.warning(f\"Secret {secret_id} not found in vault when deleting\")\n    await secret.adelete()\n\n    return DeletedItem(id=str(secret_id))\n"}
{"type": "source_file", "path": "ix/api/editor/endpoints.py", "content": "import asyncio\nimport logging\nfrom typing import List\nfrom uuid import UUID\n\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db.models import Q\nfrom fastapi import APIRouter, HTTPException, Depends\nfrom pydantic import UUID4\n\nfrom ix.agents.models import Agent\nfrom ix.api.auth import get_request_user\nfrom ix.api.chains.endpoints import (\n    DeletedItem,\n    create_chain_instance,\n    create_chain_chat,\n)\nfrom ix.api.chats.types import Chat as ChatPydantic\nfrom ix.api.editor.types import (\n    UpdateEdge,\n    GraphModel,\n    UpdateNode,\n    UpdatedRoot,\n    AddNode,\n    UpdateRoot,\n    GraphNodes,\n)\nfrom ix.chains.models import Chain, ChainNode, NodeType, ChainEdge\n\nfrom ix.api.chains.types import (\n    Chain as ChainPydantic,\n)\nfrom ix.api.editor.types import PositionUpdate\nfrom ix.api.components.types import NodeType as NodeTypePydantic\nfrom ix.api.chains.types import Node as NodePydantic\nfrom ix.api.chains.types import Edge as EdgePydantic\nfrom ix.chat.models import Chat\nfrom ix.ix_users.models import User, OwnedModel\n\nlogger = logging.getLogger(__name__)\nrouter = APIRouter()\n\n\n@router.post(\n    \"/chains/{chain_id}/set_root\",\n    operation_id=\"set_root\",\n    response_model=UpdatedRoot,\n    tags=[\"Chain Editor\"],\n)\nasync def set_chain_root(chain_id: UUID, update_root: UpdateRoot):\n    # update old roots:\n    old_roots = ChainNode.objects.filter(chain_id=chain_id, root=True).exclude(\n        id__in=update_root.node_ids\n    )\n    old_root_ids = [\n        str(node_id) async for node_id in old_roots.values_list(\"id\", flat=True)\n    ]\n    remove_roots = old_roots.aupdate(root=False)\n    add_roots = ChainNode.objects.filter(\n        id__in=update_root.node_ids, root=False\n    ).aupdate(root=True)\n    await asyncio.gather(remove_roots, add_roots)\n    return UpdatedRoot(old_roots=old_root_ids, roots=update_root.node_ids)\n\n\n@router.post(\n    \"/chains/nodes\",\n    operation_id=\"add_node\",\n    response_model=NodePydantic,\n    tags=[\"Chain Editor\"],\n)\nasync def add_chain_node(node: AddNode):\n    if not node.chain_id:\n        chain = await create_chain_instance(\n            name=\"Unnamed\", description=\"\", alias=\"Unnamed\"\n        )\n        node.chain_id = chain.id\n\n    node_type = await NodeType.objects.aget(class_path=node.class_path)\n    new_node = ChainNode(node_type=node_type, **node.dict(exclude={\"edges\"}))\n    await new_node.asave()\n\n    # add edges to property connectors\n    if node.edges:\n        node_edges = []\n        for datum in node.edges:\n            # special case for edges to root pseudo-component\n            if datum.source_id == \"root\":\n                new_node.root = True\n                await new_node.asave(update_fields=[\"root\"])\n                continue\n\n            edge = ChainEdge(\n                id=datum.id,\n                source_key=datum.source_key,\n                target_key=datum.target_key,\n                source_id=datum.source_id or new_node.id,\n                target_id=datum.target_id or new_node.id,\n                chain_id=node.chain_id,\n                relation=\"LINK\" if datum.target_key in {\"in\", \"out\"} else \"PROP\",\n            )\n            node_edges.append(edge)\n        if node_edges:\n            await ChainEdge.objects.abulk_create(node_edges)\n\n    return NodePydantic.from_orm(new_node)\n\n\n@router.put(\n    \"/chains/nodes/{node_id}\",\n    operation_id=\"update_node\",\n    response_model=NodePydantic,\n    tags=[\"Chain Editor\"],\n)\nasync def update_chain_node(node_id: UUID, data: UpdateNode):\n    try:\n        existing_node = await ChainNode.objects.aget(id=node_id)\n    except ChainNode.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Node not found\")\n    as_dict = data.dict()\n    for field, value in as_dict.items():\n        setattr(existing_node, field, value)\n    await existing_node.asave(update_fields=as_dict.keys())\n    return NodePydantic.from_orm(existing_node)\n\n\n@router.post(\n    \"/chains/nodes/{node_id}/position\",\n    operation_id=\"move_node\",\n    response_model=NodePydantic,\n    tags=[\"Chain Editor\"],\n)\nasync def update_chain_node_position(node_id: UUID, data: PositionUpdate):\n    node = await ChainNode.objects.aget(id=node_id)\n    node.position = data.dict()\n    await node.asave(update_fields=[\"position\"])\n    return NodePydantic.from_orm(node)\n\n\n@router.delete(\n    \"/chains/nodes/{node_id}\",\n    operation_id=\"delete_node\",\n    response_model=DeletedItem,\n    tags=[\"Chain Editor\"],\n)\nasync def delete_chain_node(node_id: UUID):\n    node = await ChainNode.objects.aget(id=node_id)\n    if node:\n        edges = ChainEdge.objects.filter(Q(source_id=node_id) | Q(target_id=node_id))\n        await edges.adelete()\n        await node.adelete()\n    return DeletedItem(id=node_id)\n\n\n@router.post(\n    \"/chains/edges\",\n    operation_id=\"add_edge\",\n    response_model=EdgePydantic,\n    tags=[\"Chain Editor\"],\n)\nasync def add_chain_edge(data: EdgePydantic):\n    new_edge = ChainEdge(**data.dict())\n    await new_edge.asave()\n    return EdgePydantic.from_orm(new_edge)\n\n\n@router.put(\n    \"/chains/edges/{edge_id}\",\n    operation_id=\"update_edge\",\n    response_model=EdgePydantic,\n    tags=[\"Chain Editor\"],\n)\nasync def update_chain_edge(edge_id, data: UpdateEdge):\n    try:\n        existing_edge = await ChainEdge.objects.aget(id=edge_id)\n    except ChainEdge.DoesNotExist:\n        raise HTTPException(status_code=404, detail=\"Edge not found\")\n    as_dict = data.dict()\n    for field, value in as_dict.items():\n        setattr(existing_edge, field, value)\n    await existing_edge.asave(update_fields=as_dict.keys())\n    return EdgePydantic.from_orm(existing_edge)\n\n\n@router.delete(\n    \"/chains/edges/{edge_id}\",\n    operation_id=\"delete_edge\",\n    response_model=DeletedItem,\n    tags=[\"Chain Editor\"],\n)\nasync def delete_chain_edge(edge_id: UUID):\n    edge = await ChainEdge.objects.aget(id=edge_id)\n    if edge:\n        await edge.adelete()\n    return DeletedItem(id=edge_id)\n\n\n@router.get(\n    \"/chains/{chain_id}/graph\",\n    operation_id=\"get_chain_graph\",\n    response_model=GraphModel,\n    tags=[\"Chain Editor\"],\n)\nasync def get_chain_graph(chain_id: UUID):\n    \"\"\"Return chain and all it's nodes and edges.\"\"\"\n    chain = await Chain.objects.aget(id=chain_id)\n\n    nodes = []\n    node_queryset = ChainNode.objects.filter(chain_id=chain_id)\n    async for node in node_queryset:\n        nodes.append(NodePydantic.from_orm(node))\n\n    edges = []\n    edge_queryset = ChainEdge.objects.filter(chain_id=chain_id)\n    async for edge in edge_queryset:\n        edges.append(EdgePydantic.from_orm(edge))\n\n    types_in_chain = NodeType.objects.filter(chainnode__chain_id=chain_id)\n    types = [NodeTypePydantic.from_orm(node_type) async for node_type in types_in_chain]\n\n    # sync alias to chain object\n    chain_pydantic = ChainPydantic.from_orm(chain)\n    if chain.is_agent:\n        agent = await Agent.objects.aget(chain_id=chain_id, is_test=False)\n        chain_pydantic.alias = agent.alias\n\n    return GraphModel(\n        chain=chain_pydantic,\n        nodes=nodes,\n        edges=edges,\n        types=types,\n    )\n\n\nasync def _get_test_chat(chain_id: UUID, user: AbstractUser) -> Chat:\n    try:\n        chat = await Chat.filtered_owners(user).aget(\n            lead__chain_id=chain_id, lead__is_test=True\n        )\n    except Chat.DoesNotExist:\n        chain = await Chain.objects.aget(id=chain_id)\n        chat = await create_chain_chat(chain)\n    return chat\n\n\n@router.get(\n    \"/chains/{chain_id}/chat\",\n    operation_id=\"get_test_chat\",\n    response_model=ChatPydantic,\n    tags=[\"Chain Editor\"],\n)\nasync def get_chain_chat(\n    chain_id: UUID, user: AbstractUser = Depends(get_request_user)\n):\n    \"\"\"Return test chat instance for the chain\"\"\"\n    chat = await _get_test_chat(chain_id, user)\n    return ChatPydantic.from_orm(chat)\n\n\n@router.post(\n    \"/nodes/bulk\",\n    operation_id=\"get_nodes\",\n    response_model=GraphNodes,\n    tags=[\"Chain Editor\"],\n)\nasync def get_nodes(node_ids: List[UUID4], user: User = Depends(get_request_user)):\n    \"\"\"Return single node\"\"\"\n    \"\"\"Return list of nodes and their types for given node IDs\"\"\"\n    filtered_nodes = OwnedModel.filter_owners(\n        user, ChainNode.objects.all(), prefix=\"chain__\"\n    )\n    nodes = filtered_nodes.filter(id__in=node_ids)\n    node_pydantics = [NodePydantic.model_validate(node) async for node in nodes]\n\n    # Fetch types for these nodes\n    type_ids = {node.node_type_id for node in node_pydantics}\n    types = NodeType.objects.filter(id__in=type_ids)\n    type_pydantics = [NodeTypePydantic.model_validate(type_) async for type_ in types]\n\n    return GraphNodes(nodes=node_pydantics, types=type_pydantics)\n"}
