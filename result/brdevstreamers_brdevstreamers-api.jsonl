{"repo_info": {"repo_name": "brdevstreamers-api", "repo_owner": "brdevstreamers", "repo_url": "https://github.com/brdevstreamers/brdevstreamers-api"}}
{"type": "test_file", "path": "test/service/test_twitch_service.py", "content": "import unittest\nfrom unittest.mock import MagicMock, Mock, patch\nfrom dotenv import load_dotenv\nimport pytest\nfrom twitchAPI.twitch import Twitch\n\nfrom service.twitch_service import TwitchService\n\n\nclass TestTwitchService(unittest.TestCase):\n    def __init__(self, methodName: str = ...) -> None:\n        super().__init__(methodName)\n\n    def mock_twitch(self):\n        twitch = Mock()\n        response = {\n            \"data\": [\n                {\n                    \"id\": \"44960190524\",\n                    \"user_id\": \"166681140\",\n                    \"user_login\": \"marcobrunodev\",\n                    \"user_name\": \"MarcoBrunoDev\",\n                    \"game_id\": \"1469308723\",\n                    \"game_name\": \"Software and Game Development\",\n                    \"type\": \"live\",\n                    \"title\": \"#28 Pet Snoar | Pet Runner | !Alura\",\n                    \"viewer_count\": 158,\n                    \"started_at\": \"2022-03-14T11:00:48Z\",\n                    \"language\": \"pt\",\n                    \"thumbnail_url\": \"https://static-cdn.jtvnw.net/previews-ttv/live_user_marcobrunodev-{width}x{height}.jpg\",\n                    \"tag_ids\": [\n                        \"39ee8140-901a-4762-bfca-8260dea1310f\",\n                        \"a106f013-6e26-4f27-9a4b-01e9d76084e2\",\n                        \"6e23d976-33ec-47e8-b22b-3727acd41862\",\n                        \"f588bd74-e496-4d11-9169-3597f38a5d25\",\n                        \"6f86127d-6051-4a38-94bb-f7b475dde109\",\n                        \"c23ce252-cf78-4b98-8c11-8769801aaf3a\",\n                    ],\n                    \"is_mature\": 'false',\n                }\n            ],\n            \"pagination\": {\n                \"cursor\": \"eyJiIjp7IkN1cnNvciI6ImV5SnpJam94TlRndU1URXdOVEl3TlRreE9UZzFNRGdzSW1RaU9tWmhiSE5sTENKMElqcDBjblZsZlE9PSJ9LCJhIjp7IkN1cnNvciI6IiJ9fQ\"\n            },\n        }\n        twitch.get_streams = MagicMock(return_value=response)\n\n        streamer = {\"data\": [{\"profile_image_url\": '', 'description': ''}]}\n        twitch.get_users = MagicMock(return_value=streamer)\n        return twitch\n\n    def test_get_streamers(self):\n        twitch_service = TwitchService(self.mock_twitch())\n        streamers = twitch_service.get_streamers()\n        self.assertEqual(len(streamers), 1)\n        self.assertEqual(streamers[0].user_login, \"marcobrunodev\")\n"}
{"type": "source_file", "path": "main.py", "content": "import os\nimport uvicorn\nfrom dotenv import load_dotenv\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.middleware.gzip import GZipMiddleware\n\nload_dotenv()\n\n# from controller.private_api import app_private\nfrom controller.public_api import app_public\n\norigins = [\"*\"]\n\napp = FastAPI()\n\n# app.mount(\"/api\", app_private)\napp.mount(\"/public\", app_public)\n\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\napp.add_middleware(GZipMiddleware)\n\nif __name__ == '__main__':\n    if(os.environ[\"ENV\"] == 'prod'):\n        uvicorn.run(\"main:app\",\n                    host=\"0.0.0.0\",\n                    port=80,\n                    reload=True,\n                    ssl_keyfile=\"privkey.pem\",\n                    ssl_certfile=\"cert.pem\"\n                    )\n    else:\n        uvicorn.run(\"main:app\",\n                    host=\"0.0.0.0\",\n                    port=80,\n                    reload=True\n                    )\n"}
{"type": "source_file", "path": "controller/public_api.py", "content": "import os\nfrom typing import List\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom service.github_service import get_contributors\n\n# from service.stats_service import compute_stat, get_stats, get_stats_summary\nfrom service.twitch_service import TwitchService\nfrom view_model.stats_viewmodel import StatsViewModel\nfrom view_model.stream_viewmodel import StreamViewModel\nfrom view_model.tag_viewmodel import TagViewModel\nfrom view_model.vod_viewmodel import VodViewModel\nfrom twitchAPI.twitch import Twitch\n\n\norigins = [\"*\"]\n\napp_public = FastAPI(openapi_prefix=\"/public\")\ntwitch = Twitch(os.environ[\"CLIENT_ID\"], os.environ[\"CLIENT_SECRET\"])\n\napp_public.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n@app_public.get(\"/streams\", response_model=List[StreamViewModel])\nasync def streams():\n    twitch_service = TwitchService(twitch)\n    return twitch_service.get_streamers()\n\n\n@app_public.get(\"/vods\", response_model=List[VodViewModel])\nasync def vods():\n    twitch_service = TwitchService(twitch)\n    return twitch_service.get_vods()\n\n\n# @app_public.get(\"/stats\", response_model=List[StatsViewModel])\n# async def stats():\n#     return get_stats()\n\n\n@app_public.get(\"/tags\", response_model=List[TagViewModel])\nasync def tags():\n    twitch_service = TwitchService(twitch)\n    return twitch_service.get_tags()\n\n\n# @app_public.get(\"/stats/summary\")\n# async def stats_summary():\n#     return get_stats_summary()\n\n\n@app_public.get(\"/contributors\")\nasync def contributors():\n    return get_contributors()\n"}
{"type": "source_file", "path": "poc.py", "content": "from dotenv import dotenv_values\nfrom twitchAPI.twitch import Twitch\n\nconfig = dotenv_values(\".env\")\n\n\ntwitch = Twitch(os.environ[\"CLIENT_ID\"], os.environ[\"CLIENT_SECRET\"])\n\nusers = twitch.get_users(user_ids=[\"227168488\"])\n\n\nprint(users)\n"}
{"type": "source_file", "path": "controller/__init__.py", "content": ""}
{"type": "source_file", "path": "service/github_service.py", "content": "\nimport requests\n\n        \n\ndef get_contributors():\n    r_server = requests.get('https://api.github.com/repos/Br-Dev-Streamers/brdevstreamers/contributors')\n    contrib_server = r_server.json()\n\n    r_ui = requests.get('https://api.github.com/repos/Br-Dev-Streamers/brdevstreamers-ui/contributors')\n    contrib_ui = r_ui.json()\n    contributors_list = []\n\n    for c in contrib_server:\n        contributor = {\"name\": c['login'], \"image\": c[\"avatar_url\"]}\n        contributors_list.append(contributor)\n    \n    for c in contrib_ui:\n        contributor = {\"name\": c['login'], \"image\": c[\"avatar_url\"]}\n        contributors_list.append(contributor)\n\n    return contributors_list\n\n\n"}
{"type": "source_file", "path": "view_model/__init__.py", "content": ""}
{"type": "source_file", "path": "service/twitch_service.py", "content": "import json\nimport os\nfrom random import shuffle\nfrom typing import List\n\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.types import TimePeriod\n\n# from model.user_model import User\n# from persistence.user_dao import get_users_by_name\nfrom view_model.stream_viewmodel import StreamViewModel\nfrom view_model.tag_viewmodel import TagViewModel\nfrom view_model.vod_viewmodel import VodViewModel\n\n\nclass TwitchService:\n\n    config, twitch = None, None\n\n    def __init__(self, twitch):\n        self.twitch = twitch\n\n    def get_streamers(self) -> List[StreamViewModel]:\n        streams = self.twitch.get_streams(language=\"pt\", game_id=\"1469308723\")\n        streams_model: List[StreamViewModel] = []\n        stream_users = []\n        for s in streams[\"data\"]:\n            stream = StreamViewModel()\n            stream.id = s[\"id\"]\n            stream.user_id = s[\"user_id\"]\n            stream.user_name = s[\"user_name\"]\n            stream.user_login = s[\"user_login\"]\n            stream.title = s[\"title\"]\n            stream.viewer_count = s[\"viewer_count\"]\n            stream.started_at = s[\"started_at\"]\n            stream.thumbnail_url = s[\"thumbnail_url\"]\n\n            stream.tags = s[\"tag_ids\"]\n\n            streamer = self.get_streamer(s[\"user_id\"])\n            stream.profile_image_url = streamer[\"profile_image_url\"]\n            stream.description = streamer[\"description\"][:100] + \"...\"\n\n            stream_users.append(s[\"user_login\"])\n            streams_model.append(stream)\n\n        # try:\n        #     streamers = get_users_by_name(stream_users)\n        #     for s in streamers:\n        #         for stream in streams_model:\n        #             if stream.user_login == s.user_login:\n        #                 stream.github_url = s.github\n        #                 stream.twitter_url = s.twitter\n        #                 stream.instagram_url = s.instagram\n        #                 stream.linkedin_url = s.linkedin\n        #                 stream.discord_url = s.discord\n        #                 stream.bio = s.bio\n        #                 break\n        # except Exception as e:\n        #     print(e)\n        shuffle(streams_model)\n        return streams_model\n\n    def get_streamer(self, id):\n        return self.twitch.get_users(user_ids=[id])[\"data\"][0]\n\n    def get_vods(self) -> List[VodViewModel]:\n        vods = self.twitch.get_videos(language=\"pt\", game_id=\"1469308723\", period=TimePeriod.DAY)\n        vods_model: List[VodViewModel] = []\n        vod_users = []\n\n        for s in vods[\"data\"]:\n            if self.is_long_enough(s[\"duration\"]):\n                stream = VodViewModel()\n                stream.id = s[\"id\"]\n                stream.user_id = s[\"user_id\"]\n                stream.user_name = s[\"user_name\"]\n                stream.user_login = s[\"user_login\"]\n                stream.title = s[\"title\"]\n                stream.viewer_count = s[\"view_count\"]\n                stream.started_at = s[\"published_at\"]\n                stream.thumbnail_url = s[\"thumbnail_url\"]\n                stream.stream_id = s[\"id\"]\n                stream.duration = s[\"duration\"]\n\n                streamer = self.get_streamer(s[\"user_id\"])\n                stream.profile_image_url = streamer[\"profile_image_url\"]\n                stream.description = streamer[\"description\"][:100] + \"...\"\n\n                vod_users.append(s[\"user_login\"])\n                vods_model.append(stream)\n        # try:\n        #     streamers = get_users_by_name(vod_users)\n        #     for s in streamers:\n        #         for stream in vods_model:\n        #             if stream.user_login == s.user_login:\n        #                 stream.github_url = s.github\n        #                 stream.twitter_url = s.twitter\n        #                 stream.instagram_url = s.instagram\n        #                 stream.linkedin_url = s.linkedin\n        #                 stream.discord_url = s.discord\n        #                 stream.bio = s.bio\n        #                 break\n        # except Exception as e:\n        #     print(e)\n        return vods_model\n\n    def is_long_enough(self, duration):\n        return \"h\" in duration\n\n    def get_tags(self) -> List[TagViewModel]:\n        # streams = self.twitch.get_streams(language=\"pt\", game_id=\"1469308723\")\n        # tag_ids = self.get_tag_list_from_streams(streams)\n        # tags = self.twitch.get_all_stream_tags(tag_ids=tag_ids)\n        # tags_dict = {}\n        # for tag in tags[\"data\"]:\n        #     tag_model = TagViewModel(id=tag[\"tag_id\"], name=tag[\"localization_names\"][\"pt-br\"])\n        #     tags_dict[tag[\"tag_id\"]] = tag_model\n        return {}\n        # return list(tags_dict.values())\n\n    def get_tag_list_from_streams(self, streams):\n        tag_ids = []\n        try:\n            for s in streams[\"data\"]:\n                for tag in s[\"tag_ids\"]:\n                    tag_ids.append(tag)\n        except Exception as e:\n            print(e)\n        return tag_ids\n"}
{"type": "source_file", "path": "service/__init__.py", "content": ""}
{"type": "source_file", "path": "service/stats_service.py", "content": "import os\nfrom typing import List\n\nfrom peewee import *\n\nfrom model.user_interaction_model import UserInteraction\nfrom view_model.stats_viewmodel import StatsViewModel\n\n\ndb = PostgresqlDatabase(\n    os.environ[\"DB_NAME\"],\n    user=os.environ[\"DB_USER\"],\n    password=os.environ[\"DB_PASS\"],\n    host=os.environ[\"DB_HOST\"],\n    port=os.environ[\"DB_PORT\"],\n)\n\n\ndef get_stats() -> List[StatsViewModel]:\n    cursor = db.execute_sql(\n        \"SELECT distinct s.target_user, \"\n        + \"(SELECT count(*) FROM userinteraction WHERE target_user = s.target_user AND type = 'STREAM_CLICK'),\"\n        + \"(SELECT count(*) FROM userinteraction WHERE target_user = s.target_user AND type = 'VOD_CLICK'),\"\n        + \"(SELECT count(*) FROM userinteraction WHERE target_user = s.target_user AND type = 'PREVIEW_CLICK')\"\n        + \"FROM userinteraction s ORDER BY s.target_user\"\n    )\n\n    stats: List[StatsViewModel] = []\n\n    for row in cursor.fetchall():\n        stat = StatsViewModel()\n        stat.user_login = row[0]\n        stat.stream_clicks = row[1]\n        stat.vod_clicks = row[2]\n        stat.preview_clicks = row[3]\n        stats.append(stat)\n    return stats\n\n\ndef get_stats_summary():\n    streams = UserInteraction.select().where(UserInteraction.type == \"STREAM_CLICK\").count()\n    vods = UserInteraction.select().where(UserInteraction.type == \"VOD_CLICK\").count()\n    previews = UserInteraction.select().where(UserInteraction.type == \"PREVIEW\").count()\n    stats_summary = {\"streams\": streams, \"vods\": vods, \"previews\": previews}\n    return stats_summary\n\n\ndef compute_stat(stat: UserInteraction):\n    db_stat = (\n        UserInteraction.select()\n        .where(\n            UserInteraction.target_user == stat.target_user,\n            UserInteraction.type == stat.type,\n            UserInteraction.date == stat.date,\n            UserInteraction.interaction_fingerprint == stat.interaction_fingerprint,\n        )\n        .count()\n    )\n    if db_stat == 0:\n        return UserInteraction.create(\n            user_login=stat.user_login,\n            date=stat.date,\n            target_user=stat.target_user,\n            type=stat.type,\n            interaction_fingerprint=stat.interaction_fingerprint,\n        )\n    return None\n"}
{"type": "source_file", "path": "view_model/stats_viewmodel.py", "content": "from typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass StatsViewModel(BaseModel):\n    user_login: Optional[str]\n    stream_clicks: Optional[int]\n    vod_clicks: Optional[int]\n    preview_clicks: Optional[int]\n"}
{"type": "source_file", "path": "view_model/user_interaction_viewmodel.py", "content": "from datetime import datetime\nfrom typing import Optional\nfrom xmlrpc.client import DateTime\n\nfrom pydantic import BaseModel\n\n\nclass UserInteractionViewModel(BaseModel):\n    user_login: str\n    target_user: Optional[str]\n    date: datetime\n    type: str\n    interaction_fingerprint: str\n"}
{"type": "source_file", "path": "view_model/stream_viewmodel.py", "content": "from typing import List, Optional\n\nfrom view_model.user_viewmodel import UserOutViewModel\n\n\nclass StreamViewModel(UserOutViewModel):\n    id: Optional[str]\n    user_id: Optional[str]\n    user_name: Optional[str]\n    title: Optional[str]\n    viewer_count: Optional[int]\n    started_at: Optional[str]\n    thumbnail_url: Optional[str]\n    profile_image_url: Optional[str]\n    description: Optional[str]\n    tags: Optional[List[str]]\n"}
{"type": "source_file", "path": "view_model/user_viewmodel.py", "content": "from typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass UpdateUserViewModel(BaseModel):\n    user_login: str\n    email: str\n    bio: Optional[str]\n    discord: Optional[str]\n    instagram: Optional[str]\n    linkedin: Optional[str]\n    github: Optional[str]\n    twitter: Optional[str]\n\n\nclass UserOutViewModel(BaseModel):\n    user_login: Optional[str]\n    email: Optional[str]\n    bio: Optional[str]\n    github_url: Optional[str]\n    twitter_url: Optional[str]\n    instagram_url: Optional[str]\n    linkedin_url: Optional[str]\n    discord_url: Optional[str]\n"}
{"type": "source_file", "path": "view_model/vod_viewmodel.py", "content": "from typing import Optional\n\nfrom view_model.user_viewmodel import UserOutViewModel\n\n\nclass VodViewModel(UserOutViewModel):\n    id: Optional[str]\n    user_id: Optional[str]\n    user_name: Optional[str]\n    title: Optional[str]\n    viewer_count: Optional[int]\n    started_at: Optional[str]\n    thumbnail_url: Optional[str]\n    profile_image_url: Optional[str]\n    description: Optional[str]\n    stream_id: Optional[str]\n    duration: Optional[str]\n"}
{"type": "source_file", "path": "view_model/tag_viewmodel.py", "content": "from typing import Optional\n\nfrom pydantic import BaseModel\n\n\nclass TagViewModel(BaseModel):\n    name: Optional[str]\n    id: Optional[str]\n"}
