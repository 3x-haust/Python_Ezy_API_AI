{"repo_info": {"repo_name": "breakfastapi", "repo_owner": "MariiaSizova", "repo_url": "https://github.com/MariiaSizova/breakfastapi"}}
{"type": "test_file", "path": "test_recipes.py", "content": "from fastapi.testclient import TestClient\n\nfrom .main import app\n\nclient = TestClient(app)\n\n\ndef test_recipes_id():\n    \"\"\"\n    This method tests the response by recipe id requests.\n    \"\"\"\n    response = client.get(\"/2\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"status\":200,\n        \"recipe\":{\"id\":2,\"name\":\"Applesauce Bread I Recipe\",\"total_duration\":80,\"ingredients\":[\"raisin\",\"baking soda\",\"white sugar\",\"applesauce\",\"sour cream\",\"flour\",\"egg\",\"baking powder\",\"vegetable oil\",\"cinnamon\"],\"directions\":\"Preheat oven to 350 degrees F (175 degrees C).  Grease and flour two 9 x 5 inch loaf pans.Beat together eggs, sugar, and oil.  Blend in applesauce, and then sour cream or buttermilk.  Mix in flour, baking powder, soda, and cinnamon. Stir in raisins. Pour batter into prepared pans.Bake for 80 minutes.  Cool on wire racks.\"}\n    }\n\ndef test_recipes_id_not_found():\n    \"\"\"\n    This method tests the response from invalid requests.\n    \"\"\"\n    response = client.get(\"/16000\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"status\":404,\n        \"message\":\"recipe not found\"\n    }\n    \ndef test_unprocessable_entity():\n    \"\"\"\n    This method tests respose from Unprocessable Entity requests.\n    \"\"\"\n    response = client.get(\"/wrong_request\")\n    assert response.status_code == 422\n\n    \n     \n"}
{"type": "source_file", "path": "__init__.py", "content": ""}
{"type": "source_file", "path": "db/__init__.py", "content": ""}
{"type": "source_file", "path": "models/error.py", "content": "from pydantic import BaseModel\n\nclass ResponseError(BaseModel):\n    status: int\n    message: str\n\n\nclass NotFoundResponse(ResponseError):\n    class Config:\n        schema_extra = {\"example\": {\"status\": 404, \"message\": \"recipe not found\"}}\n"}
{"type": "source_file", "path": "models/recipe.py", "content": "from pydantic import BaseModel\nfrom typing import List\n\n\nclass Recipe(BaseModel):\n    id: int\n    name: str\n    total_duration: int\n    ingredients: list\n    directions: str\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"id\": 5490,\n                \"name\": \"Tongue and Mustard Sandwiches Recipe\",\n                \"total_duration\": 150,\n                \"ingredients\": [\"salt\", \"onion\", \"mustard\", \"bread\", \"beef\"],\n                \"directions\": \"Rinse beef tongue and place in a large pot. Cover with water and add the salt and chopped onion...\",\n            }\n        }\n\n\nclass RecipeResponse(BaseModel):\n    status: int\n    recipe: Recipe\n\nclass RecipesRequest(int):\n    limit = 5\n\nclass RecipesResponse(BaseModel):\n    status: int\n    results: List[Recipe]\n    "}
{"type": "source_file", "path": "db/database.py", "content": "import sqlite3\nimport json\nfrom typing import Union, List\n\nfrom models.recipe import RecipeResponse\n\nDB: str = \"db/recipes.db\"\n\n\ndef fetch_random_recipe() -> dict:\n    \"\"\"\n    Returns a recipe dict.\n    \"\"\"\n    with sqlite3.connect(DB, check_same_thread=False) as conn:\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM items ORDER BY RANDOM() LIMIT 1\")\n        data = cursor.fetchone()\n        return {\n            \"id\": data[0],\n            \"name\": normalize_string(data[1]),\n            \"total_duration\": data[2],\n            \"ingredients\": json.loads(\n                data[3].replace(\"'\", '\"')\n            ),  # convert string list to python list\n            \"directions\": data[4],\n        }\n\n\ndef fetch_recipe_by_id(id: int) -> Union[dict, None]:\n    \"\"\"\n    Returns a single recipe dict or None if id not found.\n    \"\"\"\n    with sqlite3.connect(DB, check_same_thread=False) as conn:\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM items WHERE id = ?\", (id,))\n        data = cursor.fetchone()\n        if data is not None:\n            return {\n                \"id\": data[0],\n                \"name\": normalize_string(data[1]),\n                \"total_duration\": data[2],\n                \"ingredients\": json.loads(\n                    data[3].replace(\"'\", '\"')\n                ),  # convert string list to python list\n                \"directions\": data[4],\n            }\n        else:\n            return None\n\n\ndef fetch_recipes(limit: int) -> Union[List[dict], None]:\n    \"\"\"\n    Returns multiple recipes dict (RecipesResponse).\n    \"\"\"\n    recipes = []\n    with sqlite3.connect(DB, check_same_thread=False) as conn:\n        cursor = conn.cursor()\n        for data in cursor.execute(f\"SELECT * FROM items ORDER BY RANDOM() LIMIT {limit}\"):\n            recipes.append({\n                \"id\": data[0],\n                \"name\": normalize_string(data[1]),\n                \"total_duration\": data[2],\n                \"ingredients\": json.loads(\n                    data[3].replace(\"'\", '\"')\n                ),  # convert string list to python list\n                \"directions\": data[4],\n            })\n    return recipes\n\n\ndef normalize_string(s: str) -> str:\n    \"\"\"\n    Function to normalize strings by removing extra quotes and trailing spaces.\n    \"\"\"\n    if s.startswith(\"'\") and s.endswith(\"'\"):\n        return s.replace(\"'\", \"\", 2).rstrip(\"'\").strip()\n    return s.rstrip()\n"}
{"type": "source_file", "path": "main.py", "content": "import uvicorn\nfrom fastapi import FastAPI\nfrom typing import Union\n\nfrom db.database import fetch_random_recipe, fetch_recipe_by_id, fetch_recipes\nfrom models.recipe import Recipe, RecipeResponse, RecipesResponse, RecipesRequest\nfrom models.error import NotFoundResponse\nfrom starlette.responses import FileResponse\n\n\napp = FastAPI()\nfavicon_path = 'images/favicon.ico'\n\n\n@app.get('/favicon.ico')\nasync def favicon():\n    return FileResponse(favicon_path)\n\n\n@app.get(\"/\", response_model=RecipeResponse, responses={200: {\"model\": RecipeResponse}})\n@app.get(\"/recipes\", response_model=RecipeResponse, responses={200: {\"model\": RecipeResponse}})\ndef get_random_recipe() -> RecipeResponse:\n    \"\"\"\n    This function returns a random recipe from the database.\n    ---\n    Args: None\n    Returns:\n        dict: A dictionary containing status code and recipe. \n    \"\"\"\n    recipe: Recipe = fetch_random_recipe()\n    return {\"status\": 200, \"recipe\": recipe}\n\n\n@app.get(\"/{id}\",\n    response_model=Union[RecipeResponse, NotFoundResponse],\n    responses={200: {\"model\": RecipeResponse}, 404: {\"model\": NotFoundResponse}},\n)\ndef get_recipe_by_id(id: int) -> dict:\n    \"\"\"\n    This function returns a recipe from the database by id.\n    ---\n    Args:\n        id (int): id of the recipe passed as a path parameter.\n    Returns:\n        dict: A dictionary containing status code and a recipe.\n    \"\"\"\n    recipe: Recipe = fetch_recipe_by_id(id)\n    if recipe is not None:\n        return {\"status\": 200, \"recipe\": recipe}\n    return {\"status\": 404, \"message\": \"recipe not found\"}\n\n\n@app.get(\"/recipes/{limit}\",\n    response_model=Union[RecipesResponse, NotFoundResponse],\n    responses={200: {\"model\": RecipesResponse}, 404: {\"model\": NotFoundResponse}},\n)\ndef get_recipes(limit: RecipesRequest) -> RecipesResponse:\n    \"\"\"\n    This function returns multiple recipes from the database.\n    ---\n    Args:\n        limit (int): numbers of recipes to be returned.\n    Returns:\n        RecipesResponse: A dictionary containing status code and multiple recipes. \n    \"\"\"\n    recipes = fetch_recipes(limit)\n    if len(recipes):\n        return {\"status\": 200, \"results\": recipes}\n    return {\"status\": 404, \"message\": \"recipe not found\"}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000, reload=True)\n"}
