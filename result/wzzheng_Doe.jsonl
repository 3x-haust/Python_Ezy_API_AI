{"repo_info": {"repo_name": "Doe", "repo_owner": "wzzheng", "repo_url": "https://github.com/wzzheng/Doe"}}
{"type": "source_file", "path": "configs/nusc.py", "content": "max_frame = 5\n\ntasks_config = {\n    'plan': {\n        'init': [True] * max_frame,\n        'image': [True] * max_frame,\n        'desc': [False] * (max_frame-1) + [True],\n        'cf': [False] * max_frame,\n        'qa': [False] * max_frame,\n        'action': [False] * (max_frame-1) + [True],\n        'plan': [True] * max_frame\n    }, \n    \n    'qa': {\n        'init': [True] * max_frame,\n        'image': [True] * max_frame,\n        'desc': [True] * max_frame,\n        'cf': [False] * max_frame,\n        'qa': [True] * max_frame,\n        'action': [True] * max_frame,\n        'plan': [True] * max_frame\n    }, \n\n    'counterfactual': {\n        'init': [True] * max_frame,\n        'image': [True] * max_frame,\n        'desc': [True] * max_frame,\n        'cf': [True] * max_frame,\n        'qa': [False] * max_frame,\n        'action': [True] * max_frame,\n        'plan': [True] * max_frame\n    },\n\n    'Draw': {\n        'init': [True] * max_frame,\n        'image': [True] * max_frame,\n        'desc': [True] * max_frame,\n        'cf': [False] * max_frame,\n        'qa': [False] * max_frame,\n        'action': [True] * max_frame,\n        'plan': [True] * max_frame\n    }\n}\n\ndo_generate = {\n    'plan': {\n        'init': [False] * max_frame,\n        'image': [False] * max_frame,\n        'desc': [False] * (max_frame-1) + [True],\n        'cf': [False] * max_frame,\n        'qa': [False] * max_frame,\n        'action': [False] * max_frame,\n        'plan': [False] * (max_frame-1) + [True]\n    }, \n\n    'qa': {\n        'init': [False] * max_frame,\n        'image': [False] * max_frame,\n        'desc': [True] * max_frame,\n        'cf': [False] * max_frame,\n        'qa': [True] * max_frame,\n        'action': [True] * max_frame,\n        'plan': [False] * max_frame\n    }, \n\n    'counterfactual': {\n        'init': [False] * max_frame,\n        'image': [False] * max_frame,\n        'desc': [True] * max_frame,\n        'cf': [True] * max_frame,\n        'qa': [False] * max_frame,\n        'action': [False] * max_frame,\n        'plan': [False] * max_frame\n    }, \n\n    'Draw': {\n        'init': [False] * max_frame,\n        'image': [True] * max_frame,\n        'desc': [True] * max_frame,\n        'cf': [False] * max_frame,\n        'qa': [False] * max_frame,\n        'action': [False] * max_frame,\n        'plan': [False] * max_frame\n    }\n}\n\ngeneration_configs = {\n    'plan': {\n        'settings': {\n            'max_gen_len': 5,\n            'temperature': 0.,\n            'do_sample': False\n        },\n        'processor': {\n            'text_top_k': 1\n        }\n    },\n\n    'desc': {\n        'settings': {\n            'max_gen_len': 1024,\n            'temperature': .3,\n        },\n        'processor': {\n            'text_top_k': 3\n        }\n    },\n\n    'action': {\n        'settings': {\n            'max_gen_len': 1024,\n            'temperature': .5,\n        },\n        'processor': {\n            'text_top_k': 5\n        }\n    },\n\n    'qa': {\n        'settings': {\n            'max_gen_len': 1024,\n            'temperature': .5,\n        },\n        'processor': {\n            'text_top_k': 5\n        }\n    },\n\n    'cf': {\n        'settings': {\n            'max_gen_len': 1024,\n            'temperature': .3,\n        },\n        'processor': {\n            'text_top_k': 3\n        }\n    },\n\n    'image': {\n        'settings': {\n            'max_gen_len': 1100,\n            'temperature': .5,\n        },\n        'processor': {\n            'image_top_k': 200\n        }\n    }\n\n}"}
{"type": "source_file", "path": "dataset/data_utils.py", "content": "import re\n\ndef process_coords(raw):\n    matches = re.findall(r'\\(([+-]?\\d*\\.?\\d+)\\s*,\\s*([+-]?\\d*\\.?\\d+)\\)', raw)\n    coords = [[float(x), float(y)] for x, y in matches]\n    modified = re.sub(r'\\(([+-]?\\d*\\.?\\d+)\\s*,\\s*([+-]?\\d*\\.?\\d+)\\)', '<|loc|>', raw)\n    return coords, modified\n\ndef process_desc(desc):\n    banned = ['rear', 'Behind', 'behind', 'right-rear', 'left-rear']\n    sentences = desc.split('. ')\n    filtered = []\n    for s in sentences:\n        f = True\n        for b in banned:\n            if b in s:\n                f = False\n                break\n        if f:\n            filtered.append(s)\n    new_desc = ''\n    for s in filtered:\n        new_desc += s\n        new_desc += '. '\n    new_desc = new_desc[:-2]\n    return new_desc\n\ndef check_range(rmin, rmax, coords):\n    for c in coords:\n        for x in c:\n            if not rmin < x < rmax:\n                return False\n    return True"}
{"type": "source_file", "path": "inference/metrics.py", "content": "import math\nimport evaluate\nfrom pycocoevalcap.cider.cider import Cider\n\ndef calc_l2(plan, gt):\n    l2 = [0.] * 6\n    for i, p in enumerate(plan):\n        l2[i] += math.sqrt((p[0] - gt[i][0])**2 + (p[1] - gt[i][1])**2)\n    return l2\n\ndef eval_qa(preds, refs, metric='rouge'):\n    # To avoid download config from huggingface, download the metric config on github\n    # and load it locally\n    # evaluator = evaluate.load('rouge.py')\n\n    # for Cider, simply use\n    # evaluator = Cider()\n    \n    if metric == 'cider':\n        predictions, references = {}, {}\n        for i, p in enumerate(predictions):\n            predictions[i] = p\n            references[i] = refs[i]\n        evaluator = Cider()\n        return {'cider': evaluator.compute_score(references, predictions)[0]}\n    \n    evaluator = evaluate.load(metric)\n    # TODO: lower batch size\n    # TODO: support more metrics\n    return evaluator.compute(predictions=preds, references=refs)\n    "}
{"type": "source_file", "path": "inference/utils.py", "content": "import torch\n\ndef process_prompt(processor, qas, images=[], plans=[], locs=[], bos=True):\n    conversations = []\n\n    for q, a in qas:\n        conversations.append(\n            {\n                \"from\": \"human\",\n                \"value\": q,\n            }\n        )\n        conversations.append(\n            {\n                \"from\": \"gpt\",\n                \"value\": a,\n            }\n        )\n\n    item = {\"image\": images, \"conversations\": conversations, \"plan\": plans, \"loc\": locs}\n\n    _prompt = processor.process_item(item, bos=bos)\n    prompt = []\n\n    for value in _prompt:\n        if isinstance(value, int):\n            prompt.append(value)\n        else:\n            prompt += value[\"input_ids\"]\n    prompt = torch.tensor(prompt, dtype=torch.int64, device='cuda').unsqueeze(0)\n    return prompt\n\ndef encode_mask(processor):\n    mask_tokens = ''\n    max_frames = 5\n    # 3 plan tokens and 2 special tokens\n    mask_len = 5 \n\n    for i in range(max_frames):\n        for j in range(mask_len):\n            mask_tokens += f\"<reserved{14696+i}>\"\n    \n    return mask_tokens, process_prompt(processor, [[mask_tokens, None]], bos=False)\n\ndef decode_plans(plans):\n\n    ps = plans.split('>')\n    ts = list()\n\n    for i, p in enumerate(ps):\n        if i % 5 != 0 and i % 5 != 4:\n            ts.append(int(p[-5:]))\n\n    decoded = list()\n\n    for i, t in enumerate(ts):\n        if i % 3 == 0:\n            decoded.append([])\n        if i % 3 != 2:\n            decoded[-1].append((t-10500)/50.-20)\n        else:\n            decoded[-1].append((t-15000)/100.-1.7)\n    \n    return decoded\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon/__init__.py", "content": "# Copyright 2024 Meta Inc. and The HuggingFace Inc. team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nfrom typing import TYPE_CHECKING\n\nfrom transformers.utils import OptionalDependencyNotAvailable, _LazyModule, is_torch_available, is_vision_available\n\n_import_structure = {\n    \"configuration_chameleon\": [\"ChameleonConfig\", \"ChameleonVQVAEConfig\"],\n    \"processing_chameleon\": [\"ChameleonProcessor\"],\n}\n\n\ntry:\n    if not is_torch_available():\n        raise OptionalDependencyNotAvailable()\nexcept OptionalDependencyNotAvailable:\n    pass\nelse:\n    _import_structure[\"modeling_chameleon\"] = [\n        \"ChameleonForConditionalGeneration\",\n        \"ChameleonModel\",\n        \"ChameleonPreTrainedModel\",\n        \"ChameleonVQVAE\",\n    ]\n\ntry:\n    if not is_vision_available():\n        raise OptionalDependencyNotAvailable()\nexcept OptionalDependencyNotAvailable:\n    pass\nelse:\n    _import_structure[\"image_processing_chameleon\"] = [\"ChameleonImageProcessor\"]\n\n\nif TYPE_CHECKING:\n    from .configuration_chameleon import ChameleonConfig, ChameleonVQVAEConfig\n    from .processing_chameleon import ChameleonProcessor\n\n    try:\n        if not is_torch_available():\n            raise OptionalDependencyNotAvailable()\n    except OptionalDependencyNotAvailable:\n        pass\n    else:\n        from .modeling_chameleon import (\n            ChameleonForConditionalGeneration,\n            ChameleonModel,\n            ChameleonPreTrainedModel,\n            ChameleonVQVAE,\n        )\n\n    try:\n        if not is_vision_available():\n            raise OptionalDependencyNotAvailable()\n    except OptionalDependencyNotAvailable:\n        pass\n    else:\n        from .image_processing_chameleon import ChameleonImageProcessor\n\n\nelse:\n    import sys\n\n    sys.modules[__name__] = _LazyModule(__name__, globals()[\"__file__\"], _import_structure, module_spec=__spec__)\n"}
{"type": "source_file", "path": "dataset/gen_data.py", "content": "from random import random\nimport json\nimport argparse\nimport os\nimport pickle\nimport sys\n\nfrom tqdm import tqdm\n\nfrom data_utils import process_coords, process_desc, check_range\n\nclass QA:\n    def __init__(self, question=None, answer=None, task=None,\n                 image=None, plan=None, coords=None, id=None):\n        \n        self.q = question\n        self.a = answer\n        self.image = image if not image is None else []\n        self.plan = plan if not plan is None else []\n        self.coords = coords if not coords is None else [[], []]\n        self.task = task\n        \n        # other\n        self.id = id\n        # self.range = (-20, 60)\n        \n    def extract_coords(self, data_range=(-20, 60)):\n        \n        c_q, text_q = process_coords(self.q)\n        c_a, text_a = process_coords(self.a)\n        self.q = text_q\n        self.a = text_a\n        self.coords = [c_q, c_a]\n        return len(c_q) > 0 and check_range(*data_range, c_q) and check_range(*data_range, c_a)\n    \n    def from_dict(self, d):\n        for k, v in d.items():\n            self.__setattr__(k, v)\n\n    def insert_coords(self):\n        # to do\n        pass\n            \n\n\ndef main(args):\n    info_path = args.info_path\n    qa_path = args.qa_path\n    nusc_path = args.nusc_path\n    save_path = args.save_path\n    record_list = list()\n\n    with open(info_path, 'rb') as f:\n        data = pickle.load(f)['infos']\n\n    with open('dataset/prompt.json', 'r') as f:\n        prompt = json.load(f)\n\n    conv = list()\n    view, task = 'CAM_FRONT', 'val'\n\n    max_length = args.max_length # 5 for planning\n    for i, sample in tqdm(enumerate(data[:-10])):\n        conv = list()\n        if sample['frame_idx']+10 != data[i+10]['frame_idx']:\n            continue\n        while len(conv) < max_length:                \n            info = list()\n            token = sample['token']\n            # generate image\n            info.append(QA(prompt['generate_scene'] if len(conv) == 0 else prompt['image'], \n                        '<|image|>', task='init' if len(conv) == 0 else 'image',\n                        image=[os.path.join(nusc_path, sample['cams'][view][\"data_path\"][16:])]))\n            \n            # generate desc\n            desc_path = os.path.join(qa_path, 'desc', task, f'{token}.json')\n            with open(desc_path, 'r') as f:\n                desc_action = json.load(f)\n            desc = process_desc(desc_action['description'])\n            action = desc_action['action']\n            info.append(QA(prompt['desc'], desc, task='desc'))\n\n            # generate counterfactual\n            vqa_path = os.path.join(qa_path, 'vqa', task, f'{token}.json')\n            if os.path.exists(vqa_path):\n                with open(vqa_path, 'r') as f:\n                    vqas = json.load(f)\n                for vqa in vqas:\n                    qa = QA(vqa['question'], vqa['answer'], task='cf')\n                    if qa.extract_coords():\n                        info.append(qa)\n\n            # generate qas\n            conv_path = os.path.join(qa_path, 'conv', task, f'{token}.json')\n            with open(conv_path, 'r') as f:\n                convs = json.load(f)\n            for qa in convs:\n                info.append(QA(qa['question'], qa['answer'], task='qa'))\n\n            # generate action\n            info.append(QA(prompt['action'], action, task='action'))\n            # generate plan\n            plans = sample['gt_planning'][0].tolist()\n            info.append(QA(prompt['plan'], '<|plan|>', task='plan', plan=[plans], id=i+len(conv)))\n\n            info = list(map(vars, info))\n            conv.append(info)\n            # print(info)\n            \n            sample = data[i+len(conv)]\n            \n        record_list.append(conv)\n    \n    with open(save_path, 'w', encoding='utf-8') as f:\n        json.dump(record_list, f, ensure_ascii=False, indent=4)\n    \n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--info_path', type=str, help='Path to infos.pkl.')\n    parser.add_argument('--qa_path', type=str, help='Path to conversation data.')\n    parser.add_argument('--nusc_path', type=str, help='Path to nuscenes dataset.')\n    parser.add_argument('--save_path', type=str, help='Path to save processed data.')\n    parser.add_argument('--max_length', type=int, default=1, help='Frames of conversations.')\n\n    args = parser.parse_args()\n    main(args)"}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon_vae_ori/__init__.py", "content": "from .image_tokenizer import ImageTokenizer\nfrom .vocab import VocabInfo, VocabTranslation\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon_vae_ori/vocab.py", "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the Chameleon License found in the\n# LICENSE file in the root directory of this source tree.\n\nfrom functools import cached_property\n\nimport torch\n\n\nclass VocabInfo:\n    def __init__(self, vocab_map: dict[str, int]):\n        self.name2val = vocab_map\n\n        self.bos_id = vocab_map.get(\"<s>\")\n        self.eos_id = vocab_map.get(\"</s>\")\n        self.boi_id = vocab_map.get(\"<racm3:break>\")\n        self.eoi_id = vocab_map.get(\"<eoss>\")\n        self.pad_id = vocab_map.get(\"<pad>\")\n        self.eot_id = vocab_map.get(\"<reserved08706>\")\n\n    @property\n    def begin_sequence(self) -> int:\n        return self.bos_id\n\n    @property\n    def end_sequence(self) -> int:\n        return self.eos_id\n\n    @property\n    def begin_image(self) -> int:\n        return self.boi_id\n\n    @property\n    def end_image(self) -> int:\n        return self.eoi_id\n\n    @property\n    def padding(self) -> int:\n        return self.pad_id\n\n    @property\n    def end_turn(self) -> int:\n        return self.eot_id\n\n    @cached_property\n    def val2name(self) -> dict[int, str]:\n        return {v: k for k, v in self.name2val.items()}\n\n    @cached_property\n    def all_tokens(self) -> list[int]:\n        return sorted(self.name2val.values())\n\n    @cached_property\n    def image_tokens(self) -> list[int]:\n        return sorted([val for name, val in self.name2val.items() if name.startswith(\"IMGIMG\")])\n\n    @cached_property\n    def special_tokens(self) -> list[int]:\n        return sorted([val for name, val in self.name2val.items() if name.startswith(\"<\") and name != \"<\"])\n\n    @cached_property\n    def text_tokens(self) -> list[int]:\n        return sorted(set(self.all_tokens) - set(self.image_tokens) - set(self.special_tokens))\n\n\nclass VocabTranslation:\n    def __init__(self, vocab_info: VocabInfo, device: str | None = None):\n        self._vocab = vocab_info\n        self._device = device\n\n    @cached_property\n    def bpe2img(self) -> dict[int, int]:\n        img_tkn_chr_mapping = {chr(ord(\"A\") + i): str(i) for i in range(10)}\n\n        def remap(old_name: str) -> str:\n            return \"\".join(img_tkn_chr_mapping.get(c, c) for c in old_name[len(\"IMGIMG\") : -1])\n\n        return {tok: int(remap(self._vocab.val2name[tok])) for tok in self._vocab.image_tokens}\n\n    @cached_property\n    def img2bpe(self) -> dict[int, int]:\n        return {v: k for k, v in self.bpe2img.items()}\n\n    @cached_property\n    def bpe2img_search_tensors(self) -> tuple[torch.Tensor, torch.Tensor]:\n        sorted_bpe = torch.tensor(sorted(self.bpe2img.keys()), device=self._device)\n        sorted_img = torch.tensor(sorted(self.bpe2img.values()), device=self._device)\n        return sorted_bpe, sorted_img\n\n    @cached_property\n    def img2bpe_mapping_tensor(self) -> torch.LongTensor:\n        mapping = torch.zeros(\n            max(self.img2bpe.keys()) + 1,\n            dtype=torch.int,\n            device=self._device,\n        )\n        for k, v in self.img2bpe.items():\n            mapping[k] = v\n        return mapping\n\n    def convert_bpe2img(self, bpe_batch: torch.Tensor) -> torch.Tensor:\n        bpe_tok, img_tok = self.bpe2img_search_tensors\n        return img_tok[torch.searchsorted(bpe_tok, bpe_batch)]\n\n    def convert_img2bp2(self, img_batch: torch.Tensor) -> torch.Tensor:\n        return self.img2bpe_mapping_tensor[img_batch]\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/__init__.py", "content": "from .configuration_xllmx_chameleon import ChameleonXLLMXConfig\nfrom .modeling_xllmx_chameleon import ChameleonXLLMXForConditionalGeneration\n"}
{"type": "source_file", "path": "model/lumina_mgpt/inference_solver.py", "content": "import argparse\nimport copy\nimport math\nfrom typing import List, Optional, Union\n\nfrom PIL import Image\nimport torch\nimport transformers\nfrom transformers import GenerationConfig, TextStreamer\nfrom transformers.generation.logits_process import LogitsProcessor, LogitsProcessorList, LogitsWarper\n\nfrom model.lumina_mgpt.data.item_processor import FlexARItemProcessor\nfrom model.lumina_mgpt.model.chameleon import ChameleonForConditionalGeneration\n\n\nclass LLMImageStartTriggeredUnbatchedClassifierFreeGuidanceLogitsProcessor(LogitsProcessor):\n    r\"\"\"\n    Logits processor for Classifier-Free Guidance (CFG). The processors computes a weighted average across scores\n    from prompt conditional and prompt unconditional (or negative) logits, parameterized by the `guidance_scale`.\n    The unconditional scores are computed internally by prompting `model` with the `unconditional_ids` branch.\n\n    See [the paper](https://arxiv.org/abs/2306.17806) for more information.\n    \"\"\"\n\n    def __init__(\n        self,\n        guidance_scale: float,\n        model,\n        image_start_token_id,\n        image_end_token_id,\n        image_next_line_token_id,\n        patch_size,\n        unconditional_ids: Optional[torch.LongTensor] = None,\n        unconditional_attention_mask: Optional[torch.LongTensor] = None,\n        use_cache: Optional[bool] = True,\n    ):\n        self.guidance_scale = guidance_scale\n        self.model = model\n        self.unconditional_context_backup = {\n            \"input_ids\": unconditional_ids,\n            \"attention_mask\": unconditional_attention_mask,\n            \"use_cache\": use_cache,\n            \"past_key_values\": transformers.DynamicCache() if use_cache else None,\n            \"first_pass\": True,\n        }\n        self.unconditional_context = None\n\n        self.nums_image_start_tokens = None\n\n        self.image_start_token_id = image_start_token_id\n        self.image_end_token_id = image_end_token_id\n        self.image_next_line_token_id = image_next_line_token_id\n        self.image_start_token_id_index = None\n        self.patch_size = patch_size\n        self.h_latent_dim = None\n        self.w_latent_dim = None\n\n    def get_unconditional_logits(self, input_ids, image_start_token_id_index):\n\n        if self.unconditional_context[\"first_pass\"]:\n            if self.unconditional_context[\"input_ids\"] is None:\n                self.unconditional_context[\"input_ids\"] = input_ids[:, image_start_token_id_index:]\n            if self.unconditional_context[\"attention_mask\"] is None:\n                self.unconditional_context[\"attention_mask\"] = torch.ones_like(\n                    self.unconditional_context[\"input_ids\"], dtype=torch.long\n                )\n            input_ids = self.unconditional_context[\"input_ids\"]\n            attention_mask = self.unconditional_context[\"attention_mask\"]\n            self.unconditional_context[\"first_pass\"] = False\n        else:\n            attention_mask = torch.cat(\n                [\n                    self.unconditional_context[\"attention_mask\"],\n                    torch.ones_like(input_ids[:, -1:], dtype=torch.long),\n                ],\n                dim=1,\n            )\n            if not self.unconditional_context[\"use_cache\"]:\n                input_ids = torch.cat([self.unconditional_context[\"input_ids\"], input_ids[:, -1:]], dim=1)\n            else:\n                input_ids = input_ids[:, -1:]\n            self.unconditional_context[\"input_ids\"] = input_ids\n            self.unconditional_context[\"attention_mask\"] = attention_mask\n\n        out = self.model(\n            input_ids,\n            attention_mask=attention_mask,\n            use_cache=self.unconditional_context[\"use_cache\"],\n            past_key_values=self.unconditional_context[\"past_key_values\"],\n        )\n        self.unconditional_context[\"past_key_values\"] = out.get(\"past_key_values\", None)\n\n        return out.logits\n\n    def __call__(self, input_ids, scores):\n        num_image_start_tokens = (input_ids[0] == self.image_start_token_id).sum()\n        num_image_end_tokens = (input_ids[0] == self.image_end_token_id).sum()\n\n        if num_image_start_tokens == num_image_end_tokens:\n            self.h_latent_dim, self.w_latent_dim = None, None\n            self.image_start_token_id_index = None\n            self.unconditional_context = None\n            return scores\n\n        elif num_image_start_tokens == num_image_end_tokens + 1:\n            if self.image_start_token_id_index is None:\n                self.image_start_token_id_index = torch.where(input_ids[0] == self.image_start_token_id)[0][-1].item()\n            new_token_num = len(input_ids[0][self.image_start_token_id_index + 1 :])\n            if new_token_num >= 2:\n                if self.h_latent_dim is None or self.w_latent_dim is None:\n                    h_grids, w_grids = (\n                        input_ids[0][self.image_start_token_id_index + 1] - 8804,\n                        input_ids[0][self.image_start_token_id_index + 2] - 8804,\n                    )\n                    self.h_latent_dim, self.w_latent_dim = h_grids * 2, w_grids * 2\n\n                if self.unconditional_context is None:\n                    self.unconditional_context = copy.deepcopy(self.unconditional_context_backup)\n\n                if self.guidance_scale == 1.0:\n                    return scores\n\n                unconditional_logits = self.get_unconditional_logits(input_ids, self.image_start_token_id_index)[:, -1]\n\n                scores_processed = self.guidance_scale * (scores - unconditional_logits) + unconditional_logits\n                return scores_processed\n\n        else:\n            print(\"Something wrong in the decoding process.\")\n\n        return scores\n\n\nclass MultiModalLogitsProcessor(LogitsProcessor):\n\n    def __init__(\n        self,\n        image_start_token_id=None,\n        image_end_token_id=None,\n        image_next_line_token_id=None,\n        patch_size=None,\n        voc_size=None,\n    ):\n        self.image_start_token_id = image_start_token_id\n        self.image_end_token_id = image_end_token_id\n        self.image_next_line_token_id = image_next_line_token_id\n        self.image_start_token_id_index = None\n        self.patch_size = patch_size\n        self.h_latent_dim = None\n        self.w_latent_dim = None\n\n        self.vocab_list = [i for i in range(voc_size)]\n        self.image_token_list = [i for i in range(4, 8195 + 1)]\n        self.suppress_tokens = torch.tensor(\n            [x for x in self.vocab_list if x not in self.image_token_list], device=\"cuda\"\n        )\n\n        self.vocab_tensor = torch.arange(voc_size, device=\"cuda\")\n        self.suppress_token_mask = torch.isin(self.vocab_tensor, self.suppress_tokens)\n        self.new_line_force_token_mask = torch.isin(\n            self.vocab_tensor, torch.tensor([self.image_next_line_token_id], device=\"cuda\")\n        )\n        self.eos_image_force_token_mask = torch.isin(\n            self.vocab_tensor, torch.tensor([self.image_end_token_id], device=\"cuda\")\n        )\n\n        self.flag = False\n        self.num_image_start_tokens = None\n        self.num_image_end_tokens = None\n\n    # @add_start_docstrings(LOGITS_PROCESSOR_INPUTS_DOCSTRING)\n    def __call__(self, input_ids: torch.LongTensor, scores: torch.FloatTensor) -> torch.FloatTensor:\n        self.num_image_start_tokens = (input_ids[0] == self.image_start_token_id).sum()\n        self.num_image_end_tokens = (input_ids[0] == self.image_end_token_id).sum()\n\n        # print(self.num_image_start_tokens, self.num_image_end_tokens)\n\n        if self.num_image_start_tokens == self.num_image_end_tokens:\n            self.h_latent_dim, self.w_latent_dim = None, None\n            self.image_start_token_id_index = None\n            return scores\n\n        elif self.num_image_start_tokens == self.num_image_end_tokens + 1:\n            if self.image_start_token_id_index is None:\n                self.image_start_token_id_index = torch.where(input_ids[0] == self.image_start_token_id)[0]\n                print(self.image_start_token_id_index)\n                self.image_start_token_id_index = torch.where(input_ids[0] == self.image_start_token_id)[0][-1].item()\n\n            new_token_num = len(input_ids[0][self.image_start_token_id_index + 1 :])\n            # print(f\"num new tokens: {new_token_num}\")\n            if new_token_num >= 2:\n                if self.h_latent_dim is None or self.w_latent_dim is None:\n                    h_grids, w_grids = (\n                        input_ids[0][self.image_start_token_id_index + 1] - 8804,\n                        input_ids[0][self.image_start_token_id_index + 2] - 8804,\n                    )\n                    # print(f\"h_grids: {h_grids}, w_grids: {w_grids}\")\n                    self.h_latent_dim, self.w_latent_dim = h_grids * 2, w_grids * 2\n                    # print(f\"h_latent_dim: {self.h_latent_dim}, w_latent_dim: {self.w_latent_dim}\")\n\n                tokens = input_ids[0][self.image_start_token_id_index + 3 :]\n                if (len(tokens) + 1) % (self.w_latent_dim + 1) == 0:\n                    new_line_constrained_scores = torch.full_like(scores, -math.inf)\n                    new_line_constrained_scores[:, self.image_next_line_token_id] = 0\n                    # print(f\"new line: {len(tokens)+1}\")\n                    return new_line_constrained_scores\n                elif (len(tokens) + 1) == (self.w_latent_dim + 1) * self.h_latent_dim + 1:\n                    eos_image_constrained_scores = torch.full_like(scores, -math.inf)\n                    eos_image_constrained_scores[:, self.image_end_token_id] = 0\n                    # print(f\"eos image: {len(tokens)+1}\")\n                    return eos_image_constrained_scores\n                elif (len(tokens) + 1) % (self.w_latent_dim + 1) != 0:\n                    image_constrained_scores = torch.where(self.suppress_token_mask, -float(\"inf\"), scores)\n                    return image_constrained_scores\n        else:\n            print(\"Something wrong in the decoding process.\")\n\n        return scores\n\n\nclass InterleavedTopKLogitsWarper(LogitsWarper):\n    r\"\"\"\n    [`LogitsWarper`] that performs top-k, i.e. restricting to the k highest probability elements. Often used together\n    with [`TemperatureLogitsWarper`] and [`TopPLogitsWarper`].\n    \"\"\"\n\n    def __init__(\n        self,\n        image_top_k: int,\n        text_top_k: int,\n        image_start_token_id=None,\n        image_end_token_id=None,\n        filter_value: float = -float(\"Inf\"),\n        min_tokens_to_keep: int = 1,\n    ):\n        if not isinstance(text_top_k, int) or text_top_k <= 0:\n            raise ValueError(f\"`text_top_k` has to be a strictly positive integer, but is {text_top_k}\")\n        if not isinstance(image_top_k, int) or text_top_k <= 0:\n            raise ValueError(f\"`image_top_k` has to be a strictly positive integer, but is {image_top_k}\")\n\n        self.image_top_k = max(image_top_k, min_tokens_to_keep)\n        self.text_top_k = max(text_top_k, min_tokens_to_keep)\n        self.filter_value = filter_value\n\n        self.image_start_token_id = image_start_token_id\n        self.image_end_token_id = image_end_token_id\n\n        self.flag = False\n        self.num_image_start_tokens = None\n        self.num_image_end_tokens = None\n\n    # @add_start_docstrings(LOGITS_PROCESSOR_INPUTS_DOCSTRING)\n    def __call__(self, input_ids: torch.LongTensor, scores: torch.FloatTensor) -> torch.FloatTensor:\n\n        self.num_image_start_tokens = (input_ids[0] == self.image_start_token_id).sum()\n        self.num_image_end_tokens = (input_ids[0] == self.image_end_token_id).sum()\n\n        if self.num_image_start_tokens == self.num_image_end_tokens + 1:\n            top_k = min(self.image_top_k, scores.size(-1))\n        else:\n            top_k = min(self.text_top_k, scores.size(-1))  # Safety check\n        # Remove all tokens with a probability less than the last token of the top-k\n        indices_to_remove = scores < torch.topk(scores, top_k)[0][..., -1, None]\n        scores_processed = scores.masked_fill(indices_to_remove, self.filter_value)\n        return scores_processed\n\n\nclass FlexARInferenceSolver:\n    @classmethod\n    def get_args_parser(cls):\n        parser = argparse.ArgumentParser(\"xllmx Inference\", add_help=False)\n        parser.add_argument(\"--model_path\", type=str)\n        parser.add_argument(\"--precision\", type=str, choices=[\"fp16\", \"bf16\", \"tf32\"], default=\"bf16\")\n\n        return parser\n\n    def __init__(self, model_path, precision, target_size=512, device=\"cuda\"):\n        self.dtype = {\"bf16\": torch.bfloat16, \"fp16\": torch.float16, \"fp32\": torch.float32}[precision]\n\n        self.model = ChameleonForConditionalGeneration.from_pretrained(\n            model_path,\n            torch_dtype=self.dtype,\n            device_map=device,\n        )\n        self.item_processor = FlexARItemProcessor(target_size=target_size)\n\n    def get_streamer(self):\n        return TextStreamer(self.item_processor.tokenizer)\n\n    @torch.no_grad()\n    def generate(\n        self,\n        qas,\n        max_gen_len,\n        temperature,\n        images=[],\n        plans=[],\n        locs=[],\n        do_sample=True,\n        logits_processor=None,\n        streamer=None,\n        add_last_sep=True,\n        past_key_values=None,\n        past_tokens=None\n    ):\n\n        conversations = []\n        for q, a in qas:\n            conversations.append(\n                {\n                    \"from\": \"human\",\n                    \"value\": q,\n                }\n            )\n            conversations.append(\n                {\n                    \"from\": \"gpt\",\n                    \"value\": a,\n                }\n            )\n        item = {\"image\": images, \"conversations\": conversations, \"plan\": plans, \"loc\": locs}\n\n        _prompt = self.item_processor.process_item(item, add_last_sep=add_last_sep, bos=not(past_tokens is None))\n        prompt = []\n        for value in _prompt:\n            if isinstance(value, int):\n                prompt.append(value)\n            else:\n                prompt += value[\"input_ids\"]\n        \n        prompt = torch.tensor(prompt, dtype=torch.int64, device=self.model.device).unsqueeze(0)\n        if not past_tokens is None:\n            prompt = torch.cat((past_tokens, prompt), dim=1)\n\n        prompt_len = prompt.shape[1]\n        if not do_sample:\n            temperature = None\n        generation_config = GenerationConfig(\n            max_new_tokens=max_gen_len,\n            max_length=self.model.config.max_position_embeddings,\n            temperature=temperature,\n            top_k=None,\n            do_sample=do_sample,\n            eos_token_id=[8710],\n        )\n        \n        if logits_processor is None:\n            logits_processor = self.create_logits_processor()\n\n        with torch.cuda.amp.autocast(dtype=self.dtype):\n            generation_result = self.model.generate(\n                prompt, generation_config, logits_processor=logits_processor, streamer=streamer, use_cache=True, return_dict_in_generate=True, past_key_values=past_key_values)\n            # )[0][prompt_len:].tolist()\n            gen_tokens = generation_result.sequences[0][prompt_len:].tolist()\n            # new_pask_key_value = generation_result.\n            if len(gen_tokens) > 0 and gen_tokens[-1] == 8710:\n                gen_tokens = gen_tokens[:-1]\n\n        return self.decode_ids(gen_tokens), generation_result.sequences, generation_result.past_key_values\n\n    def decode_ids(self, tokens: List[int]):\n        generated_images = []\n        generation_result_processed = []\n        i = 0\n        while i < len(tokens):\n            token_id = tokens[i]\n            if token_id == self.item_processor.token2id(self.item_processor.image_start_token):\n                cache = []\n                for j in range(i + 1, len(tokens)):\n                    if tokens[j] != self.item_processor.token2id(self.item_processor.image_end_token):\n                        cache.append(tokens[j])\n                        i = j + 1\n                    else:\n                        image = self.decode_image(cache)\n                        generated_images.append(image)\n                        generation_result_processed.append(self.item_processor.token2id(\"<|image|>\"))\n                        i = j + 1\n                        break\n            else:\n                generation_result_processed.append(token_id)\n                i += 1\n\n        generated = self.item_processor.tokenizer.decode(generation_result_processed)\n\n        return generated, generated_images\n\n    def decode_image(self, tokens: List[int]):\n        return self.item_processor.decode_image(tokens)\n\n    @staticmethod\n    def create_image_grid(images, rows, cols):\n        width, height = images[0].size\n\n        grid_img = Image.new(\"RGB\", (cols * width, rows * height))\n\n        for i, img in enumerate(images):\n            row = i // cols\n            col = i % cols\n            grid_img.paste(img, (col * width, row * height))\n\n        return grid_img\n\n    def create_logits_processor(self, cfg=3.0, image_top_k=2000, text_top_k=10):\n        logits_processor = LogitsProcessorList()\n\n        cfg_processor = LLMImageStartTriggeredUnbatchedClassifierFreeGuidanceLogitsProcessor(\n            guidance_scale=cfg,\n            model=self.model,\n            image_start_token_id=self.item_processor.token2id(self.item_processor.image_start_token),\n            image_end_token_id=self.item_processor.token2id(self.item_processor.image_end_token),\n            image_next_line_token_id=self.item_processor.token2id(self.item_processor.new_line_token),\n            patch_size=32,\n        )\n\n        candidate_processor = MultiModalLogitsProcessor(\n            image_start_token_id=self.item_processor.token2id(self.item_processor.image_start_token),\n            image_end_token_id=self.item_processor.token2id(self.item_processor.image_end_token),\n            image_next_line_token_id=self.item_processor.token2id(self.item_processor.new_line_token),\n            patch_size=32,\n            voc_size=self.model.config.vocab_size,\n        )\n\n        topk_processor = InterleavedTopKLogitsWarper(\n            image_top_k=image_top_k,\n            text_top_k=text_top_k,\n            image_start_token_id=self.item_processor.token2id(self.item_processor.image_start_token),\n            image_end_token_id=self.item_processor.token2id(self.item_processor.image_end_token),\n        )\n\n        logits_processor.append(cfg_processor)\n        logits_processor.append(candidate_processor)\n        logits_processor.append(topk_processor)\n\n        return logits_processor\n\n\nif __name__ == \"__main__\":\n    parser = FlexARInferenceSolver.get_args_parser()\n    args = parser.parse_args()\n    solver = FlexARInferenceSolver(**vars(args))\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon/processing_chameleon.py", "content": "# coding=utf-8\n# Copyright 2024 Meta Inc. and The HuggingFace Inc. team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"\nProcessor class for Chameleon.\n\"\"\"\n\nfrom typing import List, Optional, Union\n\nfrom transformers.feature_extraction_utils import BatchFeature\nfrom transformers.image_utils import ImageInput\nfrom transformers.processing_utils import ProcessorMixin\nfrom transformers.tokenization_utils_base import PaddingStrategy, PreTokenizedInput, TextInput, TruncationStrategy\nfrom transformers.utils import TensorType\n\n\nclass ChameleonProcessor(ProcessorMixin):\n    r\"\"\"\n    Constructs a Chameleon processor which wraps a Chameleon image processor and a Chameleon tokenizer into a single\n    processor.\n\n    [`ChameleonProcessor`] offers all the functionalities of [`ChameleonImageProcessor`] and [`LlamaTokenizerFast`].\n    See the [`~ChameleonProcessor.__call__`] and [`~ChameleonProcessor.decode`] for more information.\n\n    Args:\n        image_processor ([`ChameleonImageProcessor`]):\n            The image processor is a required input.\n        tokenizer ([`LlamaTokenizerFast`]):\n            The tokenizer is a required input.\n        image_seq_length (`int`, *optional*, defaults to 1024):\n            Sequence length of one image embedding.\n        image_token (`str`, *optional*, defaults to `\"<image>\"`):\n            The special token used to indicate image in the text.\n    \"\"\"\n\n    attributes = [\"image_processor\", \"tokenizer\"]\n    tokenizer_class = (\"LlamaTokenizer\", \"LlamaTokenizerFast\")\n    image_processor_class = \"ChameleonImageProcessor\"\n\n    def __init__(self, image_processor, tokenizer, image_seq_length: int = 1024, image_token: str = \"<image>\"):\n        self.image_seq_length = image_seq_length\n        self.image_token = image_token\n        self.image_start_token = \"<racm3:break>\"  # fixed tokens for start and end, so can hardcode\n        self.image_end_token = \"<eoss>\"\n        super().__init__(image_processor, tokenizer)\n\n    def __call__(\n        self,\n        text: Union[TextInput, PreTokenizedInput, List[TextInput], List[PreTokenizedInput]] = None,\n        images: ImageInput = None,\n        padding: Union[bool, str, PaddingStrategy] = False,\n        truncation: Union[bool, str, TruncationStrategy] = None,\n        max_length: int = None,\n        return_tensors: Optional[Union[str, TensorType]] = TensorType.PYTORCH,\n        return_for_text_completion: bool = False,\n    ) -> BatchFeature:\n        \"\"\"\n        Main method to prepare for the model one or several sequences(s) and image(s). This method forwards the `text`\n        and `kwargs` arguments to LlamaTokenizerFast's [`~LlamaTokenizerFast.__call__`] if `text` is not `None` to encode\n        the text. To prepare the image(s), this method forwards the `images` and `kwrags` arguments to\n        CLIPImageProcessor's [`~CLIPImageProcessor.__call__`] if `images` is not `None`. Please refer to the doctsring\n        of the above two methods for more information.\n\n        Args:\n            text (`str`, `List[str]`, `List[List[str]]`):\n                The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings\n                (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set\n                `is_split_into_words=True` (to lift the ambiguity with a batch of sequences).\n            images (`PIL.Image.Image`, `np.ndarray`, `torch.Tensor`, `List[PIL.Image.Image]`, `List[np.ndarray]`, `List[torch.Tensor]`):\n                The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch\n                tensor. Both channels-first and channels-last formats are supported.\n            padding (`bool`, `str` or [`~utils.PaddingStrategy`], *optional*, defaults to `False`):\n                Select a strategy to pad the returned sequences (according to the model's padding side and padding\n                index) among:\n                - `True` or `'longest'`: Pad to the longest sequence in the batch (or no padding if only a single\n                  sequence if provided).\n                - `'max_length'`: Pad to a maximum length specified with the argument `max_length` or to the maximum\n                  acceptable input length for the model if that argument is not provided.\n                - `False` or `'do_not_pad'` (default): No padding (i.e., can output a batch with sequences of different\n                  lengths).\n            max_length (`int`, *optional*):\n                Maximum length of the returned list and optionally padding length (see above).\n            truncation (`bool`, *optional*):\n                Activates truncation to cut input sequences longer than `max_length` to `max_length`.\n            return_tensors (`str` or [`~utils.TensorType`], *optional*):\n                If set, will return tensors of a particular framework. Acceptable values are:\n\n                - `'tf'`: Return TensorFlow `tf.constant` objects.\n                - `'pt'`: Return PyTorch `torch.Tensor` objects.\n                - `'np'`: Return NumPy `np.ndarray` objects.\n                - `'jax'`: Return JAX `jnp.ndarray` objects.\n\n        Returns:\n            [`BatchFeature`]: A [`BatchFeature`] with the following fields:\n\n            - **input_ids** -- List of token ids to be fed to a model. Returned when `text` is not `None`.\n            - **attention_mask** -- List of indices specifying which tokens should be attended to by the model (when\n              `return_attention_mask=True` or if *\"attention_mask\"* is in `self.model_input_names` and if `text` is not\n              `None`).\n            - **pixel_values** -- Pixel values to be fed to a model. Returned when `images` is not `None`.\n        \"\"\"\n        if isinstance(text, str):\n            text = [text]\n        elif not isinstance(text, list) and not isinstance(text[0], str):\n            raise TypeError(\"Invalid input text. Please provide a string, or a list of strings\")\n\n        # Replace the image token with the expanded image token sequence\n        prompt_strings = []\n        one_img_tokens = self.image_start_token + (self.image_token * self.image_seq_length) + self.image_end_token\n        for sample in text:\n            sample = sample.replace(self.image_token, one_img_tokens)\n            if not return_for_text_completion:\n                sample += self.tokenizer.sep_token  # special Chameleon treatment to add sep for chat mode\n            prompt_strings.append(sample)\n\n        data = self.tokenizer(\n            prompt_strings,\n            return_tensors=return_tensors,\n            padding=padding,\n            truncation=truncation,\n            max_length=max_length,\n        )\n\n        if images is not None:\n            pixel_values = self.image_processor(images, return_tensors=return_tensors)[\"pixel_values\"]\n            data[\"pixel_values\"] = pixel_values\n\n        return BatchFeature(data=data, tensor_type=return_tensors)\n\n    # Copied from transformers.models.clip.processing_clip.CLIPProcessor.batch_decode with CLIP->Llama\n    def batch_decode(self, *args, **kwargs):\n        \"\"\"\n        This method forwards all its arguments to LlamaTokenizerFast's [`~PreTrainedTokenizer.batch_decode`]. Please\n        refer to the docstring of this method for more information.\n        \"\"\"\n        return self.tokenizer.batch_decode(*args, **kwargs)\n\n    # Copied from transformers.models.clip.processing_clip.CLIPProcessor.decode with CLIP->Llama\n    def decode(self, *args, **kwargs):\n        \"\"\"\n        This method forwards all its arguments to LlamaTokenizerFast's [`~PreTrainedTokenizer.decode`]. Please refer to\n        the docstring of this method for more information.\n        \"\"\"\n        return self.tokenizer.decode(*args, **kwargs)\n\n    @property\n    # Copied from transformers.models.clip.processing_clip.CLIPProcessor.model_input_names\n    def model_input_names(self):\n        tokenizer_input_names = self.tokenizer.model_input_names\n        image_processor_input_names = self.image_processor.model_input_names\n        return list(dict.fromkeys(tokenizer_input_names + image_processor_input_names))\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon/image_processing_chameleon.py", "content": "# coding=utf-8\n# Copyright 2024 Meta Inc. and The HuggingFace Inc. team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Image processor class for Chameleon.\"\"\"\n\nfrom typing import Dict, List, Optional, Union\n\nimport numpy as np\nfrom transformers.image_processing_utils import BaseImageProcessor, BatchFeature, get_size_dict\nfrom transformers.image_transforms import get_resize_output_image_size, resize, to_channel_dimension_format\nfrom transformers.image_utils import (\n    ChannelDimension,\n    ImageInput,\n    PILImageResampling,\n    infer_channel_dimension_format,\n    is_scaled_image,\n    is_valid_image,\n    to_numpy_array,\n    valid_images,\n    validate_kwargs,\n    validate_preprocess_arguments,\n)\nfrom transformers.utils import TensorType, is_vision_available, logging\n\nlogger = logging.get_logger(__name__)\n\nif is_vision_available():\n    import PIL\n\n\ndef make_batched_images(images) -> List[List[ImageInput]]:\n    \"\"\"\n    Accepts images in list or nested list format, and makes a list of images for preprocessing.\n\n    Args:\n        images (`Union[List[List[ImageInput]], List[ImageInput], ImageInput]`):\n            The input image.\n\n    Returns:\n        list: A list of images.\n    \"\"\"\n    if isinstance(images, (list, tuple)) and isinstance(images[0], (list, tuple)) and is_valid_image(images[0][0]):\n        return [img for img_list in images for img in img_list]\n\n    elif isinstance(images, (list, tuple)) and is_valid_image(images[0]):\n        return images\n\n    elif is_valid_image(images):\n        return [images]\n\n    raise ValueError(f\"Could not make batched video from {images}\")\n\n\nclass ChameleonImageProcessor(BaseImageProcessor):\n    r\"\"\"\n    Constructs a Chameleon image processor.\n\n    Args:\n        do_resize (`bool`, *optional*, defaults to `True`):\n            Whether to resize the image's (height, width) dimensions to the specified `size`. Can be overridden by\n            `do_resize` in the `preprocess` method.\n        size (`Dict[str, int]` *optional*, defaults to `{\"shortest_edge\": 512}`):\n            Size of the image after resizing. The shortest edge of the image is resized to size[\"shortest_edge\"], with\n            the longest edge resized to keep the input aspect ratio. Can be overridden by `size` in the `preprocess`\n            method.\n        resample (`PILImageResampling`, *optional*, defaults to 1):\n            Resampling filter to use if resizing the image. Can be overridden by `resample` in the `preprocess` method.\n        do_center_crop (`bool`, *optional*, defaults to `True`):\n            Whether to center crop the image to the specified `crop_size`. Can be overridden by `do_center_crop` in the\n            `preprocess` method.\n        crop_size (`Dict[str, int]` *optional*, defaults to {\"height\": 512, \"width\": 512}):\n            Size of the output image after applying `center_crop`. Can be overridden by `crop_size` in the `preprocess`\n            method.\n        do_rescale (`bool`, *optional*, defaults to `True`):\n            Whether to rescale the image by the specified scale `rescale_factor`. Can be overridden by `do_rescale` in\n            the `preprocess` method.\n        rescale_factor (`int` or `float`, *optional*, defaults to 0.0078):\n            Scale factor to use if rescaling the image. Can be overridden by `rescale_factor` in the `preprocess`\n            method.\n        do_normalize (`bool`, *optional*, defaults to `True`):\n            Whether to normalize the image. Can be overridden by `do_normalize` in the `preprocess` method.\n        image_mean (`float` or `List[float]`, *optional*, defaults to `[1.0, 1.0, 1.0]`):\n            Mean to use if normalizing the image. This is a float or list of floats the length of the number of\n            channels in the image. Can be overridden by the `image_mean` parameter in the `preprocess` method.\n        image_std (`float` or `List[float]`, *optional*, defaults to `[1.0, 1.0, 1.0]`):\n            Standard deviation to use if normalizing the image. This is a float or list of floats the length of the\n            number of channels in the image. Can be overridden by the `image_std` parameter in the `preprocess` method.\n            Can be overridden by the `image_std` parameter in the `preprocess` method.\n        do_convert_rgb (`bool`, *optional*, defaults to `True`):\n            Whether to convert the image to RGB.\n    \"\"\"\n\n    model_input_names = [\"pixel_values\"]\n\n    def __init__(\n        self,\n        do_resize: bool = True,\n        size: Dict[str, int] = None,\n        resample: PILImageResampling = PIL.Image.LANCZOS,\n        do_center_crop: bool = True,\n        crop_size: Dict[str, int] = None,\n        do_rescale: bool = True,\n        rescale_factor: Union[int, float] = 0.0078,\n        do_normalize: bool = True,\n        image_mean: Optional[Union[float, List[float]]] = None,\n        image_std: Optional[Union[float, List[float]]] = None,\n        do_convert_rgb: bool = True,\n        **kwargs,\n    ) -> None:\n        super().__init__(**kwargs)\n        size = size if size is not None else {\"shortest_edge\": 512}\n        size = get_size_dict(size, default_to_square=False)\n        crop_size = crop_size if crop_size is not None else {\"height\": 512, \"width\": 512}\n        crop_size = get_size_dict(crop_size, default_to_square=True, param_name=\"crop_size\")\n\n        self.do_resize = do_resize\n        self.size = size\n        self.resample = resample\n        self.do_center_crop = do_center_crop\n        self.crop_size = crop_size\n        self.do_rescale = do_rescale\n        self.rescale_factor = rescale_factor\n        self.do_normalize = do_normalize\n        self.image_mean = image_mean if image_mean is not None else [1.0, 1.0, 1.0]\n        self.image_std = image_std if image_std is not None else [1.0, 1.0, 1.0]\n        self.do_convert_rgb = do_convert_rgb\n        self._valid_processor_keys = [\n            \"images\",\n            \"do_resize\",\n            \"size\",\n            \"resample\",\n            \"do_center_crop\",\n            \"crop_size\",\n            \"do_rescale\",\n            \"rescale_factor\",\n            \"do_normalize\",\n            \"image_mean\",\n            \"image_std\",\n            \"do_convert_rgb\",\n            \"return_tensors\",\n            \"data_format\",\n            \"input_data_format\",\n        ]\n\n    # Copied from transformers.models.clip.image_processing_clip.CLIPImageProcessor.resize\n    def resize(\n        self,\n        image: np.ndarray,\n        size: Dict[str, int],\n        resample: PILImageResampling = PILImageResampling.BICUBIC,\n        data_format: Optional[Union[str, ChannelDimension]] = None,\n        input_data_format: Optional[Union[str, ChannelDimension]] = None,\n        **kwargs,\n    ) -> np.ndarray:\n        \"\"\"\n        Resize an image. The shortest edge of the image is resized to size[\"shortest_edge\"], with the longest edge\n        resized to keep the input aspect ratio.\n\n        Args:\n            image (`np.ndarray`):\n                Image to resize.\n            size (`Dict[str, int]`):\n                Size of the output image.\n            resample (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BICUBIC`):\n                Resampling filter to use when resiizing the image.\n            data_format (`str` or `ChannelDimension`, *optional*):\n                The channel dimension format of the image. If not provided, it will be the same as the input image.\n            input_data_format (`ChannelDimension` or `str`, *optional*):\n                The channel dimension format of the input image. If not provided, it will be inferred.\n        \"\"\"\n        default_to_square = True\n        if \"shortest_edge\" in size:\n            size = size[\"shortest_edge\"]\n            default_to_square = False\n        elif \"height\" in size and \"width\" in size:\n            size = (size[\"height\"], size[\"width\"])\n        else:\n            raise ValueError(\"Size must contain either 'shortest_edge' or 'height' and 'width'.\")\n\n        output_size = get_resize_output_image_size(\n            image,\n            size=size,\n            default_to_square=default_to_square,\n            input_data_format=input_data_format,\n        )\n        return resize(\n            image,\n            size=output_size,\n            resample=resample,\n            data_format=data_format,\n            input_data_format=input_data_format,\n            **kwargs,\n        )\n\n    def preprocess(\n        self,\n        images: ImageInput,\n        do_resize: bool = None,\n        size: Dict[str, int] = None,\n        resample: PILImageResampling = None,\n        do_center_crop: bool = None,\n        crop_size: int = None,\n        do_rescale: bool = None,\n        rescale_factor: float = None,\n        do_normalize: bool = None,\n        image_mean: Optional[Union[float, List[float]]] = None,\n        image_std: Optional[Union[float, List[float]]] = None,\n        do_convert_rgb: bool = None,\n        return_tensors: Optional[Union[str, TensorType]] = None,\n        data_format: Optional[ChannelDimension] = ChannelDimension.FIRST,\n        input_data_format: Optional[Union[str, ChannelDimension]] = None,\n        **kwargs,\n    ) -> PIL.Image.Image:\n        \"\"\"\n        Preprocess an image or batch of images.\n\n        Args:\n            images (`ImageInput`):\n                Image to preprocess. Expects a single or batch of images with pixel values ranging from 0 to 255. If\n                passing in images with pixel values between 0 and 1, set `do_rescale=False`.\n            do_resize (`bool`, *optional*, defaults to `self.do_resize`):\n                Whether to resize the image.\n            size (`Dict[str, int]`, *optional*, defaults to `self.size`):\n                Size of the image after resizing. Shortest edge of the image is resized to size[\"shortest_edge\"], with\n                the longest edge resized to keep the input aspect ratio.\n            resample (`int`, *optional*, defaults to `self.resample`):\n                Resampling filter to use if resizing the image. This can be one of the enum `PILImageResampling`. Only\n                has an effect if `do_resize` is set to `True`.\n            do_center_crop (`bool`, *optional*, defaults to `self.do_center_crop`):\n                Whether to center crop the image.\n            crop_size (`Dict[str, int]`, *optional*, defaults to `self.crop_size`):\n                Size of the center crop. Only has an effect if `do_center_crop` is set to `True`.\n            do_rescale (`bool`, *optional*, defaults to `self.do_rescale`):\n                Whether to rescale the image.\n            rescale_factor (`float`, *optional*, defaults to `self.rescale_factor`):\n                Rescale factor to rescale the image by if `do_rescale` is set to `True`.\n            do_normalize (`bool`, *optional*, defaults to `self.do_normalize`):\n                Whether to normalize the image.\n            image_mean (`float` or `List[float]`, *optional*, defaults to `self.image_mean`):\n                Image mean to use for normalization. Only has an effect if `do_normalize` is set to `True`.\n            image_std (`float` or `List[float]`, *optional*, defaults to `self.image_std`):\n                Image standard deviation to use for normalization. Only has an effect if `do_normalize` is set to\n                `True`.\n            do_convert_rgb (`bool`, *optional*, defaults to `self.do_convert_rgb`):\n                Whether to convert the image to RGB.\n            return_tensors (`str` or `TensorType`, *optional*):\n                The type of tensors to return. Can be one of:\n                - Unset: Return a list of `np.ndarray`.\n                - `TensorType.TENSORFLOW` or `'tf'`: Return a batch of type `tf.Tensor`.\n                - `TensorType.PYTORCH` or `'pt'`: Return a batch of type `torch.Tensor`.\n                - `TensorType.NUMPY` or `'np'`: Return a batch of type `np.ndarray`.\n                - `TensorType.JAX` or `'jax'`: Return a batch of type `jax.numpy.ndarray`.\n            data_format (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`):\n                The channel dimension format for the output image. Can be one of:\n                - `\"channels_first\"` or `ChannelDimension.FIRST`: image in (num_channels, height, width) format.\n                - `\"channels_last\"` or `ChannelDimension.LAST`: image in (height, width, num_channels) format.\n                - Unset: Use the channel dimension format of the input image.\n            input_data_format (`ChannelDimension` or `str`, *optional*):\n                The channel dimension format for the input image. If unset, the channel dimension format is inferred\n                from the input image. Can be one of:\n                - `\"channels_first\"` or `ChannelDimension.FIRST`: image in (num_channels, height, width) format.\n                - `\"channels_last\"` or `ChannelDimension.LAST`: image in (height, width, num_channels) format.\n                - `\"none\"` or `ChannelDimension.NONE`: image in (height, width) format.\n        \"\"\"\n        do_resize = do_resize if do_resize is not None else self.do_resize\n        size = size if size is not None else self.size\n        size = get_size_dict(size, param_name=\"size\", default_to_square=False)\n        resample = resample if resample is not None else self.resample\n        do_center_crop = do_center_crop if do_center_crop is not None else self.do_center_crop\n        crop_size = crop_size if crop_size is not None else self.crop_size\n        crop_size = get_size_dict(crop_size, param_name=\"crop_size\", default_to_square=True)\n        do_rescale = do_rescale if do_rescale is not None else self.do_rescale\n        rescale_factor = rescale_factor if rescale_factor is not None else self.rescale_factor\n        do_normalize = do_normalize if do_normalize is not None else self.do_normalize\n        image_mean = image_mean if image_mean is not None else self.image_mean\n        image_std = image_std if image_std is not None else self.image_std\n        do_convert_rgb = do_convert_rgb if do_convert_rgb is not None else self.do_convert_rgb\n\n        validate_kwargs(captured_kwargs=kwargs.keys(), valid_processor_keys=self._valid_processor_keys)\n\n        images = make_batched_images(images)\n\n        if not valid_images(images):\n            raise ValueError(\n                \"Invalid image type. Must be of type PIL.Image.Image, numpy.ndarray, \"\n                \"torch.Tensor, tf.Tensor or jax.ndarray.\"\n            )\n\n        validate_preprocess_arguments(\n            do_rescale=do_rescale,\n            rescale_factor=rescale_factor,\n            do_normalize=do_normalize,\n            image_mean=image_mean,\n            image_std=image_std,\n            do_center_crop=do_center_crop,\n            crop_size=crop_size,\n            do_resize=do_resize,\n            size=size,\n            resample=resample,\n        )\n\n        if do_convert_rgb:\n            images = [self.blend_rgba(image) for image in images]\n\n        # All transformations expect numpy arrays.\n        images = [to_numpy_array(image) for image in images]\n\n        if is_scaled_image(images[0]) and do_rescale:\n            logger.warning_once(\n                \"It looks like you are trying to rescale already rescaled images. If the input\"\n                \" images have pixel values between 0 and 1, set `do_rescale=False` to avoid rescaling them again.\"\n            )\n\n        if input_data_format is None:\n            # We assume that all images have the same channel dimension format.\n            input_data_format = infer_channel_dimension_format(images[0])\n\n        if do_resize:\n            images = [\n                self.resize(image=image, size=size, resample=resample, input_data_format=input_data_format)\n                for image in images\n            ]\n\n        if do_center_crop:\n            images = [\n                self.center_crop(image=image, size=crop_size, input_data_format=input_data_format) for image in images\n            ]\n\n        if do_rescale:\n            images = [\n                self.rescale(image=image, scale=rescale_factor, input_data_format=input_data_format) for image in images\n            ]\n\n        if do_normalize:\n            images = [\n                self.normalize(image=image, mean=image_mean, std=image_std, input_data_format=input_data_format)\n                for image in images\n            ]\n\n        images = [\n            to_channel_dimension_format(image, data_format, input_channel_dim=input_data_format) for image in images\n        ]\n\n        data = {\"pixel_values\": images}\n        return BatchFeature(data=data, tensor_type=return_tensors)\n\n    def blend_rgba(self, image: ImageInput) -> ImageInput:\n        \"\"\"\n        Convert image to RGB by blending the transparency layer if it's in RGBA format.\n        If image is not `PIL.Image`, it si simply returned without modifications.\n\n        Args:\n            image (`ImageInput`):\n                Image to convert.\n        \"\"\"\n\n        if not isinstance(image, PIL.Image.Image):\n            return image\n        elif image.mode == \"RGB\":\n            return image\n\n        img_rgba = np.array(image.convert(\"RGBA\"))\n\n        # If there is no transparency layer, simple convert and return.\n        if not (img_rgba[:, :, 3] < 255).any():\n            return image.convert(\"RGB\")\n\n        # There is a transparency layer, blend it with a white background.\n        # Calculate the alpha proportion for blending.\n        alpha = img_rgba[:, :, 3] / 255.0\n        img_rgb = (1 - alpha[:, :, np.newaxis]) * 255 + alpha[:, :, np.newaxis] * img_rgba[:, :, :3]\n        return PIL.Image.fromarray(img_rgb.astype(\"uint8\"), \"RGB\")\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon_vae_ori/image_tokenizer.py", "content": "# Copyright (c) Meta Platforms, Inc. and affiliates\n#\n# This source code is licensed under the Chameleon License found in the\n# LICENSE file in the root directory of this source tree.\n\nimport PIL\nfrom PIL import Image\nimport numpy as np\nimport torch\nimport yaml\n\nfrom .vqgan import VQModel\n\n\nclass ImageTokenizer:\n    def __init__(\n        self,\n        cfg_path: str,\n        ckpt_path: str,\n        device: str | torch.device | None = None,\n    ):\n        with open(cfg_path) as f:\n            config = yaml.safe_load(f)\n\n        params = config[\"model\"][\"params\"]\n        if \"lossconfig\" in params:\n            del params[\"lossconfig\"]\n        params[\"ckpt_path\"] = ckpt_path\n\n        self._vq_model = VQModel(**params)\n        self._vq_model.eval()\n\n        if device is None:\n            devices = {p.device for p in self._vq_model.parameters()}\n            assert len(devices) == 1\n            device = devices.pop()\n        else:\n            self._vq_model.to(device)\n        self._device = device\n\n        dtypes = {p.dtype for p in self._vq_model.parameters()}\n        assert len(dtypes) == 1\n        self._dtype = dtypes.pop()\n\n    def _whiten_transparency(self, img: PIL.Image) -> PIL.Image:\n        # Check if it's already in RGB format.\n        if img.mode == \"RGB\":\n            return img\n\n        vals_rgba = np.array(img.convert(\"RGBA\"))\n\n        # If there is no transparency layer, simple convert and return.\n        if not (vals_rgba[:, :, 3] < 255).any():\n            return img.convert(\"RGB\")\n\n        # There is a transparency layer, blend it with a white background.\n\n        # Calculate the alpha proportion for blending.\n        alpha = vals_rgba[:, :, 3] / 255.0\n        # Blend with white background.\n        vals_rgb = (1 - alpha[:, :, np.newaxis]) * 255 + alpha[:, :, np.newaxis] * vals_rgba[:, :, :3]\n        return PIL.Image.fromarray(vals_rgb.astype(\"uint8\"), \"RGB\")\n\n    # def _vqgan_input_from(self, img: PIL.Image, target_image_size=512) -> torch.Tensor:\n    #     # Resize with aspect ratio preservation.\n    #     s = min(img.size)\n    #     scale = target_image_size / s\n    #     new_size = (round(scale * img.size[0]), round(scale * img.size[1]))\n    #     img = img.resize(new_size, PIL.Image.LANCZOS)\n    #\n    #     # Center crop.\n    #     x0 = (img.width - target_image_size) // 2\n    #     y0 = (img.height - target_image_size) // 2\n    #     img = img.crop((x0, y0, x0 + target_image_size, y0 + target_image_size))\n    #\n    #     # Convert to tensor.\n    #     np_img = np.array(img) / 255.0  # Normalize to [0, 1]\n    #     np_img = np_img * 2 - 1  # Scale to [-1, 1]\n    #     tensor_img = torch.from_numpy(np_img).permute(2, 0, 1).float()  # (Channels, Height, Width) format.\n    #\n    #     # Add batch dimension.\n    #     return tensor_img.unsqueeze(0)\n\n    def img_tokens_from_pil(self, img: PIL.Image) -> list[int]:\n        img = self._whiten_transparency(img)\n        # Convert to tensor.\n        np_img = np.array(img) / 255.0  # Normalize to [0, 1]\n        np_img = np_img * 2 - 1  # Scale to [-1, 1]\n        img = torch.from_numpy(np_img).permute(2, 0, 1).to(self._vq_model.encoder.conv_in.weight)\n        img = img.unsqueeze(0)\n\n        _, _, [_, _, img_toks] = self._vq_model.encode(img)\n        return img_toks\n\n    def _pil_from_chw_tensor(self, chw_tensor: torch.Tensor) -> PIL.Image:\n        # Ensure detachment and move tensor to CPU.\n        detached_chw_tensor = chw_tensor.detach().cpu()\n\n        # Normalize tensor to [0, 1] range from [-1, 1] range.\n        normalized_chw_tensor = (torch.clamp(detached_chw_tensor, -1.0, 1.0) + 1.0) / 2.0\n\n        # Permute CHW tensor to HWC format and convert to NumPy array.\n        hwc_array = normalized_chw_tensor.permute(1, 2, 0).numpy()\n\n        # Convert to an 8-bit unsigned integer format.\n        image_array_uint8 = (hwc_array * 255).astype(np.uint8)\n\n        # Convert NumPy array to PIL Image.\n        pil_image = Image.fromarray(image_array_uint8)\n\n        # Convert image to RGB if it is not already.\n        if pil_image.mode != \"RGB\":\n            pil_image = pil_image.convert(\"RGB\")\n\n        return pil_image\n\n    def pil_from_img_toks(self, tokens: torch.Tensor, h_latent_dim=32, w_latent_dim=32) -> PIL.Image:\n        emb_dim = self._vq_model.quantize.embedding.weight.shape[-1]\n        codebook_entry = self._vq_model.quantize.get_codebook_entry(tokens, (1, h_latent_dim, w_latent_dim, emb_dim))\n        pixels = self._vq_model.decode(codebook_entry)\n        return self._pil_from_chw_tensor(pixels[0])\n\n    def latent_embedding_from_pil(self, img: PIL.Image):\n        img = self._whiten_transparency(img)\n\n        # Convert to tensor.\n        np_img = np.array(img) / 255.0  # Normalize to [0, 1]\n        np_img = np_img * 2 - 1  # Scale to [-1, 1]\n        img = torch.from_numpy(np_img).permute(2, 0, 1)  # (Channels, Height, Width) format.\n        img = img.unsqueeze(0).to(self._vq_model.encoder.conv_in.weight)\n        latent_embedding, _, _ = self._vq_model.encode(img)\n        return latent_embedding\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon/configuration_chameleon.py", "content": "# coding=utf-8\n# Copyright 2024 Meta Inc. and The HuggingFace Inc. team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"chameleon model configuration\"\"\"\n\nfrom typing import List\n\nfrom transformers.configuration_utils import PretrainedConfig\nfrom transformers.utils import logging\n\nlogger = logging.get_logger(__name__)\n\n\nclass ChameleonVQVAEConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`ChameleonVQModel`]. It is used to instantiate a\n    `ChameleonVQModel` according to the specified arguments, defining the model architecture.\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information. Instantiating a\n    configuration with the defaults will yield a similar configuration to the VQModel of the\n    [meta/chameleon-7B](https://huggingface.co/meta/chameleon-7B).\n\n    Args:\n        embed_dim (`int`, *optional*, defaults to 256):\n            Dimensionality of each embedding vector.\n        num_embeddings (`int`, *optional*, defaults to 8192):\n            Number of codebook embeddings.\n        double_latent (`bool`, *optional*, defaults to `False`):\n            Whether to use double z channels.\n        latent_channels (`int`, *optional*, defaults to 256):\n            Number of channels for the latent space.\n        resolution (`int`, *optional*, defaults to 512):\n            Resolution of the input images.\n        in_channels (`int`, *optional*, defaults to 3):\n            Number of input channels.\n        base_channels (`int`, *optional*, defaults to 128):\n            Base channel count.\n        channel_multiplier (`List[int]`, *optional*, defaults to `[1, 1, 2, 2, 4]`):\n            Channel multipliers for each resolution.\n        num_res_blocks (`int`, *optional*, defaults to 2):\n            Number of residual blocks.\n        attn_resolutions (`List[int]`, *optional*):\n            Resolutions to apply attention.\n        dropout (`float`, *optional*, defaults to 0.0):\n            Dropout rate.\n        attn_type (`str`, *optional*, defaults to `\"vanilla\"`):\n            Attention type used in VQ-GAN encoder. Can be \"vanilla\" or None.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n    \"\"\"\n\n    model_type = \"chameleon_vqgan\"\n\n    def __init__(\n        self,\n        embed_dim: int = 256,\n        num_embeddings: int = 8192,\n        double_latent: bool = False,\n        latent_channels: int = 256,\n        resolution: int = 512,\n        in_channels: int = 3,\n        base_channels: int = 128,\n        channel_multiplier: List[int] = [1, 1, 2, 2, 4],\n        num_res_blocks: int = 2,\n        attn_resolutions: List[int] = None,\n        dropout: float = 0.0,\n        attn_type: str = \"vanilla\",\n        initializer_range=0.02,\n        **kwargs,\n    ):\n        super().__init__(**kwargs)\n        self.embed_dim = embed_dim\n        self.num_embeddings = num_embeddings\n        self.double_latent = double_latent\n        self.latent_channels = latent_channels\n        self.resolution = resolution\n        self.in_channels = in_channels\n        self.base_channels = base_channels\n        self.channel_multiplier = channel_multiplier\n        self.num_res_blocks = num_res_blocks\n        self.attn_resolutions = attn_resolutions\n        self.dropout = dropout\n        self.attn_type = attn_type\n        self.initializer_range = initializer_range\n\n\nclass ChameleonConfig(PretrainedConfig):\n    r\"\"\"\n    This is the configuration class to store the configuration of a [`ChameleonModel`]. It is used to instantiate a\n    chameleon model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the\n    [meta/chameleon-7B](https://huggingface.co/meta/chameleon-7B).\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 65536):\n            Vocabulary size of the chameleon model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`ChameleonModel`]; this includes text and image tokens.\n        hidden_size (`int`, *optional*, defaults to 4096):\n            Dimension of the hidden representations.\n        intermediate_size (`int`, *optional*, defaults to 11008):\n            Dimension of the MLP representations.\n        num_hidden_layers (`int`, *optional*, defaults to 32):\n            Number of hidden layers in the Transformer decoder.\n        num_attention_heads (`int`, *optional*, defaults to 32):\n            Number of attention heads for each attention layer in the Transformer decoder.\n        num_key_value_heads (`int`, *optional*, defaults to 32):\n            This is the number of key_value heads that should be used to implement Grouped Query Attention. If\n            `num_key_value_heads=num_attention_heads`, the model will use Multi Head Attention (MHA), if\n            `num_key_value_heads=1 the model will use Multi Query Attention (MQA) otherwise GQA is used. When\n            converting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructed\n            by meanpooling all the original heads within that group. For more details checkout [this\n            paper](https://arxiv.org/pdf/2305.13245.pdf). If it is not specified, will default to\n            `num_attention_heads`.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"silu\"`):\n            The non-linear activation function (function or string) in the decoder.\n        max_position_embeddings (`int`, *optional*, defaults to 4096):\n            The maximum sequence length that this model might ever be used with. Chameleon supports up to 4096 tokens.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        rms_norm_eps (`float`, *optional*, defaults to 1e-05):\n            The epsilon used by the rms normalization layers.\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        pad_token_id (`int`, *optional*):\n            Padding token id.\n        bos_token_id (`int`, *optional*, defaults to 1):\n            Beginning of stream token id.\n        eos_token_id (`int`, *optional*, defaults to 2):\n            End of stream token id.\n        tie_word_embeddings (`bool`, *optional*, defaults to `False`):\n            Whether to tie weight embeddings\n        rope_theta (`float`, *optional*, defaults to 10000.0):\n            The base period of the RoPE embeddings.\n        rope_scaling (`Dict`, *optional*):\n            Dictionary containing the scaling configuration for the RoPE embeddings. Currently supports two scaling\n            strategies: linear and dynamic. Their scaling factor must be a float greater than 1. The expected format is\n            `{\"type\": strategy name, \"factor\": scaling factor}`. When using this flag, don't update\n            `max_position_embeddings` to the expected new maximum. See the following thread for more information on how\n            these scaling strategies behave:\n            https://www.reddit.com/r/Localchameleon/comments/14mrgpr/dynamically_scaled_rope_further_increases/. This is an\n            experimental feature, subject to breaking API changes in future versions.\n        attention_bias (`bool`, defaults to `False`, *optional*, defaults to `False`):\n            Whether to use a bias in the query, key, value and output projection layers during self-attention.\n        attention_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        model_parallel_size (`int`, *optional*, defaults to 1):\n            Number of shards used when training the model. This will be used in qk layernorm because the original Chameleon inference\n            doesn't do reduction in those layers and each rank has its own biases.\n        swin_norm (`bool`, *optional*, defaults to `False`):\n            Use Swin Transformer normalization.\n        vq_config (`dict`, *optional*):\n            ChameleonVQConfig instance containing the configuration for the VQ-VAE model.\n        vocabulary_map (`dict`, *optional*):\n            A dictionary containing the vocabulary map from the tokenizer. Used to obtain tokens from the image inputs.\n        mlp_bias (`bool`, *optional*, defaults to `False`):\n            Whether to use a bias in up_proj, down_proj and gate_proj layers in the MLP layers.\n\n\n    ```python\n    >>> from transformers import ChameleonModel, ChameleonConfig\n\n    >>> # Initializing a chameleon chameleon-7b style configuration\n    >>> configuration = ChameleonConfig()\n\n    >>> # Initializing a model from the chameleon-7b style configuration\n    >>> model = ChameleonModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```\"\"\"\n\n    model_type = \"chameleon\"\n    keys_to_ignore_at_inference = [\"past_key_values\"]\n\n    def __init__(\n        self,\n        vocab_size=65536,\n        hidden_size=4096,\n        intermediate_size=11008,\n        num_hidden_layers=32,\n        num_attention_heads=32,\n        num_key_value_heads=32,\n        hidden_act=\"silu\",\n        max_position_embeddings=4096,\n        initializer_range=0.02,\n        rms_norm_eps=1e-05,\n        use_cache=True,\n        pad_token_id=None,\n        bos_token_id=1,\n        eos_token_id=2,\n        tie_word_embeddings=False,\n        rope_theta=10000.0,\n        rope_scaling=None,\n        attention_bias=False,\n        attention_dropout=0.0,\n        model_parallel_size=1,\n        swin_norm=False,\n        vq_config=None,\n        vocabulary_map=None,\n        mlp_bias=False,\n        mask_image_logits=True,\n        dropout=0.0,\n        **kwargs,\n    ):\n        self.vocab_size = vocab_size\n        self.max_position_embeddings = max_position_embeddings\n        self.hidden_size = hidden_size\n        self.intermediate_size = intermediate_size\n        self.num_hidden_layers = num_hidden_layers\n        self.num_attention_heads = num_attention_heads\n        self.mlp_bias = mlp_bias\n\n        self.num_key_value_heads = num_key_value_heads\n        self.hidden_act = hidden_act\n        self.initializer_range = initializer_range\n        self.rms_norm_eps = rms_norm_eps\n        self.use_cache = use_cache\n        self.rope_theta = rope_theta\n        self.rope_scaling = rope_scaling\n        self._rope_scaling_validation()\n        self.attention_bias = attention_bias\n        self.attention_dropout = attention_dropout\n        self.model_parallel_size = model_parallel_size\n        self.swin_norm = swin_norm\n        self.mask_image_logits = mask_image_logits\n\n        if vq_config is None:\n            vq_config = {}\n            logger.info(\"vq_config is None. initializing the ChameleonVQConfig with default values.\")\n\n        self.vq_config = ChameleonVQVAEConfig(**vq_config)\n\n        self.vocabulary_map = vocabulary_map\n\n        self.dropout = dropout\n\n        super().__init__(\n            pad_token_id=pad_token_id,\n            bos_token_id=bos_token_id,\n            eos_token_id=eos_token_id,\n            tie_word_embeddings=tie_word_embeddings,\n            **kwargs,\n        )\n\n    def _rope_scaling_validation(self):\n        \"\"\"\n        Validate the `rope_scaling` configuration.\n        \"\"\"\n        if self.rope_scaling is None:\n            return\n\n        if not isinstance(self.rope_scaling, dict) or len(self.rope_scaling) != 2:\n            raise ValueError(\n                \"`rope_scaling` must be a dictionary with with two fields, `type` and `factor`, \"\n                f\"got {self.rope_scaling}\"\n            )\n        rope_scaling_type = self.rope_scaling.get(\"type\", None)\n        rope_scaling_factor = self.rope_scaling.get(\"factor\", None)\n        if rope_scaling_type is None or rope_scaling_type not in [\"linear\", \"dynamic\"]:\n            raise ValueError(\n                f\"`rope_scaling`'s type field must be one of ['linear', 'dynamic'], got {rope_scaling_type}\"\n            )\n        if rope_scaling_factor is None or not isinstance(rope_scaling_factor, float) or rope_scaling_factor <= 1.0:\n            raise ValueError(f\"`rope_scaling`'s factor field must be a float > 1, got {rope_scaling_factor}\")\n"}
{"type": "source_file", "path": "inference/video_utils.py", "content": "import numpy as np\nfrom pyquaternion import Quaternion\nfrom scipy.interpolate import make_interp_spline\nfrom nuscenes.nuscenes import NuScenes\nfrom nuscenes.utils.data_classes import PointCloud\nfrom nuscenes.utils.geometry_utils import view_points\nimport cv2\nimport matplotlib.pyplot as plt\nfrom scipy.interpolate import make_interp_spline\nfrom matplotlib.collections import LineCollection\nfrom matplotlib.colors import ListedColormap, BoundaryNorm, LinearSegmentedColormap\n\ndef process_frame(nusc, sample, plans):\n    camera_token = sample['data']['CAM_FRONT']\n    camera_data = nusc.get('sample_data', camera_token)\n\n    calibrated_sensor = nusc.get('calibrated_sensor', camera_data['calibrated_sensor_token'])\n    translation = calibrated_sensor['translation']  # [x, y, z]\n    rotation = calibrated_sensor['rotation']        # Quaternion [w, x, y, z]\n\n    camera_intrinsic = calibrated_sensor['camera_intrinsic']\n    # print(np.array(camera_intrinsic))\n    point_ego = np.array(plans)  # 6 x 3\n    point_ego[:, 2] = 0\n    point_ego[:, 0] -= .5\n    point_ego = np.insert(point_ego, 3, 1, axis=1)\n    translation = np.array(translation)\n    rotation = Quaternion(rotation).rotation_matrix\n\n    ego_to_cam = np.eye(4)\n    ego_to_cam[:3, :3] = rotation\n    ego_to_cam[:3, 3] = translation\n    # print(ego_to_cam)\n    ego_to_cam = np.linalg.inv(ego_to_cam)\n    # print(ego_to_cam)\n    point_cam = np.dot(ego_to_cam, point_ego.T)[:3, :] # 3 x 6\n    # point_cam = np.array([0, 1, 10])\n    # if point_cam.ndim == 1:\n    #     point_cam = np.expand_dims(point_cam, axis=1)\n\n    point_img = view_points(point_cam, np.array(camera_intrinsic), normalize=True).T\n    # point_img = np.dot(camera_intrinsic, point_cam)\n\n    # u, v = point_img[0]/point_img[2], point_img[1]/point_img[2]\n    # print(f\"Point in image pixel coordinates: ({u}, {v})\")\n\n    u = point_img[2:, 0]\n    v = point_img[2:, 1]\n    u = u[::-1]\n    v = v[::-1]\n    x_smooth = np.linspace(v.min(), v.max(), 300)\n    spl = make_interp_spline(v, u, k=3)\n    y_smooth = spl(x_smooth)\n\n    img_path = camera_data['filename']\n    img = cv2.imread(img_path)\n    img = cv2.resize(img, (1600, 900))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    # for ii, (u, v, _) in enumerate(point_img):\n    #     if u > 0 and v > 0:\n    #         Green = np.array((100, 255, 200))\n    #         Blue = np.array((100, 200, 255))\n    #         Color = Green * (1-ii*0.1) + Blue * ii * 0.1\n    #         cv2.circle(img, (int(u), int(v)), 10, Color, -1)\n    #         if ii > 1:\n    #             cv2.line(img, (int(u), int(v)), (int(point_img[ii-1][0]), int(point_img[ii-1][1])), Color, 3)\n\n\n    \n    # cmap = plt.get_cmap('summer').reversed()\n    colors = [\"yellow\", \"green\", \"green\", \"red\"]\n    cmap = LinearSegmentedColormap.from_list(\"mycmap\", colors)\n\n    norm = plt.Normalize(vmin=x_smooth.min(), vmax=x_smooth.max())\n    points = np.array([y_smooth, x_smooth]).T.reshape(-1, 1, 2)\n\n    segments = np.concatenate([points[:-1], points[1:]], axis=1)\n    lc = LineCollection(segments, cmap=cmap, norm=norm)\n    lc.set_array(x_smooth) \n    lc.set_linewidth(5) \n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.imshow(img)\n\n    ax.add_collection(lc)\n    # plt.plot(y_smooth, x_smooth, color='#44FF44')\n    # plt.scatter([u], [v], color='#44FF44', s=30, zorder=3)\n    # plt.show()\n    # ax.xlim(0, 1600)\n    # ax.ylim(950, 0) \n    ax.axis('off')"}
{"type": "source_file", "path": "inference/planning_utils.py", "content": "'''\ncalculate planner metric same as stp3\n'''\nimport numpy as np\nimport torch\nimport cv2\nimport copy\nimport matplotlib.pyplot as plt\nfrom skimage.draw import polygon\nimport math\nimport pickle\nfrom nuscenes.eval.common.utils import Quaternion\nimport random\nego_width, ego_length = 1.85, 4.084\n\n\nclass PlanningMetric():\n    def __init__(self, base_path, step=6):\n        super().__init__()\n        self.X_BOUND = [-50.0, 50.0, 0.1]  # Forward\n        self.Y_BOUND = [-50.0, 50.0, 0.1]  # Sides\n        self.Z_BOUND = [-10.0, 10.0, 20.0]  # Height\n        self.step = step\n        dx, bx, _ = self.gen_dx_bx(self.X_BOUND, self.Y_BOUND, self.Z_BOUND)\n        self.dx, self.bx = dx[:2], bx[:2]\n\n        bev_resolution, bev_start_position, bev_dimension = self.calculate_birds_eye_view_parameters(\n            self.X_BOUND, self.Y_BOUND, self.Z_BOUND\n        )\n        self.bev_resolution = bev_resolution.numpy()\n        self.bev_start_position = bev_start_position.numpy()\n        self.bev_dimension = bev_dimension.numpy()\n\n        self.W = ego_width\n        self.H = ego_length\n\n        # self.category_index = [i for i in range(23)]\n        # self.category_index = [0,1,2,3,4,5,6]+ [8,9,10,11,12,13,14,15,16,17]\n        self.category_index = [8,9,10,11,12,13,14,15,16,17] # vehicle only\n\n    def gen_dx_bx(self, xbound, ybound, zbound):\n        dx = torch.Tensor([row[2] for row in [xbound, ybound, zbound]])\n        bx = torch.Tensor([row[0] + row[2]/2.0 for row in [xbound, ybound, zbound]])\n        nx = torch.LongTensor([(row[1] - row[0]) / row[2] for row in [xbound, ybound, zbound]])\n\n        return dx, bx, nx\n    \n    def calculate_birds_eye_view_parameters(self, x_bounds, y_bounds, z_bounds):\n        \"\"\"\n        Parameters\n        ----------\n            x_bounds: Forward direction in the ego-car.\n            y_bounds: Sides\n            z_bounds: Height\n\n        Returns\n        -------\n            bev_resolution: Bird's-eye view bev_resolution\n            bev_start_position Bird's-eye view first element\n            bev_dimension Bird's-eye view tensor spatial dimension\n        \"\"\"\n        bev_resolution = torch.tensor([row[2] for row in [x_bounds, y_bounds, z_bounds]])\n        bev_start_position = torch.tensor([row[0] + row[2] / 2.0 for row in [x_bounds, y_bounds, z_bounds]])\n        bev_dimension = torch.tensor([(row[1] - row[0]) / row[2] for row in [x_bounds, y_bounds, z_bounds]],\n                                    dtype=torch.long)\n\n        return bev_resolution, bev_start_position, bev_dimension\n    \n    def get_label(\n            self,\n            gt_agent_boxes,\n            gt_agent_feats\n        ):\n        segmentation_np = self.get_birds_eye_view_label(gt_agent_boxes,gt_agent_feats)\n        segmentation = torch.from_numpy(segmentation_np).long().unsqueeze(0)\n\n        return segmentation\n    \n    def get_birds_eye_view_label(\n            self,\n            gt_agent_boxes,\n            gt_agent_feats,\n            add_rec=False,\n        ):\n        '''\n        gt_agent_boxes (LiDARInstance3DBoxes): list of GT Bboxs.\n            dim 9 = (x,y,z)+(w,l,h)+yaw+(vx,vy)\n        gt_agent_feats: (B, A, 34)\n            dim 34 = fut_traj(6*2) + fut_mask(6) + goal(1) + lcf_feat(9) + fut_yaw(6)\n            lcf_feat (x, y, yaw, vx, vy, width, length, height, type)\n        ego_lcf_feats: (B, 9) \n            dim 8 = (vx, vy, ax, ay, w, length, width, vel, steer)\n        '''\n        T = self.step\n        agent_num = gt_agent_feats.shape[0]\n\n\n        gt_agent_fut_trajs = gt_agent_feats[..., :T*2].reshape(-1, T, 2)\n        gt_agent_fut_mask = gt_agent_feats[..., T*2:T*3].reshape(-1, T)\n        gt_agent_fut_yaw = gt_agent_feats[..., T*3:T*4].reshape(-1, T, 1)\n        gt_agent_fut_trajs = np.cumsum(gt_agent_fut_trajs, axis=1)\n        gt_agent_fut_yaw = np.cumsum(gt_agent_fut_yaw, axis=1)\n\n        gt_agent_fut_trajs = gt_agent_fut_trajs + gt_agent_boxes[:, np.newaxis, 0:2]\n        gt_agent_fut_yaw = gt_agent_fut_yaw + gt_agent_boxes[:, np.newaxis, 6:7]\n        if add_rec:\n            gt_agent_fut_trajs = np.concatenate([gt_agent_boxes[:, np.newaxis, 0:2], gt_agent_fut_trajs], 1)\n            gt_agent_fut_yaw = np.concatenate([gt_agent_boxes[:, np.newaxis, 6:7], gt_agent_fut_yaw], 1)\n            gt_agent_fut_mask = np.concatenate([np.ones_like(gt_agent_fut_mask[:, :1]), gt_agent_fut_mask], 1)\n\n        if add_rec:\n            T += 1\n        segmentation = np.zeros((T,self.bev_dimension[0], self.bev_dimension[1]))\n        \n        for t in range(T):\n            for i in range(agent_num):\n                if gt_agent_fut_mask[i][t] == 1:\n                    # Filter out all non vehicle instances\n                    category_index = int(gt_agent_feats[i][-1])\n                    agent_length, agent_width = gt_agent_boxes[i][4], gt_agent_boxes[i][3]\n                    x_a = gt_agent_fut_trajs[i, t, 0]\n                    y_a = gt_agent_fut_trajs[i, t, 1]\n                    yaw_a = gt_agent_fut_yaw[i, t, 0]\n                    param = [x_a,y_a,yaw_a,agent_length, agent_width]\n                    if (category_index in self.category_index):\n                        poly_region = self._get_poly_region_in_image(param)\n                        cv2.fillPoly(segmentation[t], [poly_region], 1)\n        # segmentation -= 1\n        \n        return segmentation\n\n    def get_ego_seg(\n            self,\n            gt_agent_boxes,\n            gt_agent_feats,\n            add_rec=False,\n        ):\n\n        T = self.step\n        agent_num = gt_agent_feats.shape[0]\n        gt_agent_fut_trajs = gt_agent_feats[..., :T*2].reshape(-1, T, 2)\n        gt_agent_fut_mask = gt_agent_feats[..., T*2:T*3].reshape(-1, T)\n        gt_agent_fut_yaw = gt_agent_feats[..., T*3:T*4].reshape(-1, T, 1)\n\n        gt_agent_fut_trajs = gt_agent_fut_trajs + gt_agent_boxes[:, np.newaxis, 0:2]\n        gt_agent_fut_yaw = gt_agent_fut_yaw + gt_agent_boxes[:, np.newaxis, 6:7]\n        if add_rec:\n            gt_agent_fut_trajs = np.concatenate([gt_agent_boxes[:, np.newaxis, 0:2], gt_agent_fut_trajs], 1)\n            gt_agent_fut_yaw = np.concatenate([gt_agent_boxes[:, np.newaxis, 6:7], gt_agent_fut_yaw], 1)\n            gt_agent_fut_mask = np.concatenate([np.ones_like(gt_agent_fut_mask[:, :1]), gt_agent_fut_mask], 1)\n\n        if add_rec:\n            T += 1\n        segmentation = np.zeros((T,self.bev_dimension[0], self.bev_dimension[1]))\n        \n        for t in range(T):\n            for i in range(agent_num):\n                if gt_agent_fut_mask[i][t] == 1:\n                    agent_length, agent_width = gt_agent_boxes[i][4], gt_agent_boxes[i][3]\n                    x_a = gt_agent_fut_trajs[i, t, 0]\n                    y_a = gt_agent_fut_trajs[i, t, 1]\n                    yaw_a = gt_agent_fut_yaw[i, t, 0]\n                    param = [x_a,y_a,yaw_a,agent_length, agent_width]\n                    poly_region = self._get_poly_region_in_image(param)\n                    cv2.fillPoly(segmentation[t], [poly_region], 1.0)\n        \n        return segmentation\n\n    def _get_poly_region_in_image(self,param):\n        lidar2cv_rot = np.array([[1,0], [0,1]])\n        x_a,y_a,yaw_a,agent_length, agent_width = param\n        trans_a = np.array([[x_a,y_a]]).T\n        # rot_mat_a = np.array([[np.cos(yaw_a), -np.sin(yaw_a)],\n        #                         [np.sin(yaw_a), np.cos(yaw_a)]])\n        rot_mat_a = np.array([[-np.sin(yaw_a), np.cos(yaw_a)],\n                            [np.cos(yaw_a), np.sin(yaw_a)]])\n        agent_corner = np.array([\n            [agent_length/2, -agent_length/2, -agent_length/2, agent_length/2],\n            [agent_width/2, agent_width/2, -agent_width/2, -agent_width/2]]) #(2,4)\n        agent_corner_lidar = np.matmul(rot_mat_a, agent_corner) + trans_a #(2,4)\n        # convert to cv frame\n        agent_corner_cv2 = (np.matmul(lidar2cv_rot, agent_corner_lidar) \\\n            - self.bev_start_position[:2,None] + self.bev_resolution[:2,None] / 2.0).T / self.bev_resolution[:2] #(4,2)\n        agent_corner_cv2 = np.round(agent_corner_cv2).astype(np.int32)\n\n        return agent_corner_cv2\n\n    def traj_check(self, ego_seg, bev_seg, light_seg, drivable_seg, start_step=1, end_step=7):\n        coll_index = (ego_seg[start_step:end_step] == 1.0) & (bev_seg != -1)\n        coll_index = np.unique(bev_seg[coll_index]).astype(np.int64)\n        right_light = ((np.expand_dims(light_seg, 0) == 1) & (ego_seg == 0)).sum() > 0\n        out_of_drivable = ((np.expand_dims(drivable_seg, 0) == 0) & (ego_seg == 1)).sum() > 0\n        \n        return coll_index, right_light, out_of_drivable\n\n    def evaluate_single_coll(self, traj, segmentation, input_gt=None, gt_traj=None, index=None):\n        \n        pts = np.array([\n            [-self.H / 2. + 0.5 + 0.985793, self.W / 2.],\n            [self.H / 2. + 0.5 + 0.985793, self.W / 2.],\n            [self.H / 2. + 0.5 + 0.985793, -self.W / 2.],\n            [-self.H / 2. + 0.5 + 0.985793, -self.W / 2.],\n        ])\n        \n        pts = (pts - self.bx.cpu().numpy() ) / (self.dx.cpu().numpy())\n        pts[:, [0, 1]] = pts[:, [1, 0]]\n        rr, cc = polygon(pts[:,1], pts[:,0])\n        rc = np.concatenate([rr[:,None], cc[:,None]], axis=-1)\n        rc_ori = rc + (self.bx.cpu().numpy() / self.dx.cpu().numpy())\n\n\n        traj_with_ego = torch.cat([traj.new_zeros(1, 2), traj], 0)\n        rc_yaw = []\n        rotate_angle = 0\n        for i in range(traj.size(0)):\n            delta = traj_with_ego[i+1] - traj_with_ego[i]\n            cur_rotate_angle = torch.atan2(*delta[[1, 0]])\n            if delta.norm()<1: cur_rotate_angle = 0\n            rotate_angle = cur_rotate_angle\n            rotate_angle = -torch.tensor(rotate_angle)\n            rot_sin = torch.sin(rotate_angle)\n            rot_cos = torch.cos(rotate_angle)\n            rot_mat = torch.Tensor([[rot_cos, -rot_sin], [rot_sin, rot_cos]])\n            tmp = rc_ori @ rot_mat.cpu().numpy() -  (self.bx.cpu().numpy() / self.dx.cpu().numpy())\n            tmp = tmp.round().astype(np.int64)\n            rc_yaw.append(tmp)\n        rc_yaw = np.stack(rc_yaw)\n\n\n        n_future, _ = traj.shape\n        trajs = traj.view(n_future, 1, 2)\n\n        trajs_ = copy.deepcopy(trajs)\n        trajs_ = trajs_ / self.dx.to(trajs.device)\n        trajs_ = trajs_.cpu().numpy() + rc_yaw # (n_future, 32, 2)\n\n        r = trajs_[:,:,0].astype(np.int32)\n        r = np.clip(r, 0, self.bev_dimension[0] - 1)\n\n        c = trajs_[:,:,1].astype(np.int32)\n        c = np.clip(c, 0, self.bev_dimension[1] - 1)\n\n        collision2 = np.full(n_future, False)\n        # obs_occ = copy.deepcopy(segmentation).cpu().numpy() * 0\n        for t in range(n_future):\n            rr = r[t]\n            cc = c[t]\n            I = np.logical_and(\n                np.logical_and(rr >= 0, rr < self.bev_dimension[0]),\n                np.logical_and(cc >= 0, cc < self.bev_dimension[1]),\n            )\n            collision2[t] = np.any(segmentation[t,  cc[I], rr[I]].cpu().numpy())\n\n        return torch.from_numpy(collision2).to(device=traj.device)\n\n    def evaluate_coll(\n            self, \n            trajs, \n            gt_trajs, \n            segmentation,\n            index=None,\n            ignore_gt=False,\n        ):\n        B, n_future, _ = trajs.shape\n\n        obj_coll_sum = torch.zeros(n_future, device=segmentation.device)\n        obj_box_coll_sum = torch.zeros(n_future, device=segmentation.device)\n\n        for i in range(B):\n            gt_box_coll = self.evaluate_single_coll(gt_trajs[i], segmentation[i], input_gt=True)\n\n            xx, yy = trajs[i,:,0], trajs[i, :, 1]\n\n            xi = ((-self.bx[0] + xx) / self.dx[0]).long()\n            yi = ((-self.bx[1] + yy) / self.dx[1]).long()\n\n            m1 = torch.logical_and(\n                torch.logical_and(xi >= 0, xi < self.bev_dimension[0]),\n                torch.logical_and(yi >= 0, yi < self.bev_dimension[1]),\n            ).to(gt_box_coll.device)\n            m1 = torch.logical_and(m1, torch.logical_not(gt_box_coll))\n            ti = torch.arange(n_future)\n            obj_coll_sum[ti[m1]] += segmentation[i, ti[m1], yi[m1], xi[m1]].long()\n\n            m2 = torch.logical_not(gt_box_coll)\n            box_coll = self.evaluate_single_coll(trajs[i],\n                    segmentation[i],\n                    gt_traj=gt_trajs[i],\n                    input_gt=False,\n                    index=None,\n                    ).to(segmentation.device)\n            if ignore_gt:\n                obj_box_coll_sum += (box_coll).long()                \n            else:\n                obj_box_coll_sum[ti[m2]] += (box_coll[ti[m2]]).long()\n        return obj_coll_sum, obj_box_coll_sum\n    "}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon/convert_chameleon_weights_to_hf.py", "content": "# Copyright 2024 Meta Inc. and The HuggingFace Inc. team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport argparse\nimport gc\nimport json\nimport os\n\nfrom PIL import Image\nfrom accelerate import init_empty_weights\nfrom configuration_chameleon import ChameleonConfig\nfrom image_processing_chameleon import ChameleonImageProcessor\nfrom modeling_chameleon import ChameleonForConditionalGeneration\nfrom processing_chameleon import ChameleonProcessor\nimport requests\nimport torch\nimport transformers\nimport yaml\n\ntry:\n    from transformers import LlamaTokenizerFast\nexcept ImportError:\n    raise ValueError(\n        \"Chameleon conversion supports only FastTokenizer and LlamaTokenizerFast can't be imported! \"\n        \"Update your `tokenizers` library and re-run the tokenizer conversion.\"\n    )\n\n\"\"\"\nSample usage:\n\n```\npython src/transformers/models/chameleon/convert_chameleon_weights_to_hf.py \\\n    --input_dir /path/to/downloaded/chameleon/weights --model_size 7B --output_dir /output/path\n```\n\nThereafter, models can be loaded via:\n\n```py\nfrom transformers import ChameleonForConditionalGeneration, LlamaTokenizer\n\nmodel = ChameleonForConditionalGeneration.from_pretrained(\"/output/path\")\ntokenizer = LlamaTokenizer.from_pretrained(\"/output/path\")\n```\n\nImportant note: you need to be able to host the whole model in RAM to execute this script (even if the biggest versions\ncome in several checkpoints they each contain a part of each weight of the model, so we need to load them all in RAM).\n\"\"\"\n\nNUM_SHARDS = {\n    \"7B\": 1,\n    \"30B\": 4,\n}\n\nVOCAB_SIZE = 65536\n\n\ndef compute_intermediate_size(n, ffn_dim_multiplier=1, multiple_of=256):\n    return multiple_of * ((int(ffn_dim_multiplier * int(8 * n / 3)) + multiple_of - 1) // multiple_of)\n\n\ndef read_json(path):\n    with open(path, \"r\") as f:\n        return json.load(f)\n\n\ndef write_json(text, path):\n    with open(path, \"w\") as f:\n        json.dump(text, f)\n\n\ndef write_model(model_path, input_base_path, model_size, chameleon_version=1):\n    os.makedirs(model_path, exist_ok=True)\n    input_model_path = os.path.join(input_base_path, \"models\", model_size.lower())\n    params_path = os.path.join(input_model_path, \"params.json\")\n    consolidate_params_path = os.path.join(input_model_path, \"consolidate_params.json\")\n\n    params = read_json(params_path)\n    if os.path.isfile(consolidate_params_path):\n        params = {**params, **read_json(consolidate_params_path)}\n    num_shards = NUM_SHARDS[model_size]\n    model_parallel_size = params[\"model_parallel_size\"]\n    params = params.get(\"model\", params)\n    n_layers = params[\"n_layers\"]\n    n_heads = params[\"n_heads\"]\n    n_heads_per_shard = n_heads // num_shards\n    dim = params[\"dim\"]\n    dims_per_head = dim // n_heads\n    base = params.get(\"rope_theta\", 10000.0)\n    swin_norm = params[\"swin_norm\"]\n    if base > 10000.0:\n        max_position_embeddings = 16384\n    else:\n        # Depending on the Chameleon version, the default max_position_embeddings has different values.\n        if chameleon_version == 1:\n            max_position_embeddings = 4096\n        else:\n            raise NotImplementedError(\n                f\"Version {chameleon_version} of chameleon is not supported yet. \"\n                \"Current supported versions of chameleon are [1].\"\n            )\n\n    if params.get(\"n_kv_heads\", None) is not None:\n        num_key_value_heads = params[\"n_kv_heads\"]  # for GQA / MQA\n        num_local_key_value_heads = n_heads_per_shard // num_key_value_heads\n        key_value_dim = dim // num_key_value_heads\n    else:  # compatibility with other checkpoints\n        num_key_value_heads = n_heads\n        num_local_key_value_heads = n_heads_per_shard\n        key_value_dim = dim\n\n    print(f\"Fetching all parameters from the checkpoint at {input_model_path}.\")\n    # Load weights\n    if num_shards == 1:\n        # Not sharded\n        # (The sharded implementation would also work, but this is simpler.)\n        loaded = None\n        for possible_name in [\"consolidated.pth\", \"consolidated.00.pth\"]:\n            possible_path = os.path.join(input_model_path, possible_name)\n            if os.path.exists(possible_path):\n                loaded = torch.load(possible_path, map_location=\"cpu\")\n                break\n        assert loaded is not None\n    else:\n        # Sharded\n        loaded = [\n            torch.load(os.path.join(input_model_path, f\"consolidated.{i:02d}.pth\"), map_location=\"cpu\")\n            for i in range(num_shards)\n        ]\n\n    # permute for sliced rotary\n    def permute(w, n_heads, dim1=dim, dim2=dim):\n        return w.view(n_heads, dim1 // n_heads // 2, 2, dim2).transpose(1, 2).reshape(dim1, dim2)\n\n    # Load weights to the state dict\n    state_dict = {}\n    for layer_i in range(n_layers):\n        if num_shards == 1:\n            # Unsharded\n            state_dict.update(\n                {\n                    f\"model.layers.{layer_i}.self_attn.q_proj.weight\": permute(\n                        loaded[f\"layers.{layer_i}.attention.wq.weight\"], n_heads=n_heads\n                    ),\n                    f\"model.layers.{layer_i}.self_attn.k_proj.weight\": permute(\n                        loaded[f\"layers.{layer_i}.attention.wk.weight\"],\n                        n_heads=num_key_value_heads,\n                        dim1=key_value_dim,\n                    ),\n                    f\"model.layers.{layer_i}.self_attn.v_proj.weight\": loaded[f\"layers.{layer_i}.attention.wv.weight\"],\n                    f\"model.layers.{layer_i}.self_attn.o_proj.weight\": loaded[f\"layers.{layer_i}.attention.wo.weight\"],\n                    f\"model.layers.{layer_i}.mlp.gate_proj.weight\": loaded[f\"layers.{layer_i}.feed_forward.w1.weight\"],\n                    f\"model.layers.{layer_i}.mlp.down_proj.weight\": loaded[f\"layers.{layer_i}.feed_forward.w2.weight\"],\n                    f\"model.layers.{layer_i}.mlp.up_proj.weight\": loaded[f\"layers.{layer_i}.feed_forward.w3.weight\"],\n                    f\"model.layers.{layer_i}.input_layernorm.weight\": loaded[f\"layers.{layer_i}.attention_norm.weight\"],\n                    f\"model.layers.{layer_i}.post_attention_layernorm.weight\": loaded[\n                        f\"layers.{layer_i}.ffn_norm.weight\"\n                    ],\n                }\n            )\n            # qk_layernorm (see https://github.com/huggingface/transformers/pull/31534#issuecomment-2207354677)\n            state_dict[f\"model.layers.{layer_i}.self_attn.q_norm.weight\"] = (\n                loaded[f\"layers.{layer_i}.attention.q_normalization.weight\"]\n                .view(dims_per_head // 2, 2)\n                .t()\n                .reshape(1, -1)\n            )\n            state_dict[f\"model.layers.{layer_i}.self_attn.q_norm.bias\"] = (\n                loaded[f\"layers.{layer_i}.attention.q_normalization.bias\"]\n                .view(dims_per_head // 2, 2)\n                .t()\n                .reshape(1, -1)\n            )\n            state_dict[f\"model.layers.{layer_i}.self_attn.k_norm.weight\"] = (\n                loaded[f\"layers.{layer_i}.attention.k_normalization.weight\"]\n                .view(dims_per_head // 2, 2)\n                .t()\n                .reshape(1, -1)\n            )\n            state_dict[f\"model.layers.{layer_i}.self_attn.k_norm.bias\"] = (\n                loaded[f\"layers.{layer_i}.attention.k_normalization.bias\"]\n                .view(dims_per_head // 2, 2)\n                .t()\n                .reshape(1, -1)\n            )\n\n        else:\n            # Sharded\n            state_dict.update(\n                {\n                    f\"model.layers.{layer_i}.input_layernorm.weight\": torch.stack(\n                        [l[f\"layers.{layer_i}.attention_norm.weight\"] for l in loaded]\n                    ).mean(dim=0),\n                    f\"model.layers.{layer_i}.post_attention_layernorm.weight\": torch.stack(\n                        [l[f\"layers.{layer_i}.ffn_norm.weight\"] for l in loaded]\n                    ).mean(dim=0),\n                }\n            )\n            state_dict[f\"model.layers.{layer_i}.self_attn.q_proj.weight\"] = permute(\n                torch.cat(\n                    [\n                        loaded[i][f\"layers.{layer_i}.attention.wq.weight\"].view(n_heads_per_shard, dims_per_head, dim)\n                        for i in range(num_shards)\n                    ],\n                    dim=0,\n                ).reshape(dim, dim),\n                n_heads=n_heads,\n            )\n\n            state_dict[f\"model.layers.{layer_i}.self_attn.k_proj.weight\"] = permute(\n                torch.cat(\n                    [\n                        loaded[i][f\"layers.{layer_i}.attention.wk.weight\"].view(\n                            num_local_key_value_heads, dims_per_head, dim\n                        )\n                        for i in range(num_shards)\n                    ],\n                    dim=0,\n                ).reshape(key_value_dim, dim),\n                n_heads=num_key_value_heads,\n                dim1=key_value_dim,\n            )\n\n            # qk_layernorm (see https://github.com/huggingface/transformers/pull/31534#issuecomment-2207354677)\n            state_dict[f\"model.layers.{layer_i}.self_attn.q_norm.weight\"] = (\n                torch.cat([l[f\"layers.{layer_i}.attention.q_normalization.weight\"].unsqueeze(0) for l in loaded])\n                .view(num_shards, dims_per_head // 2, 2)\n                .transpose(1, 2)\n                .reshape(num_shards, -1)\n            )\n            state_dict[f\"model.layers.{layer_i}.self_attn.q_norm.bias\"] = (\n                torch.cat([l[f\"layers.{layer_i}.attention.q_normalization.bias\"].unsqueeze(0) for l in loaded])\n                .view(num_shards, dims_per_head // 2, 2)\n                .transpose(1, 2)\n                .reshape(num_shards, -1)\n            )\n            state_dict[f\"model.layers.{layer_i}.self_attn.k_norm.weight\"] = (\n                torch.cat([l[f\"layers.{layer_i}.attention.k_normalization.weight\"].unsqueeze(0) for l in loaded])\n                .view(num_shards, dims_per_head // 2, 2)\n                .transpose(1, 2)\n                .reshape(num_shards, -1)\n            )\n            state_dict[f\"model.layers.{layer_i}.self_attn.k_norm.bias\"] = (\n                torch.cat([l[f\"layers.{layer_i}.attention.k_normalization.bias\"].unsqueeze(0) for l in loaded])\n                .view(num_shards, dims_per_head // 2, 2)\n                .transpose(1, 2)\n                .reshape(num_shards, -1)\n            )\n\n            state_dict[f\"model.layers.{layer_i}.self_attn.v_proj.weight\"] = torch.cat(\n                [\n                    loaded[i][f\"layers.{layer_i}.attention.wv.weight\"].view(\n                        num_local_key_value_heads, dims_per_head, dim\n                    )\n                    for i in range(num_shards)\n                ],\n                dim=0,\n            ).reshape(key_value_dim, dim)\n\n            state_dict[f\"model.layers.{layer_i}.self_attn.o_proj.weight\"] = torch.cat(\n                [loaded[i][f\"layers.{layer_i}.attention.wo.weight\"] for i in range(num_shards)], dim=1\n            )\n            state_dict[f\"model.layers.{layer_i}.mlp.gate_proj.weight\"] = torch.cat(\n                [loaded[i][f\"layers.{layer_i}.feed_forward.w1.weight\"] for i in range(num_shards)], dim=0\n            )\n            state_dict[f\"model.layers.{layer_i}.mlp.down_proj.weight\"] = torch.cat(\n                [loaded[i][f\"layers.{layer_i}.feed_forward.w2.weight\"] for i in range(num_shards)], dim=1\n            )\n            state_dict[f\"model.layers.{layer_i}.mlp.up_proj.weight\"] = torch.cat(\n                [loaded[i][f\"layers.{layer_i}.feed_forward.w3.weight\"] for i in range(num_shards)], dim=0\n            )\n\n    if num_shards == 1:\n        # Unsharded\n        state_dict.update(\n            {\n                \"model.embed_tokens.weight\": loaded[\"tok_embeddings.weight\"],\n                \"model.norm.weight\": loaded[\"norm.weight\"],\n                \"lm_head.weight\": loaded[\"output.weight\"],\n            }\n        )\n    else:\n        state_dict.update(\n            {\n                \"model.embed_tokens.weight\": torch.cat(\n                    [loaded[i][\"tok_embeddings.weight\"] for i in range(num_shards)], dim=1\n                ),\n                \"model.norm.weight\": torch.stack([loaded[i][\"norm.weight\"] for i in range(num_shards)]).mean(dim=0),\n                \"lm_head.weight\": torch.cat([loaded[i][\"output.weight\"] for i in range(num_shards)], dim=0),\n            }\n        )\n\n    # Load VQGAN weights\n    vqgan_path = os.path.join(input_base_path, \"tokenizer/vqgan.ckpt\")\n    vqgan_state_dict = torch.load(vqgan_path, map_location=\"cpu\")[\"state_dict\"]\n    for k, v in vqgan_state_dict.items():\n        if \"decoder\" in k:\n            continue  # we dont do image generation yet\n        state_dict[f\"model.vqmodel.{k}\"] = v\n\n    # Write configs\n    ffn_dim_multiplier = params[\"ffn_dim_multiplier\"] if \"ffn_dim_multiplier\" in params else 1\n    multiple_of = params[\"multiple_of\"] if \"multiple_of\" in params else 256\n\n    with open(os.path.join(input_base_path, \"tokenizer/text_tokenizer.json\")) as tokenizer_file:\n        tokenizer_config = json.load(tokenizer_file)\n        vocabulary_map = tokenizer_config[\"model\"][\"vocab\"]\n        vocabulary_map[\"<image>\"] = vocabulary_map[\n            \"<reserved08707>\"\n        ]  # use a reserved token instead of adding a new one\n        del vocabulary_map[\"<reserved08707>\"]\n\n        for token in tokenizer_config[\"added_tokens\"]:\n            if token[\"content\"] == \"<reserved08707>\":\n                token[\"content\"] = \"<image>\"\n\n    with open(os.path.join(input_base_path, \"tokenizer/text_tokenizer_modified.json\"), \"w\") as f:\n        json.dump(tokenizer_config, f)  # save the new file to init tokenizer later\n\n    vq_keys_to_replace = [\n        (\"ch\", \"base_channels\"),\n        (\"out_ch\", \"out_channels\"),\n        (\"n_embed\", \"num_embeddings\"),\n        (\"ch_mult\", \"channel_multiplier\"),\n        (\"double_z\", \"double_latent\"),\n        (\"z_channels\", \"latent_channels\"),\n    ]\n    with open(os.path.join(input_base_path, \"tokenizer/vqgan.yaml\")) as vqgan_cfg_file:\n        vq_config = yaml.safe_load(vqgan_cfg_file)[\"model\"][\"params\"]\n        vq_config.update(**vq_config[\"ddconfig\"])\n        for old, new in vq_keys_to_replace:\n            vq_config[new] = vq_config[old]\n        del vq_config[\"ddconfig\"]\n        del vq_config[\"ckpt_path\"]\n        del vq_config[\"lossconfig\"]\n\n    config = ChameleonConfig(\n        hidden_size=dim,\n        intermediate_size=compute_intermediate_size(dim, ffn_dim_multiplier, multiple_of),\n        num_attention_heads=params[\"n_heads\"],\n        num_hidden_layers=params[\"n_layers\"],\n        rms_norm_eps=params[\"norm_eps\"],\n        num_key_value_heads=num_key_value_heads,\n        vocab_size=VOCAB_SIZE,\n        rope_theta=base,\n        max_position_embeddings=max_position_embeddings,\n        model_parallel_size=model_parallel_size,\n        swin_norm=swin_norm,\n        vq_config=vq_config,\n        vocabulary_map=vocabulary_map,\n    )\n    with init_empty_weights():\n        model = ChameleonForConditionalGeneration(config)\n\n    model.load_state_dict(state_dict, assign=True, strict=False)\n    model.save_pretrained(model_path, safe_serialization=True)\n\n    # Load and save the processor\n    tokenizer = LlamaTokenizerFast(\n        tokenizer_file=os.path.join(input_base_path, \"tokenizer/text_tokenizer_modified.json\"), legacy=False\n    )\n    tokenizer.sep_token_id = 8710  # assign <reserved08706> to sep so that we can append it after input text\n    tokenizer.pad_token_id = 1  # assing <pad> to special pad_token\n    image_processor = ChameleonImageProcessor()\n\n    transformers.ChameleonImageProcessor = ChameleonImageProcessor\n\n    processor = ChameleonProcessor(image_processor=image_processor, tokenizer=tokenizer)\n    processor.save_pretrained(model_path)\n\n    # Make space so we can load the model properly now.\n    del state_dict\n    del loaded\n    del vqgan_state_dict\n    gc.collect()\n\n    # Short inference on a few examples to check if generation makes sense\n    # taken from https://github.com/facebookresearch/chameleon/blob/7a72f40aa5f462965c8374f25257f55b65b25ff4/data/prompts_for_human_evaluations.jsonl\n    print(\"Loading the checkpoint in a Chameleon model...\")\n    print(\"*\" * 100)\n    model = ChameleonForConditionalGeneration.from_pretrained(\n        model_path, attn_implementation=\"eager\", torch_dtype=torch.bfloat16, device_map=\"auto\"\n    )\n    processor = ChameleonProcessor.from_pretrained(model_path)\n\n    prompt = \"I'm very intrigued by this work of art:<image>Please tell me about the artist.\"\n    image = Image.open(\n        requests.get(\n            \"https://uploads4.wikiart.org/images/paul-klee/death-for-the-idea-1915.jpg!Large.jpg\", stream=True\n        ).raw\n    )\n    inputs = processor(prompt, images=image, return_tensors=\"pt\").to(model.device, torch.bfloat16)\n    length = inputs.input_ids.shape[1]\n\n    out = model.generate(**inputs, max_new_tokens=40, do_sample=False)\n    generated_text = processor.batch_decode(out[:, length:], skip_special_tokens=True)[0]\n\n    print(f\"Generation for single-image: {generated_text}\")\n    print(\"*\" * 100)\n\n    # Multi-image example\n    prompt = \"I used to know a lot about constellations when I was younger, but as I grew older, I forgot most of what I knew. These are the only two constellations that I really remember now.<image><image>I would like for you to tell me about 3 more constellations and give me a little bit of history about the constellation.\"\n    image = Image.open(\n        requests.get(\"https://nineplanets.org/wp-content/uploads/2020/12/the-big-dipper-1.jpg\", stream=True).raw\n    )\n    image_2 = Image.open(\n        requests.get(\"https://www.kxan.com/wp-content/uploads/sites/40/2020/10/ORION.jpg\", stream=True).raw\n    )\n\n    inputs = processor(prompt, images=[image, image_2], return_tensors=\"pt\").to(model.device, dtype=torch.bfloat16)\n    length = inputs.input_ids.shape[1]\n    out = model.generate(**inputs, max_new_tokens=50, do_sample=False)\n    generated_text = processor.batch_decode(out[:, length:], skip_special_tokens=True)[0]\n\n    print(f\"Generation for multi-image: {generated_text}\")\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--input_dir\",\n        help=\"Location of Chameleon weights\",\n    )\n    parser.add_argument(\n        \"--model_size\",\n        choices=[\"7B\", \"30B\"],\n        help=\"\"\n        \" models correspond to the finetuned versions, and are specific to the Chameleon official release. For more details on Chameleon, checkout the original repo: https://github.com/facebookresearch/chameleon\",\n    )\n    parser.add_argument(\n        \"--output_dir\",\n        help=\"Location to write HF model\",\n    )\n    parser.add_argument(\n        \"--test_inference\",\n        action=\"store_true\",\n        help=\"Whether to load the model for generation to test it's converted correctly.\",\n    )\n    # Different Chameleon versions used different default values for max_position_embeddings, hence the need to be able to specify which version is being used.\n    parser.add_argument(\n        \"--chameleon_version\",\n        choices=[1],\n        default=1,\n        type=int,\n        help=\"Version of the Chameleon model to convert\",\n    )\n    args = parser.parse_args()\n    write_model(\n        model_path=args.output_dir,\n        input_base_path=args.input_dir,\n        model_size=args.model_size,\n        chameleon_version=args.chameleon_version,\n    )\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon/modeling_chameleon.py", "content": "# coding=utf-8\n# Copyright 2024 Meta Inc. and The HuggingFace Inc. team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"PyTorch Chameleon model.\"\"\"\n\nfrom functools import cached_property\nimport math\nfrom typing import Optional, Tuple, Union\n\nimport torch\nfrom torch import nn\nfrom torch.nn import CrossEntropyLoss\nimport torch.nn.functional as F\nimport torch.utils.checkpoint\nfrom transformers.activations import ACT2FN\nfrom transformers.cache_utils import Cache, StaticCache\nfrom transformers.modeling_attn_mask_utils import AttentionMaskConverter\nfrom transformers.modeling_flash_attention_utils import _flash_attention_forward\nfrom transformers.modeling_outputs import BaseModelOutputWithPast, CausalLMOutputWithPast\nfrom transformers.modeling_utils import PreTrainedModel\nfrom transformers.pytorch_utils import ALL_LAYERNORM_LAYERS\nfrom transformers.utils import (\n    add_code_sample_docstrings,\n    add_start_docstrings,\n    add_start_docstrings_to_model_forward,\n    is_flash_attn_2_available,\n    is_flash_attn_greater_or_equal_2_10,\n    logging,\n    replace_return_docstrings,\n)\n\nfrom .configuration_chameleon import ChameleonConfig, ChameleonVQVAEConfig\n\nif is_flash_attn_2_available():\n    from flash_attn.bert_padding import index_first_axis, pad_input, unpad_input  # noqa\n\n\nlogger = logging.get_logger(__name__)\n\n_CONFIG_FOR_DOC = \"ChameleonConfig\"\n_CHECKPOINT_FOR_DOC = \"meta/chameleon-7b\"\n_EXPECTED_OUTPUT_SHAPE = [1, 7, 4096]\n_SEQ_CLASS_EXPECTED_LOSS = 1.03\n_SEQ_CLASS_EXPECTED_OUTPUT = \"'LABEL_0'\"\n\n\n# Copied from transformers.models.llama.modeling_llama.LlamaRMSNorm with Llama->Chameleon\nclass ChameleonRMSNorm(nn.Module):\n    def __init__(self, hidden_size, eps=1e-6):\n        \"\"\"\n        ChameleonRMSNorm is equivalent to T5LayerNorm\n        \"\"\"\n        super().__init__()\n        self.weight = nn.Parameter(torch.ones(hidden_size))\n        self.variance_epsilon = eps\n\n    def forward(self, hidden_states):\n        input_dtype = hidden_states.dtype\n        hidden_states = hidden_states.to(torch.float32)\n        variance = hidden_states.pow(2).mean(-1, keepdim=True)\n        hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)\n        return self.weight * hidden_states.to(input_dtype)\n\n    def extra_repr(self):\n        return f\"{tuple(self.weight.shape)}, eps={self.variance_epsilon}\"\n\n\nALL_LAYERNORM_LAYERS.append(ChameleonRMSNorm)\n\n\n# copied from transformers.models.llama.modeling_llama.LlamaRotaryEmbedding with Llama->Chameleon\n# TODO(joao): add me back asap :)\nclass ChameleonRotaryEmbedding(nn.Module):\n    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_factor=1.0):\n        super().__init__()\n        self.scaling_factor = scaling_factor\n        self.dim = dim\n        self.max_position_embeddings = max_position_embeddings\n        self.base = base\n        inv_freq = 1.0 / (self.base ** (torch.arange(0, self.dim, 2, dtype=torch.int64).float().to(device) / self.dim))\n        self.register_buffer(\"inv_freq\", inv_freq, persistent=False)\n        # For BC we register cos and sin cached\n        self.max_seq_len_cached = max_position_embeddings\n\n    @torch.no_grad()\n    def forward(self, x, position_ids):\n        # x: [bs, num_attention_heads, seq_len, head_size]\n        inv_freq_expanded = self.inv_freq[None, :, None].float().expand(position_ids.shape[0], -1, 1)\n        position_ids_expanded = position_ids[:, None, :].float()\n        # Force float32 since bfloat16 loses precision on long contexts\n        # See https://github.com/huggingface/transformers/pull/29285\n        device_type = x.device.type\n        device_type = device_type if isinstance(device_type, str) and device_type != \"mps\" else \"cpu\"\n        with torch.autocast(device_type=device_type, enabled=False):\n            freqs = (inv_freq_expanded.float() @ position_ids_expanded.float()).transpose(1, 2)\n            emb = torch.cat((freqs, freqs), dim=-1)\n            cos = emb.cos()\n            sin = emb.sin()\n        return cos.to(dtype=x.dtype), sin.to(dtype=x.dtype)\n\n\n# copied from transformers.models.llama.modeling_llama.LlamaLinearScalingRotaryEmbedding with Llama->Chameleon\n# TODO(joao): add me back asap :)\nclass ChameleonLinearScalingRotaryEmbedding(ChameleonRotaryEmbedding):\n    \"\"\"ChameleonRotaryEmbedding extended with linear scaling. Credits to the Reddit user /u/kaiokendev\"\"\"\n\n    def forward(self, x, position_ids):\n        # difference to the original RoPE: a scaling factor is aplied to the position ids\n        position_ids = position_ids.float() / self.scaling_factor\n        cos, sin = super().forward(x, position_ids)\n        return cos, sin\n\n\n# copied from transformers.models.llama.modeling_llama.LlamaDynamicNTKScalingRotaryEmbedding with Llama->Chameleon\n# TODO(joao): add me back asap :)\nclass ChameleonDynamicNTKScalingRotaryEmbedding(ChameleonRotaryEmbedding):\n    \"\"\"ChameleonRotaryEmbedding extended with Dynamic NTK scaling. Credits to the Reddit users /u/bloc97 and /u/emozilla\"\"\"\n\n    def forward(self, x, position_ids):\n        # difference to the original RoPE: inv_freq is recomputed when the sequence length > original length\n        seq_len = torch.max(position_ids) + 1\n        if seq_len > self.max_position_embeddings:\n            base = self.base * (\n                (self.scaling_factor * seq_len / self.max_position_embeddings) - (self.scaling_factor - 1)\n            ) ** (self.dim / (self.dim - 2))\n            inv_freq = 1.0 / (base ** (torch.arange(0, self.dim, 2, dtype=torch.int64).float().to(x.device) / self.dim))\n            self.register_buffer(\"inv_freq\", inv_freq, persistent=False)  # TODO joao: this may break with compilation\n\n        cos, sin = super().forward(x, position_ids)\n        return cos, sin\n\n\n# Copied from transformers.models.llama.modeling_llama.rotate_half\ndef rotate_half(x):\n    \"\"\"Rotates half the hidden dims of the input.\"\"\"\n    x1 = x[..., : x.shape[-1] // 2]\n    x2 = x[..., x.shape[-1] // 2 :]\n    return torch.cat((-x2, x1), dim=-1)\n\n\n# Copied from transformers.models.llama.modeling_llama.apply_rotary_pos_emb\ndef apply_rotary_pos_emb(q, k, cos, sin, position_ids=None, unsqueeze_dim=1):\n    \"\"\"Applies Rotary Position Embedding to the query and key tensors.\n\n    Args:\n        q (`torch.Tensor`): The query tensor.\n        k (`torch.Tensor`): The key tensor.\n        cos (`torch.Tensor`): The cosine part of the rotary embedding.\n        sin (`torch.Tensor`): The sine part of the rotary embedding.\n        position_ids (`torch.Tensor`, *optional*):\n            Deprecated and unused.\n        unsqueeze_dim (`int`, *optional*, defaults to 1):\n            The 'unsqueeze_dim' argument specifies the dimension along which to unsqueeze cos[position_ids] and\n            sin[position_ids] so that they can be properly broadcasted to the dimensions of q and k. For example, note\n            that cos[position_ids] and sin[position_ids] have the shape [batch_size, seq_len, head_dim]. Then, if q and\n            k have the shape [batch_size, heads, seq_len, head_dim], then setting unsqueeze_dim=1 makes\n            cos[position_ids] and sin[position_ids] broadcastable to the shapes of q and k. Similarly, if q and k have\n            the shape [batch_size, seq_len, heads, head_dim], then set unsqueeze_dim=2.\n    Returns:\n        `tuple(torch.Tensor)` comprising of the query and key tensors rotated using the Rotary Position Embedding.\n    \"\"\"\n    cos = cos.unsqueeze(unsqueeze_dim)\n    sin = sin.unsqueeze(unsqueeze_dim)\n    q_embed = (q * cos) + (rotate_half(q) * sin)\n    k_embed = (k * cos) + (rotate_half(k) * sin)\n    return q_embed, k_embed\n\n\n# Copied from transformers.models.llama.modeling_llama.LlamaMLP with Llama->Chameleon\nclass ChameleonMLP(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.config = config\n        self.hidden_size = config.hidden_size\n        self.intermediate_size = config.intermediate_size\n        self.gate_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=config.mlp_bias)\n        self.up_proj = nn.Linear(self.hidden_size, self.intermediate_size, bias=config.mlp_bias)\n        self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size, bias=config.mlp_bias)\n        self.act_fn = ACT2FN[config.hidden_act]\n\n    # Ignore copy\n    def forward(self, x):\n        down_proj = self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))\n        return down_proj\n\n\nclass ChameleonLayerNorm(nn.LayerNorm):\n    \"\"\"\n    LayerNorm but computes stats only over the last dim because Chameleon applies gamma and beta\n    from each shard separately to each head, instead of reducing. We can apply each head's own\n    gamma/beta by repeat-interleaving weights from each shard, but the stats have to be computed\n    in the last dimension. This module applies gamma/beta manually to fulfill this requirement.\n    \"\"\"\n\n    def __init__(self, hidden_size, model_parallel_size, n_heads_per_mp, *args, **kwargs):\n        if isinstance(hidden_size, int):\n            hidden_size = (hidden_size,)\n        super().__init__([model_parallel_size, *hidden_size], *args, **kwargs)\n        self.normalized_shape = (hidden_size[-1],)\n        self.n_heads_per_mp = n_heads_per_mp\n\n    def repeat_param(self, param):\n        return param.repeat_interleave(self.n_heads_per_mp, dim=0)\n\n    def forward(self, hidden_states):\n        hidden_states = F.layer_norm(hidden_states, self.normalized_shape, None, None, eps=1e-5)\n        hidden_states = hidden_states * self.repeat_param(self.weight) + self.repeat_param(self.bias)\n        return hidden_states\n\n\n# Copied from transformers.models.llama.modeling_llama.repeat_kv\ndef repeat_kv(hidden_states: torch.Tensor, n_rep: int) -> torch.Tensor:\n    \"\"\"\n    This is the equivalent of torch.repeat_interleave(x, dim=1, repeats=n_rep). The hidden states go from (batch,\n    num_key_value_heads, seqlen, head_dim) to (batch, num_attention_heads, seqlen, head_dim)\n    \"\"\"\n    batch, num_key_value_heads, slen, head_dim = hidden_states.shape\n    if n_rep == 1:\n        return hidden_states\n    hidden_states = hidden_states[:, :, None, :, :].expand(batch, num_key_value_heads, n_rep, slen, head_dim)\n    return hidden_states.reshape(batch, num_key_value_heads * n_rep, slen, head_dim)\n\n\nclass ChameleonAttention(nn.Module):\n    \"\"\"Multi-headed attention from 'Attention Is All You Need' paper\"\"\"\n\n    def __init__(self, config: ChameleonConfig, layer_idx: Optional[int] = None):\n        super().__init__()\n        self.config = config\n        self.layer_idx = layer_idx\n        if layer_idx is None:\n            logger.warning_once(\n                f\"Instantiating {self.__class__.__name__} without passing a `layer_idx` is not recommended and will \"\n                \"lead to errors during the forward call if caching is used. Please make sure to provide a `layer_idx` \"\n                \"when creating this class.\"\n            )\n\n        self.attention_dropout = config.attention_dropout\n        self.hidden_size = config.hidden_size\n        self.num_heads = config.num_attention_heads\n        self.head_dim = self.hidden_size // self.num_heads\n        self.num_key_value_heads = config.num_key_value_heads\n        self.num_key_value_groups = self.num_heads // self.num_key_value_heads\n        self.max_position_embeddings = config.max_position_embeddings\n        self.rope_theta = config.rope_theta\n        self.is_causal = True\n        self.model_parallel_size = config.model_parallel_size\n\n        if (self.head_dim * self.num_heads) != self.hidden_size:\n            raise ValueError(\n                f\"hidden_size must be divisible by num_heads (got `hidden_size`: {self.hidden_size}\"\n                f\" and `num_heads`: {self.num_heads}).\"\n            )\n\n        self.q_proj = nn.Linear(self.hidden_size, self.num_heads * self.head_dim, bias=config.attention_bias)\n        self.k_proj = nn.Linear(self.hidden_size, self.num_key_value_heads * self.head_dim, bias=config.attention_bias)\n        self.v_proj = nn.Linear(self.hidden_size, self.num_key_value_heads * self.head_dim, bias=config.attention_bias)\n        self.o_proj = nn.Linear(self.hidden_size, self.hidden_size, bias=config.attention_bias)\n        self.q_norm = ChameleonLayerNorm(\n            self.head_dim, self.model_parallel_size, self.num_heads // self.model_parallel_size\n        )\n        self.k_norm = ChameleonLayerNorm(\n            self.head_dim, self.model_parallel_size, self.num_key_value_heads // self.model_parallel_size\n        )\n        self._init_rope()\n\n    # copied from transformers.models.llama.modeling_llama.LlamaAttention._init_rope with Llama->Chameleon\n    # TODO(joao): add me back asap :)\n    def _init_rope(self):\n        if self.config.rope_scaling is None:\n            self.rotary_emb = ChameleonRotaryEmbedding(\n                self.head_dim,\n                max_position_embeddings=self.max_position_embeddings,\n                base=self.rope_theta,\n            )\n        else:\n            scaling_type = self.config.rope_scaling[\"type\"]\n            scaling_factor = self.config.rope_scaling[\"factor\"]\n            if scaling_type == \"linear\":\n                self.rotary_emb = ChameleonLinearScalingRotaryEmbedding(\n                    self.head_dim,\n                    max_position_embeddings=self.max_position_embeddings,\n                    scaling_factor=scaling_factor,\n                    base=self.rope_theta,\n                )\n            elif scaling_type == \"dynamic\":\n                self.rotary_emb = ChameleonDynamicNTKScalingRotaryEmbedding(\n                    self.head_dim,\n                    max_position_embeddings=self.max_position_embeddings,\n                    scaling_factor=scaling_factor,\n                    base=self.rope_theta,\n                )\n            else:\n                raise ValueError(f\"Unknown RoPE scaling type {scaling_type}\")\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_value: Optional[Cache] = None,\n        output_attentions: bool = False,\n        use_cache: bool = False,\n        cache_position: Optional[torch.LongTensor] = None,\n        **kwargs,\n    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:\n        bsz, q_len, _ = hidden_states.size()\n\n        query_states = self.q_proj(hidden_states)\n        key_states = self.k_proj(hidden_states)\n        value_states = self.v_proj(hidden_states)\n\n        query_states = query_states.reshape(-1, self.num_heads, self.head_dim)\n        query_states = self.q_norm(query_states)\n\n        key_states = key_states.reshape(-1, self.num_key_value_heads, self.head_dim)\n        key_states = self.k_norm(key_states)\n\n        query_states = query_states.reshape(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n        key_states = key_states.reshape(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n        value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n\n        cos, sin = self.rotary_emb(value_states, position_ids)\n        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin)\n\n        if past_key_value is not None:\n            # sin and cos are specific to RoPE models; position_ids needed for the static cache\n            cache_kwargs = {\"sin\": sin, \"cos\": cos, \"cache_position\": cache_position}\n            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)\n\n        key_states = repeat_kv(key_states, self.num_key_value_groups)\n        value_states = repeat_kv(value_states, self.num_key_value_groups)\n\n        attn_weights = torch.matmul(query_states, key_states.transpose(2, 3)) / math.sqrt(self.head_dim)\n\n        if attention_mask is not None:  # no matter the length, we just slice it\n            causal_mask = attention_mask[:, :, :, : key_states.shape[-2]]\n            attn_weights = attn_weights + causal_mask\n\n        # upcast attention to fp32\n        attn_weights = nn.functional.softmax(attn_weights, dim=-1).to(query_states.dtype)\n        attn_weights = nn.functional.dropout(attn_weights, p=self.attention_dropout, training=self.training)\n        attn_output = torch.matmul(attn_weights, value_states)\n\n        if attn_output.size() != (bsz, self.num_heads, q_len, self.head_dim):\n            raise ValueError(\n                f\"`attn_output` should be of size {(bsz, self.num_heads, q_len, self.head_dim)}, but is\"\n                f\" {attn_output.size()}\"\n            )\n\n        attn_output = attn_output.transpose(1, 2).contiguous()\n        attn_output = attn_output.reshape(bsz, q_len, self.hidden_size)\n        attn_output = self.o_proj(attn_output)\n\n        if not output_attentions:\n            attn_weights = None\n\n        return attn_output, attn_weights, past_key_value\n\n\n# copied from transformers.models.llama.modeling_llama.LlamaFlashAttention2 with Llama->Chameleon\n# TODO(joao): add me back asap :)\nclass ChameleonFlashAttention2(ChameleonAttention):\n    \"\"\"\n    Chameleon flash attention module. This module inherits from `ChameleonAttention` as the weights of the module stays\n    untouched. The only required change would be on the forward pass where it needs to correctly call the public API of\n    flash attention and deal with padding tokens in case the input contains any of them.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        # TODO: Should be removed once Flash Attention for RoCm is bumped to 2.1.\n        # flash_attn<2.1 generates top-left aligned causal mask, while what is needed here is bottom-right alignement, that was made default for flash_attn>=2.1. This attribute is used to handle this difference. Reference: https://github.com/Dao-AILab/flash-attention/releases/tag/v2.1.0.\n        # Beware that with flash_attn<2.1, using q_seqlen != k_seqlen (except for the case q_seqlen == 1) produces a wrong mask (top-left).\n        self._flash_attn_uses_top_left_mask = not is_flash_attn_greater_or_equal_2_10()\n\n    # Ignore copy\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.LongTensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_value: Optional[Cache] = None,\n        output_attentions: bool = False,\n        use_cache: bool = False,\n        cache_position: Optional[torch.LongTensor] = None,\n        **kwargs,\n    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:\n        if isinstance(past_key_value, StaticCache):\n            raise ValueError(\n                \"`static` cache implementation is not compatible with `attn_implementation==flash_attention_2` \"\n                \"make sure to use `sdpa` in the mean time, and open an issue at https://github.com/huggingface/transformers\"\n            )\n\n        output_attentions = False\n\n        bsz, q_len, _ = hidden_states.size()\n\n        query_states = self.q_proj(hidden_states)\n        key_states = self.k_proj(hidden_states)\n        value_states = self.v_proj(hidden_states)\n\n        query_states = query_states.reshape(-1, self.num_heads, self.head_dim)\n        query_states = self.q_norm(query_states)\n\n        key_states = key_states.reshape(-1, self.num_key_value_heads, self.head_dim)\n        key_states = self.k_norm(key_states)\n\n        # Flash attention requires the input to have the shape\n        # batch_size x seq_length x head_dim x hidden_dim\n        # therefore we just need to keep the original shape\n        query_states = query_states.view(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n        key_states = key_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n        value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n\n        cos, sin = self.rotary_emb(value_states, position_ids)\n        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin)\n\n        if past_key_value is not None:\n            # sin and cos are specific to RoPE models; position_ids needed for the static cache\n            cache_kwargs = {\"sin\": sin, \"cos\": cos, \"cache_position\": cache_position}\n            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)\n\n        # TODO: These transpose are quite inefficient but Flash Attention requires the layout [batch_size, sequence_length, num_heads, head_dim].\n        # We would need to refactor the KV cache to be able to avoid many of these transpose/reshape/view.\n        query_states = query_states.transpose(1, 2)\n        key_states = key_states.transpose(1, 2)\n        value_states = value_states.transpose(1, 2)\n\n        dropout_rate = self.attention_dropout if self.training else 0.0\n\n        # In PEFT, usually we cast the layer norms in float32 for training stability reasons\n        # therefore the input hidden states gets silently casted in float32. Hence, we need\n        # cast them back in the correct dtype just to be sure everything works as expected.\n        # This might slowdown training & inference so it is recommended to not cast the LayerNorms\n        # in fp32. (ChameleonRMSNorm handles it correctly)\n\n        input_dtype = query_states.dtype\n        if input_dtype == torch.float32:\n            if torch.is_autocast_enabled():\n                target_dtype = torch.get_autocast_gpu_dtype()\n            # Handle the case where the model is quantized\n            elif hasattr(self.config, \"_pre_quantization_dtype\"):\n                target_dtype = self.config._pre_quantization_dtype\n            else:\n                target_dtype = self.q_proj.weight.dtype\n\n            logger.warning_once(\n                f\"The input hidden states seems to be silently casted in float32, this might be related to\"\n                f\" the fact you have upcasted embedding or layer norm layers in float32. We will cast back the input in\"\n                f\" {target_dtype}.\"\n            )\n\n            query_states = query_states.to(target_dtype)\n            key_states = key_states.to(target_dtype)\n            value_states = value_states.to(target_dtype)\n\n        attn_output = _flash_attention_forward(\n            query_states,\n            key_states,\n            value_states,\n            attention_mask,\n            q_len,\n            dropout=dropout_rate,\n            sliding_window=getattr(self, \"sliding_window\", None),\n            use_top_left_mask=self._flash_attn_uses_top_left_mask,\n            is_causal=self.is_causal,\n        )\n\n        attn_output = attn_output.reshape(bsz, q_len, -1).contiguous()\n        attn_output = self.o_proj(attn_output)\n\n        if not output_attentions:\n            attn_weights = None\n\n        return attn_output, attn_weights, past_key_value\n\n\nclass ChameleonSdpaAttention(ChameleonAttention):\n    \"\"\"\n    Chameleon attention module using torch.nn.functional.scaled_dot_product_attention. This module inherits from\n    `ChameleonAttention` as the weights of the module stays untouched. The only changes are on the forward pass to adapt to\n    SDPA API.\n    \"\"\"\n\n    # Adapted from ChameleonAttention.forward\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_value: Optional[Cache] = None,\n        output_attentions: bool = False,\n        use_cache: bool = False,\n        cache_position: Optional[torch.LongTensor] = None,\n    ) -> Tuple[torch.Tensor, Optional[torch.Tensor], Optional[Tuple[torch.Tensor]]]:\n        if output_attentions:\n            # TODO: Improve this warning with e.g. `model.config.attn_implementation = \"manual\"` once this is implemented.\n            logger.warning_once(\n                \"ChameleonModel is using ChameleonSdpaAttention, but `torch.nn.functional.scaled_dot_product_attention` does not support `output_attentions=True`. Falling back to the manual attention implementation, \"\n                'but specifying the manual implementation will be required from Transformers version v5.0.0 onwards. This warning can be removed using the argument `attn_implementation=\"eager\"` when loading the model.'\n            )\n            return super().forward(\n                hidden_states=hidden_states,\n                attention_mask=attention_mask,\n                position_ids=position_ids,\n                past_key_value=past_key_value,\n                output_attentions=output_attentions,\n                use_cache=use_cache,\n                cache_position=cache_position,\n            )\n\n        bsz, q_len, _ = hidden_states.size()\n\n        query_states = self.q_proj(hidden_states)\n        key_states = self.k_proj(hidden_states)\n        value_states = self.v_proj(hidden_states)\n\n        query_states = query_states.reshape(-1, self.num_heads, self.head_dim)\n        query_states = self.q_norm(query_states)\n\n        key_states = key_states.reshape(-1, self.num_key_value_heads, self.head_dim)\n        key_states = self.k_norm(key_states)\n\n        query_states = query_states.reshape(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)\n        key_states = key_states.reshape(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n        value_states = value_states.view(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)\n\n        cos, sin = self.rotary_emb(value_states, position_ids)\n        query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, None)\n\n        if past_key_value is not None:\n            # sin and cos are specific to RoPE models; position_ids needed for the static cache\n            cache_kwargs = {\"sin\": sin, \"cos\": cos, \"cache_position\": cache_position}\n            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)\n\n        key_states = repeat_kv(key_states, self.num_key_value_groups)\n        value_states = repeat_kv(value_states, self.num_key_value_groups)\n\n        causal_mask = attention_mask\n        if attention_mask is not None and cache_position is not None:\n            causal_mask = causal_mask[:, :, :, : key_states.shape[-2]]\n\n        # SDPA with memory-efficient backend is currently (torch==2.1.2) bugged with non-contiguous inputs with custom attn_mask,\n        # Reference: https://github.com/pytorch/pytorch/issues/112577.\n        if query_states.device.type == \"cuda\" and causal_mask is not None:\n            query_states = query_states.contiguous()\n            key_states = key_states.contiguous()\n            value_states = value_states.contiguous()\n\n        # We dispatch to SDPA's Flash Attention or Efficient kernels via this `is_causal` if statement instead of an inline conditional assignment\n        # in SDPA to support both torch.compile's dynamic shapes and full graph options. An inline conditional prevents dynamic shapes from compiling.\n        is_causal = True if causal_mask is None and q_len > 1 else False\n\n        attn_output = torch.nn.functional.scaled_dot_product_attention(\n            query_states,\n            key_states,\n            value_states,\n            attn_mask=causal_mask,\n            dropout_p=self.attention_dropout if self.training else 0.0,\n            is_causal=is_causal,\n        )\n\n        attn_output = attn_output.transpose(1, 2).contiguous()\n        attn_output = attn_output.view(bsz, q_len, self.hidden_size)\n\n        attn_output = self.o_proj(attn_output)\n\n        return attn_output, None, past_key_value\n\n\nCHAMELEON_ATTENTION_CLASSES = {\n    \"eager\": ChameleonAttention,\n    \"flash_attention_2\": ChameleonFlashAttention2,\n    \"sdpa\": ChameleonSdpaAttention,\n}\n\n\n# copied from transformers.models.llama.modeling_llama.LlamaDecoderLayer with Llama->Chameleon, LLAMA->CHAMELEON\n# TODO(joao): add me back asap :)\nclass ChameleonDecoderLayer(nn.Module):\n    def __init__(self, config: ChameleonConfig, layer_idx: int):\n        super().__init__()\n        self.hidden_size = config.hidden_size\n\n        self.self_attn = CHAMELEON_ATTENTION_CLASSES[config._attn_implementation](config=config, layer_idx=layer_idx)\n\n        self.mlp = ChameleonMLP(config)\n        self.input_layernorm = ChameleonRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n        self.post_attention_layernorm = ChameleonRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\n        self.dropout = torch.nn.Dropout(config.dropout)\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_value: Optional[Cache] = None,\n        output_attentions: Optional[bool] = False,\n        use_cache: Optional[bool] = False,\n        cache_position: Optional[torch.LongTensor] = None,\n        **kwargs,\n    ) -> Tuple[torch.FloatTensor, Optional[Tuple[torch.FloatTensor, torch.FloatTensor]]]:\n        \"\"\"\n        Args:\n            hidden_states (`torch.FloatTensor`): input to the layer of shape `(batch, seq_len, embed_dim)`\n            attention_mask (`torch.FloatTensor`, *optional*):\n                attention mask of size `(batch_size, sequence_length)` if flash attention is used or `(batch_size, 1,\n                query_sequence_length, key_sequence_length)` if default attention is used.\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n            use_cache (`bool`, *optional*):\n                If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding\n                (see `past_key_values`).\n            past_key_value (`Tuple(torch.FloatTensor)`, *optional*): cached past key and value projection states\n            cache_position (`torch.LongTensor` of shape `(sequence_length)`, *optional*):\n                Indices depicting the position of the input sequence tokens in the sequence\n            kwargs (`dict`, *optional*):\n                Arbitrary kwargs to be ignored, used for FSDP and other methods that injects code\n                into the model\n        \"\"\"\n        residual = hidden_states\n\n        hidden_states = self.input_layernorm(hidden_states)\n\n        # Self Attention\n        hidden_states, self_attn_weights, present_key_value = self.self_attn(\n            hidden_states=hidden_states,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            past_key_value=past_key_value,\n            output_attentions=output_attentions,\n            use_cache=use_cache,\n            cache_position=cache_position,\n            **kwargs,\n        )\n        hidden_states = residual + self.dropout(hidden_states)\n        # Fully Connected\n        residual = hidden_states\n        hidden_states = self.post_attention_layernorm(hidden_states)\n        hidden_states = self.mlp(hidden_states)\n        hidden_states = residual + self.dropout(hidden_states)\n\n        outputs = (hidden_states,)\n\n        if output_attentions:\n            outputs += (self_attn_weights,)\n\n        if use_cache:\n            outputs += (present_key_value,)\n\n        return outputs\n\n\nclass ChameleonSwinDecoderLayer(nn.Module):\n    def __init__(self, config: ChameleonConfig, layer_idx: int):\n        super().__init__()\n        self.hidden_size = config.hidden_size\n\n        self.self_attn = CHAMELEON_ATTENTION_CLASSES[config._attn_implementation](config=config, layer_idx=layer_idx)\n\n        self.mlp = ChameleonMLP(config)\n        self.input_layernorm = ChameleonRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n        self.post_attention_layernorm = ChameleonRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n\n        self.dropout = torch.nn.Dropout(config.dropout)\n\n    def forward(\n        self,\n        hidden_states: torch.Tensor,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_value: Optional[Cache] = None,\n        output_attentions: Optional[bool] = False,\n        use_cache: Optional[bool] = False,\n        cache_position: Optional[torch.LongTensor] = None,\n        **kwargs,\n    ) -> Tuple[torch.FloatTensor, Optional[Tuple[torch.FloatTensor, torch.FloatTensor]]]:\n        \"\"\"\n        Args:\n            hidden_states (`torch.FloatTensor`):\n                input to the layer of shape `(batch, seq_len, embed_dim)`\n            attention_mask (`torch.FloatTensor`, *optional*):\n                attention mask of size `(batch_size, sequence_length)` if flash attention is used or `(batch_size, 1,\n                query_sequence_length, key_sequence_length)` if default attention is used.\n            position_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n                Indices of positions of each input sequence tokens in the position embeddings\n            past_key_value (`Tuple(torch.FloatTensor)`, *optional*): cached past key and value projection states\n            output_attentions (`bool`, *optional*):\n                Whether or not to return the attentions tensors of all attention layers. See `attentions` under\n                returned tensors for more detail.\n            use_cache (`bool`, *optional*):\n                If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding\n                (see `past_key_values`).\n            cache_position (`torch.LongTensor` of shape `(sequence_length)`, *optional*):\n                Indices depicting the position of the input sequence tokens in the sequence.\n        \"\"\"\n\n        residual = hidden_states\n\n        # Self Attention\n        hidden_states, self_attn_weights, present_key_value = self.self_attn(\n            hidden_states=hidden_states,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            past_key_value=past_key_value,\n            output_attentions=output_attentions,\n            use_cache=use_cache,\n            cache_position=cache_position,\n            **kwargs,\n        )\n        hidden_states = self.input_layernorm(hidden_states)\n        hidden_states = residual + self.dropout(hidden_states)\n        # Fully Connected\n        residual = hidden_states\n        hidden_states = self.mlp(hidden_states)\n        hidden_states = self.post_attention_layernorm(hidden_states)\n        hidden_states = residual + self.dropout(hidden_states)\n        outputs = (hidden_states,)\n\n        if output_attentions:\n            outputs += (self_attn_weights,)\n\n        if use_cache:\n            outputs += (present_key_value,)\n\n        return outputs\n\n\nclass ChameleonVQVAEVectorQuantizer(nn.Module):\n    \"\"\"\n    A module for vector quantization using learned embedding vectors.\n\n    This module implements the quantization process similar to te one described in\n    the VQ-VAE (Vector Quantized Variational AutoEncoder) paper. It quantizes continuous\n    input vectors into discrete codebook vectors, which are learned during training.\n    Current implementation improves over previous ones by avoiding costly matrix multiplications\n    and allowing for post-hoc remapping of indices.\n    \"\"\"\n\n    def __init__(self, config):\n        super().__init__()\n        self.num_embeddings = config.num_embeddings\n        self.embedding_dim = config.embed_dim\n        self.beta = getattr(config, \"beta\", 0.25)\n\n        self.embedding = nn.Embedding(self.num_embeddings, self.embedding_dim)\n        self.re_embed = self.num_embeddings\n\n    def forward(self, hidden_state: torch.Tensor):\n        hidden_state = hidden_state.permute(0, 2, 3, 1).contiguous()\n        hidden_state_flattened = hidden_state.view(-1, self.embedding_dim)\n\n        # distances from z to embeddings e_j (z - e)^2 = z^2 + e^2 - 2 e * z\n        distances = (\n            torch.sum(hidden_state_flattened**2, dim=1, keepdim=True)\n            + torch.sum(self.embedding.weight**2, dim=1)\n            - 2 * torch.einsum(\"bd,dn->bn\", hidden_state_flattened, self.embedding.weight.transpose(0, 1))\n        )\n\n        min_encoding_indices = torch.argmin(distances, dim=1)\n        hidden_state_quant = self.embedding(min_encoding_indices).view(hidden_state.shape)\n\n        # compute loss for embedding\n        loss = torch.mean((hidden_state_quant.detach() - hidden_state) ** 2) + self.beta * torch.mean(\n            (hidden_state_quant - hidden_state.detach()) ** 2\n        )\n\n        # preserve gradients\n        hidden_state_quant = hidden_state + (hidden_state_quant - hidden_state).detach()\n\n        # reshape back to match original input shape\n        hidden_state_quant = hidden_state_quant.permute(0, 3, 1, 2).contiguous()\n\n        return hidden_state_quant, loss, min_encoding_indices\n\n\nclass ChameleonVQVAEEncoderConvDownsample(nn.Module):\n    def __init__(self, in_channels):\n        super().__init__()\n        self.conv = nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=2, padding=0)\n\n    def forward(self, hidden_states):\n        # no asymmetric padding in torch conv, must do it ourselves\n        hidden_states = F.pad(hidden_states, pad=(0, 1, 0, 1), mode=\"constant\", value=0)\n        hidden_states = self.conv(hidden_states)\n        return hidden_states\n\n\nclass ChameleonVQVAEEncoderResnetBlock(nn.Module):\n    def __init__(\n        self,\n        config,\n        in_channels,\n        out_channels=None,\n        conv_shortcut=False,\n    ):\n        super().__init__()\n        self.in_channels = in_channels\n        self.out_channels = in_channels if out_channels is None else out_channels\n        self.use_conv_shortcut = conv_shortcut\n\n        self.norm1 = torch.nn.GroupNorm(num_groups=32, num_channels=in_channels, eps=1e-6, affine=True)\n        self.conv1 = torch.nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=1)\n        self.norm2 = torch.nn.GroupNorm(num_groups=32, num_channels=out_channels, eps=1e-6, affine=True)\n        self.dropout = torch.nn.Dropout(config.dropout)\n        self.conv2 = torch.nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1)\n        if self.in_channels != self.out_channels:\n            if self.use_conv_shortcut:\n                self.conv_shortcut = torch.nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=1)\n            else:\n                self.nin_shortcut = torch.nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, padding=0)\n\n    def forward(self, hidden_states):\n        residual = hidden_states\n        hidden_states = self.norm1(hidden_states)\n        hidden_states *= torch.sigmoid(hidden_states)\n        hidden_states = self.conv1(hidden_states)\n\n        hidden_states = self.norm2(hidden_states)\n        hidden_states *= torch.sigmoid(hidden_states)\n        hidden_states = self.dropout(hidden_states)\n        hidden_states = self.conv2(hidden_states)\n\n        if self.in_channels != self.out_channels:\n            if self.use_conv_shortcut:\n                residual = self.conv_shortcut(residual)\n            else:\n                residual = self.nin_shortcut(residual)\n\n        return residual + hidden_states\n\n\nclass ChameleonVQVAEEncoderAttnBlock(nn.Module):\n    def __init__(self, in_channels):\n        super().__init__()\n        self.in_channels = in_channels\n\n        self.norm = torch.nn.GroupNorm(num_groups=32, num_channels=in_channels, eps=1e-6, affine=True)\n        self.q = torch.nn.Conv2d(in_channels, in_channels, kernel_size=1, stride=1, padding=0)\n        self.k = torch.nn.Conv2d(in_channels, in_channels, kernel_size=1, stride=1, padding=0)\n        self.v = torch.nn.Conv2d(in_channels, in_channels, kernel_size=1, stride=1, padding=0)\n        self.proj_out = torch.nn.Conv2d(in_channels, in_channels, kernel_size=1, stride=1, padding=0)\n\n    def forward(self, hidden_states):\n        residual = hidden_states\n        hidden_states = self.norm(hidden_states)\n        query_states = self.q(hidden_states)\n        key_states = self.k(hidden_states)\n        value_states = self.v(hidden_states)\n\n        # compute attention\n        batch_size, channels, height, width = query_states.shape\n        query_states = query_states.reshape(batch_size, channels, height * width).permute(0, 2, 1)\n        key_states = key_states.reshape(batch_size, channels, height * width)\n        attn_weights = torch.bmm(query_states, key_states)\n        attn_weights = attn_weights * (int(channels) ** (-0.5))\n        attn_weights = F.softmax(attn_weights, dim=2)\n\n        # attend to values\n        value_states = value_states.reshape(batch_size, channels, height * width)\n        attn_weights = attn_weights.permute(0, 2, 1)\n        attn_output = torch.bmm(value_states, attn_weights).reshape(batch_size, channels, height, width)\n\n        attn_output = self.proj_out(attn_output)\n        return residual + attn_output\n\n\nclass ChameleonVQVAEEncoder(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n\n        self.num_resolutions = len(config.channel_multiplier)\n        self.num_res_blocks = config.num_res_blocks\n        base_channels = config.base_channels\n        resolution = config.resolution\n        in_channels = config.in_channels\n        double_latent = config.double_latent\n        latent_channels = config.latent_channels\n        channel_multiplier = config.channel_multiplier\n\n        self.conv_in = torch.nn.Conv2d(in_channels, base_channels, kernel_size=3, stride=1, padding=1)\n\n        curr_res = resolution\n        in_channel_multiplier = (1,) + tuple(channel_multiplier)\n        self.in_channel_multiplier = in_channel_multiplier\n        self.down = nn.ModuleList()\n        for i_level in range(self.num_resolutions):\n            block = nn.ModuleList()\n            attn = nn.ModuleList()\n            block_in = base_channels * in_channel_multiplier[i_level]\n            block_out = base_channels * channel_multiplier[i_level]\n            for i_block in range(self.num_res_blocks):\n                block.append(\n                    ChameleonVQVAEEncoderResnetBlock(\n                        config=config,\n                        in_channels=block_in,\n                        out_channels=block_out,\n                    )\n                )\n                block_in = block_out\n                if (\n                    config.attn_resolutions is not None\n                    and curr_res in config.attn_resolutions\n                    and config.attn_type == \"vanilla\"\n                ):\n                    attn.append(ChameleonVQVAEEncoderAttnBlock(block_in))\n\n            down = nn.Module()\n            down.block = block\n            down.attn = attn\n            if i_level != self.num_resolutions - 1:\n                down.downsample = ChameleonVQVAEEncoderConvDownsample(block_in)\n                curr_res = curr_res // 2\n            self.down.append(down)\n\n        self.mid = nn.Module()\n        self.mid.block_1 = ChameleonVQVAEEncoderResnetBlock(\n            config=config,\n            in_channels=block_in,\n            out_channels=block_in,\n        )\n        self.mid.attn_1 = ChameleonVQVAEEncoderAttnBlock(block_in) if config.attn_type == \"vanilla\" else nn.Identity()\n        self.mid.block_2 = ChameleonVQVAEEncoderResnetBlock(\n            config=config,\n            in_channels=block_in,\n            out_channels=block_in,\n        )\n\n        self.norm_out = torch.nn.GroupNorm(num_groups=32, num_channels=block_in, eps=1e-6, affine=True)\n        self.conv_out = torch.nn.Conv2d(\n            block_in,\n            2 * latent_channels if double_latent else latent_channels,\n            kernel_size=3,\n            stride=1,\n            padding=1,\n        )\n\n    def forward(self, pixel_values: torch.LongTensor):\n        # downsampling\n        hidden_states = [self.conv_in(pixel_values)]\n        for i_level in range(self.num_resolutions):\n            for i_block in range(self.num_res_blocks):\n                hidden_state = self.down[i_level].block[i_block](\n                    hidden_states[-1],\n                )\n                if len(self.down[i_level].attn) > 0:\n                    hidden_state = self.down[i_level].attn[i_block](hidden_state)\n                hidden_states.append(hidden_state)\n            if i_level != self.num_resolutions - 1:\n                hidden_states.append(self.down[i_level].downsample(hidden_states[-1]))\n\n        # middle\n        last_hidden_state = hidden_states[-1]\n        last_hidden_state = self.mid.block_1(last_hidden_state)\n        last_hidden_state = self.mid.attn_1(last_hidden_state)\n        last_hidden_state = self.mid.block_2(last_hidden_state)\n\n        # end\n        last_hidden_state = self.norm_out(last_hidden_state)\n        last_hidden_state *= torch.sigmoid(last_hidden_state)\n        last_hidden_state = self.conv_out(last_hidden_state)\n        return last_hidden_state\n\n\nCHAMELEON_VQ_START_DOCSTRING = r\"\"\"\n    This model inherits from [`PreTrainedModel`]. Check the superclass documentation for the generic methods the\n    library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads\n    etc.)\n\n    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.\n    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage\n    and behavior.\n\n    Parameters:\n        config ([`ChameleonVQVAEConfig`]):\n            Model configuration class with all the parameters of the model. Initializing with a config file does not\n            load the weights associated with the model, only the configuration. Check out the\n            [`~PreTrainedModel.from_pretrained`] method to load the model weights.\n\"\"\"\n\n\n@add_start_docstrings(\n    \"\"\"The VQ-VAE model used in Chameleon for encoding/decoding images into discrete tokens.\n    This model follows the \"Make-a-scene: Scene-based text-to-image generation with human priors\" paper from\n    [ Oran Gafni, Adam Polyak, Oron Ashual, Shelly Sheynin, Devi Parikh, and Yaniv Taigman](https://arxiv.org/abs/2203.13131).\n    \"\"\",\n    CHAMELEON_VQ_START_DOCSTRING,\n)\nclass ChameleonVQVAE(PreTrainedModel):\n    config_class = ChameleonVQVAEConfig\n    _no_split_modules = [\"ChameleonVQVAEVectorQuantizer\"]\n\n    def _init_weights(self, module):\n        std = self.config.initializer_range\n        if isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=std)\n        elif isinstance(module, nn.GroupNorm):\n            module.bias.data.zero_()\n            module.weight.data.fill_(1.0)\n        elif isinstance(module, (nn.Linear, nn.Conv2d)):\n            module.weight.data.normal_(mean=0.0, std=std)\n            if module.bias is not None:\n                module.bias.data.zero_()\n\n    def __init__(self, config: ChameleonVQVAEConfig):\n        super().__init__(config)\n\n        self.encoder = ChameleonVQVAEEncoder(config)\n        self.quantize = ChameleonVQVAEVectorQuantizer(config)\n        self.quant_conv = torch.nn.Conv2d(config.latent_channels, config.embed_dim, 1)\n        self.post_quant_conv = torch.nn.Conv2d(config.embed_dim, config.latent_channels, 1)\n        self.eval()  # Chameleon's VQ model is frozen\n\n    def encode(self, pixel_values: torch.LongTensor):\n        hidden_states = self.encoder(pixel_values)\n        hidden_states = self.quant_conv(hidden_states)\n        quant, emb_loss, indices = self.quantize(hidden_states)\n        return quant, emb_loss, indices\n\n\nclass ChameleonImageVocabularyMapping:\n    \"\"\"\n    A class for mapping discrete image tokens from VQGAN to BPE tokens.\n    \"\"\"\n\n    def __init__(self, vocab_map):\n        self.vocab_map = vocab_map\n        self.image_token_id = vocab_map.get(\"<image>\")\n\n    @cached_property\n    def val2name(self):\n        return {v: k for k, v in self.vocab_map.items()}\n\n    @cached_property\n    def image_tokens(self):\n        return sorted([val for name, val in self.vocab_map.items() if name.startswith(\"IMGIMG\")])\n\n    @cached_property\n    def bpe2img(self):\n        img_tkn_chr_mapping = {chr(ord(\"A\") + i): str(i) for i in range(10)}\n\n        def remap(old_name: str) -> str:\n            return \"\".join(img_tkn_chr_mapping.get(c, c) for c in old_name[len(\"IMGIMG\") : -1])\n\n        return {tok: int(remap(self.val2name[tok])) for tok in self.image_tokens}\n\n    @cached_property\n    def img2bpe(self):\n        return {v: k for k, v in self.bpe2img.items()}\n\n    @cached_property\n    def bpe2img_search_tensors(self):\n        return torch.tensor(sorted(self.bpe2img.keys())), torch.tensor(sorted(self.bpe2img.values()))\n\n    @cached_property\n    def img2bpe_mapping_tensor(self):\n        mapping = torch.zeros(max(self.img2bpe.keys()) + 1, dtype=torch.int)\n        for k, v in self.img2bpe.items():\n            mapping[k] = v\n        return mapping\n\n    def convert_img2bpe(self, img_batch: torch.Tensor) -> torch.Tensor:\n        device = img_batch.device\n        img_tokens = self.img2bpe_mapping_tensor[img_batch.to(\"cpu\")]\n        return img_tokens.to(device)\n\n\nCHAMELEON_START_DOCSTRING = r\"\"\"\n    This model inherits from [`PreTrainedModel`]. Check the superclass documentation for the generic methods the\n    library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads\n    etc.)\n\n    This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module) subclass.\n    Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage\n    and behavior.\n\n    Parameters:\n        config ([`ChameleonConfig`]):\n            Model configuration class with all the parameters of the model. Initializing with a config file does not\n            load the weights associated with the model, only the configuration. Check out the\n            [`~PreTrainedModel.from_pretrained`] method to load the model weights.\n\"\"\"\n\n\n@add_start_docstrings(\n    \"The bare chameleon Model outputting raw hidden-states without any specific head on top.\",\n    CHAMELEON_START_DOCSTRING,\n)\nclass ChameleonPreTrainedModel(PreTrainedModel):\n    config_class = ChameleonConfig\n    base_model_prefix = \"model\"\n    supports_gradient_checkpointing = True\n    _no_split_modules = [\"ChameleonDecoderLayer\", \"ChameleonSwinDecoderLayer\"]\n    _skip_keys_device_placement = [\"past_key_values\", \"causal_mask\"]\n    _supports_flash_attn_2 = True\n    _supports_sdpa = True\n    _supports_quantized_cache = True\n    _supports_cache_class = True\n    _supports_static_cache = True\n    _supports_param_buffer_assignment = False\n\n    def _init_weights(self, module):\n        std = self.config.initializer_range\n        if isinstance(module, ChameleonVQVAE):\n            module.apply(module._init_weights)\n        elif isinstance(module, (nn.Linear, nn.Conv2d)):\n            module.weight.data.normal_(mean=0.0, std=std)\n            if module.bias is not None:\n                module.bias.data.zero_()\n        elif isinstance(module, nn.Embedding):\n            module.weight.data.normal_(mean=0.0, std=std)\n            if module.padding_idx is not None:\n                module.weight.data[module.padding_idx].zero_()\n\n\nCHAMELEON_INPUTS_DOCSTRING = r\"\"\"\n    Args:\n        input_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`):\n            Indices of input sequence tokens in the vocabulary. Padding will be ignored by default should you provide\n            it.\n\n            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n            [`PreTrainedTokenizer.__call__`] for details.\n\n            [What are input IDs?](../glossary#input-ids)\n        pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, image_size, image_size)):\n            The tensors corresponding to the input images. Pixel values can be obtained using\n            [`AutoImageProcessor`]. See [`ChameleonImageProcessor.__call__`] for details.\n        attention_mask (`torch.Tensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Mask to avoid performing attention on padding token indices. Mask values selected in `[0, 1]`:\n\n            - 1 for tokens that are **not masked**,\n            - 0 for tokens that are **masked**.\n\n            [What are attention masks?](../glossary#attention-mask)\n\n            Indices can be obtained using [`AutoTokenizer`]. See [`PreTrainedTokenizer.encode`] and\n            [`PreTrainedTokenizer.__call__`] for details.\n\n            If `past_key_values` is used, optionally only the last `input_ids` have to be input (see\n            `past_key_values`).\n\n            If you want to change padding behavior, you should read [`modeling_opt._prepare_decoder_attention_mask`]\n            and modify to your needs. See diagram 1 in [the paper](https://arxiv.org/abs/1910.13461) for more\n            information on the default strategy.\n\n            - 1 indicates the head is **not masked**,\n            - 0 indicates the head is **masked**.\n        position_ids (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n            Indices of positions of each input sequence tokens in the position embeddings. Selected in the range `[0,\n            config.n_positions - 1]`.\n\n            [What are position IDs?](../glossary#position-ids)\n        past_key_values (`Cache`, *optional*):\n            Pre-computed hidden-states (key and values in the self-attention blocks and in the cross-attention\n            blocks) that can be used to speed up sequential decoding. This typically consists in the `past_key_values`\n            returned by the model at a previous stage of decoding, when `use_cache=True` or `config.use_cache=True`.\n\n            Should always be a [`~cache_utils.Cache`] instance and the model will output the same cache instance.\n            If `past_key_values` are used, the user can optionally input only the last `input_ids` (those that don't\n            have their past key value states given to this model) of shape `(batch_size, 1)` instead of all `input_ids`\n            of shape `(batch_size, sequence_length)`.\n        inputs_embeds (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`, *optional*):\n            Optionally, instead of passing `input_ids` you can choose to directly pass an embedded representation. This\n            is useful if you want more control over how to convert `input_ids` indices into associated vectors than the\n            model's internal embedding lookup matrix.\n        use_cache (`bool`, *optional*):\n            If set to `True`, `past_key_values` key value states are returned and can be used to speed up decoding (see\n            `past_key_values`).\n        output_attentions (`bool`, *optional*):\n            Whether or not to return the attentions tensors of all attention layers. See `attentions` under returned\n            tensors for more detail.\n        output_hidden_states (`bool`, *optional*):\n            Whether or not to return the hidden states of all layers. See `hidden_states` under returned tensors for\n            more detail.\n        return_dict (`bool`, *optional*):\n            Whether or not to return a [`~utils.ModelOutput`] instead of a plain tuple.\n        cache_position (`torch.LongTensor` of shape `(sequence_length)`, *optional*):\n            Indices depicting the position of the input sequence tokens in the sequence. Contrarily to `position_ids`,\n            this tensor is not affected by padding. It is used to update the cache in the correct position and to infer\n            the complete sequence length.\n\"\"\"\n\n\n@add_start_docstrings(\n    \"The bare chameleon Model outputting raw hidden-states without any specific head on top.\",\n    CHAMELEON_START_DOCSTRING,\n)\nclass ChameleonModel(ChameleonPreTrainedModel):\n    \"\"\"\n    Transformer decoder consisting of *config.num_hidden_layers* layers. Each layer is a [`ChameleonDecoderLayer`]\n\n    Args:\n        config: ChameleonConfig\n    \"\"\"\n\n    def __init__(self, config: ChameleonConfig):\n        super().__init__(config)\n        self.padding_idx = config.pad_token_id\n        self.vocab_size = config.vocab_size\n\n        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)\n        self.vocabulary_mapping = ChameleonImageVocabularyMapping(config.vocabulary_map)\n        decoder_layer = ChameleonDecoderLayer if not self.config.swin_norm else ChameleonSwinDecoderLayer\n        self.layers = nn.ModuleList([decoder_layer(config, layer_idx) for layer_idx in range(config.num_hidden_layers)])\n        self.norm = ChameleonRMSNorm(config.hidden_size, eps=config.rms_norm_eps)\n        self.vqmodel = ChameleonVQVAE(config.vq_config)\n        self.gradient_checkpointing = False\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.embed_tokens\n\n    def set_input_embeddings(self, value):\n        self.embed_tokens = value\n\n    def get_image_tokens(self, pixel_values: torch.FloatTensor):\n        \"\"\"\n        Tokenizes images into discrete tokens with VQGAN module. Converts\n        obtained image tokens into BPE tokens and wraps with \"boi\" and \"eoi\"\n        special tokens.\n\n        Args:\n            pixel_values (`torch.FloatTensor` of shape `(batch_size, num_channels, image_size, image_size)):\n                The tensors corresponding to the input images.\n        \"\"\"\n        batch_size = pixel_values.shape[0]\n        _, _, image_toks = self.vqmodel.encode(pixel_values)\n        bpe_toks = self.vocabulary_mapping.convert_img2bpe(image_toks)\n        bpe_toks = bpe_toks.view(batch_size, -1)\n        return bpe_toks\n\n    @add_start_docstrings_to_model_forward(CHAMELEON_INPUTS_DOCSTRING)\n    @add_code_sample_docstrings(\n        checkpoint=_CHECKPOINT_FOR_DOC,\n        output_type=BaseModelOutputWithPast,\n        config_class=_CONFIG_FOR_DOC,\n        expected_output=_EXPECTED_OUTPUT_SHAPE,\n    )\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        pixel_values: torch.FloatTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[Cache] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n        cache_position: Optional[torch.LongTensor] = None,\n    ) -> Union[Tuple, BaseModelOutputWithPast]:\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if self.gradient_checkpointing and self.training and use_cache:\n            logger.warning_once(\n                \"`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`.\"\n            )\n            use_cache = False\n\n        if (input_ids is None) ^ (inputs_embeds is not None):\n            raise ValueError(\n                \"You cannot specify both input_ids and inputs_embeds at the same time, and must specify either one\"\n            )\n\n        if pixel_values is not None and inputs_embeds is not None:\n            raise ValueError(\n                \"You cannot specify both pixel_values and inputs_embeds at the same time, and must specify either one\"\n            )\n\n        if pixel_values is not None:\n            image_tokens = self.get_image_tokens(pixel_values)\n            special_image_mask = input_ids == self.vocabulary_mapping.image_token_id\n            image_tokens = image_tokens.to(input_ids.device, input_ids.dtype)\n            input_ids = input_ids.masked_scatter(special_image_mask, image_tokens)\n\n        if inputs_embeds is None:\n            inputs_embeds = self.embed_tokens(input_ids)\n\n        if cache_position is None:\n            past_seen_tokens = past_key_values.get_seq_length() if past_key_values is not None else 0\n            cache_position = torch.arange(\n                past_seen_tokens, past_seen_tokens + inputs_embeds.shape[1], device=inputs_embeds.device\n            )\n\n        if position_ids is None:\n            position_ids = cache_position.unsqueeze(0)\n\n        causal_mask = self._update_causal_mask(\n            attention_mask, inputs_embeds, cache_position, past_key_values, output_attentions\n        )\n\n        # embed positions\n        hidden_states = inputs_embeds\n\n        # decoder layers\n        all_hidden_states = () if output_hidden_states else None\n        all_self_attns = () if output_attentions else None\n        next_decoder_cache = None\n\n        for decoder_layer in self.layers:\n            if output_hidden_states:\n                all_hidden_states += (hidden_states,)\n\n            if self.gradient_checkpointing and self.training:\n                layer_outputs = self._gradient_checkpointing_func(\n                    decoder_layer.__call__,\n                    hidden_states,\n                    causal_mask,\n                    position_ids,\n                    past_key_values,\n                    output_attentions,\n                    use_cache,\n                    cache_position,\n                )\n            else:\n                layer_outputs = decoder_layer(\n                    hidden_states,\n                    attention_mask=causal_mask,\n                    position_ids=position_ids,\n                    past_key_value=past_key_values,\n                    output_attentions=output_attentions,\n                    use_cache=use_cache,\n                    cache_position=cache_position,\n                )\n\n            hidden_states = layer_outputs[0]\n\n            if use_cache:\n                next_decoder_cache = layer_outputs[2 if output_attentions else 1]\n\n            if output_attentions:\n                all_self_attns += (layer_outputs[1],)\n\n        hidden_states = self.norm(hidden_states)\n\n        # add hidden states from the last decoder layer\n        if output_hidden_states:\n            all_hidden_states += (hidden_states,)\n\n        next_cache = None\n        if use_cache:\n            next_cache = next_decoder_cache\n\n        if not return_dict:\n            return tuple(v for v in [hidden_states, next_cache, all_hidden_states, all_self_attns] if v is not None)\n\n        return BaseModelOutputWithPast(\n            last_hidden_state=hidden_states,\n            past_key_values=next_cache,\n            hidden_states=all_hidden_states,\n            attentions=all_self_attns,\n        )\n\n    # Copied from transformers.models.llama.modeling_llama.LlamaModel._update_causal_mask\n    def _update_causal_mask(\n        self,\n        attention_mask: torch.Tensor,\n        input_tensor: torch.Tensor,\n        cache_position: torch.Tensor,\n        past_key_values: Cache,\n        output_attentions: bool,\n    ):\n        # TODO: As of torch==2.2.0, the `attention_mask` passed to the model in `generate` is 2D and of dynamic length even when the static\n        # KV cache is used. This is an issue for torch.compile which then recaptures cudagraphs at each decode steps due to the dynamic shapes.\n        # (`recording cudagraph tree for symint key 13`, etc.), which is VERY slow. A workaround is `@torch.compiler.disable`, but this prevents using\n        # `fullgraph=True`. See more context in https://github.com/huggingface/transformers/pull/29114\n\n        if self.config._attn_implementation == \"flash_attention_2\":\n            if attention_mask is not None and 0.0 in attention_mask:\n                return attention_mask\n            return None\n\n        # For SDPA, when possible, we will rely on its `is_causal` argument instead of its `attn_mask` argument, in\n        # order to dispatch on Flash Attention 2. This feature is not compatible with static cache, as SDPA will fail\n        # to infer the attention mask.\n        past_seen_tokens = past_key_values.get_seq_length() if past_key_values is not None else 0\n        using_static_cache = isinstance(past_key_values, StaticCache)\n\n        # When output attentions is True, sdpa implementation's forward method calls the eager implementation's forward\n        if self.config._attn_implementation == \"sdpa\" and not using_static_cache and not output_attentions:\n            if AttentionMaskConverter._ignore_causal_mask_sdpa(\n                attention_mask,\n                inputs_embeds=input_tensor,\n                past_key_values_length=past_seen_tokens,\n                is_training=self.training,\n            ):\n                return None\n\n        dtype, device = input_tensor.dtype, input_tensor.device\n        min_dtype = torch.finfo(dtype).min\n        sequence_length = input_tensor.shape[1]\n        if using_static_cache:\n            target_length = past_key_values.get_max_length()\n        else:\n            target_length = (\n                attention_mask.shape[-1]\n                if isinstance(attention_mask, torch.Tensor)\n                else past_seen_tokens + sequence_length + 1\n            )\n\n        if attention_mask is not None and attention_mask.dim() == 4:\n            # in this case we assume that the mask comes already in inverted form and requires no inversion or slicing\n            if attention_mask.max() != 0:\n                raise ValueError(\"Custom 4D attention mask should be passed in inverted form with max==0`\")\n            causal_mask = attention_mask\n        else:\n            causal_mask = torch.full((sequence_length, target_length), fill_value=min_dtype, dtype=dtype, device=device)\n            if sequence_length != 1:\n                causal_mask = torch.triu(causal_mask, diagonal=1)\n            causal_mask *= torch.arange(target_length, device=device) > cache_position.reshape(-1, 1)\n            causal_mask = causal_mask[None, None, :, :].expand(input_tensor.shape[0], 1, -1, -1)\n            if attention_mask is not None:\n                causal_mask = causal_mask.clone()  # copy to contiguous memory for in-place edit\n                mask_length = attention_mask.shape[-1]\n                padding_mask = causal_mask[:, :, :, :mask_length] + attention_mask[:, None, None, :]\n                padding_mask = padding_mask == 0\n                causal_mask[:, :, :, :mask_length] = causal_mask[:, :, :, :mask_length].masked_fill(\n                    padding_mask, min_dtype\n                )\n            \n            # b, indices = torch.where(input_tensor==10004)\n            # odd_indices = indices[::2]\n            # even_indices = indices[]\n            \n            \n        if (\n            self.config._attn_implementation == \"sdpa\"\n            and attention_mask is not None\n            and attention_mask.device.type == \"cuda\"\n            and not output_attentions\n        ):\n            # Attend to all tokens in fully masked rows in the causal_mask, for example the relevant first rows when\n            # using left padding. This is required by F.scaled_dot_product_attention memory-efficient attention path.\n            # Details: https://github.com/pytorch/pytorch/issues/110213\n            causal_mask = AttentionMaskConverter._unmask_unattended(causal_mask, min_dtype)\n        # torch.save(causal_mask, '/mnt/data/xzt/test/mask.pth')\n        # raise\n        return causal_mask\n\n\n@add_start_docstrings(\n    \"Chameleon Model with a head on top used for outputting logits for next token prediction.\",\n    CHAMELEON_START_DOCSTRING,\n)\nclass ChameleonForConditionalGeneration(ChameleonPreTrainedModel):\n    _tied_weights_keys = [\"lm_head.weight\"]\n\n    def __init__(self, config):\n        super().__init__(config)\n        self.model = ChameleonModel(config)\n        self.vocab_size = config.vocab_size\n        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n    def get_input_embeddings(self):\n        return self.model.embed_tokens\n\n    def set_input_embeddings(self, value):\n        self.model.embed_tokens = value\n\n    def get_output_embeddings(self):\n        return self.lm_head\n\n    def set_output_embeddings(self, new_embeddings):\n        self.lm_head = new_embeddings\n\n    def set_decoder(self, decoder):\n        self.model = decoder\n\n    def get_decoder(self):\n        return self.model\n\n    @add_start_docstrings_to_model_forward(CHAMELEON_INPUTS_DOCSTRING)\n    @replace_return_docstrings(output_type=CausalLMOutputWithPast, config_class=_CONFIG_FOR_DOC)\n    def forward(\n        self,\n        input_ids: torch.LongTensor = None,\n        pixel_values: torch.FloatTensor = None,\n        attention_mask: Optional[torch.Tensor] = None,\n        position_ids: Optional[torch.LongTensor] = None,\n        past_key_values: Optional[Cache] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        labels: Optional[torch.LongTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n        cache_position: Optional[torch.LongTensor] = None,\n    ) -> Union[Tuple, CausalLMOutputWithPast]:\n        r\"\"\"\n        Args:\n            labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`, *optional*):\n                Labels for computing the masked language modeling loss. Indices should either be in `[0, ...,\n                config.vocab_size]` or -100 (see `input_ids` docstring). Tokens with indices set to `-100` are ignored\n                (masked), the loss is only computed for the tokens with labels in `[0, ..., config.vocab_size]`.\n\n        Returns:\n\n        Example:\n\n        ```python\n        >>> from transformers import ChameleonProcessor, ChameleonForConditionalGeneration\n        >>> import torch\n        >>> import requests\n        >>> from PIL import Image\n\n        >>> model = ChameleonForConditionalGeneration.from_pretrained(\"facebook/chameleon-7b\", torch_dtype=torch.bfloat16)\n        >>> processor = ChameleonProcessor.from_pretrained(\"facebook/chameleon-7b\")\n\n        >>> prompt = \"I used to know a lot about constellations when I was younger, but as I grew older, I forgot most of what I knew. These are the only two constellations that I really remember now.<image><image>I would like for you to tell me about 3 more constellations and give me a little bit of history about the constellation.\"\n        >>> image = Image.open(requests.get(\"https://nineplanets.org/wp-content/uploads/2020/12/the-big-dipper-1.jpg\", stream=True).raw)\n        >>> image_2 = Image.open(requests.get(\"https://www.kxan.com/wp-content/uploads/sites/40/2020/10/ORION.jpg\", stream=True).raw)\n\n        >>> inputs = processor(prompt, images=[image, image_2], return_tensors=\"pt\").to(model.device, torch.bfloat16)\n\n        >>> generated_ids = model.generate(**inputs, max_new_tokens=100, do_sample=False)\n        >>> processor.batch_decode(generated_ids, skip_special_tokens=True)[0]\n        ```\"\"\"\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)\n        outputs = self.model(\n            input_ids=input_ids,\n            pixel_values=pixel_values,\n            attention_mask=attention_mask,\n            position_ids=position_ids,\n            past_key_values=past_key_values,\n            inputs_embeds=inputs_embeds,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n            cache_position=cache_position,\n        )\n\n        hidden_states = outputs[0]\n        logits = self.lm_head(hidden_states)\n        logits = logits.float()\n\n        if self.config.mask_image_logits:\n            # Disallow image tokens which does not include special begin-image and end-image tokens\n            image_tokens = self.model.vocabulary_mapping.image_tokens\n            logits[:, :, image_tokens] = torch.finfo(logits.dtype).min\n\n        loss = None\n        if labels is not None:\n            # Shift so that tokens < n predict n\n            shift_logits = logits[..., :-1, :].contiguous()\n            shift_labels = labels[..., 1:].contiguous()\n            # Flatten the tokens\n            \n            shift_logits = shift_logits.view(-1, self.config.vocab_size)\n            shift_labels = shift_labels.view(-1)\n\n            loss_fct = CrossEntropyLoss()\n\n            # Enable model parallelism\n            shift_labels = shift_labels.to(shift_logits.device)\n            loss = loss_fct(shift_logits, shift_labels)\n            \n            # w = torch.ones_like(loss)\n            # w[plan_idx] = 10\n            # loss = torch.mean(loss*w)\n            \n        if not return_dict:\n            output = (logits,) + outputs[1:]\n            return (loss,) + output if loss is not None else output\n\n        return CausalLMOutputWithPast(\n            loss=loss,\n            logits=logits,\n            past_key_values=outputs.past_key_values,\n            hidden_states=outputs.hidden_states,\n            attentions=outputs.attentions,\n        )\n\n    def prepare_inputs_for_generation(\n        self,\n        input_ids,\n        pixel_values=None,\n        past_key_values=None,\n        attention_mask=None,\n        inputs_embeds=None,\n        cache_position=None,\n        position_ids=None,\n        use_cache=True,\n        **kwargs,\n    ):\n        # If we have cache: let's slice `input_ids` through `cache_position`, to keep only the unprocessed tokens\n        # Exception 1: when passing input_embeds, input_ids may be missing entries\n        # Exception 2: some generation methods do special slicing of input_ids, so we don't need to do it here\n        if past_key_values is not None:\n            if inputs_embeds is not None:  # Exception 1\n                input_ids = input_ids[:, -cache_position.shape[0] :]\n            elif input_ids.shape[1] != cache_position.shape[0]:  # Default case (the \"else\", a no op, is Exception 2)\n                input_ids = input_ids[:, cache_position]\n\n        if attention_mask is not None and position_ids is None:\n            # create position_ids on the fly for batch generation\n            position_ids = attention_mask.long().cumsum(-1) - 1\n            position_ids.masked_fill_(attention_mask == 0, 1)\n            if past_key_values:\n                position_ids = position_ids[:, -input_ids.shape[1] :]\n\n        # if `inputs_embeds` are passed, we only want to use them in the 1st generation step\n        if inputs_embeds is not None and cache_position[0] == 0:\n            model_inputs = {\"inputs_embeds\": inputs_embeds}\n        else:\n            model_inputs = {\"input_ids\": input_ids.contiguous()}  # `contiguous()` needed for compilation use cases\n\n        if cache_position[0] == 0:\n            # If we're in cached decoding stage, pixel values should be `None` because input ids do not contain special image token anymore\n            # Otherwise we need pixel values to be passed to model\n            model_inputs[\"pixel_values\"] = pixel_values\n\n        model_inputs.update(\n            {\n                \"position_ids\": position_ids,\n                \"cache_position\": cache_position,\n                \"past_key_values\": past_key_values,\n                \"use_cache\": use_cache,\n                \"attention_mask\": attention_mask,\n            }\n        )\n        return model_inputs\n"}
{"type": "source_file", "path": "inference/eval.py", "content": "import json\nimport argparse\nimport os\nimport math\nimport pickle\nimport sys\n\nfrom PIL import Image\nimport evaluate\nimport torch\nimport numpy as np\nfrom tqdm import tqdm\nfrom pycocoevalcap.cider.cider import Cider\n\nfrom model.lumina_mgpt.inference_solver import FlexARInferenceSolver\nfrom model.lumina_mgpt.data.item_processor import FlexARItemProcessor\nfrom dataset.gen_data import QA\nfrom configs.nusc import tasks_config, generation_configs, do_generate\n\nfrom utils import encode_mask, decode_plans, process_prompt\nfrom planning_utils import PlanningMetric\nfrom metrics import calc_l2, eval_qa\n\ndef main(args):\n    anno_path = args.anno_path\n    nusc_path = args.nusc_path\n    save_path = args.save_path\n    model_path = args.model_path\n    data_path = args.data_path\n    task = args.task\n\n    with open(data_path, 'r') as f:\n        data = json.load(f) # [[conv[qas]]]\n\n    div = len(data) // args.split\n\n    def qa_from_dict(d):\n        qa = QA()\n        qa.from_dict(d)\n        return qa\n    \n    inferencer = FlexARInferenceSolver(\n        model_path=model_path,\n        precision='bf16'\n    )\n    processor = FlexARItemProcessor()\n    \n    inferencer.model.eval()\n    logs = list()\n    mask_tokens, mask_ids = encode_mask(processor)\n\n    with torch.no_grad():\n        for i, convs in tqdm(enumerate(data[div*args.id: div*(args.id+1)])):\n            past_tokens, past_key_values = None, None\n            try:\n                for j, conv in enumerate(convs):\n                    qas = list(map(qa_from_dict, conv)) # [QAs]\n                    # print(qas)\n\n                    for qa in qas:\n                        # print(qa.q, qa.a)\n\n                        if not tasks_config[task][qa.task][j]:\n                            continue\n                        \n                        if do_generate[task][qa.task][j]:\n                            # print('generating')\n                            generated, past_tokens, past_key_values = inferencer.generate(\n                                qas=[[qa.q, None]], \n                                locs=qa.coords[0],\n                                past_key_values=past_key_values,\n                                past_tokens=past_tokens,\n                                logits_processor=inferencer.create_logits_processor(generation_configs[qa.task]['processor']),\n                                **generation_configs[qa.task]['settings'],\n                            )\n                            \n                            if qa.task == 'plan':\n                                plans = '' + generated[0]\n                                past_tokens = torch.cat((past_tokens, mask_ids), dim=1)\n                                # argmax for example\n                                ans_ids = inferencer.model(past_tokens).logits.argmax(-1).squeeze(0)\n                                ans_ids = ans_ids[-27:-2].tolist()\n                                plan_tokens = processor.tokenizer.tokenizer.decode(ans_ids)\n                                plans += plan_tokens\n                                plans = decode_plans(plans)\n                                # log id for metric\n                                logs.append({'plan': plans, 'gt': qa.plan, 'id': qa.id})\n                            \n                            elif qa.task == 'image' or qa.task == 'init':\n                                generated[1][0].save(os.path.join(save_path, f'{i}-{j}.jpg'))\n                            \n                            else:\n                                logs.append({'generate': generated[0], 'gt': qa.a, 'gt_locs': qa.coords[1], 'task': qa.task})\n                                \n                            # TODO: decode coords\n                            \n                                \n                        else:\n                            # print(qa.q, qa.a)\n                            if qa.task == 'plan':\n                                new_tokens = process_prompt(\n                                    processor, [[qa.q, qa.a+mask_tokens]], \n                                    images=qa.image, \n                                    plans=[[qa.plan[0][0]]], \n                                    locs=qa.coords[0]+qa.coords[1], \n                                    bos=(qa.task=='init')\n                                )     \n\n                            else:\n                                new_tokens = process_prompt(\n                                    processor, [[qa.q, qa.a]], \n                                    images=qa.image, \n                                    plans=qa.plan, \n                                    locs=qa.coords[0]+qa.coords[1], \n                                    bos=(qa.task=='init')\n                                )\n\n                            if not past_tokens is None:\n                                past_tokens = torch.cat((past_tokens, new_tokens), dim=1)\n                            \n                            else:\n                                past_tokens = new_tokens\n            except:\n                continue\n            \n            if i % 20 == 0:            \n                with open(os.path.join(save_path, f'log-{args.id}.json'), 'w') as f:\n                    json.dump(logs, f)\n                            \n    # # load the log here and resume.\n    # with open(f'out/qa/log-{args.id}.json', 'r') as f:\n    #   logs = json.load(f)\n\n    # metrics for plan and qa\n    metric_dict = dict()\n    if task == 'plan':\n        planning_metric = PlanningMetric(nusc_path)\n        with open(anno_path, 'rb') as f:\n            annos = pickle.load(f)\n        future_seconds = 3\n        l2, cnt = np.zeros(2*future_seconds), 0\n        # coll\n        colls = [0., 0., 0.]\n        \n        for log in logs:\n            \n            if 'plan' in log:\n                l2 += np.array(calc_l2(log['plan'], log['gt'][0]))\n\n                \n                plan = torch.tensor(log['plan']).unsqueeze(0)\n                gt_infos = annos['infos'][log['id']]\n                gt_agent_boxes = np.concatenate([gt_infos['gt_boxes'], gt_infos['gt_velocity']], -1)\n                gt_agent_feats = np.concatenate([gt_infos['gt_fut_traj'][:, :6].reshape(-1, 12), gt_infos['gt_fut_traj_mask'][:, :6], gt_infos['gt_fut_yaw'][:, :6], gt_infos['gt_fut_idx']], -1)\n                bev_seg = planning_metric.get_birds_eye_view_label(gt_agent_boxes, gt_agent_feats, add_rec=True)\n                # mask should be all ones\n                gt_traj = gt_infos['gt_planning']\n                gt_traj = torch.from_numpy(gt_traj[..., :2])\n                seg = torch.from_numpy(bev_seg[1:]).unsqueeze(0)\n                for jj in range(future_seconds):\n                    cur_time = (jj+1)*2\n                    _, coll = planning_metric.evaluate_coll(plan[:,:cur_time,:2], gt_traj[:,:cur_time,:], seg)\n                    coll = coll.mean().item()\n                    colls[jj] += coll\n\n                cnt += 1\n                \n        for i in range(future_seconds):\n            cur_time = (i+1)*2\n            metric_dict[f'l2_{i+1}s'] = l2[:cur_time].sum().item() / cur_time / cnt\n            metric_dict[f'coll_{i+1}s'] = colls[i] / cnt\n        metric_dict['samples'] = cnt\n\n    elif task == 'qa':\n        predictions, references = [], []\n        # batch_size = 1024\n\n        for log in logs:\n            if 'task' in log and log['task'] == 'qa':\n                predictions.append(log['generate'])\n                references.append(log['gt'])\n                # add metrics\n        qa_dict = eval_qa(predictions, references, 'meteor')\n        for k, v in qa_dict.items():\n            metric_dict[k] = v\n\n    else:\n        raise NotImplementedError()\n    \n    print(metric_dict)\n    # TODO: support more evaluate metrics\n\n    with open(os.path.join(save_path, f'result-{args.id}.json'), 'w') as f:\n        json.dump(metric_dict, f, indent=4)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"set paths and tasks\")\n    parser.add_argument('--anno_path', type=str, help='Path to the annotation file.')\n    parser.add_argument('--nusc_path', type=str, help='Path to the Nuscenes Dataset.')\n    parser.add_argument('--model_path', type=str, help='Path to the model.')\n    parser.add_argument('--save_path', type=str, help='Path to save the results.')\n    parser.add_argument('--data_path', type=str, help='Path to the processed data.')\n    parser.add_argument('--task', type=str, help='Task to evaluate.')\n    parser.add_argument('--split', type=int, default=1, help='Split the data for multi gpus.')\n    parser.add_argument('--id', type=int, default=0)\n\n    args = parser.parse_args()\n    main(args)\n"}
{"type": "source_file", "path": "model/xllmx/model/tokenizer.py", "content": "import logging\nimport os\nfrom pathlib import Path\nfrom typing import List, Optional\n\nfrom sentencepiece import SentencePieceProcessor\nfrom transformers import AutoTokenizer\n\n__all__ = [\"Tokenizer\", \"probe_tokenizer_path_from_pretrained\"]\n\n\nlogger = logging.getLogger(__name__)\n\n\nclass Tokenizer:\n    def __init__(self, model_path: str):\n        \"\"\"\n        Create a tokenizer, with inner implementation either spm or HF transformers tokenzier\n        :param model_path:\n            - when using spm tokenizer, should be path to a sentencepiece model with suffix `.model`\n            - when using huggingface transformers tokenizer, should be an HF model repo or a local directory,\n              containing tokenizer.json and tokenizer_config.json.\n        \"\"\"\n        if model_path.endswith(\".model\"):  # spm tokenizer\n            self.tokenizer_type = \"spm\"\n            # reload tokenizer\n            assert os.path.isfile(model_path), model_path\n            self.tokenizer = SentencePieceProcessor(model_file=model_path)\n            logger.info(f\"Reloaded SentencePiece model from {model_path}\")\n\n            # BOS / EOS token IDs\n            self.bos_id: int = self.tokenizer.bos_id()\n            self.eos_id: int = self.tokenizer.eos_id()\n            assert self.tokenizer.vocab_size() == self.tokenizer.get_piece_size()\n        else:\n            self.tokenizer_type = \"transformers\"\n            self.tokenizer = AutoTokenizer.from_pretrained(model_path)\n            logger.info(f\"load HF transformers tokenizer from {model_path}\")\n            # BOS / EOS token IDs\n            self.bos_id: int = self.tokenizer.bos_token_id\n            if self.bos_id is None:\n                self.bos_id = self.tokenizer.eos_token_id\n            self.eos_id: int = self.tokenizer.eos_token_id\n            assert self.eos_id is not None\n\n        self._probe_tokenizer_style()\n\n        logger.info(f\"#words: {self.n_words} - BOS ID: {self.bos_id} - EOS ID: {self.eos_id}\")\n\n    def encode(self, s: str, bos: bool, eos: bool) -> List[int]:\n        assert type(s) is str\n        if self.tokenizer_type == \"transformers\":\n            t = self.tokenizer.encode(s, truncation=False, add_special_tokens=False)\n        else:\n            t = self.tokenizer.encode(s)\n        if bos:\n            t = [self.bos_id] + t\n        if eos:\n            t = t + [self.eos_id]\n        return t\n\n    def encode_segment(self, s: str):\n        s = s.lstrip(\" \")\n        if self.need_space_before_segment:\n            return self.encode(\" \" + s, bos=False, eos=False)\n        else:\n            return self.encode(s, bos=False, eos=False)\n\n    def encode_wo_prefix_space(self, s: str):\n        if self.need_space_before_segment:\n            return self.encode(s, bos=False, eos=False)\n        else:\n            # prefix chars that, when preceding other strings without seperator in between,\n            # are relatively more likely to be tokenized independently rather than getting\n            # merged into the following strings.\n            l_prefix = [\"@\", \"\\n\", \"\\\\\", \"=\", \">\", \"`\"]\n            for prefix in l_prefix:\n                prefix_tokens = self.encode(prefix, bos=False, eos=False)\n                cat_tokens = self.encode(prefix + s, bos=False, eos=False)\n                if cat_tokens[: len(prefix_tokens)] == prefix_tokens:\n                    return cat_tokens[len(prefix_tokens) :]\n\n            raise NotImplementedError(\n                f\"All prefixes are merged into {s} during tokenization,\"\n                f\"This is wierd behavior, please open an issue to report this problem\",\n            )\n\n    def _probe_tokenizer_style(self):\n        \"\"\"\n        Given a sentence, e.g. \"Hi my darling\", some tokenizers (e.g. LLaMA's) will pose the following behavior:\n        >>> # leading characters will be treated as if there were an \" \" in the beginning\n        >>> tokenizer.encode(\"Hi my darling\") == tokenizer.encode(\"Hi\") + tokenizer.encode(\"my darling\")\n        >>> # leading space \" \" is redundant and should not be added\n        >>> tokenizer.encode(\"Hi my darling\") != tokenizer.encode(\"Hi\") + tokenizer.encode(\" my darling\")\n        However, some others (e.g. InternLM's) will behave differently:\n        >>> # leading space \" \" has to be explicitly added\n        >>> tokenizer.encode(\"Hi my darling\") == tokenizer.encode(\"Hi\") + tokenizer.encode(\" my darling\")\n        Knowing which style the tokenizer takes is necessary when tokenzing a segment cut from the complete\n        text, so that the result is the same as the corresponding part in the tokenized original text.\n        \"\"\"\n        sentence1 = self.encode(\"Hi my darling\", bos=False, eos=False)\n        sentence2 = self.encode(\"my darling\", bos=False, eos=False)\n        if sentence1[-len(sentence2) :] == sentence2:\n            self.need_space_before_segment = False\n        else:\n            sentence3 = self.encode(\" my darling\", bos=False, eos=False)\n            assert sentence1[-len(sentence3) :] == sentence3\n            self.need_space_before_segment = True\n\n    def decode(self, t: List[int]) -> str:\n        return self.tokenizer.decode(t)\n\n    def save(self, save_dir: str):\n        if self.tokenizer_type == \"transformers\":\n            self.tokenizer.save_pretrained(save_dir)\n        else:\n            with open(Path(save_dir) / \"tokenizer.model\", \"wb\") as f:\n                f.write(self.tokenizer.serialized_model_proto())\n\n    @property\n    def n_words(self):\n        if self.tokenizer_type == \"spm\":\n            return self.tokenizer.vocab_size()\n        elif self.tokenizer_type == \"transformers\":\n            return len(self.tokenizer)\n        else:\n            raise RuntimeError\n\n\ndef probe_tokenizer_path_from_pretrained(pretrained_path: str):\n    tokenizer_path = None\n\n    # try find spm-style tokenizer\n    logger.info(f\"trying to find sentencepiece-style tokenizer at {Path(pretrained_path) / 'tokenizer.model'}\")\n    if (Path(pretrained_path) / \"tokenizer.model\").exists():\n        logger.info(f\"Found {Path(pretrained_path) / 'tokenizer.model'}, use it.\")\n        tokenizer_path = str(Path(pretrained_path) / \"tokenizer.model\")\n    else:\n        logger.info(\"Not Found\")\n\n    # then try huggingface style\n    if tokenizer_path is None:\n        logger.info(\n            f\"trying to find huggingface-style tokenizer at \"\n            f\"{Path(pretrained_path) / '(tokenizer.json, tokenizer_config.json)'}\"\n        )\n        if (Path(pretrained_path) / \"tokenizer.json\").exists() and (\n            Path(pretrained_path) / \"tokenizer_config.json\"\n        ).exists():\n            logger.info(f\"Found {Path(pretrained_path) / '(tokenizer.json, tokenizer_config.json)'}, use them.\")\n            tokenizer_path = pretrained_path\n        else:\n            logger.info(\"Not Found\")\n    if tokenizer_path is None:\n        logger.info(\"No usable tokenizer found\")\n    return tokenizer_path\n"}
{"type": "source_file", "path": "model/xllmx/solvers/finetune/finetune.py", "content": "from abc import ABC, abstractmethod\nimport argparse\nimport contextlib\nimport datetime\nimport functools\nimport gc\nimport json\nimport logging\nimport math\nimport os\nfrom pathlib import Path\nimport sys\nimport time\nfrom typing import Optional, Union\nimport warnings\nimport itertools\n\nfrom fairscale.nn.model_parallel import initialize as fs_init\nimport torch\nimport torch.distributed as dist\nfrom torch.distributed.algorithms._checkpoint.checkpoint_wrapper import (\n    CheckpointImpl,\n    apply_activation_checkpointing,\n    checkpoint_wrapper,\n)\nfrom torch.distributed.fsdp import FullyShardedDataParallel as FSDP, MixedPrecision, ShardingStrategy\nfrom torch.distributed.fsdp.wrap import lambda_auto_wrap_policy\nimport torch.nn as nn\nfrom torch.utils.data import Dataset\nfrom torch.utils.tensorboard import SummaryWriter\n\ntry:\n    from apex.optimizers import FusedAdam as AdamW\nexcept ImportError:\n    warnings.warn(\"cannot import FusedAdam from apex, use torch AdamW instead\")\n    from torch.optim import AdamW\n\nfrom xllmx.data.dataset import FinetuneConversationDataset, ItemProcessorBase\nfrom xllmx.data.sampler import FinetuneDistSampler\nfrom xllmx.model.tokenizer import Tokenizer\nimport xllmx.util as util\nimport xllmx.util.lr_sched as lr_sched\nimport xllmx.util.misc as misc\nfrom xllmx.util.tensor_type import promote_param_to_fp32\n\ndef zero_embed_gradient(grad):\n    grad[10504:14504] = 0\n    grad[15004:15344] = 0\n\nclass FinetuneSolverBase(ABC):\n\n    def __init__(self, args):\n        self.args = args\n        util.dist.init_distributed_mode(args)\n        self.logger = self.configure_logger()\n        self.logger.info(args)\n\n        assert args.model_parallel_size == 1, (\n            \"Model parallelism currently not supported, \",\n            \"so please keep model_parallel_size to 1\\n\"\n            \"Note that model parallelism is different from and orthogonal to FSDP\"\n        )\n        fs_init.initialize_model_parallel(args.model_parallel_size)\n        self.global_rank = dist.get_rank()\n        self.mp_rank = fs_init.get_model_parallel_rank()\n        self.mp_world_size = fs_init.get_model_parallel_world_size()\n        self.mp_group = fs_init.get_model_parallel_group()\n        self.dp_rank = fs_init.get_data_parallel_rank()\n        self.dp_world_size = fs_init.get_data_parallel_world_size()\n        self.dp_group = fs_init.get_data_parallel_group()\n\n        if self.args.auto_resume and self.args.resume_path is None:\n            existing_checkpoints = [_ for _ in os.listdir(self.args.output_dir) if \"epoch\" in _]\n            if len(existing_checkpoints) > 0:\n\n                def ckpt_sort_key(s):\n                    # divide ckpt directory names into epoch and iter parts\n                    epoch, iteration = util.ckpt.split_ckpt_str_into_epoch_iter(s)\n                    if iteration is None:\n                        iteration = float(\"inf\")\n                    return epoch, iteration\n\n                self.args.resume_path = os.path.join(\n                    self.args.output_dir, sorted(existing_checkpoints, key=ckpt_sort_key)[-1]\n                )\n                self.logger.info(f\"auto resume from {self.args.resume_path}\")\n\n        if args.output_dir and self.global_rank == 0:\n            Path(args.output_dir).mkdir(parents=True, exist_ok=True)\n        dist.barrier()\n\n        if args.precision == \"tf32\":\n            torch.backends.cuda.matmul.allow_tf32 = True\n            torch.backends.cudnn.allow_tf32 = True\n\n        self.logger.info(\"work dir: {}\".format(os.path.dirname(os.path.realpath(__file__))))\n        self.logger.info(\"{}\".format(self.args).replace(\", \", \",\\n\"))\n\n        # define the model\n        self.mixed_precision_dtype = {\n            \"fp16\": torch.float16,\n            \"bf16\": torch.bfloat16,\n            \"tf32\": torch.float32,\n        }[self.args.precision]\n\n        self.model, self.tokenizer, self.optimizer = self.build_model()\n        if self.args.double_set:\n            self.dataset_train, self.sampler_train, self.dataloader_train, self.second_set, self.second_sampler, self.second_loader = self.build_data()\n        else:\n            self.dataset_train, self.sampler_train, self.dataloader_train = self.build_data()\n\n        self.start_epoch = 0\n        self.start_iter = 0\n        self.metric_logger_to_resume = None\n\n        if self.args.resume_path:\n            self.resume(self.args.resume_path)\n\n        if self.global_rank == 0:\n            (Path(args.output_dir) / \"tensorboard\").mkdir(parents=True, exist_ok=True)\n            self.log_writer = SummaryWriter(log_dir=str(Path(args.output_dir) / \"tensorboard\"))\n        else:\n            self.log_writer = None\n\n        gc.collect()\n        torch.cuda.empty_cache()\n\n    def configure_logger(self):\n        rank = dist.get_rank()\n\n        logger = logging.getLogger()\n\n        logger.setLevel(logging.INFO)\n\n        # Create handlers\n        c_handler = logging.StreamHandler()  # Console handler\n        f_handler = logging.FileHandler(Path(self.args.output_dir) / f\"common.log\")  # Rank-specific\n        f_rank_handler = logging.FileHandler(\n            Path(self.args.output_dir) / f\"rank-{dist.get_rank()}.log\"\n        )  # Rank-specific\n\n        # Console and common file handler captures all INFO and above messages\n        c_handler.setLevel(logging.INFO if rank == 0 else logging.WARNING)\n        f_handler.setLevel(logging.INFO if rank == 0 else logging.WARNING)\n        f_rank_handler.setLevel(logging.INFO)\n\n        # Create a formatter and set it for both handlers\n        formatter = logging.Formatter(f\"[rank{rank}:%(levelname)s|%(filename)s:%(lineno)s] %(asctime)s >> %(message)s\")\n        c_handler.setFormatter(formatter)\n        f_handler.setFormatter(formatter)\n        f_rank_handler.setFormatter(formatter)\n        # Set the log level based on the rank argument\n\n        # Add handlers to the logger\n        logger.addHandler(c_handler)\n        logger.addHandler(f_handler)\n        logger.addHandler(f_rank_handler)\n\n        return logger\n\n    @classmethod\n    def get_args_parser(cls):\n        parser = argparse.ArgumentParser(\"xllmx Finetuning\", add_help=False)\n\n        # Schedule\n        parser.add_argument(\n            \"--batch_size\",\n            default=4,\n            type=int,\n            help=\"Batch size per GPU (effective batch size is batch_size * accum_iter * # gpus\",\n        )\n        parser.add_argument(\n            \"--accum_iter\",\n            default=4,\n            type=int,\n            help=\"Accumulate gradient iterations \" \"(for increasing the effective batch size under memory constraints)\",\n        )\n        parser.add_argument(\"--epochs\", default=1, type=int)\n        parser.add_argument(\"--warmup_epochs\", type=float, default=0.03, help=\"epoch to warmup LR\")\n\n        # Optimizer parameters\n        parser.add_argument(\"--lr\", type=float, default=0.00002, help=\"learning rate (absolute lr)\")\n        parser.add_argument(\n            \"--min_lr\", type=float, default=0.00, help=\"lower lr bound for cyclic schedulers that hit 0\"\n        )\n        parser.add_argument(\"--wd\", type=float, default=0.00, help=\"weight decay (default: 0.00)\")\n        parser.add_argument(\"--clip_grad\", type=float, default=4.0, help=\"grad clipping norm\")\n\n        parser.add_argument(\"--init_from\", default=None, type=str, help=\"path to checkpoint for model initialization\")\n\n        # Data parameters\n        parser.add_argument(\"--second_data_config\", default=\"/path/to/data/config/yaml\", type=str, help=\"data config path\")\n        parser.add_argument(\"--data_config\", default=\"/path/to/data/config/yaml\", type=str, help=\"data config path\")\n        parser.add_argument(\n            \"--cache_ann_on_disk\",\n            action=\"store_true\",\n            help=\"cache the dataset annotations on disk to avoid duplication across ranks. \"\n            \"can save CPU memory, especially with large datasets\",\n        )\n        parser.add_argument(\n            \"--length_clustering\",\n            default=True,\n            help=\"gather items with similar length to the same batch\",\n        )\n        parser.add_argument(\"--disable_length_clustering\", action=\"store_false\", dest=\"length_clustering\")\n        parser.add_argument(\"--num_workers\", default=8, type=int)\n        parser.add_argument(\n            \"--pin_mem\",\n            action=\"store_true\",\n            help=\"Pin CPU memory in DataLoader for more efficient (sometimes) transfer to GPU.\",\n        )\n        parser.add_argument(\"--no_pin_mem\", action=\"store_false\", dest=\"pin_mem\")\n        parser.set_defaults(pin_mem=True)\n\n        # Seed\n        parser.add_argument(\"--seed\", default=0, type=int)\n\n        # Control\n        parser.add_argument(\"--output_dir\", default=\"./output_dir\", help=\"path for outputs\")\n        parser.add_argument(\"--save_interval\", default=40, type=int, help=\"number of epochs between model saving\")\n        parser.add_argument(\n            \"--save_iteration_interval\",\n            default=5000,\n            type=int,\n            help=\"number of iterations between within-epoch model saving\",\n        )\n        parser.add_argument(\n            \"--only_save_trainable\", default=False, action=\"store_true\", help=\"only save trainable model parameters\"\n        )\n        parser.add_argument(\n            \"--ckpt_max_keep\", default=-1, type=int, help=\"maximum number of checkpoints to keep, <=0 means keep all\"\n        )\n        parser.add_argument(\"--auto_resume\", default=True, help=\"auto resume from args.output_dir\")\n        parser.add_argument(\"--no_auto_resume\", action=\"store_false\", dest=\"auto_resume\")\n        parser.add_argument(\"--resume_path\", default=None, type=str, help=\"manually specify resume checkpoint\")\n\n        # Parallel\n        parser.add_argument(\"--model_parallel_size\", type=int, default=1)\n        parser.add_argument(\"--data_parallel\", type=str, choices=[\"sdp\", \"fsdp\"], default=\"fsdp\")\n        parser.add_argument(\"--precision\", type=str, choices=[\"fp16\", \"bf16\", \"tf32\"], default=\"bf16\")\n        parser.add_argument(\"--grad_precision\", choices=[\"fp32\", \"fp16\", \"bf16\"], default=\"fp32\")\n\n        # Checkpointing\n        parser.add_argument(\"--checkpointing\", action=\"store_true\", default=False, help=\"enable gradient checkpointing\")\n        \n        parser.add_argument(\"--double_set\", action=\"store_true\", default=False)\n        # parser.add_argument('--quant', action=\"store_true\", default=False,  # todo\n        #                     help=\"enable quantization to speedup and save memory\")\n\n        return parser\n\n    def build_model(self) -> (nn.Module, Tokenizer):\n        init_from = self.args.resume_path or self.args.init_from\n        if init_from is None:\n            starting_point_path = Path(self.args.output_dir) / \"starting_point\"\n            if dist.get_rank() == 0:\n                if (starting_point_path / \"config.json\").exists():\n                    self.logger.info(f\"will use existing starting point at {starting_point_path}\")\n                    self.logger.info(\n                        f\"***********************************************************************\\n\"\n                        f\"********************************Caution********************************\\n\"\n                        f\"Caution: the starting point is created by some previous experiment run \\n\"\n                        f\"If the starting point saved by that run is broken, or if the expected  \\n\"\n                        f\"starting weights for the model has changed since that run, please manu-\\n\"\n                        f\"remove the saved path: \\n\"\n                        f\"{starting_point_path} \\n\"\n                        f\"and rerun the experiment.\\n\"\n                        f\"***********************************************************************\\n\"\n                        f\"***********************************************************************\\n\"\n                    )\n                else:\n                    self.logger.info(f\"creating starting-point weights at {starting_point_path}\")\n                    self._make_and_save_starting_point(save_path=str(starting_point_path))\n            dist.barrier()\n            init_from = str(starting_point_path)\n\n        self.logger.info(f\"Start instantiating unwrapped model from {init_from}\")\n\n        # only rank 0 instantiate, otherwise to meta\n        unwrapped_model, tokenizer = self._model_func(init_from)\n\n        if hasattr(unwrapped_model, \"get_trainable_params\"):\n            trainable_params = dict(unwrapped_model.get_trainable_params())\n            for key, param in unwrapped_model.named_parameters():\n                if key in trainable_params:\n                    param.requires_grad = True\n                    promote_param_to_fp32(param)\n                else:\n                    param.requires_grad = False\n                    keep_fp32_keywords = [\"norm\", \"lm_head\", \"embed_tokens\"]\n                    if any([_ in key for _ in keep_fp32_keywords]):\n                        promote_param_to_fp32(param)\n                    elif param.is_floating_point():\n                        param.data = param.data.to(self.mixed_precision_dtype)\n        else:\n            self.logger.warning(\n                f\"model class {type(unwrapped_model)} does not have `get_trainable_params` method,\"\n                f\"set all params to trainable\"\n            )\n            for key, param in unwrapped_model.named_parameters():\n                param.requires_grad = True\n                param.requires_grad = True\n                promote_param_to_fp32(param)\n        # unwrapped_model.model.embed_tokens.weight.requires_grad=False\n        \n        \n        # froken positional embedding\n        for p in unwrapped_model.model.embed_tokens.parameters():\n            p.register_hook(zero_embed_gradient)\n\n        self.logger.info(\"Finish instantiating unwrapped model.\")\n        self.logger.info(f\"Unwrapped model: \\n{str(unwrapped_model)}\")\n        self.logger.info(f\"Model config: \\n{unwrapped_model.config.to_dict()}\")\n\n        # ----------------\n        self.is_peft = getattr(unwrapped_model, \"is_peft\", False)  # todo\n        self.logger.info(f\"Model is Peft: {self.is_peft}\")\n        # ----------------\n\n        misc.mark_mp_params(unwrapped_model)\n\n        # defer this after FSDP\n        misc.print_param_status(unwrapped_model)\n\n        train_param_count_local, train_param_count_all = 0, 0\n        frozen_param_count_local, frozen_param_count_all = 0, 0\n        for name, param in unwrapped_model.named_parameters():\n            model_parallel = getattr(param, \"model_parallel\", False)\n            if param.requires_grad:\n                if model_parallel:\n                    train_param_count_all += param.numel() * fs_init.get_model_parallel_world_size()\n                else:\n                    train_param_count_all += param.numel()\n                train_param_count_local += param.numel()\n            else:\n                if model_parallel:\n                    frozen_param_count_all += param.numel() * fs_init.get_model_parallel_world_size()\n                else:\n                    frozen_param_count_all += param.numel()\n                frozen_param_count_local += param.numel()\n\n        self.logger.info(\n            f\"Trainable parameter count : {train_param_count_local} (local rank), {train_param_count_all} (all).\\n\"\n            f\"Frozen parameter count : {frozen_param_count_local} (local rank), {frozen_param_count_all} (all).\"\n        )\n\n        # checkpointing (part1, should be called before FSDP wrapping)\n        if self.args.checkpointing:\n            # todo more hints for not-implemented\n            checkpointing_list = unwrapped_model.get_checkpointing_wrap_module_list()\n        else:\n            checkpointing_list = []\n\n        # todo pre-sync ignored states\n        model = self.setup_fsdp_sync(\n            unwrapped_model, self.args.data_parallel, self.args.precision, self.args.grad_precision\n        )\n\n        # broadcast non-model-parallel parameters within model parallel group\n        misc.broadcast_nonmp_parameters(model)\n\n        # checkpointing (part2, after FSDP wrapping)\n        if self.args.checkpointing:\n            print(\"apply gradient checkpointing\")\n            non_reentrant_wrapper = functools.partial(\n                checkpoint_wrapper,\n                checkpoint_impl=CheckpointImpl.NO_REENTRANT,\n            )\n            apply_activation_checkpointing(\n                model,\n                checkpoint_wrapper_fn=non_reentrant_wrapper,\n                check_fn=lambda submodule: submodule in checkpointing_list,\n            )\n\n        self.logger.info(f\"Wrapped model: \\n{str(model)}\")\n\n        # Setup optimizer\n        opt = torch.optim.AdamW(model.parameters(), lr=self.args.lr, weight_decay=self.args.wd, betas=(0.9, 0.95))\n\n        return model, tokenizer, opt\n\n    @abstractmethod\n    def _model_func(self, init_from: str) -> (nn.Module, Tokenizer | None):  # todo return type get finer # noqa\n        raise NotImplementedError(f\"{self.__class__} has to implement model_func for model instantiation\")\n\n    @abstractmethod\n    def _make_and_save_starting_point(self, save_path: str):\n        raise NotImplementedError(f\"{self.__class__} has not implemented _make_and_save_starting_point()\")\n\n    def setup_fsdp_sync(self, model: nn.Module, data_parallel: str, precision: str, grad_precision: Optional[str]) -> FSDP:\n\n        if self.dp_rank == 0:\n            param_init_fn = None\n        else:\n            param_init_fn = lambda x: x.to_empty(device=torch.cuda.current_device(), recurse=False)\n\n\n        model = FSDP(\n            model,\n            auto_wrap_policy=functools.partial(\n                lambda_auto_wrap_policy,\n                lambda_fn=lambda m: m in model.get_fsdp_wrap_module_list(),\n            ),\n            process_group=fs_init.get_data_parallel_group(),\n            sharding_strategy={\n                \"fsdp\": ShardingStrategy.FULL_SHARD,\n                \"sdp\": ShardingStrategy.SHARD_GRAD_OP,\n            }[data_parallel],\n            mixed_precision=MixedPrecision(\n                param_dtype={\n                    \"fp32\": torch.float,\n                    \"tf32\": torch.float,\n                    \"bf16\": torch.bfloat16,\n                    \"fp16\": torch.float16,\n                }[precision],\n                reduce_dtype={\n                    \"fp32\": torch.float,\n                    \"tf32\": torch.float,\n                    \"bf16\": torch.bfloat16,\n                    \"fp16\": torch.float16,\n                }[grad_precision or precision],\n            ),\n            device_id=torch.cuda.current_device(),\n            sync_module_states=True,\n            limit_all_gathers=True,\n            use_orig_params=True,\n            param_init_fn=param_init_fn\n\n        )\n        torch.cuda.synchronize()\n\n        return model\n\n    def build_data(self):\n        eff_batch_size = self.args.batch_size * self.args.accum_iter * fs_init.get_data_parallel_world_size()\n        self.logger.info(\"effective batch size: %d\" % eff_batch_size)\n        if self.args.double_set:\n            dataset_train, second_set = self._dataset_func()\n            self.logger.info(dataset_train)\n            self.logger.info(second_set)\n        else:\n            dataset_train = self._dataset_func()\n            self.logger.info(dataset_train)\n\n        sampler_train = FinetuneDistSampler(\n            dataset_train,\n            num_replicas=self.dp_world_size,\n            rank=self.dp_rank,\n            shuffle=True,\n            batch_size=self.args.batch_size,\n            acc_grad=self.args.accum_iter,\n            seed=self.args.seed,\n            length_clustering=self.args.length_clustering,\n        )\n        dataloader_train = torch.utils.data.DataLoader(\n            dataset_train,\n            batch_size=self.args.batch_size,\n            num_workers=self.args.num_workers,\n            pin_memory=self.args.pin_mem,\n            sampler=sampler_train,\n            collate_fn=lambda batch: tuple(zip(*batch)),\n            drop_last=True,\n        )\n        self.logger.info(len(dataloader_train))\n        self.logger.info(len(dataset_train))\n        if self.args.double_set:\n            second_sampler_train = FinetuneDistSampler(\n                second_set,\n                num_replicas=self.dp_world_size,\n                rank=self.dp_rank,\n                shuffle=True,\n                batch_size=128,\n                acc_grad=self.args.accum_iter,\n                seed=self.args.seed,\n                length_clustering=self.args.length_clustering,\n            )\n            second_dataloader_train = torch.utils.data.DataLoader(\n                second_set,\n                batch_size=self.args.batch_size,\n                num_workers=self.args.num_workers,\n                pin_memory=self.args.pin_mem,\n                sampler=second_sampler_train,\n                collate_fn=lambda batch: tuple(zip(*batch)),\n                drop_last=True,\n            )\n            self.logger.info(len(second_sampler_train))\n            self.logger.info(len(second_dataloader_train))\n            return dataset_train, sampler_train, dataloader_train, second_set, second_sampler_train, second_dataloader_train\n\n        return dataset_train, sampler_train, dataloader_train\n\n    @abstractmethod\n    def _item_processor_func(self) -> ItemProcessorBase:\n        raise NotImplementedError\n\n    def _dataset_func(self, double_set=False):\n        item_processor = self._item_processor_func()\n        \n        dataset = FinetuneConversationDataset(\n            self.args.data_config, item_processor=item_processor, cache_on_disk=self.args.cache_ann_on_disk\n        )\n        \n        if self.args.double_set:\n            dataset1 = FinetuneConversationDataset(\n            self.args.second_data_config, item_processor=item_processor, cache_on_disk=self.args.cache_ann_on_disk\n        )\n            return dataset, dataset1\n        return dataset\n\n    def resume(self, resume_path: str):\n        \"\"\"\n        Note: model ckpt is not loaded here because _model_func should already have met the resume path as init path\n        \"\"\"\n\n        def _load_optimizer():\n            opt_state_world_size = len(\n                [x for x in os.listdir(resume_path) if x.startswith(\"optimizer.\") and x.endswith(\".pth\")]\n            )\n            assert opt_state_world_size == dist.get_world_size(), (\n                f\"Resuming from a checkpoint with unmatched world size \"\n                f\"({dist.get_world_size()} vs. {opt_state_world_size}) \"\n                f\"is currently not supported.\"\n            )\n            self.logger.info(f\"Resuming optimizer states from: {self.args.resume_path}\")\n            self.optimizer.load_state_dict(\n                torch.load(\n                    os.path.join(\n                        resume_path,\n                        f\"optimizer.{dist.get_rank():05d}-of-{dist.get_world_size():05d}.pth\",\n                    ),\n                    map_location=\"cpu\",\n                )\n            )\n            for param_group in self.optimizer.param_groups:\n                param_group[\"lr\"] = self.args.lr\n                param_group[\"weight_decay\"] = self.args.wd\n\n        _load_optimizer()\n        self.logger.info(\"Optimizer resume complete\")\n\n        resume_epoch, resume_iteration = util.ckpt.split_ckpt_str_into_epoch_iter(resume_path.split(\"/\")[-1])\n\n        if resume_iteration is None:\n            self.start_epoch = resume_epoch + 1\n            self.start_iter = 0\n        else:\n            self.start_epoch = resume_epoch\n            self.start_iter = resume_iteration + 1\n\n        self.logger.info(f\"resume to epoch {self.start_epoch} iter {self.start_iter}\")\n\n        additional_rank_specific = os.path.join(\n            resume_path, f\"additional.{dist.get_rank():05d}-of-{dist.get_world_size():05d}.pth\"\n        )\n        if os.path.exists(additional_rank_specific):\n            additional_rank_specific = torch.load(additional_rank_specific, map_location=\"cpu\")\n            if \"metric_logger\" in additional_rank_specific:\n                self.metric_logger_to_resume = additional_rank_specific[\"metric_logger\"]\n                self.logger.info(\"metric logger resumed\")\n\n    def run(self):\n        self.logger.info(f\"Start training for {self.args.epochs} epochs\")\n        start_time = time.time()\n        for epoch in range(self.start_epoch, self.args.epochs):\n            self.dataloader_train.sampler.set_epoch(epoch, self.start_iter)  # todo rename set_epoch\n\n            train_stats = self.train_one_epoch(\n                epoch,\n                self.start_iter,\n                log_writer=self.log_writer,\n                metric_logger=self.metric_logger_to_resume,\n            )\n\n            if epoch % self.args.save_interval == 0 or epoch + 1 == self.args.epochs:\n                util.ckpt.save(\n                    self.args.output_dir,\n                    self.global_rank == 0,\n                    self.model,\n                    self.optimizer,\n                    self.tokenizer,\n                    self.args,\n                    epoch=epoch,\n                    max_keep=self.args.ckpt_max_keep,\n                )\n\n            log_stats = {**{f\"train_{k}\": v for k, v in train_stats.items()}, \"epoch\": epoch}\n\n            if self.global_rank == 0:\n                if self.log_writer is not None:\n                    self.log_writer.flush()\n                with open(os.path.join(self.args.output_dir, \"log.txt\"), mode=\"a\", encoding=\"utf-8\") as f:\n                    f.write(json.dumps(log_stats) + \"\\n\")\n\n            self.start_iter = 0\n            self.metric_logger_to_resume = None\n\n        total_time = time.time() - start_time\n        total_time_str = str(datetime.timedelta(seconds=int(total_time)))\n        self.logger.info(\"Training time {}\".format(total_time_str))\n\n    def train_one_epoch(\n        self,\n        epoch: int,\n        start_iter: int,\n        log_writer=None,\n        metric_logger=None,\n    ):\n        self.model.train(True)\n        if metric_logger is None:\n            metric_logger = misc.MetricLogger(delimiter=\"  \")\n            metric_logger.add_meter(\"lr\", misc.SmoothedValue(window_size=1, fmt=\"{value:.6f}\"))\n\n        header = \"Epoch: [{}]\".format(epoch)\n        print_freq = 10  # todo arg\n\n        accum_iter = self.args.accum_iter\n        accum_counter = 0\n\n        if self.args.double_set:\n            iterator = itertools.cycle(self.second_loader)\n        self.optimizer.zero_grad()\n        for data_iter_step, batch_data in enumerate(\n            metric_logger.log_every(\n                self.dataloader_train,\n                print_freq,\n                header,\n                start_iter,\n                self.args.batch_size * fs_init.get_data_parallel_world_size(),\n            ),\n            start=start_iter,\n        ):\n            accum_counter = (accum_counter + 1) % accum_iter\n            is_gradient_accumulation_boundary = accum_counter == 0\n\n            examples, labels = batch_data\n            \n            \n            if is_gradient_accumulation_boundary or data_iter_step == start_iter:\n                lr_sched.adjust_learning_rate_epoch(\n                    self.optimizer, data_iter_step / len(self.dataloader_train) + epoch, self.args\n                )\n\n            with {\n                \"bf16\": torch.cuda.amp.autocast(dtype=torch.bfloat16),\n                \"fp16\": torch.cuda.amp.autocast(dtype=torch.float16),\n                \"fp32\": contextlib.nullcontext(),\n                \"tf32\": contextlib.nullcontext(),\n            }[self.args.precision]:\n                c_loss, additional_loss_dict = self.model(examples, labels)\n            loss = c_loss\n            for add_loss, weight in additional_loss_dict.values():\n                loss = loss + add_loss * weight\n            loss_value = loss.item()\n            c_loss_value = c_loss.item()\n            if not math.isfinite(loss_value):\n                self.logger.error(\"Loss is {}, stopping training\".format(loss_value))\n                sys.exit(1)\n\n            effective_loss = loss / accum_iter\n\n            with (\n                self.model.no_sync()\n                if self.args.data_parallel in [\"sdp\", \"hsdp\"] and not is_gradient_accumulation_boundary\n                else contextlib.nullcontext()\n            ):\n                effective_loss.backward()\n\n            if is_gradient_accumulation_boundary:\n                grad_norm = self.model.clip_grad_norm_(max_norm=self.args.clip_grad)\n                metric_logger.update(grad_norm=grad_norm)\n                self.optimizer.step()\n                self.optimizer.zero_grad(set_to_none=True)\n\n            torch.cuda.synchronize()\n\n            metric_logger.update(closs=c_loss_value)\n            metric_logger.update(**{key: val[0].item() for key, val in additional_loss_dict.items()})\n            lr = self.optimizer.param_groups[0][\"lr\"]\n            metric_logger.update(lr=lr)\n            \n            if self.args.double_set and (data_iter_step+1) % 3 == 0:\n                examples, labels = next(iterator)\n                with {\n                \"bf16\": torch.cuda.amp.autocast(dtype=torch.bfloat16),\n                \"fp16\": torch.cuda.amp.autocast(dtype=torch.float16),\n                \"fp32\": contextlib.nullcontext(),\n                \"tf32\": contextlib.nullcontext(),\n            }[self.args.precision]:\n                    plan_loss, plan_loss_dict = self.model(examples, labels)\n                for add_loss, weight in plan_loss_dict.values():\n                    plan_total_loss = plan_loss + add_loss * weight\n                    \n                ploss_value = plan_total_loss.item()\n                c_ploss_value = plan_loss.item()\n                \n                with (\n                self.model.no_sync()\n                if self.args.data_parallel in [\"sdp\", \"hsdp\"] and not is_gradient_accumulation_boundary\n                else contextlib.nullcontext()\n                ):\n                    plan_total_loss.backward()\n                    \n                if is_gradient_accumulation_boundary:\n                    pgrad_norm = self.model.clip_grad_norm_(max_norm=self.args.clip_grad)\n                    metric_logger.update(pgrad_norm=pgrad_norm)\n                    self.optimizer.step()\n                    self.optimizer.zero_grad(set_to_none=True)\n                torch.cuda.synchronize()\n                metric_logger.update(ploss=c_ploss_value)\n                \n            for metric_name, metric in metric_logger.meters.items():\n                metric_value = metric.value\n                metric_value = util.dist.all_reduce_mean(metric_value)\n                if log_writer is not None:\n                    log_writer.add_scalar(\n                        metric_name, metric_value, data_iter_step + len(self.dataloader_train) * epoch\n                    )\n                \n\n            # # save within epoch\n            # n_update_per_save = self.args.save_iteration_interval // accum_iter\n            # if (\n            #     is_gradient_accumulation_boundary and ((data_iter_step + 1) // accum_iter) % n_update_per_save == 0\n            # ) or (data_iter_step + 1 == accum_iter and epoch == 0):\n            #     util.ckpt.save(\n            #         self.args.output_dir,\n            #         self.global_rank == 0,\n            #         self.model,\n            #         self.optimizer,\n            #         self.tokenizer,\n            #         self.args,\n            #         epoch=epoch,\n            #         iteration=data_iter_step,\n            #         additional_rank_specific={\n            #             \"metric_logger\": metric_logger,\n            #         },\n            #         max_keep=self.args.ckpt_max_keep,\n            #     )\n\n        # gather the stats from all processes\n        metric_logger.synchronize_between_processes()\n        self.logger.info(f\"Averaged stats:\\n{metric_logger}\")\n        return {k: meter.global_avg for k, meter in metric_logger.meters.items()}\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/configuration_xllmx_chameleon.py", "content": "import logging\nfrom typing import List\n\nfrom .chameleon import ChameleonConfig\n\nlogger = logging.getLogger(__name__)\n\n\nclass ChameleonXLLMXConfig(ChameleonConfig):\n\n    def __init__(\n        self,\n        z_loss_weight: float = 0.0,\n        **kwargs,\n    ):\n        self.z_loss_weight = z_loss_weight\n        super().__init__(\n            **kwargs,\n        )\n"}
{"type": "source_file", "path": "model/xllmx/util/tensor_type.py", "content": "import torch\nimport torch.nn as nn\n\n\ndef promote_param_to_fp32(param: nn.Parameter) -> None:\n    if param.is_floating_point() and torch.finfo(param.dtype).bits < 32:\n        param.data = param.data.float()\n    if param.is_complex() and torch.finfo(param.dtype).bits < 32:\n        param.data = param.data.to(torch.complex64)\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/modeling_xllmx_chameleon.py", "content": "import functools\nimport logging\nimport math\nfrom typing import List\n\nimport torch\nfrom torch import nn\n\nfrom .chameleon import ChameleonForConditionalGeneration\nfrom .configuration_xllmx_chameleon import ChameleonXLLMXConfig\n\nlogger = logging.getLogger(__name__)\n\ndefault_linear_init = functools.partial(nn.init.kaiming_uniform_, a=math.sqrt(5))\n\n\n__all__ = [\"ChameleonXLLMXForConditionalGeneration\"]\n\n\nclass ChameleonXLLMXForConditionalGeneration(ChameleonForConditionalGeneration):\n    config_class = ChameleonXLLMXConfig\n\n    def __init__(self, config):\n        super().__init__(config)\n\n    def forward(self, input_ids=None, labels=None, training=True, **kwargs):\n\n        max_tokens = max([len(_) for _ in input_ids])\n        max_tokens = min(max_tokens, self.config.max_position_embeddings)\n        input_ids = [_[:max_tokens] for _ in input_ids]\n        labels = [_[:max_tokens] for _ in labels]\n\n        input_ids = [example + [0] * (max_tokens - len(example)) for example in input_ids]\n        input_ids = torch.tensor(input_ids, dtype=torch.int64, device=self.device)\n\n        labels = [label + [-100] * (max_tokens - len(label)) for label in labels]\n        labels = torch.tensor(labels, dtype=torch.int64, device=self.device)\n\n        # explicit use_cache=False for the following\n        # https://github.com/Lightning-AI/pytorch-lightning/issues/19267\n        result = ChameleonForConditionalGeneration.forward(\n            self, input_ids=input_ids, labels=labels, use_cache=False, **kwargs\n        )\n\n        c_loss = result[0]\n\n        additional_loss_dict = {}\n        if self.config.z_loss_weight > 0:\n            logits: torch.Tensor = result[1]\n            shift_logits = logits[..., :-1, :].contiguous()\n            shift_labels = labels[..., 1:].contiguous()\n            valid_mask = shift_labels >= 0\n            z_loss = torch.logsumexp(shift_logits, dim=-1).pow(2)[valid_mask].mean()\n            additional_loss_dict[\"z_loss\"] = (z_loss, self.config.z_loss_weight)\n        return c_loss, additional_loss_dict\n\n    def get_fsdp_wrap_module_list(self) -> List:\n        modules = [*list(self.model.layers), self.lm_head, self.model.embed_tokens]\n        if hasattr(self.model, \"vqmodel\"):  # may be deleted\n            modules.append(self.model.vqmodel)\n        return modules\n\n    def get_checkpointing_wrap_module_list(self) -> List:\n        modules = [\n            *list(self.model.layers),\n        ]\n        return modules\n"}
{"type": "source_file", "path": "model/xllmx/util/ckpt.py", "content": "import json\nimport logging\nimport os\nimport shutil\nfrom typing import Dict, Optional\n\nimport torch\nfrom torch import distributed as dist\nfrom torch.distributed.fsdp import FullStateDictConfig, FullyShardedDataParallel as FSDP, StateDictType\n\nlogger = logging.getLogger(__name__)\n\n\ndef split_ckpt_str_into_epoch_iter(ckpt_str: str):\n    # divide ckpt directory names into epoch and iter parts\n    parts = ckpt_str.split(\"-\")\n    epoch = int(parts[0].replace(\"epoch\", \"\"))\n    if len(parts) == 2:\n        iter_part = int(parts[1].replace(\"iter\", \"\"))\n    else:\n        iter_part = None\n    return epoch, iter_part\n\n\ndef remove_early_ckpts(out_dir, max_keep=2):\n\n    if max_keep <= 0:\n        return\n\n    def ckpt_sort_key(s):\n        # divide ckpt directory names into epoch and iter parts\n        epoch, iteration = split_ckpt_str_into_epoch_iter(s)\n        if iteration is None:\n            iteration = float(\"inf\")\n        return epoch, iteration\n\n    existing_checkpoints = [_ for _ in os.listdir(out_dir) if \"epoch\" in _]\n    existing_checkpoints = sorted(existing_checkpoints, key=ckpt_sort_key, reverse=True)\n\n    for dir_to_remove in existing_checkpoints[max_keep:]:\n        dir_to_remove = os.path.join(out_dir, dir_to_remove)\n        shutil.rmtree(dir_to_remove)\n        logger.info(f\"Deleted {dir_to_remove}\")\n\n\ndef save(\n    output_dir,\n    is_main_process,\n    model: FSDP,\n    optimizer: Optional[torch.optim.Optimizer] = None,\n    tokenizer=None,\n    args=None,\n    epoch=None,\n    iteration=None,\n    additional_rank_common: Optional[Dict] = None,\n    additional_rank_specific: Optional[Dict] = None,\n    max_keep=2,\n):\n    save_name = f\"epoch{epoch}\"\n    if iteration is not None:\n        save_name += f\"-iter{iteration}\"\n    save_dir = os.path.join(output_dir, save_name)\n\n    os.makedirs(save_dir, exist_ok=True)\n\n    # save model\n    with FSDP.state_dict_type(\n        model,\n        StateDictType.FULL_STATE_DICT,\n        FullStateDictConfig(rank0_only=True, offload_to_cpu=True),\n    ):\n        # run saving in separate functions to save memory\n        def _save_model():\n            save_dtype = {\n                \"fp16\": torch.float16,\n                \"bf16\": torch.bfloat16,\n                \"tf32\": torch.float,\n            }[\n                args.precision\n            ]  # todo make saving precision optional\n            if getattr(args, \"only_save_trainable\", False):\n                model_trainable_params = model.get_trainable_params()\n                model_trainable_params = [\n                    \".\".join([_ for _ in key.split(\".\") if not _.startswith(\"_\")])\n                    for key in model_trainable_params.keys()\n                ]\n                consolidated_model_state_dict = {\n                    key: val.to(save_dtype) for key, val in model.state_dict().items() if key in model_trainable_params\n                }\n            else:\n                consolidated_model_state_dict = {key: val.to(save_dtype) for key, val in model.state_dict().items()}\n\n            if is_main_process:\n                model.save_pretrained(save_dir, state_dict=consolidated_model_state_dict)\n\n        _save_model()\n        logger.info(\"model saved\")\n\n    # save optimizer\n    if optimizer is not None:\n        with FSDP.state_dict_type(\n            model,\n            StateDictType.LOCAL_STATE_DICT,\n        ):\n            opt_path = os.path.join(\n                save_dir,\n                f\"optimizer.{dist.get_rank():05d}-of-{dist.get_world_size():05d}.pth\",\n            )\n            torch.save(optimizer.state_dict(), opt_path)\n            logger.info(\"optimizer saved\")\n    else:\n        logger.info(\"optimizer is None, skip saving\")\n\n    if additional_rank_specific is not None:\n        torch.save(\n            additional_rank_specific,\n            os.path.join(save_dir, f\"additional.{dist.get_rank():05d}-of-{dist.get_world_size():05d}.pth\"),\n        )\n        logger.info(f\"additional_rank_specific {list(additional_rank_specific.keys())} saved\")\n\n    if not is_main_process:\n        dist.barrier()\n        return\n\n    # =========The followings are for main process only=========\n    if tokenizer is not None:\n        tokenizer.save(save_dir)\n        logger.info(\"tokenizer saved\")\n    else:\n        logger.info(\"tokenizer is None, skip saving\")\n\n    if args is not None:\n        with open(os.path.join(save_dir, \"args.json\"), \"w\") as f:\n            json.dump(vars(args), f, indent=2)\n        logger.info(\"args saved\")\n    else:\n        logger.info(\"args is None, skip saving\")\n\n    if additional_rank_common is not None:\n        torch.save(additional_rank_common, os.path.join(save_dir, \"additional_rank_common.pth\"))\n        logger.info(f\"additional_resources {list(additional_rank_common.keys())} saved\")\n\n    remove_early_ckpts(output_dir, max_keep=max_keep)\n\n    dist.barrier()\n    return\n"}
{"type": "source_file", "path": "model/xllmx/util/misc.py", "content": "from collections import defaultdict, deque\nimport datetime\nimport logging\nimport random\nimport time\n\nfrom fairscale.nn.model_parallel import initialize as fs_init\nimport numpy as np\nimport torch\nimport torch.distributed as dist\n\nlogger = logging.getLogger(__name__)\n\n\ndef random_seed(seed=0):\n    random.seed(seed)\n    torch.random.manual_seed(seed)\n    np.random.seed(seed)\n\n\nclass SmoothedValue(object):\n    \"\"\"Track a series of values and provide access to smoothed values over a\n    window or the global series average.\n    \"\"\"\n\n    def __init__(self, window_size=1000, fmt=None):\n        if fmt is None:\n            fmt = \"{avg:.4f} ({global_avg:.4f})\"\n        self.deque = deque(maxlen=window_size)\n        self.total = 0.0\n        self.count = 0\n        self.fmt = fmt\n\n    def update(self, value, n=1):\n        self.deque.append(value)\n        self.count += n\n        self.total += value * n\n\n    def synchronize_between_processes(self):\n        \"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"\n        t = torch.tensor([self.count, self.total], dtype=torch.float64, device=\"cuda\")\n        dist.barrier()\n        dist.all_reduce(t)\n        t = t.tolist()\n        self.count = int(t[0])\n        self.total = t[1]\n\n    @property\n    def median(self):\n        d = torch.tensor(list(self.deque))\n        return d.median().item()\n\n    @property\n    def avg(self):\n        d = torch.tensor(list(self.deque), dtype=torch.float32)\n        return d.mean().item()\n\n    @property\n    def global_avg(self):\n        return self.total / self.count\n\n    @property\n    def max(self):\n        return max(self.deque)\n\n    @property\n    def value(self):\n        return self.deque[-1]\n\n    def __str__(self):\n        return self.fmt.format(\n            median=self.median, avg=self.avg, global_avg=self.global_avg, max=self.max, value=self.value\n        )\n\n\nclass MetricLogger(object):\n    def __init__(self, delimiter=\"\\t\"):\n        self.meters = defaultdict(SmoothedValue)\n        self.delimiter = delimiter\n\n    def update(self, **kwargs):\n        for k, v in kwargs.items():\n            if v is None:\n                continue\n            elif isinstance(v, (torch.Tensor, float, int)):\n                self.meters[k].update(v.item() if isinstance(v, torch.Tensor) else v)\n            elif isinstance(v, list):\n                for i, sub_v in enumerate(v):\n                    self.meters[f\"{k}_{i}\"].update(sub_v.item() if isinstance(sub_v, torch.Tensor) else sub_v)\n            elif isinstance(v, dict):\n                for sub_key, sub_v in v.items():\n                    self.meters[f\"{k}_{sub_key}\"].update(sub_v.item() if isinstance(sub_v, torch.Tensor) else sub_v)\n            else:\n                raise TypeError(f\"Unsupported type {type(v)} for metric {k}\")\n\n    def __str__(self):\n        loss_str = []\n        for name, meter in self.meters.items():\n            loss_str.append(\"{}: {}\".format(name, str(meter)))\n        return self.delimiter.join(loss_str)\n\n    def synchronize_between_processes(self):\n        for meter in self.meters.values():\n            meter.synchronize_between_processes()\n\n    def add_meter(self, name, meter):\n        self.meters[name] = meter\n\n    def log_every(self, iterable, print_freq, header=None, start_iter=0, samples_per_iter=None):\n        i = start_iter\n        if not header:\n            header = \"\"\n        start_time = time.time()\n        end = time.time()\n        iter_time = SmoothedValue(fmt=\"{avg:.4f}\")\n        data_time = SmoothedValue(fmt=\"{avg:.4f}\")\n        log_msg = [header, \"[{0\" + \"}/{1}]\", \"{meters}\", \"time: {time}\", \"data: {data}\"]\n        if samples_per_iter is not None:\n            log_msg.append(\"samples/sec: {samples_per_sec:.2f}\")\n        if torch.cuda.is_available():\n            log_msg.append(\"max mem: {memory:.0f}\")\n        log_msg = self.delimiter.join(log_msg)\n        MB = 1024.0 * 1024.0\n        for obj in iterable:\n            data_time.update(time.time() - end)\n            yield obj\n            iter_time.update(time.time() - end)\n            if i % print_freq == 0:\n                try:\n                    total_len = len(iterable)\n                except:\n                    total_len = \"unknown\"\n\n                msg_kwargs = {\n                    \"meters\": str(self),\n                    \"time\": str(iter_time),\n                    \"data\": str(data_time),\n                }\n                if samples_per_iter is not None:\n                    msg_kwargs[\"samples_per_sec\"] = samples_per_iter / iter_time.avg\n                if torch.cuda.is_available():\n                    msg_kwargs[\"memory\"] = torch.cuda.max_memory_allocated() / MB\n\n                logger.info(log_msg.format(i, total_len, **msg_kwargs))\n            i += 1\n            end = time.time()\n        total_time = time.time() - start_time\n        total_time_str = str(datetime.timedelta(seconds=int(total_time)))\n        logger.info(\"{} Total time: {}\".format(header, total_time_str))\n\n\ndef add_weight_decay(model, lr, weight_decay=1e-5):\n    decay = []\n    no_decay = []\n    for name, param in model.named_parameters():\n        if not param.requires_grad:\n            continue  # frozen weights\n        if name.endswith(\".bias\") or name.endswith(\"norm.weight\"):\n            no_decay.append(param)\n        else:\n            decay.append(param)\n    return [\n        {\"params\": no_decay, \"lr\": lr, \"weight_decay\": weight_decay},\n        {\"params\": decay, \"lr\": lr, \"weight_decay\": weight_decay},\n    ]\n\n\ndef broadcast_nonmp_parameters(model):\n    if fs_init.get_model_parallel_world_size() == 1:\n        return\n    logger.info(\"starting broadcast non-model-parallel parameters within model parallel group\")\n    memo = set()\n    modules = model.named_modules(prefix=\"\", remove_duplicate=True)\n    for module_prefix, module in modules:\n        members = dict(module._parameters.items())\n        for k, v in members.items():\n            name = module_prefix + (\".\" if module_prefix else \"\") + k\n            if v is None or v in memo:\n                continue\n            if getattr(v, \"model_parallel\", False):\n                logger.info(f\"ignore: {name}\")\n                continue\n            memo.add(v)\n            dist.broadcast(v, src=fs_init.get_model_parallel_src_rank(), group=fs_init.get_model_parallel_group())\n    logger.info(\"braodcast done\")\n\n\ndef mark_mp_params(model: torch.nn.Module):\n    from fairscale.nn.model_parallel.layers import ColumnParallelLinear, ParallelEmbedding, RowParallelLinear\n\n    for m in model.modules():\n        if isinstance(m, ColumnParallelLinear):\n            m.weight.model_parallel = True\n            if m.bias is not None:\n                m.bias.model_parallel = True\n\n        if isinstance(m, RowParallelLinear):\n            m.weight.model_parallel = True\n\n        if isinstance(m, ParallelEmbedding):\n            m.weight.model_parallel = True\n\n\ndef print_param_status(model: torch.nn.Module) -> None:\n    require_grad_set = []\n    no_grad_set = []\n    for name, param in model.named_parameters():\n        if param.requires_grad:\n            require_grad_set.append((name, param))\n        else:\n            no_grad_set.append((name, param))\n\n    logger.info(\"Params that require gradient:\\n\")\n    for name, param in require_grad_set:\n        model_parallel = getattr(param, \"model_parallel\", False)\n        logger.info(\n            f\"Param {name}: requires_grad {param.requires_grad}, local_size {param.shape}, model_parallel {model_parallel}, dtype {param.dtype}\"\n        )\n\n    logger.info(\"\\nParams that do not require gradient:\\n\")\n    for name, param in no_grad_set:\n        model_parallel = getattr(param, \"model_parallel\", False)\n        logger.info(\n            f\"Param {name}: requires_grad {param.requires_grad}, local_size {param.shape}, model_parallel {model_parallel}, dtype {param.dtype}\"\n        )\n"}
{"type": "source_file", "path": "model/xllmx/solvers/finetune/__init__.py", "content": "from .finetune import FinetuneSolverBase\n"}
{"type": "source_file", "path": "model/lumina_mgpt/model/chameleon_vae_ori/vqgan.py", "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n\n# This source code is licensed under the Chameleon License found in the\n# LICENSE file in the root directory of this source tree.\n\n\"\"\"\nContents of this file are taken from https://github.com/CompVis/taming-transformers/blob/3ba01b241669f5ade541ce990f7650a3b8f65318/taming/models/vqgan.py\n[with minimal dependencies]\n\nThis implementation is inference-only -- training steps and optimizer components\nintroduce significant additional dependencies\n\"\"\"\n\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\n\nclass VectorQuantizer2(nn.Module):\n    \"\"\"\n    Improved version over VectorQuantizer, can be used as a drop-in replacement. Mostly\n    avoids costly matrix multiplications and allows for post-hoc remapping of indices.\n    \"\"\"\n\n    # NOTE: due to a bug the beta term was applied to the wrong term. for\n    # backwards compatibility we use the buggy version by default, but you can\n    # specify legacy=False to fix it.\n    def __init__(\n        self,\n        n_e,\n        e_dim,\n        beta,\n        remap=None,\n        unknown_index=\"random\",\n        sane_index_shape=False,\n        legacy=True,\n    ):\n        super().__init__()\n        self.n_e = n_e\n        self.e_dim = e_dim\n        self.beta = beta\n        self.legacy = legacy\n\n        self.embedding = nn.Embedding(self.n_e, self.e_dim)\n        self.embedding.weight.data.uniform_(-1.0 / self.n_e, 1.0 / self.n_e)\n\n        self.remap = remap\n        if self.remap is not None:\n            self.register_buffer(\"used\", torch.tensor(np.load(self.remap)))\n            self.re_embed = self.used.shape[0]\n            self.unknown_index = unknown_index  # \"random\" or \"extra\" or integer\n            if self.unknown_index == \"extra\":\n                self.unknown_index = self.re_embed\n                self.re_embed = self.re_embed + 1\n            print(\n                f\"Remapping {self.n_e} indices to {self.re_embed} indices. \"\n                f\"Using {self.unknown_index} for unknown indices.\"\n            )\n        else:\n            self.re_embed = n_e\n\n        self.sane_index_shape = sane_index_shape\n\n    def remap_to_used(self, inds):\n        ishape = inds.shape\n        assert len(ishape) > 1\n        inds = inds.reshape(ishape[0], -1)\n        used = self.used.to(inds)\n        match = (inds[:, :, None] == used[None, None, ...]).long()\n        new = match.argmax(-1)\n        unknown = match.sum(2) < 1\n        if self.unknown_index == \"random\":\n            new[unknown] = torch.randint(0, self.re_embed, size=new[unknown].shape).to(device=new.device)\n        else:\n            new[unknown] = self.unknown_index\n        return new.reshape(ishape)\n\n    def unmap_to_all(self, inds):\n        ishape = inds.shape\n        assert len(ishape) > 1\n        inds = inds.reshape(ishape[0], -1)\n        used = self.used.to(inds)\n        if self.re_embed > self.used.shape[0]:  # extra token\n            inds[inds >= self.used.shape[0]] = 0  # simply set to zero\n        back = torch.gather(used[None, :][inds.shape[0] * [0], :], 1, inds)\n        return back.reshape(ishape)\n\n    def forward(self, z, temp=None, rescale_logits=False, return_logits=False):\n        assert temp is None or temp == 1.0, \"Only for interface compatible with Gumbel\"\n        assert rescale_logits is False, \"Only for interface compatible with Gumbel\"\n        assert return_logits is False, \"Only for interface compatible with Gumbel\"\n        # reshape z -> (batch, height, width, channel) and flatten\n        z = z.permute(0, 2, 3, 1).contiguous()\n        z_flattened = z.view(-1, self.e_dim)\n        # distances from z to embeddings e_j (z - e)^2 = z^2 + e^2 - 2 e * z\n\n        d = (\n            torch.sum(z_flattened**2, dim=1, keepdim=True)\n            + torch.sum(self.embedding.weight**2, dim=1)\n            - 2 * torch.einsum(\"bd,dn->bn\", z_flattened, self.embedding.weight.transpose(0, 1))\n        )\n\n        min_encoding_indices = torch.argmin(d, dim=1)\n        z_q = self.embedding(min_encoding_indices).view(z.shape)\n        perplexity = None\n        min_encodings = None\n\n        # compute loss for embedding\n        if not self.legacy:\n            loss = self.beta * torch.mean((z_q.detach() - z) ** 2) + torch.mean((z_q - z.detach()) ** 2)\n        else:\n            loss = torch.mean((z_q.detach() - z) ** 2) + self.beta * torch.mean((z_q - z.detach()) ** 2)\n\n        # preserve gradients\n        z_q = z + (z_q - z).detach()\n\n        # reshape back to match original input shape\n        z_q = z_q.permute(0, 3, 1, 2).contiguous()\n\n        if self.remap is not None:\n            min_encoding_indices = min_encoding_indices.reshape(z.shape[0], -1)  # add batch axis\n            min_encoding_indices = self.remap_to_used(min_encoding_indices)\n            min_encoding_indices = min_encoding_indices.reshape(-1, 1)  # flatten\n\n        if self.sane_index_shape:\n            min_encoding_indices = min_encoding_indices.reshape(z_q.shape[0], z_q.shape[2], z_q.shape[3])\n\n        return z_q, loss, (perplexity, min_encodings, min_encoding_indices)\n\n    def get_codebook_entry(self, indices, shape):\n        # shape specifying (batch, height, width, channel)\n        if self.remap is not None:\n            indices = indices.reshape(shape[0], -1)  # add batch axis\n            indices = self.unmap_to_all(indices)\n            indices = indices.reshape(-1)  # flatten again\n\n        # get quantized latent vectors\n        z_q = self.embedding(indices)\n\n        if shape is not None:\n            z_q = z_q.view(shape)\n            # reshape back to match original input shape\n            z_q = z_q.permute(0, 3, 1, 2).contiguous()\n\n        return z_q\n\n\n# Alias\nVectorQuantizer = VectorQuantizer2\n\n\ndef nonlinearity(x):\n    # swish\n    return x * torch.sigmoid(x)\n\n\ndef Normalize(in_channels, num_groups=32):\n    return torch.nn.GroupNorm(num_groups=num_groups, num_channels=in_channels, eps=1e-6, affine=True)\n\n\nclass Upsample(nn.Module):\n    def __init__(self, in_channels, with_conv):\n        super().__init__()\n        self.with_conv = with_conv\n        if self.with_conv:\n            self.conv = torch.nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=1, padding=1)\n\n    def forward(self, x):\n        x = F.interpolate(x, scale_factor=2.0, mode=\"nearest\")\n        if self.with_conv:\n            x = self.conv(x)\n        return x\n\n\nclass Downsample(nn.Module):\n    def __init__(self, in_channels, with_conv):\n        super().__init__()\n        self.with_conv = with_conv\n        if self.with_conv:\n            # no asymmetric padding in torch conv, must do it ourselves\n            self.conv = torch.nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=2, padding=0)\n\n    def forward(self, x):\n        if self.with_conv:\n            pad = (0, 1, 0, 1)\n            x = F.pad(x, pad, mode=\"constant\", value=0)\n            x = self.conv(x)\n        else:\n            x = F.avg_pool2d(x, kernel_size=2, stride=2)\n        return x\n\n\nclass ResnetBlock(nn.Module):\n    def __init__(\n        self,\n        *,\n        in_channels,\n        out_channels=None,\n        conv_shortcut=False,\n        dropout,\n        temb_channels=512,\n    ):\n        super().__init__()\n        self.in_channels = in_channels\n        out_channels = in_channels if out_channels is None else out_channels\n        self.out_channels = out_channels\n        self.use_conv_shortcut = conv_shortcut\n\n        self.norm1 = Normalize(in_channels)\n        self.conv1 = torch.nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=1)\n        if temb_channels > 0:\n            self.temb_proj = torch.nn.Linear(temb_channels, out_channels)\n        self.norm2 = Normalize(out_channels)\n        self.dropout = torch.nn.Dropout(dropout)\n        self.conv2 = torch.nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1)\n        if self.in_channels != self.out_channels:\n            if self.use_conv_shortcut:\n                self.conv_shortcut = torch.nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=1)\n            else:\n                self.nin_shortcut = torch.nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=1, padding=0)\n\n    def forward(self, x, temb):\n        h = x\n        h = self.norm1(h)\n        h = nonlinearity(h)\n        h = self.conv1(h)\n\n        if temb is not None:\n            h = h + self.temb_proj(nonlinearity(temb))[:, :, None, None]\n\n        h = self.norm2(h)\n        h = nonlinearity(h)\n        h = self.dropout(h)\n        h = self.conv2(h)\n\n        if self.in_channels != self.out_channels:\n            if self.use_conv_shortcut:\n                x = self.conv_shortcut(x)\n            else:\n                x = self.nin_shortcut(x)\n\n        return x + h\n\n\nclass AttnBlock(nn.Module):\n    def __init__(self, in_channels):\n        super().__init__()\n        self.in_channels = in_channels\n\n        self.norm = Normalize(in_channels)\n        self.q = torch.nn.Conv2d(in_channels, in_channels, kernel_size=1, stride=1, padding=0)\n        self.k = torch.nn.Conv2d(in_channels, in_channels, kernel_size=1, stride=1, padding=0)\n        self.v = torch.nn.Conv2d(in_channels, in_channels, kernel_size=1, stride=1, padding=0)\n        self.proj_out = torch.nn.Conv2d(in_channels, in_channels, kernel_size=1, stride=1, padding=0)\n\n    def forward(self, x):\n        h_ = x\n        h_ = self.norm(h_)\n        q = self.q(h_)\n        k = self.k(h_)\n        v = self.v(h_)\n\n        # compute attention\n        b, c, h, w = q.shape\n        q = q.reshape(b, c, h * w)\n        q = q.permute(0, 2, 1)  # b,hw,c\n        k = k.reshape(b, c, h * w)  # b,c,hw\n        w_ = torch.bmm(q, k)  # b,hw,hw    w[b,i,j]=sum_c q[b,i,c]k[b,c,j]\n        w_ = w_ * (int(c) ** (-0.5))\n        w_ = F.softmax(w_, dim=2)\n\n        # attend to values\n        v = v.reshape(b, c, h * w)\n        w_ = w_.permute(0, 2, 1)  # b,hw,hw (first hw of k, second of q)\n        h_ = torch.bmm(v, w_)  # b, c,hw (hw of q) h_[b,c,j] = sum_i v[b,c,i] w_[b,i,j]\n        h_ = h_.reshape(b, c, h, w)\n\n        h_ = self.proj_out(h_)\n\n        return x + h_\n\n\ndef make_attn(in_channels, attn_type=\"vanilla\"):\n    assert attn_type in [\"vanilla\", \"linear\", \"none\"], f\"attn_type {attn_type} unknown\"\n    # print(f\"making attention of type '{attn_type}' with {in_channels} in_channels\")\n    if attn_type == \"vanilla\":\n        return AttnBlock(in_channels)\n    elif attn_type == \"none\":\n        return nn.Identity(in_channels)\n    else:\n        raise ValueError(\"Unexpected attention type\")\n\n\nclass Encoder(nn.Module):\n    def __init__(\n        self,\n        *,\n        ch,\n        out_ch,\n        ch_mult=(1, 2, 4, 8),\n        num_res_blocks,\n        attn_resolutions,\n        dropout=0.0,\n        resamp_with_conv=True,\n        in_channels,\n        resolution,\n        z_channels,\n        double_z=True,\n        use_linear_attn=False,\n        attn_type=\"vanilla\",\n        **ignore_kwargs,\n    ):\n        super().__init__()\n        if use_linear_attn:\n            attn_type = \"linear\"\n        self.ch = ch\n        self.temb_ch = 0\n        self.num_resolutions = len(ch_mult)\n        self.num_res_blocks = num_res_blocks\n        self.resolution = resolution\n        self.in_channels = in_channels\n\n        # downsampling\n        self.conv_in = torch.nn.Conv2d(in_channels, self.ch, kernel_size=3, stride=1, padding=1)\n\n        curr_res = resolution\n        in_ch_mult = (1,) + tuple(ch_mult)\n        self.in_ch_mult = in_ch_mult\n        self.down = nn.ModuleList()\n        for i_level in range(self.num_resolutions):\n            block = nn.ModuleList()\n            attn = nn.ModuleList()\n            block_in = ch * in_ch_mult[i_level]\n            block_out = ch * ch_mult[i_level]\n            for i_block in range(self.num_res_blocks):\n                block.append(\n                    ResnetBlock(\n                        in_channels=block_in,\n                        out_channels=block_out,\n                        temb_channels=self.temb_ch,\n                        dropout=dropout,\n                    )\n                )\n                block_in = block_out\n                if curr_res in attn_resolutions:\n                    attn.append(make_attn(block_in, attn_type=attn_type))\n            down = nn.Module()\n            down.block = block\n            down.attn = attn\n            if i_level != self.num_resolutions - 1:\n                down.downsample = Downsample(block_in, resamp_with_conv)\n                curr_res = curr_res // 2\n            self.down.append(down)\n\n        # middle\n        self.mid = nn.Module()\n        self.mid.block_1 = ResnetBlock(\n            in_channels=block_in,\n            out_channels=block_in,\n            temb_channels=self.temb_ch,\n            dropout=dropout,\n        )\n        self.mid.attn_1 = make_attn(block_in, attn_type=attn_type)\n        self.mid.block_2 = ResnetBlock(\n            in_channels=block_in,\n            out_channels=block_in,\n            temb_channels=self.temb_ch,\n            dropout=dropout,\n        )\n\n        # end\n        self.norm_out = Normalize(block_in)\n        self.conv_out = torch.nn.Conv2d(\n            block_in,\n            2 * z_channels if double_z else z_channels,\n            kernel_size=3,\n            stride=1,\n            padding=1,\n        )\n\n    def forward(self, x):\n        # timestep embedding\n        temb = None\n\n        # downsampling\n        hs = [self.conv_in(x)]\n        for i_level in range(self.num_resolutions):\n            for i_block in range(self.num_res_blocks):\n                h = self.down[i_level].block[i_block](hs[-1], temb)\n                if len(self.down[i_level].attn) > 0:\n                    h = self.down[i_level].attn[i_block](h)\n                hs.append(h)\n            if i_level != self.num_resolutions - 1:\n                hs.append(self.down[i_level].downsample(hs[-1]))\n\n        # middle\n        h = hs[-1]\n        h = self.mid.block_1(h, temb)\n        h = self.mid.attn_1(h)\n        h = self.mid.block_2(h, temb)\n\n        # end\n        h = self.norm_out(h)\n        h = nonlinearity(h)\n        h = self.conv_out(h)\n        return h\n\n\nclass Decoder(nn.Module):\n    def __init__(\n        self,\n        *,\n        ch,\n        out_ch,\n        ch_mult=(1, 2, 4, 8),\n        num_res_blocks,\n        attn_resolutions,\n        dropout=0.0,\n        resamp_with_conv=True,\n        in_channels,\n        resolution,\n        z_channels,\n        give_pre_end=False,\n        tanh_out=False,\n        use_linear_attn=False,\n        attn_type=\"vanilla\",\n        **ignorekwargs,\n    ):\n        super().__init__()\n        if use_linear_attn:\n            attn_type = \"linear\"\n        self.ch = ch\n        self.temb_ch = 0\n        self.num_resolutions = len(ch_mult)\n        self.num_res_blocks = num_res_blocks\n        self.resolution = resolution\n        self.in_channels = in_channels\n        self.give_pre_end = give_pre_end\n        self.tanh_out = tanh_out\n\n        # compute in_ch_mult, block_in and curr_res at lowest res\n        block_in = ch * ch_mult[self.num_resolutions - 1]\n        curr_res = resolution // 2 ** (self.num_resolutions - 1)\n        self.z_shape = (1, z_channels, curr_res, curr_res)\n\n        # z to block_in\n        self.conv_in = torch.nn.Conv2d(z_channels, block_in, kernel_size=3, stride=1, padding=1)\n\n        # middle\n        self.mid = nn.Module()\n        self.mid.block_1 = ResnetBlock(\n            in_channels=block_in,\n            out_channels=block_in,\n            temb_channels=self.temb_ch,\n            dropout=dropout,\n        )\n        self.mid.attn_1 = make_attn(block_in, attn_type=attn_type)\n        self.mid.block_2 = ResnetBlock(\n            in_channels=block_in,\n            out_channels=block_in,\n            temb_channels=self.temb_ch,\n            dropout=dropout,\n        )\n\n        # upsampling\n        self.up = nn.ModuleList()\n        for i_level in reversed(range(self.num_resolutions)):\n            block = nn.ModuleList()\n            attn = nn.ModuleList()\n            block_out = ch * ch_mult[i_level]\n            for i_block in range(self.num_res_blocks + 1):\n                block.append(\n                    ResnetBlock(\n                        in_channels=block_in,\n                        out_channels=block_out,\n                        temb_channels=self.temb_ch,\n                        dropout=dropout,\n                    )\n                )\n                block_in = block_out\n                if curr_res in attn_resolutions:\n                    attn.append(make_attn(block_in, attn_type=attn_type))\n            up = nn.Module()\n            up.block = block\n            up.attn = attn\n            if i_level != 0:\n                up.upsample = Upsample(block_in, resamp_with_conv)\n                curr_res = curr_res * 2\n            self.up.insert(0, up)  # prepend to get consistent order\n\n        # end\n        self.norm_out = Normalize(block_in)\n        self.conv_out = torch.nn.Conv2d(block_in, out_ch, kernel_size=3, stride=1, padding=1)\n\n    def forward(self, z):\n        # assert z.shape[1:] == self.z_shape[1:]\n        self.last_z_shape = z.shape\n\n        # timestep embedding\n        temb = None\n\n        # z to block_in\n        h = self.conv_in(z)\n\n        # middle\n        h = self.mid.block_1(h, temb)\n        h = self.mid.attn_1(h)\n        h = self.mid.block_2(h, temb)\n\n        # upsampling\n        for i_level in reversed(range(self.num_resolutions)):\n            for i_block in range(self.num_res_blocks + 1):\n                h = self.up[i_level].block[i_block](h, temb)\n                if len(self.up[i_level].attn) > 0:\n                    h = self.up[i_level].attn[i_block](h)\n            if i_level != 0:\n                h = self.up[i_level].upsample(h)\n\n        # end\n        if self.give_pre_end:\n            return h\n\n        h = self.norm_out(h)\n        h = nonlinearity(h)\n        h = self.conv_out(h)\n        if self.tanh_out:\n            h = torch.tanh(h)\n        return h\n\n\nclass VQModel(nn.Module):\n    def __init__(\n        self,\n        ddconfig,\n        n_embed,\n        embed_dim,\n        ckpt_path=None,\n        ignore_keys=[],\n        image_key=\"image\",\n        colorize_nlabels=None,\n        monitor=None,\n        scheduler_config=None,\n        lr_g_factor=1.0,\n        remap=None,\n        sane_index_shape=False,  # tell vector quantizer to return indices as bhw\n    ):\n        super().__init__()\n        self.image_key = image_key\n        self.encoder = Encoder(**ddconfig)\n        self.decoder = Decoder(**ddconfig)\n        self.quantize = VectorQuantizer(\n            n_embed,\n            embed_dim,\n            beta=0.25,\n            remap=remap,\n            sane_index_shape=sane_index_shape,\n        )\n        self.quant_conv = torch.nn.Conv2d(ddconfig[\"z_channels\"], embed_dim, 1)\n        self.post_quant_conv = torch.nn.Conv2d(embed_dim, ddconfig[\"z_channels\"], 1)\n        if ckpt_path is not None:\n            self.init_from_ckpt(ckpt_path, ignore_keys=ignore_keys)\n        self.image_key = image_key\n        if colorize_nlabels is not None:\n            assert isinstance(colorize_nlabels, int)\n            self.register_buffer(\"colorize\", torch.randn(3, colorize_nlabels, 1, 1))\n        if monitor is not None:\n            self.monitor = monitor\n        self.scheduler_config = scheduler_config\n        self.lr_g_factor = lr_g_factor\n\n    def init_from_ckpt(self, path, ignore_keys=list()):\n        sd = torch.load(path, map_location=\"cpu\")[\"state_dict\"]\n        keys = list(sd.keys())\n        for k in keys:\n            for ik in ignore_keys:\n                if k.startswith(ik):\n                    print(\"Deleting key {} from state_dict.\".format(k))\n                    del sd[k]\n        self.load_state_dict(sd, strict=False)\n        print(f\"VQModel loaded from {path}\")\n\n    def encode(self, x):\n        h = self.encoder(x)\n        h = self.quant_conv(h)\n        quant, emb_loss, info = self.quantize(h)\n        return quant, emb_loss, info\n\n    def decode(self, quant):\n        quant = self.post_quant_conv(quant)\n        dec = self.decoder(quant)\n        return dec\n\n    def decode_code(self, code_b):\n        quant_b = self.quantize.embed_code(code_b)\n        dec = self.decode(quant_b)\n        return dec\n\n    def forward(self, input):\n        quant, diff, _ = self.encode(input)\n        dec = self.decode(quant)\n        return dec, diff\n\n    def get_input(self, batch, k):\n        x = batch[k]\n        if len(x.shape) == 3:\n            x = x[..., None]\n        x = x.permute(0, 3, 1, 2).to(memory_format=torch.contiguous_format)\n        return x.float()\n\n    def get_last_layer(self):\n        return self.decoder.conv_out.weight\n\n    def log_images(self, batch, **kwargs):\n        log = dict()\n        x = self.get_input(batch, self.image_key)\n        x = x.to(self.device)\n        xrec, _ = self(x)\n        if x.shape[1] > 3:\n            # colorize with random projection\n            assert xrec.shape[1] > 3\n            x = self.to_rgb(x)\n            xrec = self.to_rgb(xrec)\n        log[\"inputs\"] = x\n        log[\"reconstructions\"] = xrec\n        return log\n\n    def to_rgb(self, x):\n        assert self.image_key == \"segmentation\"\n        if not hasattr(self, \"colorize\"):\n            self.register_buffer(\"colorize\", torch.randn(3, x.shape[1], 1, 1).to(x))\n        x = F.conv2d(x, weight=self.colorize)\n        x = 2.0 * (x - x.min()) / (x.max() - x.min()) - 1.0\n        return x\n"}
{"type": "source_file", "path": "model/xllmx/util/lr_sched.py", "content": "import math\n\n\ndef adjust_learning_rate(optimizer, it, args):\n    \"\"\"Decay the learning rate with half-cycle cosine after warmup\"\"\"\n    if it < args.warmup_iters:  # 1) linear warmup for warmup_iters steps\n        lr = args.lr * it / args.warmup_iters\n    elif it > args.lr_decay_iters:  # 2) if it > lr_decay_iters, return min learning rate\n        lr = args.min_lr\n    else:  # 3) in between, use cosine decay down to min learning rate\n        decay_ratio = (it - args.warmup_iters) / (args.lr_decay_iters - args.warmup_iters)\n        assert 0 <= decay_ratio <= 1\n        coeff = 0.5 * (1.0 + math.cos(math.pi * decay_ratio))  # coeff ranges 0..1\n        lr = args.min_lr + (args.lr - args.min_lr) * coeff\n\n    for param_group in optimizer.param_groups:\n        if \"lr_scale\" in param_group:\n            param_group[\"lr\"] = lr * param_group[\"lr_scale\"]\n        else:\n            param_group[\"lr\"] = lr\n    return lr\n\n\ndef adjust_learning_rate_epoch(optimizer, epoch, args):\n    \"\"\"Decay the learning rate with half-cycle cosine after warmup\"\"\"\n    if epoch < args.warmup_epochs:\n        lr = args.lr * epoch / args.warmup_epochs\n    else:\n        lr = args.min_lr + (args.lr - args.min_lr) * 0.5 * (\n            1.0 + math.cos(math.pi * (epoch - args.warmup_epochs) / (args.epochs - args.warmup_epochs))\n        )\n    for param_group in optimizer.param_groups:\n        if \"lr_scale\" in param_group:\n            param_group[\"lr\"] = lr * param_group[\"lr_scale\"]\n        else:\n            param_group[\"lr\"] = lr\n    return lr\n"}
{"type": "source_file", "path": "model/xllmx/model/__init__.py", "content": ""}
{"type": "source_file", "path": "model/xllmx/solvers/__init__.py", "content": ""}
{"type": "source_file", "path": "model/xllmx/util/__init__.py", "content": "from . import ckpt, dist\n"}
{"type": "source_file", "path": "model/xllmx/model/components.py", "content": "import warnings\n\nimport torch\nimport torch.nn as nn\n\ntry:\n    from apex.normalization import FusedRMSNorm as RMSNorm\nexcept ImportError:\n    warnings.warn(\"Cannot import apex RMSNorm, switch to vanilla implementation\")\n\n    class RMSNorm(torch.nn.Module):\n        def __init__(self, dim: int, eps: float = 1e-6):\n            \"\"\"\n            Initialize the RMSNorm normalization layer.\n\n            Args:\n                dim (int): The dimension of the input tensor.\n                eps (float, optional): A small value added to the denominator for numerical stability. Default is 1e-6.\n\n            Attributes:\n                eps (float): A small value added to the denominator for numerical stability.\n                weight (nn.Parameter): Learnable scaling parameter.\n\n            \"\"\"\n            super().__init__()\n            self.eps = eps\n            self.weight = nn.Parameter(torch.ones(dim))\n\n        def _norm(self, x):\n            \"\"\"\n            Apply the RMSNorm normalization to the input tensor.\n\n            Args:\n                x (torch.Tensor): The input tensor.\n\n            Returns:\n                torch.Tensor: The normalized tensor.\n\n            \"\"\"\n            return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)\n\n        def forward(self, x):\n            \"\"\"\n            Forward pass through the RMSNorm layer.\n\n            Args:\n                x (torch.Tensor): The input tensor.\n\n            Returns:\n                torch.Tensor: The output tensor after applying RMSNorm.\n\n            \"\"\"\n            output = self._norm(x.float()).type_as(x)\n            return output * self.weight\n"}
{"type": "source_file", "path": "model/setup.py", "content": "import setuptools\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"xllmx\",\n    version=\"0.0.1\",\n    author=\"Alpha-VLLM\",\n    description=\"An Open-source Toolkit for LLM-centered Any2Any Generation\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/Alpha-VLLM/Lumina-mGPT\",\n    packages=[\"xllmx\"],\n    include_package_data=True,\n)\n"}
{"type": "source_file", "path": "model/xllmx/__init__.py", "content": ""}
{"type": "source_file", "path": "model/xllmx/util/dist.py", "content": "import datetime\nimport logging\nimport os\nimport socket\nimport subprocess\nimport time\nfrom types import SimpleNamespace\n\nimport torch\nimport torch.distributed as dist\n\nfrom xllmx.util.misc import random_seed\n\nlogger = logging.getLogger(__name__)\n\n\ndef find_free_port(start_port: int, end_port: int):\n    \"\"\"\n    Find a free port within the specified range.\n    \"\"\"\n    for port in range(start_port, end_port):\n        try:\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            s.bind((\"\", port))  # Try to bind to the port\n            s.close()  # Close the socket if successful\n            return port\n        except OSError as e:\n            # print(f\"Port {port} is in use, trying next port.\")\n            continue\n    raise RuntimeError(f\"No free ports found in range {start_port}-{end_port}\")\n\n\ndef init_distributed_mode(args=SimpleNamespace()):\n    random_seed(getattr(args, \"seed\", 0))\n    if \"RANK\" in os.environ and \"WORLD_SIZE\" in os.environ and \"LOCAL_RANK\" in os.environ:\n        args.world_size = int(os.environ[\"WORLD_SIZE\"])\n        args.rank = int(os.environ[\"RANK\"])\n        args.gpu = int(os.environ[\"LOCAL_RANK\"])\n        args.local_rank = args.gpu\n        args.dist_url = \"env://\"\n    elif \"SLURM_PROCID\" in os.environ:\n        os.environ[\"MASTER_PORT\"] = \"8966\"\n        while \"MASTER_ADDR\" not in os.environ or len(os.environ[\"MASTER_ADDR\"].strip()) == 0:\n            os.environ[\"MASTER_ADDR\"] = (\n                subprocess.check_output(\n                    \"sinfo -Nh -n %s | head -n 1 | awk '{print $1}'\" % os.environ[\"SLURM_NODELIST\"],\n                    shell=True,\n                )\n                .decode()\n                .strip()\n            )\n            time.sleep(1)\n        print(os.environ[\"MASTER_ADDR\"])\n        args.world_size = int(os.environ[\"SLURM_NPROCS\"])\n        args.rank = int(os.environ[\"SLURM_PROCID\"])\n        args.gpu = args.rank % torch.cuda.device_count()\n        args.local_rank = args.gpu\n        args.dist_url = \"env://\"\n        os.environ[\"LOCAL_RANK\"] = str(args.gpu)\n        os.environ[\"WORLD_SIZE\"] = str(args.world_size)\n        os.environ[\"RANK\"] = str(args.rank)\n    else:\n        os.environ[\"MASTER_ADDR\"] = \"127.0.0.1\"\n        os.environ[\"MASTER_PORT\"] = str(find_free_port(9000, 10000))\n        os.environ[\"RANK\"] = \"0\"\n        os.environ[\"LOCAL_RANK\"] = \"0\"\n        os.environ[\"WORLD_SIZE\"] = \"1\"\n        args.rank = 0\n        args.gpu = args.local_rank = 0\n        args.world_size = 1\n        args.dist_url = \"env://\"\n\n    args.distributed = True\n\n    torch.cuda.set_device(args.gpu)\n    args.dist_backend = \"nccl\"\n    print(\"| distributed init (rank {}): {}, gpu {}\".format(args.rank, args.dist_url, args.gpu), flush=True)\n    torch.distributed.init_process_group(\n        backend=args.dist_backend,\n        init_method=args.dist_url,\n        world_size=args.world_size,\n        rank=args.rank,\n        timeout=datetime.timedelta(seconds=2 * 60 * 60),\n    )\n    torch.distributed.barrier()\n\n\ndef all_reduce_mean(x, group=None):\n    world_size = dist.get_world_size(group=group)\n    if world_size > 1:\n        if isinstance(x, torch.Tensor):\n            x_reduce = x.clone().cuda()\n        else:\n            x_reduce = torch.tensor(x).cuda()\n        dist.all_reduce(x_reduce, group=group)\n        x_reduce /= world_size\n        return x_reduce.item()\n    else:\n        return x\n"}
