{"repo_info": {"repo_name": "odooxp2021-fastapi", "repo_owner": "acsone", "repo_url": "https://github.com/acsone/odooxp2021-fastapi"}}
{"type": "test_file", "path": "tests/test_app.py", "content": "# Copyright (c) 2021 ACSONE SA/NV\n\ndef test_get_partners(test_client):\n    response = test_client.get(\"/partners\")\n    assert response.ok\n    assert len(response.json()) > 1\n    assert response.json()[0][\"name\"]\n\n\ndef test_create_and_get_partner(test_client):\n    response = test_client.post(\n        \"/partners\",\n        json={\"name\": \"Toto Le Héro\", \"email\": \"toto@example.com\"},\n    )\n    assert response.ok\n    partner_id = response.json()[\"id\"]\n    response = test_client.get(f\"/partners/{partner_id}\")\n    assert response.ok\n    assert response.json() == {\n        \"id\": partner_id,\n        \"name\": \"Toto Le Héro\",\n        \"email\": \"toto@example.com\",\n        \"is_company\": False,\n    }\n"}
{"type": "test_file", "path": "tests/conftest.py", "content": "# Copyright (c) 2021 ACSONE SA/NV\n\nimport pytest\nfrom fastapi.testclient import TestClient\n\nimport odoo\nfrom odoo.api import Environment\n\nfrom odoo_fastapi_demo import app, deps\n\n\n@pytest.fixture(scope=\"session\")\ndef registry():\n    odoo.tools.config.parse_config([])\n    return odoo.registry(odoo.tools.config[\"db_name\"])\n\n\n@pytest.fixture()\ndef env(registry):\n    with registry.cursor() as cr:\n        try:\n            yield Environment(cr, odoo.SUPERUSER_ID, {})\n        finally:\n            cr.rollback()\n\n\n@pytest.fixture()\ndef test_client(env):\n    # Make sure the app uses the same Environment as the test\n    # so data created in test is visible in app functions.\n    def test_odoo_env():\n        env.cr.flush()\n        env.clear()\n        return env\n\n    app.dependency_overrides[deps.odoo_env] = test_odoo_env\n    yield TestClient(app)\n    app.dependency_overrides = {}\n"}
{"type": "source_file", "path": "locustfile.py", "content": "from locust import HttpUser, task, between\n\nclass HelloWorldUser(HttpUser):\n    wait_time = between(1, 5)\n\n    @task\n    def hello_world(self):\n        self.client.get(\"/partners/1\")\n\n"}
{"type": "source_file", "path": "odoo_fastapi_demo/deps.py", "content": "# Copyright (c) 2021 ACSONE SA/NV\n\nimport odoo\nfrom odoo.api import Environment\n\n\ndef odoo_env() -> Environment:\n    #\n    # /!\\ With Odoo < 15 you need to wrap all this in 'with\n    #     Environment.manage()' and apply this Odoo patch:\n    #     https://github.com/odoo/odoo/pull/70398, to properly handle context\n    #     locals in an async program.\n    #\n    # check_signaling() is to refresh the registry and cache when needed.\n    registry = odoo.registry(odoo.tools.config[\"db_name\"]).check_signaling()\n    # manage_change() is to signal other instances when the registry or cache\n    # needs refreshing.\n    with registry.manage_changes():\n        # The cursor context manager commits unless there is an exception.\n        with registry.cursor() as cr:\n            yield Environment(cr, odoo.SUPERUSER_ID, {})\n"}
{"type": "source_file", "path": "odoo_fastapi_demo/__init__.py", "content": "# Copyright (c) 2021 ACSONE SA/NV\n\n\"\"\"Using the Odoo ORM with FastAPI.\n\nThis is the example repository accompanying the Odoo XP 2021 talk.\n\"\"\"\n\nfrom .app import app\n\n__version__ = \"0.1\"\n"}
{"type": "source_file", "path": "odoo_fastapi_demo/app.py", "content": "# Copyright (c) 2021 ACSONE SA/NV\n\nfrom typing import Optional, List\n\nfrom fastapi import FastAPI, Depends, HTTPException\nfrom starlette.status import HTTP_201_CREATED, HTTP_403_FORBIDDEN, HTTP_404_NOT_FOUND\nfrom pydantic import BaseModel\n\nimport odoo\nfrom odoo.api import Environment\nfrom odoo.models import Model\nfrom odoo.exceptions import AccessError, MissingError\n\nfrom .deps import odoo_env\n\napp = FastAPI(title=\"FastAPI with Odoo Demo\")\n\n\n@app.on_event(\"startup\")\ndef set_default_executor() -> None:\n    from concurrent.futures import ThreadPoolExecutor\n    import asyncio\n\n    loop = asyncio.get_running_loop()\n    # Tune this according to your requirements !\n    loop.set_default_executor(ThreadPoolExecutor(max_workers=5))\n\n\n@app.on_event(\"startup\")\ndef initialize_odoo() -> None:\n    # Read Odoo config from $ODOO_RC.\n    odoo.tools.config.parse_config([])\n\n\n\nclass Partner(BaseModel):\n    id: Optional[int]\n    name: str\n    email: Optional[str]\n    is_company: bool = False\n\n    @classmethod\n    def from_res_partner(cls, p: Model) -> \"Partner\":\n        return Partner(id=p.id, name=p.name, email=p.email, is_company=p.is_company)\n\n\n@app.get(\"/partners\", response_model=List[Partner])\ndef partners(is_company: Optional[bool] = None, env: Environment = Depends(odoo_env)):\n    domain = []\n    if is_company is not None:\n        domain.append((\"is_company\", \"=\", is_company))\n    partners = env[\"res.partner\"].search(domain)\n    return [Partner.from_res_partner(p) for p in partners]\n\n\n\n@app.get(\"/partners/{partner_id}\", response_model=Partner)\ndef get_partner(partner_id: int, env: Environment = Depends(odoo_env)):\n    try:\n        partner = env[\"res.partner\"].browse(partner_id)\n        return Partner.from_res_partner(partner)\n    except MissingError:\n        raise HTTPException(status_code=HTTP_404_NOT_FOUND)\n    except AccessError:\n        raise HTTPException(status_code=HTTP_403_FORBIDDEN)\n\n\n@app.post(\"/partners\", response_model=Partner, status_code=HTTP_201_CREATED)\ndef create_partner(partner: Partner, env: Environment = Depends(odoo_env)):\n    partner = env[\"res.partner\"].create(\n        {\n            \"name\": partner.name,\n            \"email\": partner.email,\n            \"is_company\": partner.is_company,\n        }\n    )\n    return Partner.from_res_partner(partner)\n"}
