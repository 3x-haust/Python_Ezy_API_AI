{"repo_info": {"repo_name": "IT", "repo_owner": "angelogalantiscuola", "repo_url": "https://github.com/angelogalantiscuola/IT"}}
{"type": "source_file", "path": "__ip/modular_design/calcolatrice.py", "content": "\"\"\"\nScrivi un programma che simula una calcolatrice semplice. \nIl programma deve permettere all'utente di inserire due numeri e scegliere un'operazione \n(addizione, sottrazione, moltiplicazione, divisione). \nIl programma deve quindi visualizzare il risultato dell'operazione.\n\"\"\"\n\ndef inserisci_numeri() -> list[int]:\n    \"\"\"\n    This function prompts the user to input a list of numbers and returns the list.\n\n    Returns:\n        list[int]: A list of numbers entered by the user.\n    \"\"\"\n    pass\n\ndef scegli_operazione() -> str:\n    \"\"\"\n    This function prompts the user to choose an operation and returns the selected operation as a string.\n\n    Returns:\n        str: The selected operation.\n    \"\"\"\n    pass\n\ndef calcola(numeri: list[int], operazione: str) -> float:\n    \"\"\"\n    Perform a mathematical operation on a list of numbers.\n\n    Args:\n        numeri (list[int]): A list of numbers.\n        operazione (str): The mathematical operation to perform.\n\n    Returns:\n        float: The result of the mathematical operation.\n\n    \"\"\"\n    pass\n\ndef main():\n    numeri_inseriti = inserisci_numeri()\n    operazione = scegli_operazione()\n    risultato = calcola(numeri_inseriti, operazione)\n    print(f\"Il risultato dell'operazione è: {risultato}\")\n"}
{"type": "source_file", "path": "__ip/modular_design/lista_della_spesa.py", "content": "\"\"\"\nScrivi un programma che gestisce una lista della spesa. \nIl programma deve permettere all'utente di aggiungere articoli alla lista, \nvisualizzare la lista corrente, e rimuovere articoli dalla lista.\n\"\"\"\n\ndef inserisci_articolo() -> str:\n    \"\"\"\n    Function to insert an article.\n\n    Returns:\n        str: The inserted article.\n    \"\"\"\n    pass\n\ndef aggiungi_articolo(articolo: str, lista_della_spesa: list[str]) -> list[str]:\n    \"\"\"\n    Aggiunge un articolo alla lista della spesa.\n\n    Args:\n        articolo (str): L'articolo da aggiungere alla lista.\n        lista_della_spesa (list[str]): La lista della spesa corrente.\n\n    Returns:\n        list[str]: La lista della spesa aggiornata con l'articolo aggiunto.\n    \"\"\"\n    pass\n\ndef visualizza_lista(lista_della_spesa: list[str]) -> None:\n    \"\"\"\n    Visualizza la lista della spesa.\n\n    Args:\n        lista_della_spesa (list[str]): La lista della spesa da visualizzare.\n\n    Returns:\n        None\n    \"\"\"\n    pass\n\ndef rimuovi_articolo(articolo: str, lista_della_spesa: list[str]) -> list[str] | str:\n    \"\"\"\n    Rimuove l'articolo specificato dalla lista della spesa.\n\n    Args:\n        articolo (str): L'articolo da rimuovere.\n        lista_della_spesa (list[str]): La lista della spesa.\n\n    Returns:\n        list[str] | str: La lista della spesa aggiornata senza l'articolo specificato,\n        oppure un messaggio di errore se l'articolo non è presente nella lista.\n\n    \"\"\"\n    pass\n\ndef main():\n    lista_della_spesa = []\n    for i in range(3):\n        nuovo_articolo = inserisci_articolo()\n        lista_della_spesa = aggiungi_articolo(nuovo_articolo, lista_della_spesa)\n        articolo_da_rimuovere = inserisci_articolo()\n        lista_della_spesa = rimuovi_articolo(articolo_da_rimuovere, lista_della_spesa)"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/relationship_attributes/database.py", "content": "from sqlmodel import SQLModel, create_engine\r\n\r\n\r\ndef create_engine_with_db(db_name: str, echo: bool):\r\n    sqlite_url = f\"sqlite:///{db_name}\"\r\n    return create_engine(sqlite_url, echo=echo)\r\n\r\n\r\ndef create_db_and_tables(engine):\r\n    SQLModel.metadata.create_all(engine)\r\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/foreign_key/database.py", "content": "from sqlmodel import SQLModel, create_engine\r\n\r\n\r\ndef create_engine_with_db(db_name: str, echo: bool):\r\n    sqlite_url = f\"sqlite:///{db_name}\"\r\n    return create_engine(sqlite_url, echo=echo)\r\n\r\n\r\ndef create_db_and_tables(engine):\r\n    SQLModel.metadata.create_all(engine)\r\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/many_to_many/main.py", "content": "import os\r\nfrom database import create_db_and_tables, create_engine_with_db\r\nfrom crud import (\r\n    create_heroes,\r\n    select_heroes,\r\n    update_heroes,\r\n    delete_heroes,\r\n)\r\n\r\n\r\ndef main():\r\n    db_name = \"database.db\"\r\n    verbose = False\r\n    delete_database = True\r\n    if delete_database:\r\n        try:\r\n            os.remove(db_name)\r\n        except FileNotFoundError:\r\n            print(f\"{db_name} not found\")\r\n\r\n    engine = create_engine_with_db(db_name, verbose)\r\n    create_db_and_tables(engine)\r\n    create_heroes(engine)\r\n    select_heroes(engine)\r\n    update_heroes(engine)\r\n    delete_heroes(engine)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n    # TODO https://sqlmodel.tiangolo.com/tutorial/many-to-many/link-with-extra-fields/\r\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/foreign_key/main.py", "content": "import os\r\nfrom database import create_db_and_tables, create_engine_with_db\r\nfrom crud import (\r\n    create_heroes,\r\n    select_heroes,\r\n    update_heroes,\r\n    delete_heroes,\r\n)\r\n\r\n\r\ndef main():\r\n    db_name = \"database.db\"\r\n    verbose = False\r\n    delete_database = True\r\n    if delete_database:\r\n        try:\r\n            os.remove(db_name)\r\n        except FileNotFoundError:\r\n            print(f\"{db_name} not found\")\r\n            exit()\r\n    engine = create_engine_with_db(db_name, verbose)\r\n    create_db_and_tables(engine)\r\n    create_heroes(engine)\r\n    select_heroes(engine)\r\n    update_heroes(engine)\r\n    delete_heroes(engine)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/many_to_many/database.py", "content": "from sqlmodel import SQLModel, create_engine\r\n\r\n\r\ndef create_engine_with_db(db_name: str, echo: bool):\r\n    sqlite_url = f\"sqlite:///{db_name}\"\r\n    return create_engine(sqlite_url, echo=echo)\r\n\r\n\r\ndef create_db_and_tables(engine):\r\n    SQLModel.metadata.create_all(engine)\r\n"}
{"type": "source_file", "path": "__temp/modules_library_packages/examples/flask_example.py", "content": "\"\"\"\r\nSimple example of a web server using Flask\r\nTo run it use a command with this syntax:\r\nflask --app file_name_without_extension run\r\nFor example:\r\nflask --app flask_example run\r\n\"\"\"\r\n\r\nfrom flask import Flask, send_from_directory, url_for, render_template\r\nfrom markupsafe import escape\r\n\r\n# import matplotlib.pyplot as plt\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route(\"/\")\r\ndef hello_world():\r\n    return \"<p>Hello, World!</p>\"\r\n\r\n\r\n@app.route(\"/hello/\")\r\n@app.route(\"/hello/<name>\")\r\ndef hello(name=None):\r\n    return render_template(\"hello.html\", name=name)\r\n\r\n\r\n@app.route(\"/listastudenti\")\r\ndef print_students():\r\n    students = [\"Ana\", \"Ion\", \"Maria\", \"George\"]\r\n    return render_template(\"students.html\", students=students)\r\n\r\n\r\n@app.route(\"/square_number/<int:number>\")\r\ndef square_number(number):\r\n    return f\"The square of {number} is {number**2}!\"\r\n\r\n\r\n# @app.route('/draw_a_segment/<int:x_1>/<int:y_1>/<int:x_2>/<int:y_2>')\r\n# def draw_a_segment(x_1, y_1, x_2, y_2):\r\n#     # use matplotlib to draw a segment in a file and return the file name\r\n#     plt.plot([x_1, x_2], [y_1, y_2])\r\n#     plt.savefig('segment.png')\r\n#     # create a div with the image\r\n#     temp = url_for('static', filename='segment.png')\r\n#     return f'<div><img src=\"{temp}\" alt=\"segment\" width=\"500\" height=\"500\"></div>'\r\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/foreign_key/crud.py", "content": "from sqlmodel import Session, select\r\nfrom models import Hero, Team\r\n\r\n\r\ndef create_heroes(engine):\r\n    # This line is creating a new Session instance associated with our database engine.\r\n    # The with statement ensures that the Session's resources are properly released after we're done with it.\r\n    with Session(engine) as session:\r\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\r\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\r\n        session.add(team_preventers)\r\n        session.add(team_z_force)\r\n        session.commit()\r\n\r\n        hero_deadpond = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", team_id=team_z_force.id)\r\n        hero_rusty_man = Hero(\r\n            name=\"Rusty-Man\",\r\n            secret_name=\"Tommy Sharp\",\r\n            age=48,\r\n            team_id=team_preventers.id,\r\n        )\r\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\r\n        session.add(hero_deadpond)\r\n        session.add(hero_rusty_man)\r\n        session.add(hero_spider_boy)\r\n        # At this point, the instances are only added to the session, not yet to the database.\r\n        # After this line is executed, the new heroes are officially in the database.\r\n        session.commit()\r\n\r\n        session.refresh(hero_deadpond)\r\n        session.refresh(hero_rusty_man)\r\n        session.refresh(hero_spider_boy)\r\n\r\n        print(\"Created hero:\", hero_deadpond)\r\n        print(\"Created hero:\", hero_rusty_man)\r\n        print(\"Created hero:\", hero_spider_boy)\r\n\r\n\r\ndef select_heroes(engine):\r\n    with Session(engine) as session:\r\n        # statement = select(Hero)\r\n        # equivalent to \"SELECT * FROM hero\"\r\n\r\n        # statement = select(Hero).where(Hero.name == \"Deadpond\").where(Hero.age == 48)\r\n        # equivalent to \"SELECT * FROM hero WHERE name = 'Deadpond' AND age = 48\"\r\n\r\n        # results = session.exec(statement)\r\n        # for hero in results:\r\n        #     print(hero)\r\n\r\n        statement = select(Hero, Team).where(Hero.team_id == Team.id)\r\n        # # Alternatively, use the join method to join the Hero and Team tables.\r\n        # statement = select(Hero, Team).join(Team)\r\n        # # Or outer join to include heroes without a team.\r\n        # statement = select(Hero, Team).join(Team, isouter=True)\r\n        print(\"-\" * 50)\r\n        results = session.exec(statement)\r\n        for hero, team in results:\r\n            print(\"Hero:\", hero, \"Team:\", team)\r\n        print(\"-\" * 50)\r\n\r\n\r\ndef update_heroes(engine):\r\n    with Session(engine) as session:\r\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\r\n        results = session.exec(statement)\r\n        hero_1 = results.one()\r\n        print(\"Hero 1:\", hero_1)\r\n\r\n        hero_1.age = 16\r\n        hero_1.name = \"Spider-Youngster\"\r\n        session.add(hero_1)\r\n\r\n        session.commit()\r\n        session.refresh(hero_1)\r\n\r\n        print(\"Updated hero 1:\", hero_1)\r\n\r\n\r\ndef delete_heroes(engine):\r\n    with Session(engine) as session:\r\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\r\n        results = session.exec(statement)\r\n        try:\r\n            hero = results.one()\r\n            print(\"Hero: \", hero)\r\n            session.delete(hero)\r\n            session.commit()\r\n            print(\"Deleted hero:\", hero)\r\n        except Exception:\r\n            print(\"There's no hero named Spider-Youngster\")\r\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/relationship_attributes/crud.py", "content": "from sqlmodel import Session, select\r\nfrom models import Hero, Team\r\n\r\n\r\n# RA = relationship attributes\r\n# see https://sqlmodel.tiangolo.com/tutorial/relationship-attributes/\r\ndef create_heroes(engine):\r\n    with Session(engine) as session:\r\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\r\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\r\n\r\n        hero_deadpond = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\", team=team_z_force)\r\n        hero_rusty_man = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48, team=team_preventers)\r\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\r\n        session.add(hero_deadpond)\r\n        session.add(hero_rusty_man)\r\n        session.add(hero_spider_boy)\r\n        # we don't even have to put the teams explicitly in the session with session.add(team),\r\n        # because these Team instances are already associated with heroes that we do add to the session.\r\n        session.commit()\r\n\r\n        session.refresh(hero_deadpond)\r\n        session.refresh(hero_rusty_man)\r\n        session.refresh(hero_spider_boy)\r\n\r\n        print(\"Created hero:\", hero_deadpond)\r\n        print(\"Created hero:\", hero_rusty_man)\r\n        print(\"Created hero:\", hero_spider_boy)\r\n\r\n        hero_spider_boy.team = team_preventers\r\n        session.add(hero_spider_boy)\r\n        session.commit()\r\n        session.refresh(hero_spider_boy)\r\n        print(\"Updated hero:\", hero_spider_boy)\r\n\r\n        hero_black_lion = Hero(name=\"Black Lion\", secret_name=\"Trevor Challa\", age=35)\r\n        hero_sure_e = Hero(name=\"Princess Sure-E\", secret_name=\"Sure-E\")\r\n        team_wakaland = Team(\r\n            name=\"Wakaland\",\r\n            headquarters=\"Wakaland Capital City\",\r\n            heroes=[hero_black_lion, hero_sure_e],\r\n        )\r\n        session.add(team_wakaland)\r\n        # Notice that, the same as before, we only have to add the Team instance to the session,\r\n        # and because the heroes are connected to it, they will be automatically saved too when we commit.\r\n        session.commit()\r\n        session.refresh(team_wakaland)\r\n        print(\"Team Wakaland:\", team_wakaland)\r\n\r\n        hero_tarantula = Hero(name=\"Tarantula\", secret_name=\"Natalia Roman-on\", age=32)\r\n        hero_dr_weird = Hero(name=\"Dr. Weird\", secret_name=\"Steve Weird\", age=36)\r\n        hero_cap = Hero(name=\"Captain North America\", secret_name=\"Esteban Rogelios\", age=93)\r\n\r\n        team_preventers.heroes.append(hero_tarantula)\r\n        team_preventers.heroes.append(hero_dr_weird)\r\n        team_preventers.heroes.append(hero_cap)\r\n        session.add(team_preventers)\r\n        # And in the same way as before, we don't even have to add() the independent heroes\r\n        # to the session, because they are connected to the team.\r\n        session.commit()\r\n        session.refresh(hero_tarantula)\r\n        session.refresh(hero_dr_weird)\r\n        session.refresh(hero_cap)\r\n        print(\"Preventers new hero:\", hero_tarantula)\r\n        print(\"Preventers new hero:\", hero_dr_weird)\r\n        print(\"Preventers new hero:\", hero_cap)\r\n\r\n\r\ndef select_heroes(engine):\r\n    with Session(engine) as session:\r\n\r\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\r\n        result = session.exec(statement)\r\n        hero_spider_boy = result.one()\r\n\r\n        # old way\r\n        # statement = select(Team).where(Team.id == hero_spider_boy.team_id)\r\n        # result = session.exec(statement)\r\n        # team = result.first()\r\n        # print(\"Spider-Boy's team:\", team)\r\n\r\n        # new way\r\n        print(\"Spider-Boy's team again:\", hero_spider_boy.team)\r\n\r\n        # other example\r\n        statement = select(Team).where(Team.name == \"Preventers\")\r\n        result = session.exec(statement)\r\n        team_preventers = result.one()\r\n\r\n        print(\"Preventers heroes:\", team_preventers.heroes)\r\n\r\n\r\ndef update_heroes(engine):\r\n    with Session(engine) as session:\r\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\r\n        result = session.exec(statement)\r\n        hero_spider_boy = result.one()\r\n\r\n        hero_spider_boy.team = None\r\n        session.add(hero_spider_boy)\r\n        session.commit()\r\n\r\n        session.refresh(hero_spider_boy)\r\n        print(\"Spider-Boy without team:\", hero_spider_boy)\r\n\r\n\r\ndef delete_heroes(engine):\r\n    with Session(engine) as session:\r\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\r\n        results = session.exec(statement)\r\n        try:\r\n            hero = results.one()\r\n            print(\"Hero: \", hero)\r\n            session.delete(hero)\r\n            session.commit()\r\n            print(\"Deleted hero:\", hero)\r\n        except Exception:\r\n            print(\"There's no hero named Spider-Youngster\")\r\n"}
{"type": "source_file", "path": "__temp/modules_library_packages/examples/flask_request_example.py", "content": "from flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n# GET and POST are two different types of HTTP methods.\n\n# GET: It is used to retrieve data from a server. \n# It's safe and idempotent, meaning that it can be called multiple times \n# without different outcomes. \n# It should not be used when dealing with sensitive data or to modify the server state.\n\n# POST: It is used to send data to a server to create/update a resource. \n# The data sent to the server with the POST method is stored in the request body. \n# POST requests are never cached and do not remain in the browser history.\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef form_example():\n    if request.method == 'POST':\n        # this is a POST request\n        # we'll access the data from the form using request.form\n        name = request.form.get('name')\n        age = request.form.get('age')\n        return 'You posted: Name - ' + str(name) + ', Age - ' + str(age)\n    else:\n        # this is a GET request, show the form\n        return render_template('form.html')\n\n\nif __name__ == '__main__':\n    app.run(debug=True)"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/many_to_many/models.py", "content": "from sqlmodel import Field, Relationship, SQLModel\r\n\r\n\r\n# see https://sqlmodel.tiangolo.com/tutorial/many-to-many/\r\nclass HeroTeamLink(SQLModel, table=True):\r\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\", primary_key=True)\r\n    hero_id: int | None = Field(default=None, foreign_key=\"hero.id\", primary_key=True)\r\n\r\n\r\nclass Team(SQLModel, table=True):\r\n    id: int | None = Field(default=None, primary_key=True)\r\n    name: str = Field(index=True)\r\n    headquarters: str\r\n\r\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"teams\", link_model=HeroTeamLink)\r\n\r\n\r\nclass Hero(SQLModel, table=True):\r\n    id: int | None = Field(default=None, primary_key=True)\r\n    name: str = Field(index=True)\r\n    secret_name: str\r\n    age: int | None = Field(default=None, index=True)\r\n\r\n    teams: list[Team] = Relationship(back_populates=\"heroes\", link_model=HeroTeamLink)\r\n"}
{"type": "source_file", "path": "__temp/modules_library_packages/examples/tkinter_example.py", "content": "# IMPORTANT: do not run it in SSH, it will not work\n# run it in your local machine\nimport tkinter as tk\n\n\ndef say_hello():\n    print(\"Hello, World!\")\n\nroot = tk.Tk()\nframe = tk.Frame(root)\nframe.pack()\n\nbutton = tk.Button(frame, \n                   text=\"Say Hello\", \n                   fg=\"red\",\n                   command=say_hello)\nbutton.pack(side=tk.LEFT)\n\nquit_button = tk.Button(frame,\n                        text=\"QUIT\", \n                        fg=\"blue\",\n                        command=root.quit)\nquit_button.pack(side=tk.LEFT)\n\nroot.mainloop()"}
{"type": "source_file", "path": "flask_2/__init__.py", "content": "# Empty __init__.py file - just marks the directory as a Python package\n"}
{"type": "source_file", "path": "flask_2/app/__init__.py", "content": "# Empty __init__.py file - just marks the directory as a Python package\n"}
{"type": "source_file", "path": "__temp/modules_library_packages/examples/argparse_example.py", "content": "# argparse\r\nimport argparse\r\n\r\n\r\ndef square(x):\r\n    return x**2\r\n\r\n\r\ndef cube(x):\r\n    return x**3\r\n\r\n\r\ndef main():\r\n    parser = argparse.ArgumentParser(description=\"Square or cube a number\")\r\n    parser.add_argument(\"number\", type=int, help=\"The number to be squared or cubed\")\r\n    parser.add_argument(\"--square\", action=\"store_true\", help=\"Square the number\")\r\n    parser.add_argument(\"--cube\", action=\"store_true\", help=\"Cube the number\")\r\n    args = parser.parse_args()\r\n    number = args.number\r\n    if args.cube:\r\n        print(f\"The cube of {number} is {cube(number)}\")\r\n    if args.square:\r\n        print(f\"The square of {number} is {square(number)}\")\r\n    else:\r\n        print(f\"No action specified for {number}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"}
{"type": "source_file", "path": "__ip/modular_design/prenotazione_per_un_cinema.py", "content": "# Definizione di un tipo di dato per rappresentare un film\nFilm = dict[str, str | int]  # {'titolo': ..., 'posti_prenotati': ...}\n\n# Definizione di un tipo di dato per rappresentare una sala\nSala = dict[str, str | int | list[Film]]  # {'nome': ..., 'posti_totali': ..., 'film': ...}\n\n# Definizione di un tipo di dato per rappresentare un cinema\n# Ogni chiave è il nome di una sala \n# e il valore è un dizionario che rappresenta i dettagli della sala.\nCinema = dict[str, Sala]\n\ndef aggiungi_sala(cinema: Cinema, sala: str, posti: int) -> Cinema:\n    pass\n\ndef rimuovi_sala(cinema: Cinema, sala: str) -> Cinema:\n    pass\n\ndef visualizza_sale(cinema: Cinema) -> None:\n    pass\n\ndef aggiungi_film(cinema: Cinema, sala: str, film: str) -> Cinema:\n    pass\n\ndef rimuovi_film(cinema: Cinema, sala: str, film: str) -> Cinema:\n    pass\n\ndef visualizza_film(cinema: Cinema, sala: str) -> None:\n    pass\n\ndef prenota_posto(cinema: Cinema, sala: str, film: str) -> Cinema:\n    pass\n\ndef annulla_prenotazione(cinema: Cinema, sala: str, film: str) -> Cinema:\n    pass\n\ndef main():\n    cinema = {}\n    cinema = aggiungi_sala(cinema, 'Sala 1', 100)\n    cinema = aggiungi_sala(cinema, 'Sala 2', 50)\n    cinema = aggiungi_film(cinema, 'Sala 1', 'Il Signore degli Anelli')\n    cinema = aggiungi_film(cinema, 'Sala 1', 'Harry Potter')\n    cinema = aggiungi_film(cinema, 'Sala 2', 'Star Wars')\n    print(visualizza_sale(cinema))\n    print(visualizza_film(cinema, 'Sala 1'))\n    print(visualizza_film(cinema, 'Sala 2'))\n    cinema = prenota_posto(cinema, 'Sala 1', 'Il Signore degli Anelli')\n    cinema = prenota_posto(cinema, 'Sala 1', 'Il Signore degli Anelli')\n    cinema = prenota_posto(cinema, 'Sala 1', 'Harry Potter')\n    cinema = prenota_posto(cinema, 'Sala 2', 'Star Wars')\n    cinema = annulla_prenotazione(cinema, 'Sala 1', 'Il Signore degli Anelli')\n    print(visualizza_film(cinema, 'Sala 1'))\n    print(visualizza_film(cinema, 'Sala 2'))\n\n"}
{"type": "source_file", "path": "flask_2/app/models/user.py", "content": "from werkzeug.security import generate_password_hash, check_password_hash\nfrom ..database import get_db_connection\n\n\nclass User:\n    def __init__(self, id=None, username=None, password=None):\n        self.id = id\n        self.username = username\n        self.password = password\n\n    # @staticmethod because we don't need instance access (self)\n    @staticmethod\n    def get_by_id(user_id):\n        conn = get_db_connection()\n        cursor = conn.cursor(dictionary=True)\n        cursor.execute(\"SELECT * FROM users WHERE id = %s\", (user_id,))\n        user_data = cursor.fetchone()\n        cursor.close()\n        conn.close()\n\n        if user_data:\n            # ** unpacks user_data dictionary into keyword arguments for User constructor\n            return User(**user_data)\n        return None\n\n    @staticmethod\n    def get_by_username(username):\n        conn = get_db_connection()\n        cursor = conn.cursor(dictionary=True)\n        cursor.execute(\"SELECT * FROM users WHERE username = %s\", (username,))\n        user_data = cursor.fetchone()\n        cursor.close()\n        conn.close()\n\n        if user_data:\n            return User(**user_data)\n        return None\n\n    def save(self):\n        conn = get_db_connection()\n        cursor = conn.cursor()\n\n        if self.id:\n            # Update existing user\n            cursor.execute(\n                \"UPDATE users SET username = %s WHERE id = %s\", (self.username, self.id)\n            )\n        else:\n            # Create new user\n            cursor.execute(\n                \"INSERT INTO users (username, password) VALUES (%s, %s)\",\n                (self.username, generate_password_hash(self.password)),\n            )\n            self.id = cursor.lastrowid\n\n        conn.commit()\n        cursor.close()\n        conn.close()\n\n    def verify_password(self, password):\n        return check_password_hash(self.password, password)\n"}
{"type": "source_file", "path": "flask_2/app/auth.py", "content": "from functools import wraps\nfrom flask import session, redirect, url_for\n\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if \"user_id\" not in session:\n            return redirect(url_for(\"auth.login\"))\n        return f(*args, **kwargs)\n\n    return decorated_function\n"}
{"type": "source_file", "path": "__temp/modules_library_packages/examples/psutil_example.py", "content": "import psutil\r\n\r\n# Get the CPU usage percentage\r\ncpu_usage = psutil.cpu_percent()\r\nprint(f\"CPU usage: {cpu_usage}%\")\r\n\r\n# Get memory usage\r\nmemory = psutil.virtual_memory()\r\nprint(f\"Memory: {memory}\")\r\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/many_to_many/crud.py", "content": "from sqlmodel import Session, select\r\nfrom models import Hero, Team\r\n\r\n\r\ndef create_heroes(engine):\r\n    with Session(engine) as session:\r\n        team_preventers = Team(name=\"Preventers\", headquarters=\"Sharp Tower\")\r\n        team_z_force = Team(name=\"Z-Force\", headquarters=\"Sister Margaret's Bar\")\r\n\r\n        hero_deadpond = Hero(\r\n            name=\"Deadpond\",\r\n            secret_name=\"Dive Wilson\",\r\n            teams=[team_z_force, team_preventers],\r\n        )\r\n        hero_rusty_man = Hero(\r\n            name=\"Rusty-Man\",\r\n            secret_name=\"Tommy Sharp\",\r\n            age=48,\r\n            teams=[team_preventers],\r\n        )\r\n        hero_spider_boy = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\", teams=[team_preventers])\r\n        session.add(hero_deadpond)\r\n        session.add(hero_rusty_man)\r\n        session.add(hero_spider_boy)\r\n        session.commit()\r\n\r\n        session.refresh(hero_deadpond)\r\n        session.refresh(hero_rusty_man)\r\n        session.refresh(hero_spider_boy)\r\n\r\n        print(\"Deadpond:\", hero_deadpond)\r\n        print(\"Deadpond teams:\", hero_deadpond.teams)\r\n        print(\"Rusty-Man:\", hero_rusty_man)\r\n        print(\"Rusty-Man Teams:\", hero_rusty_man.teams)\r\n        print(\"Spider-Boy:\", hero_spider_boy)\r\n        print(\"Spider-Boy Teams:\", hero_spider_boy.teams)\r\n\r\n\r\ndef select_heroes(engine):\r\n    with Session(engine) as session:\r\n\r\n        statement = select(Hero).where(Hero.name == \"Spider-Boy\")\r\n        result = session.exec(statement)\r\n        hero_spider_boy = result.one()\r\n\r\n        print(\"Spider-Boy's team again:\", hero_spider_boy.teams)\r\n\r\n\r\ndef update_heroes(engine):\r\n    with Session(engine) as session:\r\n        hero_spider_boy = session.exec(select(Hero).where(Hero.name == \"Spider-Boy\")).one()\r\n        team_z_force = session.exec(select(Team).where(Team.name == \"Z-Force\")).one()\r\n\r\n        team_z_force.heroes.append(hero_spider_boy)\r\n        session.add(team_z_force)\r\n        session.commit()\r\n\r\n        print(\"Updated Spider-Boy's Teams:\", hero_spider_boy.teams)\r\n        print(\"Z-Force heroes:\", team_z_force.heroes)\r\n\r\n        hero_spider_boy.teams.remove(team_z_force)\r\n        session.add(team_z_force)\r\n        session.commit()\r\n\r\n        print(\"Reverted Z-Force's heroes:\", team_z_force.heroes)\r\n        print(\"Reverted Spider-Boy's teams:\", hero_spider_boy.teams)\r\n\r\n\r\ndef delete_heroes(engine):\r\n    with Session(engine) as session:\r\n        statement = select(Hero).where(Hero.name == \"Spider-Youngster\")\r\n        results = session.exec(statement)\r\n        try:\r\n            hero = results.one()\r\n            print(\"Hero: \", hero)\r\n            session.delete(hero)\r\n            session.commit()\r\n            print(\"Deleted hero:\", hero)\r\n        except Exception:\r\n            print(\"There's no hero named Spider-Youngster\")\r\n"}
{"type": "source_file", "path": "flask_2/app/routes/auth.py", "content": "from flask import Blueprint, render_template, request, redirect, url_for, flash, session\nfrom ..models.user import User\n\nauth = Blueprint(\"auth\", __name__)\n\n\n@auth.route(\"/register\", methods=[\"GET\", \"POST\"])\ndef register():\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n\n        if User.get_by_username(username):\n            flash(\"Username already exists\")\n            return redirect(url_for(\"auth.register\"))\n\n        user = User(username=username, password=password)\n        user.save()\n        return redirect(url_for(\"auth.login\"))\n    return render_template(\"register.html\")\n\n\n@auth.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n\n        user = User.get_by_username(username)\n        if user and user.verify_password(password):\n            session[\"user_id\"] = user.id\n            session[\"username\"] = user.username\n            return redirect(url_for(\"entries.list\"))\n        flash(\"Invalid username or password\")\n    return render_template(\"login.html\")\n\n\n@auth.route(\"/logout\")\ndef logout():\n    session.clear()\n    return redirect(url_for(\"auth.login\"))\n\n\n@auth.route(\"/password_reset_request\", methods=[\"GET\", \"POST\"])\ndef password_reset_request():\n    if request.method == \"POST\":\n        _ = request.form[\"email\"]\n        # Logic to send password reset email goes here\n        flash(\"Password reset email sent\")\n        return redirect(url_for(\"auth.login\"))\n    return render_template(\"password_reset_request.html\")\n\n\n@auth.route(\"/password_reset/<token>\", methods=[\"GET\", \"POST\"])\ndef password_reset(token):\n    if request.method == \"POST\":\n        _ = request.form[\"password\"]\n        # Logic to reset the password goes here\n        flash(\"Password has been reset\")\n        return redirect(url_for(\"auth.login\"))\n    return render_template(\"password_reset.html\", token=token)\n"}
{"type": "source_file", "path": "__temp/modules_library_packages/examples/matplotlib_example.py", "content": "import matplotlib.pyplot as plt\r\n\r\nmax_points = 10\r\n# y = x^2\r\nx = [i for i in range(1, max_points)]\r\ny_parabolic = [i**2 for i in range(1, max_points)]\r\n# y = 2^x\r\ny_exponential = [2**i for i in range(1, max_points)]\r\nplt.plot(x, y_parabolic)\r\nplt.plot(x, y_exponential)\r\n\r\nplt.savefig(\"graph.png\")\r\n\r\nplt.clf()\r\n\r\n# show a bar chart\r\nstudents = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\"]\r\nmarks = [2, 3, 4, 5, 4]\r\n\r\nplt.bar(students, marks)\r\nplt.savefig(\"graph2.png\")\r\n\r\nplt.clf()\r\n\r\n\r\nperson_id = [1, 2, 3, 4, 5, 6]\r\nheigth = [170, 175, 180, 185, 190, 195]\r\nweight = [85, 90, 100, 75, 80, 95]\r\n\r\nplt.scatter(person_id, heigth, s=weight)\r\n\r\nplt.savefig(\"graph3.png\")\r\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/relationship_attributes/main.py", "content": "import os\r\nfrom database import create_db_and_tables, create_engine_with_db\r\nfrom crud import (\r\n    create_heroes,\r\n    select_heroes,\r\n    update_heroes,\r\n    delete_heroes,\r\n)\r\n\r\n\r\ndef main():\r\n    db_name = \"database.db\"\r\n    verbose = False\r\n    delete_database = True\r\n    if delete_database:\r\n        try:\r\n            os.remove(db_name)\r\n        except FileNotFoundError:\r\n            print(f\"{db_name} not found\")\r\n            exit()\r\n    engine = create_engine_with_db(db_name, verbose)\r\n    create_db_and_tables(engine)\r\n    create_heroes(engine)\r\n    select_heroes(engine)\r\n    update_heroes(engine)\r\n    delete_heroes(engine)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/relationship_attributes/models.py", "content": "from sqlmodel import Field, Relationship, SQLModel\r\n\r\n\r\nclass Team(SQLModel, table=True):\r\n    id: int | None = Field(default=None, primary_key=True)\r\n    # to find out more about indexes in SQLModel, check the documentation\r\n    # https://sqlmodel.tiangolo.com/tutorial/indexes/\r\n    name: str = Field(index=True)\r\n    headquarters: str\r\n    # Why the \"\" around \"Hero\"?\r\n    # https://sqlmodel.tiangolo.com/tutorial/relationship-attributes/type-annotation-strings/\r\n    heroes: list[\"Hero\"] = Relationship(back_populates=\"team\")\r\n\r\n\r\nclass Hero(SQLModel, table=True):\r\n    id: int | None = Field(default=None, primary_key=True)\r\n    name: str\r\n    secret_name: str\r\n    age: int | None = None\r\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\r\n\r\n    # These new attributes are not the same as fields,\r\n    # they don't represent a column directly in the database,\r\n    # and their value is not a singular value like an integer.\r\n    # Their value is the actual entire object that is related.\r\n    team: Team | None = Relationship(back_populates=\"heroes\")\r\n"}
{"type": "source_file", "path": "flask_2/app/models/entry.py", "content": "from ..database import get_db_connection\n\n\nclass Entry:\n    def __init__(self, id=None, name=None, message=None):\n        self.id = id\n        self.name = name\n        self.message = message\n\n    @staticmethod\n    def get_all(search=None):\n        conn = get_db_connection()\n        cursor = conn.cursor(dictionary=True)\n\n        if search:\n            cursor.execute(\n                \"SELECT * FROM entries WHERE name LIKE %s OR message LIKE %s\",\n                (\"%\" + search + \"%\", \"%\" + search + \"%\"),\n            )\n        else:\n            cursor.execute(\"SELECT * FROM entries\")\n\n        entries = [Entry(**entry) for entry in cursor.fetchall()]\n        cursor.close()\n        conn.close()\n        return entries\n\n    @staticmethod\n    def get_by_id(entry_id):\n        conn = get_db_connection()\n        cursor = conn.cursor(dictionary=True)\n        cursor.execute(\"SELECT * FROM entries WHERE id = %s\", (entry_id,))\n        entry_data = cursor.fetchone()\n        cursor.close()\n        conn.close()\n\n        if entry_data:\n            return Entry(**entry_data)\n        return None\n\n    def save(self):\n        conn = get_db_connection()\n        cursor = conn.cursor()\n\n        if self.id:\n            # Update existing entry\n            cursor.execute(\n                \"UPDATE entries SET name = %s, message = %s WHERE id = %s\",\n                (self.name, self.message, self.id),\n            )\n        else:\n            # Create new entry\n            cursor.execute(\n                \"INSERT INTO entries (name, message) VALUES (%s, %s)\",\n                (self.name, self.message),\n            )\n            self.id = cursor.lastrowid\n\n        conn.commit()\n        cursor.close()\n        conn.close()\n\n    def delete(self):\n        if not self.id:\n            return\n\n        conn = get_db_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"DELETE FROM entries WHERE id = %s\", (self.id,))\n        conn.commit()\n        cursor.close()\n        conn.close()\n"}
{"type": "source_file", "path": "__temp/modules_library_packages/examples/requests_example.py", "content": "import requests\r\n\r\n# Making a GET request\r\nresponse = requests.get(\"https://api.github.com\")\r\n# response = requests.get(\"https://github.com\")\r\n# response = requests.get(\"https://github.com/sdadsaddafafdsd\")\r\n\r\n# Checking the status code of the request\r\nprint(response.status_code)\r\n\r\n# Printing the content of the response\r\nprint(type(response.text))\r\ndata = response.json()\r\nprint(data)\r\nprint(type(data))\r\nprint(data[\"current_user_url\"])\r\n"}
{"type": "source_file", "path": "__temp/web_dev/fastapi_example.py", "content": "# to run it:\n# uvicorn fastapi_example:app --reload\n\nfrom typing import Optional\n\nfrom fastapi import FastAPI\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str = Field(index=True)\n    secret_name: str\n    age: Optional[int] = Field(default=None, index=True)\n\n\nsqlite_file_name = \"database.db\"\nsqlite_url = f\"sqlite:///{sqlite_file_name}\"\n\nconnect_args = {\"check_same_thread\": False}\nengine = create_engine(sqlite_url, echo=True, connect_args=connect_args)\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\napp = FastAPI()\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.post(\"/heroes/\")\ndef create_hero(hero: Hero):\n    with Session(engine) as session:\n        session.add(hero)\n        session.commit()\n        session.refresh(hero)\n        return hero\n\n\n@app.get(\"/heroes/\")\ndef read_heroes():\n    with Session(engine) as session:\n        heroes = session.exec(select(Hero)).all()\n        return heroes\n"}
{"type": "source_file", "path": "flask_2/app/models/__init__.py", "content": "# This file is intentionally empty to mark the directory as a Python package\n"}
{"type": "source_file", "path": "__temp/web_dev/server.py", "content": "from flask import Flask, jsonify, request, send_from_directory\nfrom flask_cors import CORS\nimport os\n\n# app = Flask(__name__)\napp = Flask(__name__, static_url_path=\"\", static_folder=os.path.dirname(__file__))\n\nCORS(app)\n\nusers = [\n    {\"id\": 1, \"name\": \"John Doe\"},\n    {\"id\": 2, \"name\": \"Jane Doe\"},\n]\nnext_id = 3\n\n\n@app.route(\"/\")\ndef index():\n    return send_from_directory(os.path.dirname(__file__), \"index.html\")\n\n\n@app.route(\"/users\", methods=[\"GET\"])\ndef get_users():\n    return jsonify(users)\n\n\n@app.route(\"/users\", methods=[\"POST\"])\ndef add_user():\n    global next_id\n    new_user = request.get_json()\n    new_user[\"id\"] = next_id\n    next_id += 1\n    users.append(new_user)\n    return jsonify(new_user)\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n"}
{"type": "source_file", "path": "flask_2/app/app.py", "content": "from flask import Flask, redirect, url_for\nfrom .database import init_db\n\n\ndef create_app():\n    app = Flask(__name__)\n\n    # Configuration\n    app.config.update(\n        SECRET_KEY=\"your-secret-key-here\",\n        MYSQL_HOST=\"localhost\",\n        MYSQL_USER=\"x\",\n        MYSQL_PASSWORD=\"x\",\n        MYSQL_DATABASE=\"world\",\n    )\n\n    # Initialize database\n    # Database initialization requires knowing which app's configuration to use\n    with app.app_context():\n        init_db()\n\n    # Register blueprints\n    # Blueprints are modular components that group related routes and functionality\n    from .routes.auth import auth\n    from .routes.entries import entries\n    from .routes.profile import profile\n\n    app.register_blueprint(auth)\n    app.register_blueprint(entries)\n    app.register_blueprint(profile)\n\n    # Add root route\n    @app.route(\"/\")\n    def index():\n        return redirect(url_for(\"auth.login\"))\n\n    return app\n"}
{"type": "source_file", "path": "flask_1/app.py", "content": "import json\nfrom flask import (\n    Flask,\n    render_template,\n    request,\n    redirect,\n    url_for,\n    session,\n    flash,\n    jsonify,\n)\nimport mysql.connector\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport os\n\napp = Flask(__name__)\napp.secret_key = \"your-secret-key-here\"  # Change this to a secure secret key\n\n\ndef get_db_connection():\n    return mysql.connector.connect(\n        host=\"localhost\",\n        user=\"x\",\n        password=\"x\",\n        database=\"world\",\n    )\n\n\ndef populate_db_from_json():\n    json_path = os.path.join(app.static_folder, \"messages.json\")\n    with open(json_path) as f:\n        messages = json.load(f)\n\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT COUNT(*) FROM entries\")\n    count = cursor.fetchone()[0]\n\n    if count == 0:\n        for message in messages:\n            cursor.execute(\n                \"INSERT INTO entries (name, message) VALUES (%s, %s)\",\n                (message[\"name\"], message[\"message\"]),\n            )\n        conn.commit()\n\n    cursor.close()\n    conn.close()\n\n\n@app.route(\"/\")\ndef list_entries():\n    search = request.args.get(\"search\")\n    conn = get_db_connection()\n    cursor = conn.cursor(dictionary=True)\n    if search:\n        cursor.execute(\n            \"SELECT * FROM entries WHERE name LIKE %s OR message LIKE %s\",\n            (\"%\" + search + \"%\", \"%\" + search + \"%\"),\n        )\n    else:\n        cursor.execute(\"SELECT * FROM entries\")\n    entries = cursor.fetchall()\n    cursor.close()\n    conn.close()\n    return render_template(\"list.html\", entries=entries)\n\n\n@app.route(\"/register\", methods=[\"GET\", \"POST\"])\ndef register():\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n\n        conn = get_db_connection()\n        cursor = conn.cursor(dictionary=True)\n\n        # Check if username exists\n        cursor.execute(\"SELECT * FROM users WHERE username = %s\", (username,))\n        if cursor.fetchone():\n            cursor.close()\n            conn.close()\n            flash(\"Username already exists\")\n            return redirect(url_for(\"register\"))\n\n        # Create new user\n        cursor.execute(\n            \"INSERT INTO users (username, password) VALUES (%s, %s)\",\n            (username, generate_password_hash(password)),\n        )\n        conn.commit()\n        cursor.close()\n        conn.close()\n        return redirect(url_for(\"login\"))\n    return render_template(\"register.html\")\n\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        password = request.form[\"password\"]\n\n        conn = get_db_connection()\n        cursor = conn.cursor(dictionary=True)\n        cursor.execute(\"SELECT * FROM users WHERE username = %s\", (username,))\n        user = cursor.fetchone()\n        cursor.close()\n        conn.close()\n\n        if user and check_password_hash(user[\"password\"], password):\n            session[\"user_id\"] = user[\"id\"]\n            session[\"username\"] = user[\"username\"]\n            return redirect(url_for(\"list_entries\"))\n        flash(\"Invalid username or password\")\n    return render_template(\"login.html\")\n\n\n@app.route(\"/logout\")\ndef logout():\n    session.clear()\n    return redirect(url_for(\"login\"))\n\n\n@app.route(\"/entries/new\", methods=[\"GET\", \"POST\"])\ndef create_entry():\n    if \"user_id\" not in session:\n        return redirect(url_for(\"login\"))\n    if request.method == \"POST\":\n        name = request.form[\"name\"]\n        message = request.form[\"message\"]\n        conn = get_db_connection()\n        cursor = conn.cursor()\n        sql = \"INSERT INTO entries (name, message) VALUES (%s, %s)\"\n        values = (name, message)\n        cursor.execute(sql, values)\n        conn.commit()\n        cursor.close()\n        conn.close()\n        return redirect(url_for(\"list_entries\"))\n    return render_template(\"create.html\")\n\n\n@app.route(\"/entries/<int:id>\", methods=[\"GET\"])\ndef read_entry(id):\n    conn = get_db_connection()\n    cursor = conn.cursor(dictionary=True)\n    cursor.execute(\"SELECT * FROM entries WHERE id = %s\", (id,))\n    entry = cursor.fetchone()\n    cursor.close()\n    conn.close()\n    if entry:\n        return render_template(\"read.html\", entry=entry)\n    return jsonify({\"message\": \"Entry not found\"}), 404\n\n\n@app.route(\"/entries/<int:id>/edit\", methods=[\"GET\", \"POST\"])\ndef update_entry(id):\n    if \"user_id\" not in session:\n        return redirect(url_for(\"login\"))\n    conn = get_db_connection()\n    cursor = conn.cursor(dictionary=True)\n    cursor.execute(\"SELECT * FROM entries WHERE id = %s\", (id,))\n    entry = cursor.fetchone()\n    if not entry:\n        cursor.close()\n        conn.close()\n        return jsonify({\"message\": \"Entry not found\"}), 404\n    if request.method == \"POST\":\n        name = request.form[\"name\"]\n        message = request.form[\"message\"]\n        sql = \"UPDATE entries SET name = %s, message = %s WHERE id = %s\"\n        values = (name, message, id)\n        cursor.execute(sql, values)\n        conn.commit()\n        cursor.close()\n        conn.close()\n        return redirect(url_for(\"list_entries\"))\n    cursor.close()\n    conn.close()\n    return render_template(\"update.html\", entry=entry)\n\n\n@app.route(\"/entries/<int:id>/delete\", methods=[\"GET\", \"POST\"])\ndef delete_entry(id):\n    if \"user_id\" not in session:\n        return redirect(url_for(\"login\"))\n    conn = get_db_connection()\n    cursor = conn.cursor(dictionary=True)\n    cursor.execute(\"SELECT * FROM entries WHERE id = %s\", (id,))\n    entry = cursor.fetchone()\n    if not entry:\n        cursor.close()\n        conn.close()\n        return jsonify({\"message\": \"Entry not found\"}), 404\n    if request.method == \"POST\":\n        sql = \"DELETE FROM entries WHERE id = %s\"\n        values = (id,)\n        cursor.execute(sql, values)\n        conn.commit()\n        cursor.close()\n        conn.close()\n        return redirect(url_for(\"list_entries\"))\n    cursor.close()\n    conn.close()\n    return render_template(\"delete.html\", entry=entry)\n\n\nif __name__ == \"__main__\":\n    conn = get_db_connection()\n    cursor = conn.cursor()\n\n    # Drop users table if exists\n    cursor.execute(\"SET FOREIGN_KEY_CHECKS = 0\")\n    cursor.execute(\"DROP TABLE IF EXISTS users\")\n    cursor.execute(\"DROP TABLE IF EXISTS entries\")\n\n    # Create users table\n    cursor.execute(\"\"\"\n        CREATE TABLE users (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            username VARCHAR(80) UNIQUE NOT NULL,\n            password VARCHAR(255) NOT NULL\n        )\n    \"\"\")\n    # Insert initial user\n    cursor.execute(\n        \"INSERT INTO users (username, password) VALUES (%s, %s)\",\n        (\"x\", generate_password_hash(\"x\")),\n    )\n\n    # Create entries table\n    cursor.execute(\"\"\"\n        CREATE TABLE entries (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            name VARCHAR(80) NOT NULL,\n            message VARCHAR(200) NOT NULL\n        )\n    \"\"\")\n\n    conn.commit()\n    cursor.close()\n    conn.close()\n\n    # Populate the database with messages from JSON file\n    populate_db_from_json()\n\n    app.run(debug=True)\n"}
{"type": "source_file", "path": "flask_2/app/database.py", "content": "import mysql.connector\nfrom flask import current_app\nfrom werkzeug.security import generate_password_hash\nimport json\n\n\ndef get_db_connection():\n    return mysql.connector.connect(\n        host=current_app.config[\"MYSQL_HOST\"],\n        user=current_app.config[\"MYSQL_USER\"],\n        password=current_app.config[\"MYSQL_PASSWORD\"],\n        database=current_app.config[\"MYSQL_DATABASE\"],\n    )\n\n\ndef init_db():\n    conn = get_db_connection()\n    cursor = conn.cursor()\n\n    # Drop existing tables\n    cursor.execute(\"SET FOREIGN_KEY_CHECKS = 0\")\n    cursor.execute(\"DROP TABLE IF EXISTS users\")\n    cursor.execute(\"DROP TABLE IF EXISTS entries\")\n\n    # Create users table\n    cursor.execute(\"\"\"\n        CREATE TABLE users (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            username VARCHAR(80) UNIQUE NOT NULL,\n            password VARCHAR(255) NOT NULL\n        )\n    \"\"\")\n\n    # Create entries table\n    cursor.execute(\"\"\"\n        CREATE TABLE entries (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            name VARCHAR(80) NOT NULL,\n            message VARCHAR(200) NOT NULL\n        )\n    \"\"\")\n\n    # Insert initial user\n    cursor.execute(\n        \"INSERT INTO users (username, password) VALUES (%s, %s)\",\n        (\"x\", generate_password_hash(\"x\")),\n    )\n\n    # Load initial entries from messages.json\n    with open(current_app.root_path + \"/static/messages.json\") as f:\n        messages = json.load(f)\n        for message in messages:\n            cursor.execute(\n                \"INSERT INTO entries (name, message) VALUES (%s, %s)\",\n                (message[\"name\"], message[\"message\"]),\n            )\n\n    conn.commit()\n    cursor.close()\n    conn.close()\n"}
{"type": "source_file", "path": "flask_2/app/routes/__init__.py", "content": "# Empty __init__.py file\n"}
{"type": "source_file", "path": "__temp/__orm/sqlmodel/foreign_key/models.py", "content": "from sqlmodel import Field, SQLModel\r\n\r\n\r\nclass Team(SQLModel, table=True):\r\n    id: int | None = Field(default=None, primary_key=True)\r\n    # to find out more about indexes in SQLModel, check the documentation\r\n    # https://sqlmodel.tiangolo.com/tutorial/indexes/\r\n    name: str = Field(index=True)\r\n    headquarters: str\r\n\r\n\r\nclass Hero(SQLModel, table=True):\r\n    id: int | None = Field(default=None, primary_key=True)\r\n    name: str\r\n    secret_name: str\r\n    age: int | None = None\r\n    team_id: int | None = Field(default=None, foreign_key=\"team.id\")\r\n"}
{"type": "source_file", "path": "flask_2/app/routes/entries.py", "content": "from flask import Blueprint, render_template, request, redirect, url_for, jsonify\nfrom ..models.entry import Entry\nfrom ..auth import login_required\n\nentries = Blueprint(\"entries\", __name__)\n\n\n@entries.route(\"/entries\")\ndef list():\n    search = request.args.get(\"search\")\n    entries_list = Entry.get_all(search)\n    return render_template(\"list.html\", entries=entries_list)\n\n\n@entries.route(\"/entries/new\", methods=[\"GET\", \"POST\"])\n@login_required\ndef create():\n    if request.method == \"POST\":\n        name = request.form[\"name\"]\n        message = request.form[\"message\"]\n        entry = Entry(name=name, message=message)\n        entry.save()\n        return redirect(url_for(\"entries.list\"))\n    return render_template(\"create.html\")\n\n\n@entries.route(\"/entries/<int:id>\", methods=[\"GET\"])\ndef read(id):\n    entry = Entry.get_by_id(id)\n    if entry:\n        return render_template(\"read.html\", entry=entry)\n    return jsonify({\"message\": \"Entry not found\"}), 404\n\n\n@entries.route(\"/entries/<int:id>/edit\", methods=[\"GET\", \"POST\"])\n@login_required\ndef update(id):\n    entry = Entry.get_by_id(id)\n    if not entry:\n        return jsonify({\"message\": \"Entry not found\"}), 404\n\n    if request.method == \"POST\":\n        entry.name = request.form[\"name\"]\n        entry.message = request.form[\"message\"]\n        entry.save()\n        return redirect(url_for(\"entries.list\"))\n    return render_template(\"update.html\", entry=entry)\n\n\n@entries.route(\"/entries/<int:id>/delete\", methods=[\"GET\", \"POST\"])\n@login_required\ndef delete(id):\n    entry = Entry.get_by_id(id)\n    if not entry:\n        return jsonify({\"message\": \"Entry not found\"}), 404\n\n    if request.method == \"POST\":\n        entry.delete()\n        return redirect(url_for(\"entries.list\"))\n    return render_template(\"delete.html\", entry=entry)\n"}
{"type": "source_file", "path": "flask_2/app/routes/profile.py", "content": "from flask import Blueprint, render_template, request, flash, session\nfrom ..models.user import User\nfrom ..auth import login_required\n\nprofile = Blueprint(\"profile\", __name__)\n\n\n@profile.route(\"/profile\", methods=[\"GET\", \"POST\"])\n@login_required\ndef view():\n    user = User.get_by_id(session[\"user_id\"])\n\n    if request.method == \"POST\":\n        username = request.form[\"username\"]\n        # Update username\n        user.username = username\n        user.save()\n        session[\"username\"] = username\n        flash(\"Profile updated\")\n\n    return render_template(\"profile.html\", user=user)\n"}
{"type": "source_file", "path": "generate_toc.py", "content": "import os\nimport re\n\n\ndef extract_headers(file_path):\n    headers = []\n    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n        for line in file:\n            match = re.match(r\"^(#{1,6})\\s+(.*)\", line)\n            if match:\n                level = len(match.group(1))\n                title = match.group(2)\n                anchor = re.sub(r\"[^a-zA-Z0-9]+\", \"-\", title.lower()).strip(\"-\")\n                headers.append((level, title, anchor))\n    return headers\n\n\ndef generate_toc(folder, files):\n    toc_lines = [f\"# {folder[:-1]}\\n\"]\n    for file in files:\n        file_path = os.path.join(folder, file)\n        headers = extract_headers(file_path)\n        for level, title, anchor in headers:\n            # remove parts after  <!-- omit in toc -->\n            if \"<!-- omit in toc -->\" in title:\n                title = title.split(\"<!-- omit in toc -->\")[0]\n            # add # for each level\n            title = \"#\" * (level) + \" \" + title\n            toc_lines.append(title + \"\\n\")\n    return toc_lines\n\n\ndef write_toc(toc_lines, output_file):\n    with open(output_file, \"w\", encoding=\"utf-8\") as file:\n        file.writelines(toc_lines)\n\n\n# function to get all the md files in the folder except the table of contents file\ndef get_md_files(folder, toc_file):\n    files = []\n    for file in os.listdir(folder):\n        if (\n            file.endswith(\".md\")\n            and file != toc_file\n            and not file.startswith(\"0_\")\n            and not file.startswith(\"00_\")\n        ):\n            files.append(file)\n    return files\n\n\n# folder = \"oop/\"\nfolder = \"db/\"\ntoc_file = \"_table_of_contents.md\"\nmarkdown_files = get_md_files(folder, toc_file)\n\n# Generate TOC\ntoc = generate_toc(folder, markdown_files)\n\n# Write TOC to a file\nwrite_toc(toc, os.path.join(folder, toc_file))\n"}
{"type": "source_file", "path": "generate_markmap.py", "content": "import os\n\nEXCLUDE_FOLDERS = {\"_media\", \"_temp\", \"exercises\"}\nINCLUDE_EXTENSIONS = {\".md\"}\n\n\ndef generate_markmap_md(root_dir, output_file):\n    def traverse_dir(current_dir, depth=2):\n        items = sorted(os.listdir(current_dir))\n        md_content = \"\"\n        for item in items:\n            item_path = os.path.join(current_dir, item)\n            if os.path.isdir(item_path):\n                if item.startswith(\".\") or item in EXCLUDE_FOLDERS:\n                    continue\n                md_content += f\"{'#' * depth} {item}\\n\"\n                md_content += traverse_dir(item_path, depth + 1)\n            else:\n                if item.startswith(\".\") or not any(item.endswith(ext) for ext in INCLUDE_EXTENSIONS):\n                    continue\n                md_content += f\"{'#' * depth} {item}\\n\"\n        return md_content\n\n    repo_name = os.path.basename(root_dir)\n    md_content = f\"# {repo_name}\\n\"\n    md_content += traverse_dir(root_dir)\n\n    with open(output_file, \"w\") as f:\n        f.write(md_content)\n\n\nif __name__ == \"__main__\":\n    root_directory = \".\"  # Change this to your repo's root directory if needed\n    output_markdown_file = \"repo_structure.md\"\n    generate_markmap_md(root_directory, output_markdown_file)\n    print(f\"Markdown file generated: {output_markdown_file}\")\n"}
{"type": "source_file", "path": "flask_2/run.py", "content": "from app.app import create_app\n\napp = create_app()\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n"}
