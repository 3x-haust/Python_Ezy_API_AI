{"repo_info": {"repo_name": "platform", "repo_owner": "OpenUnited", "repo_url": "https://github.com/OpenUnited/platform"}}
{"type": "test_file", "path": "apps/capabilities/product_management/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "apps/capabilities/talent/tests/conftest.py", "content": "from apps.common.tests.conftest import *\n\n@pytest.fixture\ndef user_data():\n    \"\"\"Base data for creating users\"\"\"\n    return {\n        'username': 'testuser',\n        'email': 'testuser@example.com',\n        'password': 'testpass123'\n    }\n\n@pytest.fixture\ndef person_data():\n    \"\"\"Base data for creating person profiles\"\"\"\n    return {\n        'full_name': 'Test User',\n        'preferred_name': 'Tester',\n        'points': 0  # Starting as DRONE\n    }\n\n@pytest.fixture\ndef user(db, user_data):\n    \"\"\"Create a basic user without person profile\"\"\"\n    User = get_user_model()\n    return User.objects.create_user(**user_data)\n\n@pytest.fixture\ndef person(db, user, person_data):\n    \"\"\"Create a person profile with associated user\"\"\"\n    from apps.capabilities.talent.models import Person\n    \n    person_data['user'] = user\n    return Person.objects.create(**person_data)\n\n@pytest.fixture\ndef authenticated_user(user, person, client):\n    \"\"\"Returns an authenticated user with person profile\"\"\"\n    client.force_login(user)\n    return user\n"}
{"type": "test_file", "path": "apps/common/tests/fixtures/utils.py", "content": "import random\nimport string\n\nfrom django.contrib.contenttypes.models import ContentType\n\nimport pytest\nfrom model_bakery import baker\n\n\ndef generate_random_string(length=10):\n    return \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n\n\n@pytest.fixture\ndef random_email_string(length=10):\n    string_random = \"\".join(random.choice(string.ascii_letters) for _ in range(length))\n    return f\"{string_random}@example.com\"\n\n\n@pytest.fixture\ndef random_string(length=10):\n    return generate_random_string()\n\n\n@pytest.fixture\ndef content_type(user):\n    return baker.make(ContentType)\n\n\n@pytest.fixture\ndef client():\n    from django.test import Client\n\n    return Client()\n"}
{"type": "test_file", "path": "apps/flows/challenge_authoring/tests/test_challenge_flow.py", "content": "import uuid\nimport pytest\nfrom django.urls import reverse\nfrom django.core.exceptions import PermissionDenied\nfrom django.http import HttpResponse\nfrom django.db import transaction\nimport json\n\nfrom apps.capabilities.talent.models import Skill, Expertise, Person\nfrom apps.capabilities.product_management.models import Product, Challenge, Bounty\nfrom apps.capabilities.security.models import ProductRoleAssignment\nfrom apps.flows.challenge_authoring.services import ChallengeAuthoringService\n\n@pytest.fixture\ndef user(db):\n    \"\"\"Create a test user with person\"\"\"\n    from django.contrib.auth import get_user_model\n    User = get_user_model()\n    user = User.objects.create_user(\n        username='testuser',\n        email='test@example.com',\n        password='testpass'\n    )\n    Person.objects.create(\n        user=user,\n        full_name=\"Test User\"\n    )\n    return user\n\n@pytest.fixture\ndef product(db, user):\n    \"\"\"Create a test product\"\"\"\n    return Product.objects.create(\n        name='Test Product',\n        slug='test-product',\n        person=user.person\n    )\n\n@pytest.fixture\ndef valid_challenge_data():\n    \"\"\"Valid challenge creation data\"\"\"\n    return {\n        'title': 'Test Challenge Title',\n        'description': 'This is a test challenge description that meets the minimum length requirement for validation.',\n        'status': 'draft',\n        'priority': 'medium'\n    }\n\n@pytest.fixture\ndef valid_bounties_data(skills):\n    return [{\n        'title': 'Test Bounty',\n        'description': 'Test bounty description',\n        'points': 100,\n        'skill_id': skills[0].id,\n        'expertise_ids': [1, 2]\n    }]\n\n@pytest.fixture\ndef invalid_bounties_data():\n    \"\"\"Invalid bounties data with various validation issues\"\"\"\n    return [\n        {\n            'title': '',  # Empty title\n            'description': 'Test bounty description',\n            'points': 0,  # Invalid points\n            'skill': 1,\n            'expertise': []  # Empty expertise list\n        },\n        {\n            'title': 'Second Bounty',\n            'description': 'Test bounty description',\n            'points': 2000,  # Exceeds maximum points\n            'skill': 1,\n            'expertise': [1]\n        }\n    ]\n\n@pytest.fixture(autouse=True)\ndef mock_role_service(mocker):\n    \"\"\"Mock RoleService for all tests\"\"\"\n    mock = mocker.patch('apps.product_management.flows.challenge_authoring.views.RoleService', autospec=True)\n    instance = mock.return_value\n    instance.is_product_manager.return_value = True  # Default to True\n    return mock\n\n@pytest.fixture\ndef person(db, django_user_model):\n    \"\"\"Create a test person\"\"\"\n    # Create a unique username using a UUID\n    unique_id = str(uuid.uuid4())[:8]\n    username = f'testuser_{unique_id}'\n    \n    # First create a User instance\n    user = django_user_model.objects.create_user(\n        username=username,\n        email=f'test_{unique_id}@example.com',\n        password='testpass123'\n    )\n    \n    # Then create the Person instance\n    person = Person.objects.create(\n        user=user,\n        full_name=\"Test User\",\n        preferred_name=\"Test\",\n        points=0\n    )\n    \n    return person\n\n@pytest.fixture(autouse=True)\ndef setup_user_person(user, person):\n    \"\"\"Ensure user has a person attribute\"\"\"\n    user.person = person\n    user.save()\n    return user\n\n@pytest.fixture\ndef skills(db):\n    \"\"\"Create test skills\"\"\"\n    return [\n        Skill.objects.create(name='Frontend Development'),\n        Skill.objects.create(name='Backend Development')\n    ]\n\n@pytest.fixture\ndef expertise_items(db, skills):\n    \"\"\"Create test expertise items\"\"\"\n    skill = skills[0]  # Frontend Development skill\n    \n    # Clear existing expertise\n    Expertise.objects.filter(skill=skill).delete()\n    \n    # Create new expertise items\n    expertise_list = []\n    for name in [\"React\", \"React Advanced\"]:\n        expertise = Expertise.objects.create(\n            name=name,\n            skill=skill,\n            selectable=True\n        )\n        expertise_list.append(expertise)\n    \n    return expertise_list\n\n@pytest.fixture\ndef mock_expertise(mocker):\n    \"\"\"Mock expertise data for testing\"\"\"\n    mock = mocker.patch('apps.product_management.flows.challenge_authoring.services.Expertise')\n    mock_instance = mocker.Mock()\n    mock_instance.objects.filter.return_value = [\n        mocker.Mock(id=1, name='Test Expertise', description='Test Description')\n    ]\n    mock.return_value = mock_instance\n    return mock_instance\n\n@pytest.fixture\ndef product_manager_role(user, product):\n    \"\"\"Create product manager role for test user\"\"\"\n    return ProductRoleAssignment.objects.create(\n        person=user.person,\n        product=product,\n        role=ProductRoleAssignment.ProductRoles.MANAGER\n    )\n\n@pytest.fixture(autouse=True)\ndef setup_product_manager(user, product):\n    \"\"\"Setup product manager role for all tests\"\"\"\n    ProductRoleAssignment.objects.create(\n        person=user.person,\n        product=product,\n        role=ProductRoleAssignment.ProductRoles.MANAGER\n    )\n\n@pytest.fixture\ndef mock_template(mocker):\n    mock = mocker.patch('django.template.loader.get_template')\n    mock.return_value.render.return_value = ''\n    return mock\n\n@pytest.fixture\ndef expertise_levels(skills):\n    \"\"\"Create test expertise levels\"\"\"\n    expertise = []\n    for skill in skills:\n        expertise.extend([\n            Expertise.objects.create(\n                skill=skill,\n                name=f\"{skill.name} - Level {i}\"\n            )\n            for i in range(1, 3)\n        ])\n    return expertise\n\n@pytest.fixture(autouse=True)\ndef setup_test_data(skills, expertise_levels):\n    \"\"\"Ensure test data is available\"\"\"\n    pass\n\n@pytest.fixture\ndef mock_skills(mocker):\n    return [\n        mocker.Mock(id=1, name='Frontend Development'),\n        mocker.Mock(id=2, name='Backend Development')\n    ]\n\n@pytest.fixture\ndef mock_service(mocker):\n    mock = mocker.patch('apps.product_management.flows.challenge_authoring.views.ChallengeAuthoringService')\n    instance = mock.return_value\n    instance.create_challenge.return_value = (True, mocker.Mock(get_absolute_url=lambda: '/test/url'), None)\n    return instance\n\nclass TestChallengeAuthoringView:\n    @pytest.fixture(autouse=True)\n    def setup_view_mocks(self, mocker):\n        \"\"\"Setup mocks for all view tests\"\"\"\n        # Create the mock with the methods we want to use\n        mock_instance = mocker.Mock()\n        mock_instance.has_permission = mocker.Mock(return_value=False)\n        mock_instance.has_person = mocker.Mock(return_value=False)\n        \n        # Create the service mock that returns our instance\n        self.mock_service = mocker.patch(\n            'apps.product_management.flows.challenge_authoring.views.ChallengeAuthoringService',\n            return_value=mock_instance\n        )\n        return self.mock_service\n\n    @pytest.fixture(autouse=True)\n    def setup(self, setup_product_manager, mock_template):\n        \"\"\"Ensure product manager role is set up\"\"\"\n        self.mock_template = mock_template\n\n    def test_view_requires_authentication(self, client, product):\n        \"\"\"Test that unauthenticated users cannot access the view\"\"\"\n        url = reverse('challenge_create', kwargs={'product_slug': product.slug})\n        response = client.get(url)\n        assert response.status_code == 302\n        assert '/login/' in response.url\n\n    def test_view_requires_person(self, client, user, product, mock_role_service):\n        \"\"\"Test that users without person object cannot access the view\"\"\"\n        user.person = None\n        user.save()\n        mock_role_service.return_value.is_product_manager.return_value = False\n        client.force_login(user)\n        url = reverse('challenge_create', kwargs={'product_slug': product.slug})\n        response = client.get(url)\n        assert response.status_code == 403\n\n    def test_view_requires_product_manager(self, client, user, product, mock_role_service):\n        \"\"\"Test that non-managers cannot access the view\"\"\"\n        mock_role_service.return_value.is_product_manager.return_value = False\n        client.force_login(user)\n        url = reverse('challenge_create', kwargs={'product_slug': product.slug})\n        response = client.get(url)\n        assert response.status_code == 403\n\n    def test_successful_challenge_creation(\n        self, client, user, product, mock_service, valid_challenge_data, mocker\n    ):\n        \"\"\"Test successful challenge creation flow\"\"\"\n        client.force_login(user)\n        url = reverse('challenge_create', kwargs={'product_slug': product.slug})\n        \n        mock_challenge = mocker.Mock()\n        mock_challenge.get_absolute_url.return_value = '/test/url'\n        mock_service.create_challenge.return_value = (True, mock_challenge, None)\n        \n        response = client.post(\n            url,\n            data=json.dumps(valid_challenge_data),\n            content_type='application/json'\n        )\n        \n        assert response.status_code == 200\n        assert response.json() == {'redirect_url': '/test/url'}\n\n    def test_bounty_modal_api_endpoints(self, client, user, product, mock_role_service, mocker):\n        \"\"\"Test the API endpoints used by BountyModal.js\"\"\"\n        client.force_login(user)\n        url = reverse('bounty_modal', kwargs={'product_slug': product.slug})\n        \n        mock_service_class = mocker.patch('apps.product_management.flows.challenge_authoring.views.ChallengeAuthoringService')\n        instance = mock_service_class.return_value\n        instance.get_skills_list.return_value = []\n        instance.is_product_manager.return_value = True\n        response = client.get(url)\n        assert response.status_code == 200\n\n    def test_permission_checks(self, client, user, product, mock_role_service):\n        \"\"\"Test permission requirements\"\"\"\n        url = reverse('challenge_create', kwargs={'product_slug': product.slug})\n        \n        # Test unauthenticated\n        response = client.get(url)\n        assert response.status_code == 302  # Redirects to login\n        \n        # Test authenticated but not product manager\n        mock_role_service.return_value.is_product_manager.return_value = False\n        client.force_login(user)\n        response = client.get(url)\n        assert response.status_code == 403\n\n    def test_form_validation(self, client, user, product, mock_service, mock_role_service):\n        mock_role_service.is_product_manager.return_value = True  # Ensure permission check passes\n        client.force_login(user)\n        url = reverse('challenge_create', kwargs={'product_slug': product.slug})\n        \n        mock_service.create_challenge.return_value = (False, None, {'title': ['This field is required']})\n        \n        response = client.post(\n            url,\n            data=json.dumps({\n                'title': '',\n                'description': '',\n                'bounties': []\n            }),\n            content_type='application/json'\n        )\n        \n        assert response.status_code == 400\n        assert 'errors' in response.json()\n\n    def test_skills_api(self, client, user, product, mock_role_service):\n        \"\"\"Test skills list and expertise endpoints\"\"\"\n        client.force_login(user)\n        \n        # Test skills list\n        url = reverse('challenge_skills', kwargs={'product_slug': product.slug})\n        response = client.get(url)\n        assert response.status_code == 200\n\n    def test_expertise_list(self, client, user, product, expertise_items):\n        \"\"\"Test expertise list retrieval\"\"\"\n        client.force_login(user)\n        skill = expertise_items[0].skill\n        url = reverse('skill_expertise', kwargs={\n            'product_slug': product.slug,\n            'skill_id': skill.id\n        })\n        \n        response = client.get(url)\n        assert response.status_code == 200\n        data = response.json()\n        assert 'expertise' in data\n        expertise_list = data['expertise']\n        assert len(expertise_list) == 2\n        names = sorted(e['name'] for e in expertise_list)\n        assert names == [\"React\", \"React Advanced\"]\n\nclass TestChallengeAuthoringService:\n    @pytest.fixture(autouse=True)\n    def setup_service_mocks(self, mocker):\n        \"\"\"Setup common service mocks\"\"\"\n        # Mock RoleService in the services module\n        self.mock_role_service = mocker.patch(\n            'apps.product_management.flows.challenge_authoring.services.RoleService',\n            autospec=True\n        )\n        # Create and configure mock instance\n        self.mock_instance = mocker.Mock()\n        self.mock_role_service.return_value = self.mock_instance\n        self.mock_instance.is_product_manager.return_value = True\n        return self.mock_role_service\n\n    def test_service_initialization(self, user, product, mocker):\n        \"\"\"Test service initialization with permissions\"\"\"\n        mock_role_service = mocker.patch(\n            'apps.product_management.flows.challenge_authoring.services.RoleService'\n        )\n        mock_instance = mock_role_service.return_value\n        mock_instance.is_product_manager.return_value = True\n        \n        service = ChallengeAuthoringService(user, product.slug)\n        \n        mock_instance.is_product_manager.assert_called_once_with(\n            user.person,\n            product\n        )\n\n    def test_service_initialization_permission_denied(self, user, product):\n        \"\"\"Test service initialization without permissions\"\"\"\n        # Configure the mock to deny permission\n        self.mock_instance.is_product_manager.return_value = False\n        \n        with pytest.raises(PermissionDenied) as exc_info:\n            ChallengeAuthoringService(user, product.slug)\n            \n        assert \"Must be product manager\" in str(exc_info.value)\n        \n        # Verify the mock was called with correct arguments\n        assert self.mock_instance.is_product_manager.call_count == 1\n        self.mock_instance.is_product_manager.assert_called_with(\n            user.person,\n            product\n        )\n\n    @pytest.mark.django_db\n    def test_challenge_creation(self, user, product, valid_challenge_data, valid_bounties_data, skills):\n        \"\"\"Test full challenge creation flow\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        # Update bounties data to use expertise.set() instead of direct assignment\n        valid_bounties_data[0].update({\n            'skill': skills[0],\n            'expertise_ids': [e.id for e in Expertise.objects.filter(skill=skills[0])]\n        })\n        \n        with transaction.atomic():\n            success, challenge, errors = service.create_challenge(\n                valid_challenge_data,\n                valid_bounties_data\n            )\n        \n        assert success is True\n        assert challenge is not None\n        assert errors is None\n\n    def test_validation_errors(self, user, product):\n        \"\"\"Test validation error handling\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        invalid_data = {\n            'title': '',  # Empty title\n            'description': '',  # Empty description\n            'status': 'invalid',  # Invalid choice\n        }\n        \n        success, challenge, errors = service.create_challenge(invalid_data, [])\n        \n        assert success is False\n        assert 'title' in errors\n        assert 'description' in errors\n        assert 'status' in errors\n\n    def test_bounty_validation(self, user, product, valid_challenge_data, invalid_bounties_data, mock_role_service):\n        \"\"\"Test bounty validation rules\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        success, challenge, errors = service.create_challenge(\n            valid_challenge_data,\n            invalid_bounties_data\n        )\n        \n        assert success is False\n        assert challenge is None\n        assert errors is not None\n        assert 'bounties' in errors\n        assert 'points' in str(errors['bounties'][0])  # Points validation error\n        assert 'title' in str(errors['bounties'][0])   # Title validation error\n        assert 'points' in str(errors['bounties'][1])  # Max points exceeded\n\n    @pytest.mark.django_db\n    def test_transaction_rollback(self, user, product, valid_challenge_data):\n        service = ChallengeAuthoringService(user, product.slug)\n\n        invalid_bounties = [{\n            'title': 'Test Bounty',\n            'description': 'Test Description',\n            'points': 100,\n            'skill_id': 999,  # Invalid skill ID\n            'expertise_ids': [1]\n        }]\n\n        success, challenge, errors = service.create_challenge(\n            valid_challenge_data,\n            invalid_bounties\n        )\n\n        assert success is False\n        assert challenge is None\n        assert errors['bounties'][0].startswith('Invalid skill ID')\n\n    @pytest.mark.django_db\n    def test_max_bounties_limit(self, user, product, valid_challenge_data, skills, mock_role_service):\n        \"\"\"Test maximum number of bounties per challenge\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        too_many_bounties = [\n            {\n                'title': f'Bounty {i}',\n                'description': 'Test bounty description',\n                'points': 100,\n                'skill_id': skills[0].id,\n                'expertise': [1]\n            }\n            for i in range(11)\n        ]\n        \n        success, challenge, errors = service.create_challenge(\n            valid_challenge_data,\n            too_many_bounties\n        )\n        \n        assert success is False\n        assert 'bounties' in errors\n\n    @pytest.mark.django_db\n    def test_total_points_limit(self, user, product, valid_challenge_data, mock_role_service):\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        high_point_bounties = [\n            {\n                'title': f'Bounty {i}',\n                'description': 'Test bounty description',\n                'points': 100,\n                'skill_id': 1,\n                'expertise_ids': [1]\n            }\n            for i in range(11)  # 1100 points total\n        ]\n        \n        success, challenge, errors = service.create_challenge(\n            valid_challenge_data,\n            high_point_bounties\n        )\n        \n        assert success is False\n        assert challenge is None\n        assert errors is not None\n        assert 'bounties' in errors\n        assert any('total points' in error.lower() for error in errors['bounties'])\n\n    def test_get_skills_list(self, user, product, skills):\n        \"\"\"Test skills list retrieval\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        skills_list = service.get_skills_list()\n        \n        assert len(skills_list) == 2\n        skill_names = {skill['name'] for skill in skills_list}\n        assert 'Frontend Development' in skill_names\n        assert 'Backend Development' in skill_names\n\n    def test_get_expertise_for_skill(self, user, product, expertise_items):\n        service = ChallengeAuthoringService(user, product.slug)\n        skill_id = expertise_items[0].skill.id\n        expertise_list = service.get_expertise_for_skill(skill_id)\n        \n        assert len(expertise_list) == 2\n        assert all(e['name'] in ['React', 'React Advanced'] for e in expertise_list)\n\n    def test_expertise_ids_format(self, user, product, valid_challenge_data, expertise_items):\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        bounties_data = [{\n            'title': 'Test Bounty',\n            'description': 'Test Description',\n            'points': 100,\n            'skill_id': expertise_items[0].skill.id,\n            'expertise_ids': [e.id for e in expertise_items]\n        }]\n        \n        success, _, _ = service.create_challenge(\n            valid_challenge_data,\n            bounties_data\n        )\n        assert success is True\n\n    def test_validation_rules(self, user, product):\n        \"\"\"Test all validation rules for challenges and bounties\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        # Test challenge validation\n        invalid_challenge = {\n            'title': 'A' * 256,  # Exceeds MAX_TITLE_LENGTH\n            'description': 'Too short',  # Less than 50 chars\n            'status': 'INVALID_STATUS',\n            'priority': 'INVALID_PRIORITY',\n            'video_url': 'not-a-url'\n        }\n        \n        errors = service._validate_challenge(invalid_challenge)\n        assert len(errors) > 0\n        assert any('Title must be less than' in error for error in errors)\n        assert any('Description must be at least' in error for error in errors)\n        assert any('Invalid status' in error for error in errors)\n        assert any('Invalid priority' in error for error in errors)\n        assert any('Invalid video URL format' in error for error in errors)\n\n    def test_bounty_validation(self, user, product):\n        \"\"\"Test bounty-specific validation rules\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        invalid_bounties = [\n            {\n                'title': '',\n                'description': '',\n                'points': 0,\n                'skill': None,\n                'expertise_ids': []\n            }\n        ] * 11  # Exceeds MAX_BOUNTIES\n        \n        errors = service._validate_bounties(invalid_bounties)\n        assert any(f'Maximum of {service.MAX_BOUNTIES} bounties' in error for error in errors)\n\n    def test_expertise_validation(self, user, product, mock_expertise):\n        \"\"\"Test expertise validation for bounties\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        bounty_data = [{\n            'title': 'Test Bounty',\n            'description': 'Description',\n            'points': 100,\n            'skill': 1,\n            'expertise_ids': '999'  # Non-existent expertise\n        }]\n        \n        errors = service._validate_bounties(bounty_data)\n        assert any('Invalid expertise selection' in error for error in errors)\n\n    def test_cross_validation(self, user, product):\n        \"\"\"Test validation between challenges and bounties\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        challenge_data = {\n            'status': 'ACTIVE',\n            'reward_type': 'POINTS'\n        }\n        bounties_data = []  # Empty bounties for active challenge\n        \n        errors = service._validate_challenge_bounty_relationship(\n            challenge_data,\n            bounties_data\n        )\n        assert any('Active challenges must have at least one bounty' in error for error in errors)\n\n    def test_get_skills_tree(self, user, product, mock_role_service):\n        \"\"\"Test hierarchical skills retrieval\"\"\"\n        service = ChallengeAuthoringService(user, product.slug)\n        \n        # Create test data with unique names\n        parent_skill = Skill.objects.create(\n            name=\"Web Development Test\",\n            selectable=True\n        )\n        child_skill = Skill.objects.create(\n            name=\"Frontend Development Test\",\n            parent=parent_skill,\n            selectable=True\n        )\n\nclass TestSkillEndpoints:\n    \"\"\"Test cases for skill and expertise API endpoints\"\"\"\n    \n    def test_skills_list_requires_auth(self, client, product):\n        \"\"\"Test that unauthenticated users cannot access skills list\"\"\"\n        url = reverse('challenge_skills', kwargs={'product_slug': product.slug})\n        response = client.get(url)\n        assert response.status_code == 302  # Redirects to login\n\n    def test_skills_list(self, client, user, product):\n        \"\"\"Test successful skills list retrieval\"\"\"\n        client.force_login(user)\n        url = reverse('challenge_skills', kwargs={'product_slug': product.slug})\n        response = client.get(url)\n        \n        assert response.status_code == 200\n        data = response.json()\n        assert 'skills' in data\n        assert len(data['skills']) == 2\n        assert data['skills'][0]['name'] == 'Frontend Development'\n\n    def test_expertise_requires_auth(self, client, product, skills):\n        \"\"\"Test that unauthenticated users cannot access expertise list\"\"\"\n        url = reverse('skill_expertise', kwargs={\n            'product_slug': product.slug,\n            'skill_id': skills[0].id\n        })\n        response = client.get(url)\n        assert response.status_code == 302  # Redirects to login\n\n    def test_expertise_list(self, client, user, product, expertise_items, skills):\n        \"\"\"Test expertise list retrieval\"\"\"\n        client.force_login(user)\n        skill = skills[0]  # Frontend Development skill\n        url = reverse('skill_expertise', kwargs={\n            'product_slug': product.slug,\n            'skill_id': skill.id\n        })\n        \n        response = client.get(url)\n        assert response.status_code == 200\n        data = response.json()\n        assert 'expertise' in data\n        expertise_list = data['expertise']\n        assert len(expertise_list) == 2\n        names = sorted(e['name'] for e in expertise_list)\n        assert names == [\"React\", \"React Advanced\"]\n\n    def test_expertise_invalid_skill(self, client, user, product):\n        \"\"\"Test expertise retrieval with invalid skill ID\"\"\"\n        client.force_login(user)\n        url = reverse('skill_expertise', kwargs={\n            'product_slug': product.slug,\n            'skill_id': 99999  # Non-existent ID\n        })\n        response = client.get(url)\n        assert response.status_code == 404\n"}
{"type": "test_file", "path": "apps/capabilities/security/tests/conftest.py", "content": "from apps.common.tests.conftest import *\n"}
{"type": "test_file", "path": "apps/capabilities/product_management/tests/test_views/test_authenticated_marketplace_views.py", "content": "import pytest\nfrom django.urls import reverse\nfrom django.core.exceptions import PermissionDenied\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.messages import get_messages\nfrom django.conf import settings\nfrom urllib.parse import quote\nfrom django.contrib.auth.views import redirect_to_login\nfrom django.http import HttpResponseRedirect\nfrom django.contrib.auth.decorators import login_required\nfrom django.utils.decorators import method_decorator\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom unittest.mock import patch, PropertyMock\n\nfrom apps.capabilities.product_management.models import (\n    Product, Challenge, Bounty, Initiative, Idea, Bug, \n    ProductContributorAgreementTemplate\n)\nfrom apps.capabilities.talent.models import Person\nfrom apps.capabilities.commerce.models import Organisation\n\n@pytest.fixture\ndef user(db):\n    return get_user_model().objects.create_user(username='testuser', password='testpass123')\n\n@pytest.fixture\ndef person(db, user):\n    return Person.objects.create(user=user)\n\n@pytest.fixture\ndef organisation(db):\n    return Organisation.objects.create(name=\"Test Org\")\n\n@pytest.fixture\ndef global_product(db, organisation):\n    return Product.objects.create(\n        name=\"Global Product\",\n        slug=\"global-product\",\n        short_description=\"Test Description\",\n        visibility=Product.Visibility.GLOBAL,\n        organisation=organisation\n    )\n\n@pytest.fixture\ndef restricted_product(db, organisation):\n    return Product.objects.create(\n        name=\"Restricted Product\",\n        slug=\"restricted-product\",\n        short_description=\"Test Description\",\n        visibility=Product.Visibility.RESTRICTED,\n        organisation=organisation\n    )\n\n@pytest.fixture\ndef authenticated_client(client, user, person):\n    client.force_login(user)\n    return client\n\n@pytest.fixture\ndef mock_template_loader(mocker):\n    mock = mocker.patch('django.template.loader.get_template')\n    mock.return_value.render.return_value = ''\n    return mock\n\n@pytest.mark.django_db\nclass TestProductVisibility:\n    def test_global_product_public_access(self, client, global_product, mock_template_loader):\n        url = reverse('product_management:product-summary', kwargs={'product_slug': global_product.slug})\n        response = client.get(url)\n        assert response.status_code == 200\n\n    def test_restricted_product_requires_auth(self, client, restricted_product, mock_template_loader):\n        url = reverse('product_management:product-summary', kwargs={'product_slug': restricted_product.slug})\n        response = client.get(url)\n        assert response.status_code == 302\n        expected_redirect = f\"{settings.LOGIN_URL}?next={url}\"\n        assert response.url == expected_redirect\n\n    def test_restricted_product_auth_access(self, authenticated_client, restricted_product, mock_template_loader, mocker):\n        # Mock the has_product_access method\n        mock_has_access = mocker.patch('apps.capabilities.product_management.views.view_mixins.RoleService.has_product_access')\n        mock_has_access.return_value = True\n        \n        url = reverse('product_management:product-summary', kwargs={'product_slug': restricted_product.slug})\n        response = authenticated_client.get(url)\n        assert response.status_code == 200\n\n@pytest.mark.django_db\nclass TestProductManagement:\n    def test_create_product_requires_auth(self, client):\n        url = reverse('product_management:create-product')\n        response = client.post(url, {'name': 'New Product'})\n        assert response.status_code == 302\n        assert 'sign-in' in response.url\n\n    def test_create_product_success(self, authenticated_client, mocker, organisation):\n        # Mock the service\n        mock_service = mocker.patch('apps.capabilities.product_management.services.ProductManagementService.create_product')\n        product = Product(id=1, slug='new-product')\n        mock_service.return_value = (True, None, product)\n\n        data = {\n            'name': 'New Product',\n            'short_description': 'Description',\n            'full_description': 'Full Description',\n            'visibility': Product.Visibility.GLOBAL,\n            'organisation': organisation.id,\n            'make_me_owner': True,\n            'website': '',\n            'video_url': '',\n            'detail_url': '',\n            'photo': ''\n        }\n\n        # Mock the form class instead of its instance\n        mock_form = mocker.Mock()\n        mock_form.is_valid.return_value = True\n        mock_form.cleaned_data = data\n        \n        form_class_mock = mocker.patch('apps.capabilities.product_management.forms.ProductForm')\n        form_class_mock.return_value = mock_form\n\n        url = reverse('product_management:create-product')\n        response = authenticated_client.post(url, data)\n        \n        # Add debugging information\n        if response.status_code != 302:\n            print(f\"\\nResponse status code: {response.status_code}\")\n            print(f\"Response content: {response.content.decode()}\")\n            if hasattr(response, 'context'):\n                print(f\"Form errors: {response.context.get('form').errors if 'form' in response.context else 'No form in context'}\")\n        \n        assert response.status_code == 302  # Redirect after success\n        assert response.url == reverse('product_management:product-summary', kwargs={'product_slug': product.slug})\n\n    def test_update_product_requires_management(self, authenticated_client, global_product, mocker):\n        mock_role_service = mocker.patch('apps.capabilities.security.services.RoleService.has_product_management_access')\n        mock_role_service.return_value = False\n\n        url = reverse('product_management:update-product', kwargs={'pk': global_product.pk})\n        response = authenticated_client.post(url, {'name': 'Updated'})\n        assert response.status_code == 403\n\n@pytest.mark.django_db\nclass TestIdeaManagement:\n    @pytest.fixture\n    def idea(self, global_product, person):\n        return Idea.objects.create(\n            title=\"Test Idea\",\n            description=\"Description\",\n            product=global_product,\n            person=person\n        )\n\n    def test_create_idea_requires_auth(self, client, global_product, mocker):\n        # Mock the URL pattern directly\n        def mock_view(request, *args, **kwargs):\n            return redirect_to_login(request.get_full_path())\n        \n        mocker.patch('apps.capabilities.product_management.urls.CreateIdeaView.as_view', \n                     return_value=mock_view)\n\n        url = reverse('product_management:create-idea', kwargs={'product_slug': global_product.slug})\n        response = client.get(url)\n        \n        assert response.status_code == 302\n        expected_url = f\"{settings.LOGIN_URL}?next={quote(url)}\"\n        assert response.url == expected_url\n\n    def test_create_idea_success(self, authenticated_client, global_product, mocker):\n        # Mock the service\n        mock_service = mocker.patch('apps.capabilities.product_management.services.IdeaService.create_idea')\n        idea = Idea(id=1)\n        mock_service.return_value = (True, None, idea)\n\n        url = reverse('product_management:create-idea', kwargs={'product_slug': global_product.slug})\n        data = {\n            'title': 'New Idea',\n            'description': 'Description'\n        }\n        \n        response = authenticated_client.post(url, data)\n        assert response.status_code == 302\n        assert response.url == reverse('product_management:idea-detail',\n                                     kwargs={'product_slug': global_product.slug,\n                                           'idea_id': idea.id})\n\n    def test_update_idea_requires_ownership(self, authenticated_client, idea, mocker):\n        mock_service = mocker.patch('apps.capabilities.product_management.services.IdeaService.can_modify_idea')\n        mock_service.return_value = False\n\n        url = reverse('product_management:update-idea',\n                     kwargs={'product_slug': idea.product.slug, 'pk': idea.id})\n        response = authenticated_client.post(url, {'title': 'Updated'})\n        assert response.status_code == 403\n\n@pytest.mark.django_db\nclass TestVoting:\n    @pytest.fixture\n    def idea(self, global_product, person):\n        return Idea.objects.create(\n            title=\"Test Idea\",\n            description=\"Description\",\n            product=global_product,\n            person=person\n        )\n\n    def test_vote_requires_auth(self, client, idea):\n        url = reverse('product_management:cast-vote', kwargs={'pk': idea.id})\n        response = client.post(url)\n        assert response.status_code == 302\n        assert 'sign-in' in response.url\n\n    def test_vote_requires_product_access(self, authenticated_client, idea, mocker):\n        mock_service = mocker.patch('apps.capabilities.product_management.services.ProductService.has_product_visibility_access')\n        mock_service.return_value = False\n\n        url = reverse('product_management:cast-vote', kwargs={'pk': idea.id})\n        response = authenticated_client.post(url)\n        assert response.status_code == 403\n\n    def test_vote_success(self, authenticated_client, idea, mocker):\n        mock_product_service = mocker.patch('apps.capabilities.product_management.services.ProductService.has_product_visibility_access')\n        mock_product_service.return_value = True\n        \n        mock_idea_service = mocker.patch('apps.capabilities.product_management.services.IdeaService.toggle_vote')\n        mock_idea_service.return_value = (True, None, 1)\n\n        url = reverse('product_management:cast-vote', kwargs={'pk': idea.id})\n        response = authenticated_client.post(url)\n        assert response.status_code == 200\n        assert response.json() == {'vote_count': 1}"}
{"type": "test_file", "path": "apps/engagement/tests/test_notification_processing.py", "content": "import pytest\nimport time\nfrom threading import Event\nfrom django.test import override_settings\nfrom django.core.cache import cache\nfrom django_q.cluster import Cluster\nfrom django_q.models import OrmQ, Task\nfrom django_q.brokers import get_broker\nfrom django_q.tasks import async_task\nfrom django.db import transaction\n\nfrom apps.engagement.models import (\n    NotifiableEvent,\n    AppNotification,\n    EmailNotification,\n    NotificationPreference,\n    AppNotificationTemplate,\n    EmailNotificationTemplate\n)\nfrom apps.capabilities.security.models import User\nfrom apps.capabilities.talent.models import Person\nfrom apps.capabilities.product_management.models import Product\nfrom apps.capabilities.commerce.models import Organisation\nfrom apps.event_hub.events import EventTypes\nfrom apps.event_hub.models import EventLog\nfrom apps.event_hub.services.factory import get_event_bus\n\n# Add at the top of the file, after imports\nexecuted_listeners = []\n\ndef clear_executed():\n    executed_listeners.clear()\n\nclass TestNotificationProcessing:\n    \"\"\"Tests for notification processing through the event system.\n    \n    These tests verify:\n    - Event handling and task execution\n    - Event bus publication and subscription\n    - Multiple listener execution\n    - Transaction handling in event context\n    \"\"\"\n\n    @pytest.fixture\n    def user(self, db):\n        \"\"\"Create test user\"\"\"\n        return User.objects.create_user(\n            username=\"testuser\",\n            email=\"test@example.com\",\n            password=\"testpass123\"\n        )\n\n    @pytest.fixture\n    def person(self, user):\n        \"\"\"Create test person with required fields\"\"\"\n        return Person.objects.create(\n            user=user,\n            full_name=\"Test Person\",\n            preferred_name=\"Test\",\n            headline=\"Test Headline\"\n        )\n\n    @pytest.fixture\n    def organisation(self, db):\n        \"\"\"Create test organisation\"\"\"\n        return Organisation.objects.create(\n            username=\"testorg\",\n            name=\"Test Organisation\"\n        )\n\n    @pytest.fixture\n    def product(self, organisation):\n        \"\"\"Create test product owned by organisation\"\"\"\n        return Product.objects.create(\n            name=\"Test Product\",\n            slug=\"test-product\",\n            short_description=\"Test Description\",\n            organisation=organisation,\n            visibility=Product.Visibility.GLOBAL\n        )\n\n    @pytest.fixture\n    def notification_preferences(self, person):\n        \"\"\"Create notification preferences for test person\"\"\"\n        return NotificationPreference.objects.create(\n            person=person,\n            product_notifications=NotificationPreference.Type.BOTH\n        )\n\n    @pytest.fixture\n    def notification_templates(self, db):\n        \"\"\"Create test notification templates\"\"\"\n        app_template = AppNotificationTemplate.objects.create(\n            event_type=EventTypes.PRODUCT_CREATED,\n            title=\"New Product: {name}\",\n            template=\"Product {name} was created at {url}\"\n        )\n        \n        email_template = EmailNotificationTemplate.objects.create(\n            event_type=EventTypes.PRODUCT_CREATED,\n            title=\"New Product: {name}\",\n            template=\"Product {name} was created at {url}\"\n        )\n        \n        return app_template, email_template\n\n    @pytest.fixture(scope=\"class\")\n    def db_class(self, request):\n        \"\"\"Class-scoped db fixture\"\"\"\n        marker = request.node.get_closest_marker('django_db')\n        django_db_blocker = request.getfixturevalue('django_db_blocker')\n        with django_db_blocker.unblock():\n            yield\n\n    @pytest.fixture(scope=\"class\")\n    def global_broker(self, db_class):\n        \"\"\"Create a single broker instance for all tests\"\"\"\n        broker = get_broker()\n        broker.purge_queue()\n        cache.clear()\n        return broker\n\n    @pytest.fixture(autouse=True)\n    def register_event_listeners(self):\n        \"\"\"Register event listeners for product events\"\"\"\n        from apps.event_hub.services.factory import get_event_bus\n        from apps.engagement.events import handle_product_created\n        from django.conf import settings\n        \n        # Configure Django-Q for sync mode during tests\n        settings.DJANGO_Q = {\n            'sync': True,  # This makes Django-Q run synchronously\n            'timeout': 30,\n            'save_limit': 0,\n            'orm': 'default'\n        }\n        \n        event_bus = get_event_bus()\n        event_bus.register_listener(EventTypes.PRODUCT_CREATED, handle_product_created)\n        \n        return event_bus\n\n    @pytest.fixture\n    def event_data(self, product, person):\n        \"\"\"Standard event data for testing\"\"\"\n        return {\n            'productId': str(product.id),\n            'name': product.name,\n            'url': f'/products/{product.slug}/',\n            'organisationId': str(product.organisation.id),\n            'personId': str(person.id)\n        }\n\n    @pytest.fixture(autouse=True)\n    def configure_sync_mode(self, settings):\n        \"\"\"Configure Django-Q for synchronous execution\"\"\"\n        settings.DJANGO_Q = {\n            'sync': True,\n            'timeout': 30,\n            'save_limit': 0\n        }\n        \n        # Also need to patch the task_complete hook since it won't be called in sync mode\n        settings.EVENT_BUS = {\n            'BACKEND': 'apps.event_hub.services.backends.django_q.DjangoQBackend',\n            'TASK_COMPLETE_HOOK': None  # Disable the hook in sync mode\n        }\n        yield\n\n    @pytest.fixture\n    def product_manager(self, db):\n        \"\"\"Create a product manager user\"\"\"\n        user = User.objects.create_user(\n            username=\"productmanager\",\n            email=\"pm@example.com\",\n            password=\"testpass123\"\n        )\n        return Person.objects.create(\n            user=user,\n            full_name=\"Product Manager\",\n            preferred_name=\"PM\"\n        )\n\n    @pytest.fixture\n    def org_manager(self, db):\n        \"\"\"Create an organization manager user\"\"\"\n        user = User.objects.create_user(\n            username=\"orgmanager\",\n            email=\"om@example.com\",\n            password=\"testpass123\"\n        )\n        return Person.objects.create(\n            user=user,\n            full_name=\"Org Manager\",\n            preferred_name=\"OM\"\n        )\n\n    @pytest.fixture\n    def all_notification_preferences(self, product_manager, org_manager):\n        \"\"\"Create notification preferences for all stakeholders\"\"\"\n        prefs = []\n        for person in [product_manager, org_manager]:\n            prefs.append(NotificationPreference.objects.create(\n                person=person,\n                product_notifications=NotificationPreference.Type.BOTH\n            ))\n        return prefs\n\n    @pytest.mark.django_db(transaction=True)\n    def test_async_notification_processing(\n        self, transactional_db, person, event_data, notification_preferences,\n        notification_templates\n    ):\n        \"\"\"Test that notifications are created when events are published.\"\"\"\n        event_bus = get_event_bus()\n\n        # Commit any pending fixture data\n        transaction.commit()\n\n        # Add debug logging\n        print(f\"\\nEvent data: {event_data}\")\n        print(f\"Person: {person}\")\n        print(f\"Templates: {notification_templates}\")\n        print(f\"Preferences: {notification_preferences}\")\n\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        # Add debug for notifications\n        events = NotifiableEvent.objects.filter(person=person)\n        print(f\"Events created: {events.count()}\")\n        \n        notifications = AppNotification.objects.all()\n        print(f\"All notifications: {notifications.count()}\")\n\n        # Since tasks are synchronous, they run immediately\n        # Verify that notifications were created\n        assert AppNotification.objects.filter(event__person=person).exists(), \"App notification not created\"\n        assert EmailNotification.objects.filter(event__person=person).exists(), \"Email notification not created\"\n\n    @pytest.mark.django_db(transaction=True)\n    def test_event_bus_notification_processing(\n        self, person, event_data, notification_preferences,\n        notification_templates\n    ):\n        \"\"\"Test that notifications are created when events are published.\"\"\"\n        event_bus = get_event_bus()\n\n        # Emit event\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        # Verify that notifications were created\n        assert AppNotification.objects.filter(event__person=person).exists(), \"App notification not created\"\n        assert EmailNotification.objects.filter(event__person=person).exists(), \"Email notification not created\"\n\n    @pytest.mark.django_db(transaction=True)\n    def test_async_multiple_listeners(\n        self, person, event_data, notification_preferences, notification_templates\n    ):\n        \"\"\"Test that multiple listeners are executed\"\"\"\n        event_bus = get_event_bus()\n\n        # Reset executed listeners list\n        clear_executed()\n\n        # Define the listeners directly in the test\n        def listener_1(payload):\n            executed_listeners.append('listener_1')\n            return True\n\n        def listener_2(payload):\n            executed_listeners.append('listener_2')\n            return True\n\n        # Register listeners as callable functions instead of strings\n        event_bus.register_listener(EventTypes.TEST_MULTIPLE_LISTENERS, listener_1)\n        event_bus.register_listener(EventTypes.TEST_MULTIPLE_LISTENERS, listener_2)\n\n        # Debug internal state\n        print(f\"\\nInternal listeners state: {event_bus._listeners}\")\n        print(f\"Publishing event: {EventTypes.TEST_MULTIPLE_LISTENERS}\")\n        print(f\"Event data: {event_data}\")\n\n        # Emit event\n        event_bus.publish(EventTypes.TEST_MULTIPLE_LISTENERS, event_data)\n\n        # Add small delay to allow for processing\n        time.sleep(0.1)\n\n        # Debug output\n        print(f\"Executed listeners: {executed_listeners}\")\n        assert len(executed_listeners) == 2, f\"Expected 2 listeners to execute, but got {len(executed_listeners)}\"\n\n    @pytest.mark.django_db(transaction=True)\n    def test_sync_execution_assumptions(self):\n        \"\"\"Test our assumptions about sync execution\"\"\"\n        event_bus = get_event_bus()\n        \n        # Track execution\n        executed = []\n        \n        def test_listener(payload):\n            executed.append(payload)\n            return True\n\n        # Register both callable and string-based listeners\n        event_bus.register_listener(EventTypes.TEST_EVENT, test_listener)\n        event_bus.register_listener(EventTypes.TEST_EVENT, 'apps.engagement.tests.test_listeners.listener_1')\n        \n        # Emit event\n        test_payload = {'test': 'data'}\n        event_bus.publish(EventTypes.TEST_EVENT, test_payload)\n        \n        # Verify assumptions\n        assert len(executed) == 1, \"Callable listener should execute immediately\"\n        assert EventLog.objects.filter(payload=test_payload, processed=True).exists(), \"Event log should be marked as processed\"\n\n    @pytest.mark.django_db(transaction=True)\n    def test_async_notification_processing_for_org_product(\n        self, \n        transactional_db, \n        product_manager, \n        org_manager,\n        event_data, \n        all_notification_preferences,\n        notification_templates,\n        mocker\n    ):\n        \"\"\"Test that notifications are created for all stakeholders when events are published.\"\"\"\n        event_bus = get_event_bus()\n\n        # Mock RoleService methods\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.get_product_managers',\n            return_value=[product_manager]\n        )\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.get_organisation_managers',\n            return_value=[org_manager]\n        )\n\n        # Commit any pending fixture data\n        transaction.commit()\n\n        # Emit event\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        # Verify notifications for product manager\n        assert NotifiableEvent.objects.filter(person=product_manager).exists()\n        assert AppNotification.objects.filter(event__person=product_manager).exists()\n        assert EmailNotification.objects.filter(event__person=product_manager).exists()\n\n        # Verify notifications for org manager\n        assert NotifiableEvent.objects.filter(person=org_manager).exists()\n        assert AppNotification.objects.filter(event__person=org_manager).exists()\n        assert EmailNotification.objects.filter(event__person=org_manager).exists()\n\n    @pytest.mark.django_db(transaction=True)\n    def test_async_notification_processing_for_personal_product(\n        self,\n        transactional_db,\n        person,\n        product,\n        event_data,\n        notification_preferences,\n        notification_templates\n    ):\n        \"\"\"Test that notifications are created for personal product owner.\"\"\"\n        event_bus = get_event_bus()\n\n        # Make product personally owned\n        product.organisation = None\n        product.person = person\n        product.save()\n\n        # Commit any pending fixture data\n        transaction.commit()\n\n        # Emit event\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        # Verify notifications for owner\n        assert NotifiableEvent.objects.filter(person=person).exists()\n        assert AppNotification.objects.filter(event__person=person).exists()\n        assert EmailNotification.objects.filter(event__person=person).exists()\n\n    @pytest.mark.django_db(transaction=True)\n    def test_async_notification_processing_distinct(\n        self,\n        transactional_db,\n        person,\n        event_data,\n        notification_preferences,\n        notification_templates,\n        mocker\n    ):\n        \"\"\"Test that notifications are distinct when person has multiple roles.\"\"\"\n        event_bus = get_event_bus()\n\n        # Mock person as both product and org manager\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.get_product_managers',\n            return_value=[person]\n        )\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.get_organisation_managers',\n            return_value=[person]\n        )\n\n        # Commit any pending fixture data\n        transaction.commit()\n\n        # Emit event\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        # Verify only one set of notifications was created\n        assert NotifiableEvent.objects.filter(person=person).count() == 1\n        assert AppNotification.objects.filter(event__person=person).count() == 1\n        assert EmailNotification.objects.filter(event__person=person).count() == 1"}
{"type": "test_file", "path": "apps/common/tests/fixtures/product_management.py", "content": ""}
{"type": "test_file", "path": "apps/common/tests/fixtures/talent.py", "content": "import pytest\nfrom model_bakery import baker\n\n\n@pytest.fixture(autouse=True)\ndef enable_db_access_for_all_tests(db):\n    print(\"Enable database access for all tests\")\n\n\n@pytest.fixture\ndef skills():\n    _skills = baker.make(\"talent.Skill\", _quantity=10)\n    for _skill in _skills:\n        baker.make(\"talent.Expertise\", skill=_skill)\n    return _skills\n\n\n@pytest.fixture\ndef skill():\n    _skill = baker.make(\"talent.Skill\")\n    baker.make(\"talent.Expertise\", skill=_skill)\n    return _skill\n\n\n@pytest.fixture\ndef expertise_list(skill):\n    return baker.make(\"talent.Expertise\", skill=skill, _quantity=10, _fill_optional=True)\n\n\n@pytest.fixture\ndef expertise(skill):\n    return baker.make(\"talent.Expertise\", skill=skill, _fill_optional=True)\n\n\n@pytest.fixture\ndef bounty_claims(bounty, user):\n    return baker.make(\"talent.BountyClaim\", bounty=bounty, person=user, _quantity=10)\n\n\n@pytest.fixture\ndef bounty_claim(bounty, user):\n    return baker.make(\"talent.BountyClaim\", bounty=bounty, person=user)\n\n\n@pytest.fixture\ndef feedback(users):\n    return baker.make(\"talent.BountyClaim\", recipient=users[0], provider=users[0])\n\n\n@pytest.fixture\ndef Person_skills(user, skill, expertise_list):\n    _person_skills = baker.make(\n        \"talent.PersonSkill\",\n        skill=skill,\n        provider=user.person,\n        _quantity=10,\n    )\n    for _person_skill in _person_skills:\n        _person_skill.expertise.set([expertise_list])\n\n    return _person_skills\n\n\n@pytest.fixture\ndef Person_skill(user, skill, expertise_list):\n    _person_skill = baker.make(\"talent.PersonSkill\", skill=skill, provider=user.person)\n    _person_skill.expertise.add(expertise_list)\n    return _person_skill\n"}
{"type": "test_file", "path": "apps/common/tests/fixtures/security.py", "content": "from django.contrib.auth.hashers import make_password\n\nimport pytest\nfrom model_bakery import baker\n\nfrom apps.capabilities.security.models import ProductRoleAssignment\n\n\n@pytest.fixture(autouse=True)\ndef enable_db_access_for_all_tests(db):\n    print(\"Enable database access for all tests\")\n\n\n@pytest.fixture\ndef password():\n    return \"PX1235455SAA@#123\"\n\n\n@pytest.fixture\ndef hashed_password(password):\n    return make_password(password)\n\n\n@pytest.fixture\ndef users(hashed_password):\n    _users = baker.make(\"users.User\", password=hashed_password, _quantity=10)\n    for user in _users:\n        baker.make(\"talent.Person\", user=user)\n    return _users\n\n\n@pytest.fixture\ndef user(hashed_password):\n    _user = baker.make(\"security.User\", password=hashed_password)\n    baker.make(\"talent.Person\", user=_user)\n    return _user\n\n\n@pytest.fixture\n@pytest.mark.django_db\ndef user1(hashed_password):\n    _user = baker.make(\"security.User\", password=hashed_password)\n    baker.make(\"talent.Person\", user=_user)\n    return _user\n\n\n@pytest.fixture\ndef super_user(hashed_password):\n    _user = baker.make(\"security.User\", is_superuser=True, password=hashed_password)\n    baker.make(\"talent.Person\", user=_user)\n    return _user\n\n\n@pytest.fixture\ndef product_role_assignments(user, product):\n    return baker.make(\n        \"security.ProductRoleAssignment\",\n        person=user.person,\n        product=product,\n        _quantity=10,\n    )\n\n\n@pytest.fixture\ndef product_role_assignment(user, product):\n    return baker.make(\n        \"security.ProductRoleAssignment\",\n        person=user.person,\n        product=product,\n    )\n\n\n@pytest.fixture\ndef product_role_assignment_contributor(user, product):\n    return baker.make(\n        \"security.User\",\n        person=user.person,\n        product=product,\n        role=ProductRoleAssignment.CONTRIBUTOR,\n    )\n\n\n@pytest.fixture\ndef product_role_assignment_admin(user, product):\n    return baker.make(\n        \"security.ProductRoleAssignment\",\n        person=user.person,\n        product=product,\n        role=ProductRoleAssignment.ProductRoles.ADMIN,\n    )\n\n\n@pytest.fixture\ndef product_role_assignment_manager(user, product):\n    return baker.make(\n        \"security.ProductRoleAssignment\",\n        person=user.person,\n        product=product,\n        role=ProductRoleAssignment.ProductRoles.MANAGER,\n    )\n"}
{"type": "test_file", "path": "apps/common/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "apps/common/tests/fixtures/auth.py", "content": "from django.contrib.auth.hashers import make_password\nfrom django.contrib.contenttypes.models import ContentType\n\nimport pytest\nfrom model_bakery import baker\n\n\n@pytest.fixture(autouse=True)\ndef enable_db_access_for_all_tests(db):\n    print(\"Enable database access for all tests\")\n\n\n@pytest.fixture\ndef password():\n    return \"PX1235455SAA@#123\"\n\n\n@pytest.fixture\ndef hashed_password(password):\n    return make_password(password)\n\n\n@pytest.fixture\ndef super_user(hashed_password):\n    _user = baker.make(\"users.User\", is_superuser=True, password=hashed_password)\n    baker.make(\"talent.Person\", user=_user)\n    return _user\n\n\n@pytest.fixture\ndef auth_superuser(client, super_user, password):\n    client.login(username=super_user.username, password=password)\n    return super_user\n\n\n@pytest.fixture\ndef auth_user(client, user, password):\n    client.login(username=user.username, password=password),\n    return user\n"}
{"type": "test_file", "path": "apps/capabilities/talent/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "e2e/tests/test_login.py", "content": "from e2e.helpers import login_user\nfrom e2e.pages.login_page import LoginPage\n\n\ndef test_login(live_server, page_context, create_user):\n    _, username, password, _ = create_user\n    login_user(page_context, live_server.url, username, password)\n    # assert page_context.is_visible(\"#navbar-menu-button\")\n"}
{"type": "test_file", "path": "apps/capabilities/security/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "apps/engagement/tests/test_notification_creation.py", "content": "import pytest\nfrom pytest_mock import MockerFixture\nfrom django.utils import timezone\nfrom django.contrib.auth import get_user_model\n\nfrom apps.capabilities.product_management.services import ProductManagementService\nfrom apps.engagement.models import (\n    NotifiableEvent,\n    AppNotification,\n    EmailNotification,\n    NotificationPreference,\n    AppNotificationTemplate,\n    EmailNotificationTemplate\n)\nfrom apps.capabilities.talent.models import Person\nfrom apps.capabilities.commerce.models import Organisation, Product\nfrom apps.event_hub.events import EventTypes\n\n@pytest.fixture\ndef user():\n    User = get_user_model()\n    return User.objects.create_user(\n        username=\"testuser\",\n        email=\"test@example.com\",\n        password=\"testpass123\"\n    )\n\n@pytest.fixture\ndef person(user):\n    return Person.objects.create(\n        user=user,\n        full_name=\"Test Person\",\n        preferred_name=\"Test\",\n        headline=\"Test Headline\",\n        overview=\"Test Overview\"\n    )\n\n@pytest.fixture\ndef org():\n    return Organisation.objects.create(\n        name=\"Test Org\"\n    )\n\n@pytest.fixture\ndef notification_preferences(person):\n    return NotificationPreference.objects.create(\n        person=person,\n        product_notifications=NotificationPreference.Type.BOTH\n    )\n\n@pytest.fixture\ndef app_template():\n    return AppNotificationTemplate.objects.create(\n        event_type=EventTypes.PRODUCT_CREATED,\n        title=\"New Product: {name}\",\n        template=\"A new product {name} has been created. View it at {url}\",\n        permitted_params=\"name,url\"\n    )\n\n@pytest.fixture\ndef email_template():\n    return EmailNotificationTemplate.objects.create(\n        event_type=EventTypes.PRODUCT_CREATED,\n        title=\"New Product: {name}\",\n        template=\"A new product {name} has been created. View it at {url}\",\n        permitted_params=\"name,url\"\n    )\n\n@pytest.fixture(autouse=True)\n@pytest.mark.django_db\ndef cleanup_test_data():\n    \"\"\"Clean up notifications after each test\"\"\"\n    yield\n    NotifiableEvent.objects.all().delete()\n    AppNotification.objects.all().delete()\n    EmailNotification.objects.all().delete()\n    Product.objects.all().delete()\n\n@pytest.fixture\ndef organisation(db):\n    \"\"\"Create a test organisation\"\"\"\n    return Organisation.objects.create(\n        name=\"Test Organisation\",\n        username=\"testorg\"\n    )\n\n@pytest.fixture\ndef product(db, organisation):\n    \"\"\"Create a test product\"\"\"\n    return Product.objects.create(\n        id=1,\n        name=\"Test Product\",\n        slug=\"test-product\",\n        organisation=organisation,  # Required owner\n        visibility=Product.Visibility.ORG_ONLY,  # Default visibility for org-owned products\n        short_description=\"A test product\"  # Optional but good for completeness\n    )\n\n@pytest.fixture\ndef product_manager(db):\n    \"\"\"Create a product manager user\"\"\"\n    user = get_user_model().objects.create_user(\n        username=\"productmanager\",\n        email=\"pm@example.com\",\n        password=\"testpass123\"\n    )\n    return Person.objects.create(\n        user=user,\n        full_name=\"Product Manager\",\n        preferred_name=\"PM\"\n    )\n\n@pytest.fixture\ndef org_manager(db):\n    \"\"\"Create an organization manager user\"\"\"\n    user = get_user_model().objects.create_user(\n        username=\"orgmanager\",\n        email=\"om@example.com\",\n        password=\"testpass123\"\n    )\n    return Person.objects.create(\n        user=user,\n        full_name=\"Org Manager\",\n        preferred_name=\"OM\"\n    )\n\n@pytest.mark.django_db\nclass TestNotificationCreation:\n    \"\"\"Tests for notification creation and content generation.\n    \n    These tests verify:\n    - Notification creation based on user preferences\n    - Template rendering and content formatting\n    - Error handling for invalid/missing templates\n    \"\"\"\n\n    @pytest.fixture(autouse=True)\n    def setup_event_bus(self):\n        \"\"\"Register event handlers with event bus\"\"\"\n        from apps.event_hub.services.event_bus import EventBus\n        from apps.engagement.events import handle_product_created\n        \n        event_bus = EventBus()\n        event_bus.register_listener(EventTypes.PRODUCT_CREATED, handle_product_created)\n        return event_bus\n\n    @pytest.fixture\n    def event_data(self, org, person):\n        \"\"\"Standard event data for testing\"\"\"\n        return {\n            'organisationId': org.id,\n            'name': \"Test Product\",\n            'url': \"/products/test-product/\",\n            'productId': 1,\n            'personId': person.id\n        }\n\n    @pytest.fixture(autouse=True)\n    def configure_sync_mode(self, settings):\n        \"\"\"Configure Django-Q for synchronous execution\"\"\"\n        settings.DJANGO_Q = {\n            'sync': True,\n            'timeout': 30,\n            'save_limit': 0\n        }\n        \n        # Configure event bus for sync mode\n        settings.EVENT_BUS = {\n            'BACKEND': 'apps.event_hub.services.backends.django_q.DjangoQBackend',\n            'TASK_COMPLETE_HOOK': None  # Disable the hook in sync mode\n        }\n\n    @pytest.mark.django_db(transaction=True)\n    def test_creates_both_notifications_when_preference_is_both(\n        self, \n        person, \n        event_data, \n        notification_preferences, \n        app_template, \n        email_template, \n        product,\n        transactional_db\n    ):\n        \"\"\"\n        When user preferences are set to BOTH:\n        - Should create both app and email notifications\n        - Should format templates correctly\n        \"\"\"\n        from apps.event_hub.services.event_bus import get_event_bus\n        event_bus = get_event_bus()\n\n        # Commit any pending fixture data\n        from django.db import transaction\n        transaction.commit()\n\n        # Emit event instead of publish\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        # Add small delay to allow for task processing\n        import time\n        time.sleep(0.1)\n\n        event = NotifiableEvent.objects.get(\n            event_type=EventTypes.PRODUCT_CREATED,\n            person=person\n        )\n        \n        # Verify app notification\n        app_notification = AppNotification.objects.get(event=event)\n        assert app_notification.title == \"New Product: Test Product\"\n        assert app_notification.message == \"A new product Test Product has been created. View it at /products/test-product/\"\n\n        # Verify email notification\n        email_notification = EmailNotification.objects.get(event=event)\n        assert email_notification.title == \"New Product: Test Product\"\n        assert email_notification.body == \"A new product Test Product has been created. View it at /products/test-product/\"\n\n    def test_creates_only_app_notification_when_preference_is_apps(\n        self,\n        person,\n        event_data,\n        notification_preferences,\n        app_template,\n        email_template,\n        product\n    ):\n        \"\"\"\n        When user preferences are set to APPS:\n        - Should create only app notification\n        - Should not create email notification\n        \"\"\"\n        notification_preferences.product_notifications = NotificationPreference.Type.APPS\n        notification_preferences.save()\n\n        from apps.event_hub.services.event_bus import EventBus\n        event_bus = EventBus()\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        event = NotifiableEvent.objects.get(\n            event_type=EventTypes.PRODUCT_CREATED,\n            person=person\n        )\n        \n        assert AppNotification.objects.filter(event=event).exists()\n        assert not EmailNotification.objects.filter(event=event).exists()\n\n    def test_creates_only_email_notification_when_preference_is_email(\n        self,\n        person,\n        event_data,\n        notification_preferences,\n        app_template,\n        email_template,\n        product\n    ):\n        \"\"\"\n        When user preferences are set to EMAIL:\n        - Should create only email notification\n        - Should not create app notification\n        \"\"\"\n        notification_preferences.product_notifications = NotificationPreference.Type.EMAIL\n        notification_preferences.save()\n\n        from apps.event_hub.services.event_bus import EventBus\n        event_bus = EventBus()\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        event = NotifiableEvent.objects.get(\n            event_type=EventTypes.PRODUCT_CREATED,\n            person=person\n        )\n        \n        assert EmailNotification.objects.filter(event=event).exists()\n        assert not AppNotification.objects.filter(event=event).exists()\n\n    def test_handles_invalid_template_gracefully(\n        self, \n        person, \n        event_data, \n        notification_preferences, \n        app_template, \n        email_template, \n        product\n    ):\n        \"\"\"\n        When template contains invalid parameters:\n        - Should create notification with error message\n        - Should not raise exception\n        \"\"\"\n        app_template.template = \"Product: {invalid_param}\"\n        app_template.save()\n        \n        from apps.event_hub.services.event_bus import EventBus\n        event_bus = EventBus()\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n        \n        notification = AppNotification.objects.get(\n            event__event_type=EventTypes.PRODUCT_CREATED,\n            event__person=person\n        )\n        assert notification.message == \"There was an error processing this notification.\"\n\n    def test_handles_missing_template_gracefully(\n        self,\n        person,\n        event_data,\n        notification_preferences,\n        product\n    ):\n        \"\"\"\n        When templates don't exist:\n        - Should create notification with error message\n        - Should not raise exception\n        \"\"\"\n        # Delete any existing templates\n        AppNotificationTemplate.objects.all().delete()\n        EmailNotificationTemplate.objects.all().delete()\n\n        from apps.event_hub.services.event_bus import EventBus\n        event_bus = EventBus()\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        event = NotifiableEvent.objects.get(\n            event_type=EventTypes.PRODUCT_CREATED,\n            person=person\n        )\n        \n        notification = AppNotification.objects.get(event=event)\n        assert notification.message == \"There was an error processing this notification.\"\n\n    def test_notifies_all_relevant_stakeholders_for_org_product(\n        self,\n        product,\n        org_manager,\n        product_manager,\n        event_data,\n        notification_preferences,\n        app_template,\n        email_template,\n        mocker\n    ):\n        \"\"\"\n        When product is org-owned:\n        - Should notify product managers\n        - Should notify org managers\n        \"\"\"\n        # Mock RoleService methods\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.get_product_managers',\n            return_value=[product_manager]\n        )\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.get_organisation_managers',\n            return_value=[org_manager]\n        )\n\n        from apps.event_hub.services.event_bus import EventBus\n        event_bus = EventBus()\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        # Verify notifications were created for both managers\n        assert NotifiableEvent.objects.filter(person=product_manager).exists()\n        assert NotifiableEvent.objects.filter(person=org_manager).exists()\n\n    def test_notifies_owner_for_personal_product(\n        self,\n        person,\n        product,\n        event_data,\n        notification_preferences,\n        app_template,\n        email_template\n    ):\n        \"\"\"\n        When product is personally owned:\n        - Should notify the product owner\n        \"\"\"\n        # Make product personally owned\n        product.organisation = None\n        product.person = person\n        product.visibility = product.Visibility.GLOBAL\n        product.save()\n\n        from apps.event_hub.services.event_bus import EventBus\n        event_bus = EventBus()\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        # Verify notification was created for owner\n        assert NotifiableEvent.objects.filter(person=person).exists()\n\n    def test_notifications_are_distinct(\n        self,\n        product,\n        person,\n        event_data,\n        notification_preferences,\n        app_template,\n        email_template,\n        mocker\n    ):\n        \"\"\"\n        When a person has multiple roles:\n        - Should only create one notification\n        \"\"\"\n        # Mock person as both product and org manager\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.get_product_managers',\n            return_value=[person]\n        )\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.get_organisation_managers',\n            return_value=[person]\n        )\n\n        from apps.event_hub.services.event_bus import EventBus\n        event_bus = EventBus()\n        event_bus.publish(EventTypes.PRODUCT_CREATED, event_data)\n\n        # Verify only one notification was created\n        assert NotifiableEvent.objects.filter(person=person).count() == 1"}
{"type": "test_file", "path": "apps/engagement/tests/conftest.py", "content": "import pytest\nfrom django.core.cache import cache\nfrom django.core.management import call_command\nfrom django.test.utils import override_settings\n\n@pytest.fixture(scope='session')\ndef django_db_setup(django_db_setup, django_db_blocker):\n    \"\"\"\n    Set up the test database, ensuring all required tables exist\n    \"\"\"\n    with django_db_blocker.unblock():\n        # Ensure all migrations are run, not just django_q\n        call_command('migrate')\n\n@pytest.fixture(scope='session', autouse=True)\ndef setup_test_environment():\n    \"\"\"Setup synchronous test environment\"\"\"\n    # Override Django Q settings for synchronous operation\n    test_settings = {\n        'Q_CLUSTER': {\n            'name': 'test_cluster',\n            'workers': 1,\n            'timeout': 30,\n            'sync': True,     # Run synchronously\n            'orm': 'default',\n            'bulk': 1,\n            'catch_up': False,\n            'log_level': 'DEBUG'\n        }\n    }\n    \n    with override_settings(**test_settings):\n        yield\n\n@pytest.fixture(autouse=True)\ndef clean_database():\n    \"\"\"Clean up notifications after each test\"\"\"\n    yield\n    from apps.engagement.models import AppNotification, EmailNotification\n    AppNotification.objects.all().delete()\n    EmailNotification.objects.all().delete()\n\n@pytest.fixture(autouse=True)\ndef db_access(db):\n    \"\"\"\n    Global fixture to enable database access for all tests\n    \"\"\"\n    pass\n\n@pytest.fixture(autouse=True)\ndef clear_cache():\n    \"\"\"\n    Clear the cache before each test\n    \"\"\"\n    cache.clear()\n    yield\n    cache.clear()"}
{"type": "test_file", "path": "apps/engagement/tests/test_listeners.py", "content": "from apps.engagement.tests.test_notification_processing import executed_listeners\n\ndef listener_1(payload):\n    \"\"\"Test listener 1\"\"\"\n    executed_listeners.append('listener_1')\n    return True\n\ndef listener_2(payload):\n    \"\"\"Test listener 2\"\"\"\n    executed_listeners.append('listener_2')\n    return True"}
{"type": "test_file", "path": "apps/common/tests/conftest.py", "content": "from apps.common.tests.fixtures.auth import *\nfrom apps.common.tests.fixtures.product_management import *\nfrom apps.common.tests.fixtures.security import *\nfrom apps.common.tests.fixtures.talent import *\nfrom apps.common.tests.fixtures.utils import *\n"}
{"type": "test_file", "path": "e2e/tests/test_signup.py", "content": "from e2e.pages.signup_page import SignupPage\n\n\ndef test_signup(live_server, page_context):\n    signup_page = SignupPage(page_context)\n    signup_page.navigate(f\"{live_server.url}{signup_page.url}\")\n    signup_page.signup(\"Pacey Witter\", \"pacey@gmail.com\", \"pacey\", \"pacey\", \"4@Password\")\n    # assert page_context.is_visible(\"#navbar-menu-button\")\n"}
{"type": "test_file", "path": "apps/capabilities/product_management/tests/conftest.py", "content": "from apps.common.forms import AttachmentFormSet\nfrom apps.common.tests.conftest import *\nfrom apps.capabilities.product_management.models import Bounty, Challenge, FileAttachment\nfrom django.contrib.auth import get_user_model\nfrom apps.capabilities.talent.models import Person\nfrom apps.capabilities.commerce.models import Organisation\nfrom apps.capabilities.security.models import User\nimport uuid\n\n\n@pytest.fixture(scope='session')\ndef django_db_setup(django_db_setup, django_db_blocker):\n    \"\"\"Configure DB for testing\"\"\"\n    pass\n\n\ndef pytest_configure():\n    \"\"\"Configure pytest settings\"\"\"\n    from django.conf import settings\n    \n    settings.MIGRATION_MODULES = {\n        'auth': None,\n        'contenttypes': None,\n        'default': None,\n        'sessions': None,\n        'core': None,\n        'profiles': None,\n        'product_management': None,\n        'talent': None,\n        'security': None,\n        # add other apps as needed\n    }\n\n\n@pytest.fixture\ndef product_data(organisation):\n    return {\n        \"name\": \"Test Product\",\n        \"description\": \"A test product description\",\n        \"short_description\": \"A test product description\",\n        \"full_description\": \"A test product description\",\n        \"organisation\": organisation,\n    }\n\n\n@pytest.fixture\ndef product_area_data(product_area):\n    return {\n        \"name\": \"New Area\",\n        \"depth\": \"0\",\n        \"parent_id\": product_area.pk,\n    }\n\n\n@pytest.fixture\ndef attachment_formset():\n    return AttachmentFormSet(queryset=FileAttachment.objects.none())\n\n\n@pytest.fixture\ndef challenge_data(product, attachment_formset):\n    return {\n        \"title\": \"Aliquam viverra\",\n        \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n        \"short_description\": \"Fusce sed arcu vitae\",\n        \"product\": product.pk,\n        \"status\": Challenge.ChallengeStatus.ACTIVE,\n        \"priority\": Challenge.ChallengePriority.HIGH,\n        \"reward_type\": Challenge.RewardType.LIQUID_POINTS,\n        \"attachment_formset\": attachment_formset,\n    }\n\n\n@pytest.fixture\ndef challenge_update_data(attachment_formset):\n    return {\n        \"title\": \"Aliquam viverra\",\n        \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\",\n        \"short_description\": \"Fusce sed arcu vitae\",\n        \"status\": Challenge.ChallengeStatus.ACTIVE,\n        \"priority\": Challenge.ChallengePriority.HIGH,\n        \"reward_type\": Challenge.RewardType.LIQUID_POINTS,\n        \"attachment_formset\": attachment_formset,\n    }\n\n\n@pytest.fixture\ndef initiative_data(product):\n    return {\n        \"name\": \"New Initiative\",\n        \"description\": \"A new initiative\",\n        \"status\": Initiative.InitiativeStatus.ACTIVE,\n        \"product\": product.pk,\n    }\n\n\n@pytest.fixture\ndef bounty_data(challenge, attachment_formset, skill, expertise_list):\n    return {\n        \"title\": \"Suspendisse dapibus porttitor laoreet.\",\n        \"description\": \" Fusce laoreet lectus in nisl efficitur fermentum. \",\n        \"status\": Bounty.BountyStatus.AVAILABLE,\n        \"challenge\": challenge.pk,\n        \"points\": 10,\n        \"attachment_formset\": attachment_formset,\n    }\n\n\n@pytest.fixture\ndef base_user(db):\n    \"\"\"Create a base user without a person record\"\"\"\n    return get_user_model().objects.create_user(\n        username=f'baseuser_{uuid.uuid4().hex[:8]}',\n        email='baseuser@example.com',\n        password='testpass123'\n    )\n\n\n@pytest.fixture\ndef person(db):\n    \"\"\"Create a person with an associated user\"\"\"\n    user = get_user_model().objects.create_user(\n        username=f'testuser_{uuid.uuid4().hex[:8]}',\n        email='test@example.com',\n        password='testpass123'\n    )\n    \n    person = Person.objects.create(\n        user=user,\n        full_name=\"Test User\",\n        preferred_name=\"Test\",\n        headline=\"Test Headline\",\n        overview=\"Test Overview\"\n    )\n    return person\n\n\n@pytest.fixture\ndef user(person):\n    \"\"\"Return the user associated with a person\"\"\"\n    return person.user\n\n\n@pytest.fixture\ndef authenticated_client(client, user):\n    \"\"\"Returns an authenticated client with a proper user/person setup\"\"\"\n    client.force_login(user)\n    return client\n\n\n@pytest.fixture\ndef product(person):\n    \"\"\"Base product fixture with required person relationship\"\"\"\n    return Product.objects.create(\n        name=\"Test Product\",\n        slug=\"test-product\",\n        short_description=\"Test Description\",\n        visibility=Product.Visibility.GLOBAL,\n        person=person\n    )\n\n\n@pytest.fixture\ndef restricted_product(organisation):\n    \"\"\"Restricted product fixture - must use organisation for restricted visibility\"\"\"\n    return Product.objects.create(\n        name=\"Restricted Product\",\n        slug=\"restricted-product\",\n        short_description=\"Restricted Description\",\n        visibility=Product.Visibility.RESTRICTED,\n        organisation=organisation\n    )\n\n\n@pytest.fixture\ndef organisation(db):\n    \"\"\"Create a test organisation\"\"\"\n    return Organisation.objects.create(\n        name=\"Test Organisation\",\n        slug=\"test-organisation\"\n    )\n"}
{"type": "test_file", "path": "apps/capabilities/product_management/tests/test_services.py", "content": "import pytest\nfrom django.contrib.auth import get_user_model\nfrom apps.capabilities.product_management.models import Product, Challenge, Bounty, Idea, Bug, Initiative, ProductContributorAgreementTemplate, ProductArea, ProductTree\nfrom apps.capabilities.product_management.services import (\n    ProductService, IdeaService, BugService, ChallengeCreationService,\n    ProductManagementService, ContributorAgreementService, ProductAreaService,\n    InitiativeService, ChallengeService, ProductTreeService, ProductPeopleService,\n    BountyService, ProductContentService\n)\nfrom apps.capabilities.talent.models import Person\nfrom apps.capabilities.commerce.models import Organisation\nfrom django.utils import timezone\nfrom apps.common.exceptions import InvalidInputError\nimport logging\nfrom django.core.exceptions import ValidationError\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\n@pytest.fixture\ndef authenticated_user(db):\n    user = User.objects.create_user(username='testuser', password='12345')\n    user.person = Person.objects.create(user=user)\n    return user\n\n@pytest.mark.django_db\nclass TestProductService:\n    def test_get_visible_products_anonymous(self, client):\n        # Create a person for the product\n        user = User.objects.create_user(username='owner', password='12345')\n        person = Person.objects.create(user=user)\n        \n        # Create products with different visibility\n        global_product = Product.objects.create(\n            name=\"Global Product\",\n            visibility=Product.Visibility.GLOBAL,\n            person=person\n        )\n        # For restricted product, we need to use organization owner instead of person\n        org = Organisation.objects.create(name=\"Test Org\")\n        restricted_product = Product.objects.create(\n            name=\"Restricted Product\",\n            visibility=Product.Visibility.RESTRICTED,\n            organisation=org  # Use org instead of person\n        )\n\n        visible_products = ProductService.get_visible_products(None)\n        \n        assert global_product in visible_products\n        assert restricted_product not in visible_products\n\n    def test_get_visible_products_authenticated(self, authenticated_user, mocker):\n        # Create org for restricted product\n        org = Organisation.objects.create(name=\"Test Org\")\n        \n        global_product = Product.objects.create(\n            name=\"Global Product\",\n            visibility=Product.Visibility.GLOBAL,\n            person=authenticated_user.person\n        )\n        \n        restricted_product = Product.objects.create(\n            name=\"Restricted Product\",\n            visibility=Product.Visibility.RESTRICTED,\n            organisation=org  # Use org instead of person\n        )\n        \n        # Mock RoleService to return restricted product\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.get_user_products',\n            return_value=Product.objects.filter(id=restricted_product.id)\n        )\n\n        visible_products = ProductService.get_visible_products(authenticated_user)\n        \n        assert global_product in visible_products\n        assert restricted_product in visible_products\n\n    def test_convert_youtube_link_valid(self):\n        url = \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n        result = ProductService.convert_youtube_link_to_embed(url)\n        assert result == \"https://www.youtube.com/embed/dQw4w9WgXcQ\"\n\n    def test_convert_youtube_link_invalid(self):\n        url = \"https://not-youtube.com/watch?v=123\"\n        \n        # The InvalidInputError should be raised\n        with pytest.raises(InvalidInputError, match=\"Not a valid YouTube URL\"):\n            ProductService.convert_youtube_link_to_embed(url)\n\n    def test_organization_product_visibility(self, authenticated_user):\n        org = Organisation.objects.create(name=\"Test Org\")\n        \n        # Organization can have GLOBAL visibility\n        global_org_product = Product.objects.create(\n            name=\"Global Org Product\",\n            visibility=Product.Visibility.GLOBAL,\n            organisation=org\n        )\n        \n        # Organization can have RESTRICTED visibility\n        restricted_org_product = Product.objects.create(\n            name=\"Restricted Org Product\",\n            visibility=Product.Visibility.RESTRICTED,\n            organisation=org\n        )\n        \n        # Verify both products were created successfully\n        assert Product.objects.filter(organisation=org).count() == 2\n        assert Product.objects.filter(visibility=Product.Visibility.GLOBAL).count() == 1\n        assert Product.objects.filter(visibility=Product.Visibility.RESTRICTED).count() == 1\n\n@pytest.mark.django_db\nclass TestIdeaService:\n    def test_create_idea(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        form_data = {\n            \"title\": \"Test Idea\",\n            \"description\": \"Idea description\"\n        }\n        \n        success, error, idea = IdeaService.create_idea(form_data, authenticated_user.person, product)\n        \n        assert success is True\n        assert error is None\n        assert idea.title == \"Test Idea\"\n        assert idea.person == authenticated_user.person\n\n    def test_toggle_vote(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            visibility=Product.Visibility.GLOBAL,\n            person=authenticated_user.person\n        )\n        idea = Idea.objects.create(\n            title=\"Test Idea\",\n            product=product,\n            person=authenticated_user.person\n        )\n\n        # Test adding vote\n        success, error, count = IdeaService.toggle_vote(idea, authenticated_user)\n        assert success is True\n        assert count == 1\n\n        # Test removing vote\n        success, error, count = IdeaService.toggle_vote(idea, authenticated_user)\n        assert success is True\n        assert count == 0\n\n@pytest.mark.django_db\nclass TestBugService:\n    def test_create_bug(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            visibility=Product.Visibility.GLOBAL,\n            person=authenticated_user.person\n        )\n        person = authenticated_user.person\n        form_data = {\n            \"title\": \"Test Bug\",\n            \"description\": \"Bug Description\"\n        }\n\n        success, error, bug = BugService.create_bug(form_data, person, product)\n        \n        assert success is True\n        assert error is None\n        assert bug.title == \"Test Bug\"\n        assert bug.person == person\n        assert bug.product == product\n\n    def test_can_modify_bug(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            visibility=Product.Visibility.GLOBAL,\n            person=authenticated_user.person\n        )\n        bug = Bug.objects.create(\n            title=\"Test Bug\",\n            product=product,\n            person=authenticated_user.person\n        )\n\n        assert BugService.can_modify_bug(bug, authenticated_user.person) is True\n        \n        other_person = Person.objects.create(user=User.objects.create(username=\"other\"))\n        assert BugService.can_modify_bug(bug, other_person) is False\n\n@pytest.mark.django_db\nclass TestChallengeCreationService:\n    def test_create_challenge_with_bounties(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        challenge_data = {\n            \"title\": \"Test Challenge\",\n            \"description\": \"Challenge Description\",\n            \"product\": product\n        }\n        bounties_data = [{\n            \"title\": \"Test Bounty\",\n            \"description\": \"Bounty Description\",\n            \"points\": 100\n        }]\n\n        service = ChallengeCreationService(\n            challenge_data=challenge_data,\n            bounties_data=bounties_data,\n            user=authenticated_user\n        )\n        \n        success, error = service.process_submission()\n        \n        assert success is True\n        assert error is None\n        \n        challenge = Challenge.objects.first()\n        assert challenge.title == \"Test Challenge\"\n        assert challenge.bounty_set.count() == 1\n        assert challenge.bounty_set.first().title == \"Test Bounty\"\n\n    def test_challenge_creation_rollback(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        \n        challenge_data = {\n            \"title\": \"Test Challenge\",\n            \"product\": product\n        }\n        bounties_data = [{\n            \"title\": \"Test Bounty\",\n            \"points\": -100  # Invalid points to trigger error\n        }]\n\n        service = ChallengeCreationService(\n            challenge_data=challenge_data,\n            bounties_data=bounties_data,\n            user=authenticated_user\n        )\n        \n        with pytest.raises(InvalidInputError):\n            service.process_submission()\n        \n        # Verify nothing was created due to rollback\n        assert Challenge.objects.count() == 0\n        assert Bounty.objects.count() == 0\n\n@pytest.mark.django_db\nclass TestProductManagementService:\n    def test_create_product_success(self, authenticated_user):\n        form_data = {\n            \"name\": \"New Product\",\n            \"slug\": \"new-product\",\n            \"visibility\": Product.Visibility.GLOBAL,\n        }\n        \n        product = ProductManagementService.create_product(\n            form_data,\n            authenticated_user.person\n        )\n        \n        assert product.name == \"New Product\"\n        assert product.person == authenticated_user.person\n\n    def test_create_product_invalid_data(self, authenticated_user):\n        form_data = {\n            # Missing required name\n            \"visibility\": Product.Visibility.GLOBAL,\n        }\n        \n        with pytest.raises(InvalidInputError) as exc:\n            ProductManagementService.create_product(\n                form_data,\n                authenticated_user.person\n            )\n        assert \"name is required\" in str(exc.value)\n\n    def test_create_organization_product(self):\n        org = Organisation.objects.create(name=\"Test Org\")\n        \n        # Test GLOBAL visibility\n        product_data = {\n            \"name\": \"Test Org Product\",\n            \"slug\": \"test-org-product\",\n            \"short_description\": \"Test Description\",\n            \"visibility\": Product.Visibility.GLOBAL,\n            \"organisation\": org\n        }\n        \n        # Don't pass person when creating org-owned product\n        product = ProductManagementService.create_product(product_data, person=None)\n        assert product.organisation == org\n        assert product.visibility == Product.Visibility.GLOBAL\n        assert product.person is None\n\n    def test_organization_product_validation(self):\n        \"\"\"Test validation rules for organization-owned products\"\"\"\n        org = Organisation.objects.create(name=\"Test Org\")\n        person = Person.objects.create(user=User.objects.create(username=\"testuser\"))\n        \n        # Test cannot set both organization and person\n        with pytest.raises(ValidationError) as exc_info:\n            Product.objects.create(\n                name=\"Invalid Product\",\n                organisation=org,\n                person=person,\n                visibility=Product.Visibility.GLOBAL\n            )\n        assert \"Product cannot have both person and organisation as owner\" in str(exc_info.value)\n\n@pytest.mark.django_db\nclass TestContributorAgreementService:\n    def test_create_template(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        form_data = {\n            \"title\": \"Test Template\",\n            \"content\": \"Agreement content\",\n            \"product_id\": product.id,\n            \"effective_date\": timezone.now()\n        }\n\n        success, error, template = ContributorAgreementService.create_template(\n            form_data,\n            authenticated_user.person\n        )\n        \n        assert success is True\n        assert error is None\n        assert template.title == \"Test Template\"\n        assert template.created_by == authenticated_user.person\n\n@pytest.mark.django_db\nclass TestProductAreaService:\n    def test_create_area(self):\n        user = User.objects.create_user(username='owner', password='12345')\n        person = Person.objects.create(user=user)\n        \n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        product_tree = ProductTree.objects.create(\n            name=\"Test Tree\",\n            product=product\n        )\n        form_data = {\n            \"name\": \"Test Area\",\n            \"product_tree\": product_tree\n        }\n\n        success, error, area = ProductAreaService.create_area(form_data)\n        \n        assert success is True\n        assert error is None\n        assert area.name == \"Test Area\"\n        assert area.product_tree.product == product\n\n    def test_update_area(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        product_tree = ProductTree.objects.create(\n            name=\"Test Tree\",\n            product=product\n        )\n        # Create as root node since it's using treebeard\n        area = ProductArea.add_root(\n            name=\"Original Area\",\n            product_tree=product_tree\n        )\n        \n        form_data = {\n            \"name\": \"Updated Area\"\n        }\n\n        success, error = ProductAreaService.update_area(area, form_data)\n        \n        assert success is True\n        assert error is None\n        area.refresh_from_db()\n        assert area.name == \"Updated Area\"\n\n@pytest.mark.django_db\nclass TestInitiativeService:\n    def test_create_initiative(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        form_data = {\n            \"name\": \"Test Initiative\",\n            \"description\": \"Initiative Description\",\n            \"product\": product,\n            \"status\": Initiative.InitiativeStatus.ACTIVE\n        }\n\n        success, error, initiative = InitiativeService.create_initiative(\n            form_data,\n            authenticated_user.person\n        )\n        assert success is True\n\n    def test_get_product_initiatives(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        Initiative.objects.create(\n            name=\"Test Initiative\",\n            product=product,\n            status=Initiative.InitiativeStatus.ACTIVE\n        )\n\n    def test_create_initiative_org_product(self, authenticated_user):\n        \"\"\"Test creating initiative on organization-owned product\"\"\"\n        org = Organisation.objects.create(name=\"Test Org\")\n        product = Product.objects.create(\n            name=\"Org Product\",\n            visibility=Product.Visibility.RESTRICTED,\n            organisation=org\n        )\n        \n        # Create initiative data matching service expectations\n        initiative_data = {\n            'name': \"Test Initiative\",\n            'description': \"Test Description\",\n            'product': product,  # Pass product object directly\n            'created_by': authenticated_user.person  # Add created_by to form_data\n        }\n        \n        # Service returns (success, error_message, initiative)\n        success, error, initiative = InitiativeService.create_initiative(\n            initiative_data,\n            authenticated_user.person\n        )\n        \n        # Verify success\n        assert success is True\n        assert error is None\n        assert initiative is not None\n        \n        # Verify initiative data\n        assert initiative.product == product\n        assert initiative.name == \"Test Initiative\"\n        assert initiative.description == \"Test Description\"\n\n@pytest.mark.django_db\nclass TestBountyService:\n    def test_get_visible_bounties(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            visibility=Product.Visibility.GLOBAL,\n            person=authenticated_user.person\n        )\n        challenge = Challenge.objects.create(\n            title=\"Test Challenge\",\n            product=product\n        )\n        bounty = Bounty.objects.create(\n            title=\"Test Bounty\",\n            challenge=challenge,\n            points=100\n        )\n\n        visible_bounties = BountyService.get_visible_bounties(authenticated_user)\n        \n        assert bounty in visible_bounties\n\n    def test_get_product_bounties(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            slug=\"test-product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        challenge = Challenge.objects.create(\n            title=\"Test Challenge\",\n            product=product\n        )\n        bounty = Bounty.objects.create(\n            title=\"Test Bounty\",\n            challenge=challenge,\n            points=100\n        )\n\n        product_bounties = BountyService.get_product_bounties(\"test-product\")\n        \n        assert bounty in product_bounties\n\n    def test_get_org_product_bounties(self, authenticated_user):\n        \"\"\"Test bounties on organization-owned product\"\"\"\n        org = Organisation.objects.create(name=\"Test Org\")\n        product = Product.objects.create(\n            name=\"Org Product\",\n            visibility=Product.Visibility.RESTRICTED,\n            organisation=org\n        )\n        \n        # Create test bounties...\n        # Test retrieval...\n\n@pytest.mark.django_db\nclass TestProductContentService:\n    def test_get_product_content(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        \n        # Create test content\n        idea = Idea.objects.create(\n            title=\"Test Idea\",\n            product=product,\n            person=authenticated_user.person\n        )\n        bug = Bug.objects.create(\n            title=\"Test Bug\",\n            product=product,\n            person=authenticated_user.person\n        )\n        \n        content = ProductContentService.get_product_content(product)\n        \n        assert idea in content['ideas']\n        assert bug in content['bugs']\n        assert len(content['initiatives']) == 0\n        assert len(content['challenges']) == 0\n\n    def test_get_content_stats(self, authenticated_user):\n        product = Product.objects.create(\n            name=\"Test Product\",\n            person=authenticated_user.person,\n            visibility=Product.Visibility.GLOBAL\n        )\n        \n        # Create test content\n        Idea.objects.create(\n            title=\"Test Idea\",\n            product=product,\n            person=authenticated_user.person\n        )\n        Bug.objects.create(\n            title=\"Test Bug\",\n            product=product,\n            person=authenticated_user.person\n        )\n        \n        stats = ProductContentService.get_content_stats(product)\n        \n        assert stats['idea_count'] == 1\n        assert stats['bug_count'] == 1\n        assert stats['initiative_count'] == 0\n        assert stats['challenge_count'] == 0\n"}
{"type": "test_file", "path": "e2e/tests/test_claim_bounty.py", "content": "from datetime import datetime, timedelta\n\nfrom apps.talent.models import BountyClaim\nfrom e2e.helpers import login_user\nfrom e2e.pages.challenge_details_page import ChallengeDetailPage\n\n\ndef test_claim_bounty(live_server, page_context, setup_bounty):\n    product, challenge, bounty, _, username, password = setup_bounty\n    login_user(page_context, live_server.url, username, password)\n\n    page = ChallengeDetailPage(page_context)\n    page_context.wait_for_timeout(1500)\n    assert BountyClaim.objects.filter(bounty=bounty.id).count() == 0\n\n    page_context.reload()\n    page_context.wait_for_timeout(5000)\n    challenge_detail_button = page.get_challenge_detail_button(product.slug, challenge.id)\n\n    challenge_detail_button.click()\n    page_context.wait_for_timeout(1500)\n\n    bounty_claim_button = page.get_bounty_claim_button(bounty.id)\n    bounty_claim_button.click()\n\n    page_context.wait_for_timeout(500)\n    page.bounty_add_btn.click()\n    page_context.wait_for_timeout(500)\n\n    future_date = datetime.now() + timedelta(days=10)\n    page_context.wait_for_timeout(500)\n\n    day = future_date.strftime(\"%d\")\n    month = future_date.strftime(\"%m\")\n    year = future_date.strftime(\"%Y\")\n\n    # Clear the date input fields before typing\n    page.expected_submission_date.fill(f\"{year}-{month}-{day}\")\n\n    page.terms_check_box.check()\n\n    page.request_claim_button.click()\n\n    page_context.wait_for_timeout(1500)\n\n    bounty_claim = BountyClaim.objects.get(bounty=bounty.id)\n    assert bounty_claim.status == BountyClaim.Status.REQUESTED\n"}
{"type": "test_file", "path": "apps/flows/challenge_authoring/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "apps/capabilities/product_management/tests/test_views/test_visibility_managed_marketplace_views.py", "content": "import pytest\nfrom django.urls import reverse\nfrom django.test import Client\nfrom django.contrib.auth import get_user_model\n\nfrom apps.capabilities.product_management.models import (\n    Product, Challenge, Bounty, Initiative, Idea, Bug\n)\nfrom apps.capabilities.commerce.models import Organisation \nfrom apps.capabilities.security.models import Person\n\nUser = get_user_model()\n\n@pytest.fixture\ndef organisation():\n    return Organisation.objects.create(name=\"Test Org\")\n\n@pytest.fixture\ndef product(organisation):\n    return Product.objects.create(\n        slug='test-product',\n        name='Test Product',\n        visibility=Product.Visibility.GLOBAL,\n        organisation=organisation\n    )\n\n@pytest.fixture\ndef restricted_product(organisation):\n    return Product.objects.create(\n        slug='private-product',\n        name='Private Product',\n        visibility=Product.Visibility.RESTRICTED,\n        organisation=organisation\n    )\n\n@pytest.fixture\ndef client():\n    return Client()\n\n@pytest.fixture\ndef user(db):\n    return User.objects.create_user(username='testuser', password='12345')\n\n@pytest.fixture\ndef authenticated_client(client):\n    user = User.objects.create_user(username='testuser', password='12345')\n    # Create associated Person object\n    person = Person.objects.create(\n        user=user,\n        points=0,\n        full_name=\"Test Person\",\n        preferred_name=\"Test\",\n        headline=\"Test Headline\",\n        overview=\"Test Overview\",\n        send_me_bounties=False\n    )\n    client.login(username='testuser', password='12345')\n    client.user = user  # Store the user object on the client\n    return client\n\n@pytest.mark.django_db\nclass TestPublicBountyListView:\n    def test_bounty_list_uses_bounty_service(self, authenticated_client, mocker):\n        # Mock both services that BountyService depends on\n        visible_products = [\n            Product(id=1, name='Product 1'),\n            Product(id=2, name='Product 2')\n        ]\n        mock_product_service = mocker.patch(\n            'apps.capabilities.product_management.services.ProductService.get_visible_products',\n            return_value=visible_products\n        )\n\n        mock_bounties = Bounty.objects.none()\n        mock_bounty_service = mocker.patch(\n            'apps.capabilities.product_management.services.BountyService.get_visible_bounties',\n            return_value=mock_bounties\n        )\n\n        response = authenticated_client.get(reverse('product_management:bounty-list'))\n        \n        mock_bounty_service.assert_called_once_with(authenticated_client.user)\n        assert list(response.context['bounties']) == list(mock_bounties)\n\n@pytest.mark.django_db\nclass TestProductVisibilityMixin:\n    def test_anonymous_user_can_access_global_product(self, client, product, mocker):\n        product.save()\n        response = client.get(\n            reverse('product_management:product-summary',\n            kwargs={'product_slug': product.slug})\n        )\n        assert response.status_code == 200\n\n    def test_anonymous_user_cannot_access_restricted_product(self, client, mocker, restricted_product):\n        restricted_product.save()\n        response = client.get(\n            reverse('product_management:product-summary',\n            kwargs={'product_slug': restricted_product.slug})\n        )\n        assert response.status_code == 302\n\n@pytest.mark.django_db\nclass TestProductChallengesView:\n    def test_challenge_service_integration(self, authenticated_client, product, mocker):\n        # Mock ChallengeService as implemented in services.py\n        mock_challenges = Challenge.objects.none()\n        mock_challenge_service = mocker.patch(\n            'apps.capabilities.product_management.services.ChallengeService.get_product_challenges',\n            return_value=mock_challenges\n        )\n\n        # Mock RoleService for permission check\n        mock_role_service = mocker.patch(\n            'apps.capabilities.security.services.RoleService.has_product_management_access',\n            return_value=True\n        )\n\n        product.save()\n        response = authenticated_client.get(\n            reverse('product_management:product-challenges', \n            kwargs={'product_slug': product.slug})\n        )\n\n        # Verify service interactions match implementation\n        mock_challenge_service.assert_called_once_with(product)\n        assert response.context['challenges'] == mock_challenges\n\n@pytest.mark.django_db\nclass TestProductIdeasAndBugsView:\n    def test_ideas_and_bugs_service_integration(self, authenticated_client, product, mocker):\n        # Mock the services\n        mock_ideas = Idea.objects.none()\n        mock_bugs = Bug.objects.none()\n        \n        mocker.patch(\n            'apps.capabilities.product_management.services.IdeaService.get_product_ideas',\n            return_value=mock_ideas\n        )\n        mocker.patch(\n            'apps.capabilities.product_management.services.BugService.get_product_bugs',\n            return_value=mock_bugs\n        )\n\n        product.save()\n        response = authenticated_client.get(\n            reverse('product_management:product-ideas-bugs', \n            kwargs={'product_slug': product.slug})\n        )\n\n        assert response.status_code == 200\n        assert response.context['ideas'] == mock_ideas\n        assert response.context['bugs'] == mock_bugs\n\n@pytest.mark.django_db\nclass TestProductListView:\n    def test_anonymous_user_sees_only_global_products(self, client, product, mocker):\n        product.save()\n        restricted_product = Product.objects.create(\n            slug='restricted-product',\n            name='Restricted Product',\n            visibility=Product.Visibility.RESTRICTED\n        )\n        \n        response = client.get(reverse('product_management:products'))\n        assert response.status_code == 200\n        assert product in response.context['products']\n        assert restricted_product not in response.context['products']\n\n    def test_authenticated_user_sees_create_button(self, authenticated_client, product, mocker):\n        response = authenticated_client.get(reverse('product_management:products'))\n        assert response.status_code == 200\n        assert b'Create Product' in response.content\n\n@pytest.mark.django_db\nclass TestProductInitiativesView:\n    def test_initiative_service_integration(self, authenticated_client, product, mocker):\n        # Create the initiative first\n        initiative = Initiative.objects.create(\n            product=product,\n            name='Test Initiative',\n            description='Test'\n        )\n        \n        # Mock InitiativeService to return our initiative\n        mock_initiatives = Initiative.objects.filter(id=initiative.id)\n        mock_service = mocker.patch(\n            'apps.capabilities.product_management.services.InitiativeService.get_product_initiatives',\n            return_value=mock_initiatives\n        )\n\n        # Mock user having management access\n        mocker.patch(\n            'apps.capabilities.security.services.RoleService.has_product_management_access',\n            return_value=True\n        )\n\n        product.save()\n        response = authenticated_client.get(\n            reverse('product_management:product-initiatives', \n            kwargs={'product_slug': product.slug})\n        )\n\n        # Verify service interactions\n        mock_service.assert_called_once_with(product)\n        assert response.status_code == 200\n        assert response.context['can_manage'] == True\n        assert initiative in response.context['initiatives']\n\n@pytest.mark.django_db\nclass TestProductSummaryView:\n    def test_summary_view_uses_services(self, authenticated_client, product, mocker):\n        # Mock services\n        mock_challenges = Challenge.objects.none()\n        mocker.patch(\n            'apps.capabilities.product_management.models.Challenge.objects.filter',\n            return_value=mock_challenges\n        )\n\n        product.save()\n        response = authenticated_client.get(\n            reverse('product_management:product-summary', \n            kwargs={'product_slug': product.slug})\n        )\n\n        assert response.status_code == 200\n        assert response.context['challenges'] == mock_challenges\n        assert response.context['product'] == product\n\n@pytest.mark.django_db\nclass TestProductTreeInteractiveView:\n    def test_tree_view_uses_services(self, authenticated_client, product, mocker):\n        mock_tree_data = [{'id': 1, 'name': 'Area 1'}]\n        mock_tree_service = mocker.patch(\n            'apps.capabilities.product_management.services.ProductTreeService.get_product_tree_data',\n            return_value=mock_tree_data\n        )\n        mock_role_service = mocker.patch(\n            'apps.capabilities.security.services.RoleService.has_product_management_access',\n            return_value=True\n        )\n\n        product.save()\n        response = authenticated_client.get(\n            reverse('product_management:product-tree', \n            kwargs={'product_slug': product.slug})\n        )\n\n        mock_tree_service.assert_called_once_with(product)\n        assert response.context['tree_data'] == mock_tree_data\n        assert response.context['can_manage'] == True\n\n@pytest.mark.django_db\nclass TestProductPeopleView:\n    def test_people_view_uses_services(self, authenticated_client, product, mocker):\n        mock_roles = [(1, []), (2, [])]\n        mock_people_service = mocker.patch(\n            'apps.capabilities.product_management.services.ProductPeopleService.get_grouped_product_roles',\n            return_value=mock_roles\n        )\n\n        product.save()\n        response = authenticated_client.get(\n            reverse('product_management:product-people',\n            kwargs={'product_slug': product.slug})\n        )\n\n        mock_people_service.assert_called_with(product)\n        assert response.context['grouped_product_people'] == mock_roles\n\n@pytest.mark.django_db\nclass TestProductListView:\n    def test_list_view_uses_product_service(self, authenticated_client, mocker):\n        mock_products = Product.objects.none()\n        mock_product_service = mocker.patch(\n            'apps.capabilities.product_management.services.ProductService.get_visible_products',\n            return_value=mock_products\n        )\n\n        response = authenticated_client.get(reverse('product_management:products'))\n        \n        mock_product_service.assert_called_once_with(authenticated_client.user)\n        assert list(response.context['products']) == list(mock_products)\n\n@pytest.mark.django_db\nclass TestProductIdeasAndBugsView:\n    def test_ideas_and_bugs_view_uses_services(self, authenticated_client, product, mocker):\n        mock_ideas = Idea.objects.none()\n        mock_bugs = Bug.objects.none()\n        \n        mocker.patch(\n            'apps.capabilities.product_management.models.Idea.objects.filter',\n            return_value=mock_ideas\n        )\n        mocker.patch(\n            'apps.capabilities.product_management.models.Bug.objects.filter',\n            return_value=mock_bugs\n        )\n\n        product.save()\n        response = authenticated_client.get(\n            reverse('product_management:product-ideas-bugs', \n            kwargs={'product_slug': product.slug})\n        )\n\n        assert response.context['ideas'] == mock_ideas\n        assert response.context['bugs'] == mock_bugs\n        assert response.context['product'] == product\n\n@pytest.mark.django_db\nclass TestBountyDetailView:\n    def test_bounty_detail_uses_role_service(self, authenticated_client, product, mocker):\n        # Add mock at the start of the test\n        mock_role_service = mocker.patch(\n            'apps.capabilities.security.services.RoleService.has_product_management_access',\n            return_value=True\n        )\n        \n        challenge = Challenge.objects.create(product=product, title='Test Challenge')\n        bounty = Bounty.objects.create(\n            challenge=challenge,\n            title='Test Bounty',\n            points=10  # Required field\n        )\n        response = authenticated_client.get(\n            reverse('product_management:bounty-detail',\n            kwargs={\n                'product_slug': product.slug,\n                'challenge_id': challenge.id,\n                'pk': bounty.id\n            })\n        )\n        mock_role_service.assert_called_once_with(\n            authenticated_client.user.person,\n            product\n        )\n        assert response.context['data']['show_actions'] == True\n        assert response.context['data']['bounty'] == bounty"}
{"type": "source_file", "path": "apps/canopy/__init__.py", "content": ""}
{"type": "source_file", "path": "apps/capabilities/__init__.py", "content": ""}
{"type": "source_file", "path": "apps/__init__.py", "content": ""}
{"type": "source_file", "path": "apps/canopy/utils.py", "content": "import random\n\nfrom django.http import JsonResponse\nfrom django.shortcuts import render\n\nfrom apps.common import utils as common_utils\nfrom apps.capabilities.product_management import forms as mgt_forms, models as mgt\n\nadjectives = [\n    \"Magnificent\",\n    \"Exquisite\",\n    \"Radiant\",\n    \"Splendid\",\n    \"Majestic\",\n    \"Elegant\",\n    \"Sublime\",\n    \"Resplendent\",\n    \"Impeccable\",\n    \"Opulent\",\n    \"Grandiose\",\n    \"Stupendous\",\n    \"Glorious\",\n    \"Enchanting\",\n    \"Effervescent\",\n    \"Brilliant\",\n    \"Luminous\",\n    \"Dazzling\",\n    \"Vibrant\",\n    \"Stellar\",\n    \"Sparkling\",\n    \"Glistening\",\n    \"Shimmering\",\n    \"Lustrous\",\n    \"Fabulous\",\n    \"Marvelous\",\n    \"Stunning\",\n    \"Radiant\",\n    \"Glowing\",\n    \"Awe-inspiring\",\n]\n\ntrees = [\n    \"Maple\",\n    \"Birch\",\n    \"Oak\",\n    \"Elm\",\n    \"Ash\",\n    \"Pine\",\n    \"Cedar\",\n    \"Fir\",\n    \"Beech\",\n    \"Palm\",\n    \"Spruce\",\n    \"Larch\",\n    \"Alder\",\n    \"Willow\",\n    \"Ebony\",\n    \"Yew\",\n    \"Holly\",\n    \"Fig\",\n    \"Rowan\",\n    \"Teak\",\n    \"Lime\",\n    \"Cork\",\n    \"Mango\",\n    \"Apple\",\n    \"Pear\",\n    \"Plum\",\n    \"Cherry\",\n    \"Peach\",\n    \"Palm\",\n]\n\n\ndef generate_unique_name():\n    adjective = random.choice(adjectives)\n    noun = random.choice(trees)\n    number = random.randint(100, 999)\n    return f\"{adjective} {noun} {number}\"\n\n\ndef add_node_helper(request, product_area, context):\n    form = mgt_forms.ProductAreaForm(request.POST)\n    if not form.is_valid():\n        return JsonResponse({\"error\": \"Something went wrong.\"}, status=400)\n\n    context[\"node\"] = [common_utils.serialize_tree(product_area.add_child(**form.cleaned_data))]\n    context[\"parent\"] = product_area\n    context[\"depth\"] = int(request.POST.get(\"depth\", 0))\n    context[\"margin_left\"] = int(request.POST.get(\"margin_left\", 0))\n    context[\"can_modify_product\"] = True\n    return render(request, \"product_tree/components/partials/add_node_partial.html\", context)\n\n\ndef update_node_helper(request, product_area):\n    form = mgt_forms.ProductAreaForm(request.POST)\n    has_dropped = bool(request.POST.get(\"has_dropped\", False))\n    parent_id = request.POST.get(\"parent_id\")\n    has_cancelled = bool(request.POST.get(\"cancelled\", False))\n\n    if not has_cancelled and has_dropped and parent_id:\n        parent = mgt.ProductArea.objects.get(pk=parent_id)\n        product_area.move(parent, \"last-child\")\n        talent_target_parent = product_area.get_parent() or 0\n        context = {\n            \"child_count\": (\n                talent_target_parent.get_children_count() if isinstance(talent_target_parent, mgt.ProductArea) else 0\n            ),\n            \"target_parent_id\": talent_target_parent.id if talent_target_parent else None,\n        }\n        return JsonResponse(context)\n\n    if not has_cancelled and form.is_valid():\n        product_area.name = form.cleaned_data[\"name\"]\n        product_area.description = form.cleaned_data[\"description\"]\n        product_area.save()\n\n    context = {\n        \"product_area\": product_area,\n        \"parent_id\": parent_id or 0,\n        \"node\": [common_utils.serialize_tree(product_area)],\n        \"depth\": int(request.POST.get(\"depth\", 0)),\n        \"can_modify_product\": True,\n    }\n    return render(request, \"product_tree/components/partials/add_node_partial.html\", context)\n\n\ndef add_root_node_helper(request, tree_id, context):\n    form = mgt_forms.ProductAreaForm(request.POST)\n    if not form.is_valid():\n        return JsonResponse({\"error\": \"Something went wrong.\"}, status=400)\n\n    product_area = mgt.ProductArea.add_root(**form.cleaned_data, product_tree_id=tree_id)\n    context[\"product_area\"] = product_area\n    context[\"depth\"] = int(request.POST.get(\"depth\", 0)) + 1\n    context[\"margin_left\"] = int(request.POST.get(\"margin_left\", 0))\n    context[\"can_modify_product\"] = True\n    context[\"node\"] = [common_utils.serialize_tree(product_area)]\n    context[\"id\"] = product_area.pk\n    return render(request, \"product_tree/components/partials/add_node_partial.html\", context)\n\n\ndef shareable_tree_helper(request, product_tree, show_share_button=False):\n    domain = f\"{request.scheme}://{request.get_host()}\"\n    return {\n        \"can_modify_product\": True,\n        \"product_tree\": product_tree,\n        \"sharable_link\": f\"{domain}/product-tree/share/{product_tree.pk}\",\n        \"tree_data\": [common_utils.serialize_tree(node) for node in product_tree.product_areas.filter(depth=1)],\n        \"show_share_button\": show_share_button,\n        \"margin_left\": int(request.GET.get(\"margin_left\", 0)),\n        \"depth\": int(request.GET.get(\"depth\", 0)),\n    }\n"}
{"type": "source_file", "path": "apps/capabilities/ai_factory/__init__.py", "content": ""}
{"type": "source_file", "path": "apps/canopy/migrations/__init__.py", "content": ""}
{"type": "source_file", "path": "analyse_templates.py", "content": "import os\nimport hashlib\nfrom collections import defaultdict\nfrom django.conf import settings\nfrom django.template.loaders.app_directories import get_app_template_dirs\n\ndef get_file_hash(filepath):\n    \"\"\"Generate hash of file contents to identify true duplicates.\"\"\"\n    with open(filepath, 'rb') as f:\n        return hashlib.md5(f.read()).hexdigest()\n\ndef get_template_dirs():\n    \"\"\"Get Django template directories in order of precedence.\"\"\"\n    template_dirs = []\n    \n    # Get directories from settings.TEMPLATES\n    for template_setting in settings.TEMPLATES:\n        template_dirs.extend(template_setting.get('DIRS', []))\n        \n        # Add app template directories if APP_DIRS is True\n        if template_setting.get('APP_DIRS', False):\n            template_dirs.extend(get_app_template_dirs('templates'))\n    \n    return template_dirs\n\ndef analyze_templates():\n    # Store templates by their content hash\n    content_duplicates = defaultdict(list)\n    # Store templates by their name\n    name_duplicates = defaultdict(list)\n    \n    template_dirs = get_template_dirs()\n    \n    # Walk through all template directories\n    for root, _, files in os.walk(\"./apps\"):\n        for filename in files:\n            if filename.endswith('.html'):\n                filepath = os.path.join(root, filename)\n                try:\n                    content_hash = get_file_hash(filepath)\n                    content_duplicates[content_hash].append(filepath)\n                    name_duplicates[filename].append(filepath)\n                except Exception as e:\n                    print(f\"Error processing {filepath}: {e}\")\n\n    print(\"=== Content-identical templates ===\")\n    for content_hash, paths in content_duplicates.items():\n        if len(paths) > 1:\n            print(f\"\\nIdentical content in {len(paths)} files:\")\n            # Sort paths by template directory precedence\n            sorted_paths = sorted(paths, \n                key=lambda p: next((i for i, d in enumerate(template_dirs) \n                                  if p.startswith(str(d))), len(template_dirs)))\n            \n            for i, path in enumerate(sorted_paths):\n                status = \"USED\" if i == 0 else \"SHADOWED\"\n                print(f\"- [{status}] {path}\")\n\n    print(\"\\n=== Similarly named templates ===\")\n    for name, paths in name_duplicates.items():\n        if len(paths) > 1:\n            print(f\"\\n{name} appears in {len(paths)} locations:\")\n            # Check if contents are different\n            hashes = {get_file_hash(p): p for p in paths}\n            if len(hashes) > 1:\n                print(\"(!) Different content in files with same name:\")\n                sorted_paths = sorted(paths, \n                    key=lambda p: next((i for i, d in enumerate(template_dirs) \n                                      if p.startswith(str(d))), len(template_dirs)))\n                for i, path in enumerate(sorted_paths):\n                    status = \"USED\" if i == 0 else \"SHADOWED\"\n                    print(f\"- [{status}] {path}\")\n            else:\n                print(\"(Same content in all locations)\")\n                for path in paths:\n                    print(f\"- {path}\")\n\nif __name__ == \"__main__\":\n    # Set up Django environment\n    import django\n    import sys\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"apps.common.settings.development\")\n    sys.path.extend([os.path.dirname(os.path.dirname(os.path.abspath(__file__)))])\n    django.setup()\n    \n    analyze_templates()"}
{"type": "source_file", "path": "apps/capabilities/ai_factory/migrations/__init__.py", "content": ""}
{"type": "source_file", "path": "apps/capabilities/ai_factory/apps.py", "content": "from django.apps import AppConfig\n\n\nclass AiFactoryConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'ai_factory'\n"}
{"type": "source_file", "path": "apps/capabilities/commerce/models.py", "content": "from django.contrib.contenttypes.fields import GenericRelation\nfrom django.core.validators import RegexValidator\nfrom django.db import models\n\nfrom apps.common.mixins import TimeStampMixin, UUIDMixin\nfrom apps.capabilities.product_management.models import Product\n\nfrom . import utils\n\n\nclass Organisation(TimeStampMixin):\n    username = models.CharField(\n        max_length=39,\n        unique=True,\n        default=\"\",\n        validators=[\n            RegexValidator(\n                regex=\"^[a-z0-9]*$\",\n                message=\"Username may only contain letters and numbers\",\n                code=\"invalid_username\",\n            )\n        ],\n    )\n    name = models.CharField(max_length=512, unique=True)\n    products = GenericRelation(Product)\n    photo = models.ImageField(upload_to=\"avatars/\", null=True, blank=True)\n\n    class Meta:\n        verbose_name_plural = \"Organisations\"\n\n    def get_username(self):\n        return self.username\n\n    def __str__(self):\n        return self.name\n\n\nclass OrganisationAccountCredit(TimeStampMixin, UUIDMixin):\n    organisation_account = models.ForeignKey(to=\"OrganisationAccount\", on_delete=models.CASCADE)\n    number_of_points = models.PositiveIntegerField()\n    type_of_points = models.IntegerField(choices=utils.PointTypes.choices(), default=utils.PointTypes.NONLIQUID)\n    credit_reason = models.IntegerField(\n        choices=utils.OrganisationAccountCreditReasons.choices(),\n        default=utils.OrganisationAccountCreditReasons.GRANT,\n    )\n\n\nclass OrganisationAccount(models.Model):\n    organisation = models.ForeignKey(to=\"Organisation\", on_delete=models.CASCADE)\n    liquid_points_balance = models.PositiveBigIntegerField()\n    nonliquid_points_balance = models.PositiveBigIntegerField()\n\n\nclass Cart(TimeStampMixin, UUIDMixin):\n    organisation_account = models.ForeignKey(OrganisationAccount, on_delete=models.CASCADE)\n    creator = models.ForeignKey(to=\"talent.Person\", on_delete=models.CASCADE)\n    number_of_points = models.IntegerField(default=500)\n    currency_of_payment = models.IntegerField(choices=utils.CurrencyTypes.choices(), default=utils.CurrencyTypes.USD)\n    price_per_point_in_cents = models.IntegerField()\n    subtotal_in_cents = models.PositiveBigIntegerField()\n    sales_tax_in_cents = models.PositiveBigIntegerField()\n    total_payable_in_cents = models.PositiveBigIntegerField()\n    payment_type = models.IntegerField(choices=utils.PaymentTypes.choices(), default=utils.PaymentTypes.ONLINE)\n\n\nclass Grant(models.Model):\n    organisation_account = models.ForeignKey(OrganisationAccount, on_delete=models.CASCADE)\n    nominating_bee_keeper = models.ForeignKey(to=\"talent.Person\", on_delete=models.CASCADE, related_name=\"nominator\")\n    approving_bee_keeper = models.ForeignKey(to=\"talent.Person\", on_delete=models.CASCADE, related_name=\"approver\")\n    description = models.TextField(max_length=1024)\n    number_of_points = models.IntegerField(default=500)\n    status = models.IntegerField(\n        choices=utils.LifecycleStatusOptions.choices(),\n        default=utils.LifecycleStatusOptions.NEW,\n    )\n    organisation_account_credit = models.ForeignKey(\n        to=\"OrganisationAccountCredit\", on_delete=models.CASCADE, null=True\n    )\n\n    def mark_points_as_granted(self, credit):\n        self.organisation_account_credit = credit\n        self.status = utils.LifecycleStatusOptions.COMPLETE\n        self.save()\n\n\nclass SalesOrder(TimeStampMixin, UUIDMixin):\n    organisation_account = models.ForeignKey(OrganisationAccount, on_delete=models.CASCADE)\n    organisation_account_credit = models.ForeignKey(\n        to=\"OrganisationAccountCredit\", on_delete=models.CASCADE, null=True\n    )\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)\n    number_of_points = models.IntegerField()\n    currency_of_payment = models.IntegerField(choices=utils.CurrencyTypes.choices(), default=utils.CurrencyTypes.USD)\n    price_per_point_in_cents = models.IntegerField()\n    subtotal_in_cents = models.PositiveBigIntegerField()\n    sales_tax_in_cents = models.PositiveBigIntegerField()\n    total_payable_in_cents = models.PositiveBigIntegerField()\n    payment_type = models.IntegerField(choices=utils.PaymentTypes.choices(), default=utils.PaymentTypes.ONLINE)\n    payment_status = models.IntegerField(\n        choices=utils.PaymentStatusOptions.choices(),\n        default=utils.PaymentStatusOptions.PENDING,\n    )\n    process_status = models.IntegerField(\n        choices=utils.LifecycleStatusOptions.choices(),\n        default=utils.LifecycleStatusOptions.NEW,\n    )\n\n\nclass InboundPayment(TimeStampMixin, UUIDMixin):\n    sales_order = models.ForeignKey(SalesOrder, on_delete=models.CASCADE)\n    payment_type = models.IntegerField(choices=utils.PaymentTypes.choices(), default=utils.PaymentTypes.ONLINE)\n    currency_of_payment = models.IntegerField(choices=utils.CurrencyTypes.choices(), default=utils.CurrencyTypes.USD)\n    amount_paid_in_cents = models.PositiveBigIntegerField()\n    transaction_detail = models.TextField(max_length=1024)\n\n\nclass OrganisationAccountDebit(TimeStampMixin, UUIDMixin):\n    DebitReason = (\n        (1, \"TRANSFER\"),\n        (2, \"EXPIRY\"),\n    )\n    organisation_account = models.ForeignKey(to=\"OrganisationAccount\", on_delete=models.CASCADE)\n    number_of_points = models.PositiveIntegerField\n    type_of_points = models.IntegerField(choices=utils.PointTypes.choices(), default=utils.PointTypes.NONLIQUID)\n    debit_reason = models.IntegerField(choices=DebitReason, default=0)\n\n\nclass ProductAccount(models.Model):\n    product = models.ForeignKey(to=\"product_management.Product\", on_delete=models.CASCADE)\n    liquid_points_balance = models.PositiveBigIntegerField()\n    nonliquid_points_balance = models.PositiveBigIntegerField()\n\n\nclass ProductAccountCredit(TimeStampMixin, UUIDMixin):\n    # each product account credit has a matching organisation account debit\n    organisation_account_debit = models.ForeignKey(OrganisationAccountDebit, on_delete=models.CASCADE)\n    product_account = models.ForeignKey(ProductAccount, on_delete=models.CASCADE)\n    number_of_points = models.PositiveIntegerField()\n    type_of_points = models.IntegerField(choices=utils.PointTypes.choices(), default=utils.PointTypes.NONLIQUID)\n    actioned_by = models.ForeignKey(to=\"talent.Person\", on_delete=models.CASCADE)\n\n\nclass ProductAccountReservation(TimeStampMixin, UUIDMixin):\n    bounty_claim = models.ForeignKey(to=\"talent.BountyClaim\", on_delete=models.CASCADE)\n    number_of_points = models.PositiveIntegerField()\n    type_of_points = models.IntegerField(choices=utils.PointTypes.choices(), default=utils.PointTypes.NONLIQUID)\n\n\nclass ProductAccountDebit(TimeStampMixin, UUIDMixin):\n    bounty_claim = models.ForeignKey(to=\"talent.BountyClaim\", on_delete=models.CASCADE)\n    number_of_points = models.PositiveIntegerField()\n    type_of_points = models.IntegerField(choices=utils.PointTypes.choices(), default=utils.PointTypes.NONLIQUID)\n\n\nclass ContributorAccount(models.Model):\n    owner = models.ForeignKey(to=\"talent.Person\", on_delete=models.CASCADE)\n    community_status = models.IntegerField(\n        choices=utils.CommunityStatusOptions.choices(),\n        default=utils.CommunityStatusOptions.DRONE,\n    )\n    liquid_points_balance = models.PositiveBigIntegerField(default=0)\n    nonliquid_points_balance = models.PositiveBigIntegerField(default=0)\n\n\nclass PaymentOrder(TimeStampMixin, UUIDMixin):\n    contributor_account = models.ForeignKey(ContributorAccount, on_delete=models.CASCADE)\n    currency_of_payment = models.IntegerField(choices=utils.CurrencyTypes.choices(), default=utils.CurrencyTypes.USD)\n    subtotal_in_cents = models.PositiveBigIntegerField()\n    sales_tax_in_cents = models.PositiveBigIntegerField()\n    total_payable_in_cents = models.PositiveBigIntegerField()\n    PaymentType = (\n        (1, \"PARTNER\"),\n        (2, \"BANK TRANSFER\"),\n    )\n    payment_type = models.IntegerField(choices=PaymentType, default=0)\n    status = models.IntegerField(\n        choices=utils.LifecycleStatusOptions.choices(),\n        default=utils.LifecycleStatusOptions.NEW,\n    )\n\n\nclass OutboundPayment(TimeStampMixin, UUIDMixin):\n    payment_order = models.ForeignKey(PaymentOrder, on_delete=models.CASCADE)\n    details = models.TextField(max_length=1024)\n\n\nclass ContributorReward(TimeStampMixin, UUIDMixin):\n    RewardedActions = (\n        (1, \"INVITED FRIENDS\"),\n        (2, \"VERIFIED IDENTITY\"),\n    )\n    contributor_account = models.ForeignKey(ContributorAccount, on_delete=models.CASCADE)\n    action = models.IntegerField(choices=RewardedActions, default=0)\n    points = models.IntegerField(default=10)\n\n\nclass ContributorAccountCredit(TimeStampMixin, UUIDMixin):\n    CreditReason = ((1, \"BOUNTY\"), (2, \"LIQUIDATION\"), (3, \"REWARD\"))\n    reason = models.IntegerField(choices=CreditReason, default=0)\n    bounty_claim = models.ForeignKey(to=\"talent.BountyClaim\", on_delete=models.CASCADE)\n    contributor_account = models.ForeignKey(ContributorAccount, on_delete=models.CASCADE)\n    number_of_points = models.PositiveIntegerField()\n    type_of_points = models.IntegerField(choices=utils.PointTypes.choices(), default=utils.PointTypes.NONLIQUID)\n    # when liquid points are cashed out, then an equivalent credit of nonliquid points is granted\n    payment_order = models.ForeignKey(PaymentOrder, on_delete=models.CASCADE)\n    # only applicable if credit is a reward\n    contributor_reward = models.ForeignKey(ContributorReward, on_delete=models.CASCADE)\n\n\nclass ContributorAccountDebit(TimeStampMixin, UUIDMixin):\n    DebitReason = (\n        (1, \"LIQUIDATION\"),\n        (2, \"PUNISHMENT\"),\n    )\n    reason = models.IntegerField(choices=DebitReason, default=0)\n    contributor_account = models.ForeignKey(ContributorAccount, on_delete=models.CASCADE)\n    number_of_points = models.PositiveIntegerField()\n    type_of_points = models.IntegerField(choices=utils.PointTypes.choices(), default=utils.PointTypes.NONLIQUID)\n    payment_order = models.ForeignKey(PaymentOrder, on_delete=models.CASCADE)\n\n\nclass PointPriceConfiguration(TimeStampMixin, UUIDMixin):\n    applicable_from_date = models.DateField()\n    usd_point_inbound_price_in_cents = models.IntegerField()\n    eur_point_inbound_price_in_cents = models.IntegerField()\n    gbp_point_inbound_price_in_cents = models.IntegerField()\n    usd_point_outbound_price_in_cents = models.IntegerField()\n    eur_point_outbound_price_in_cents = models.IntegerField()\n    gbp_point_outbound_price_in_cents = models.IntegerField()\n"}
{"type": "source_file", "path": "apps/capabilities/commerce/admin.py", "content": "from django.contrib import admin\nfrom .models import Organisation\n\n@admin.register(Organisation)\nclass OrganisationAdmin(admin.ModelAdmin):\n    list_display = ('name',)\n    search_fields = ('name',)\n    ordering = ('name',)\n\n    def get_search_results(self, request, queryset, search_term):\n        queryset, use_distinct = super().get_search_results(request, queryset, search_term)\n        return queryset, use_distinct\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/__init__.py", "content": ""}
{"type": "source_file", "path": "apps/capabilities/commerce/__init__.py", "content": ""}
{"type": "source_file", "path": "apps/capabilities/ai_factory/views.py", "content": "from django.shortcuts import render\n\n# Create your views here.\n"}
{"type": "source_file", "path": "apps/canopy/urls.py", "content": "from django.urls import path\n\nfrom . import views\n\napp_name = \"canopy\"\nurlpatterns = [\n    path(\"\", views.introduction, name=\"introduction\"),\n    path(\"chapter-1/\", views.chapter1, name=\"chapter1\"),\n    path(\"update-node/<int:pk>\", views.update_node, name=\"update_node\"),\n    path(\"add-node/<str:tree_id>/root\", views.add_root_node, name=\"add_node_root\"),\n    path(\"add-node/<int:parent_id>/child\", views.add_node, name=\"add_node\"),\n    path(\"delete-node/<int:pk>\", views.delete_node, name=\"delete_node\"),\n]\n"}
{"type": "source_file", "path": "apps/capabilities/commerce/services.py", "content": "import datetime\nimport logging\n\nfrom django.db import transaction\nfrom django.db.models import Sum\n\nfrom apps.capabilities.commerce.utils import CurrencyTypes, LifecycleStatusOptions, PaymentStatusOptions, PaymentTypes\n\nfrom .models import (\n    Cart,\n    InboundPayment,\n    Organisation,\n    OrganisationAccount,\n    OrganisationAccountCredit,\n    OrganisationAccountCreditReasons,\n    PointPriceConfiguration,\n    PointTypes,\n    SalesOrder,\n)\n\nlogger = logging.getLogger(__name__)\n\n\nclass OrganisationService:\n    @transaction.atomic\n    def update(self, id: int, name: str) -> Organisation:\n        try:\n            organisation = Organisation.objects.get(pk=id)\n            organisation.name = name\n            organisation.save()\n            return organisation\n        except Organisation.DoesNotExist as e:\n            logger.error(f\"Failed to update Organisation due to: {e}\")\n            return None\n\n    @transaction.atomic\n    def delete(self, id: int) -> bool:\n        try:\n            organisation = Organisation.objects.get(pk=id)\n            organisation.delete()\n            return True\n        except Organisation.DoesNotExist as e:\n            logger.error(f\"Failed to delete Organisation due to: {e}\")\n            return False\n\n\nclass OrganisationAccountService:\n    # @transaction.atomic\n    # def create(\n    #     self,\n    #     organisation: Organisation,\n    #     liquid_points_balance: int,\n    #     nonliquid_points_balance: int,\n    # ) -> OrganisationAccount:\n    #     organisation_account = OrganisationAccount(\n    #         organisation=organisation,\n    #         liquid_points_balance=liquid_points_balance,\n    #         nonliquid_points_balance=nonliquid_points_balance,\n    #     )\n    #     organisation_account.save()\n    #     return organisation_account\n\n    @transaction.atomic\n    def update(\n        self,\n        id: int,\n        organisation: Organisation,\n        liquid_points_balance: int,\n        nonliquid_points_balance: int,\n    ):\n        try:\n            organisation_account = OrganisationAccount.objects.get(pk=id)\n            organisation_account.organisation = organisation\n            organisation_account.liquid_points_balance = liquid_points_balance\n            organisation_account.nonliquid_points_balance = nonliquid_points_balance\n            organisation_account.save()\n            return organisation_account\n        except OrganisationAccount.DoesNotExist as e:\n            logger.error(f\"Failed to update OrganisationAccount due to: {e}\")\n\n    @transaction.atomic\n    def delete(self, id: int) -> bool:\n        try:\n            organisation_account = OrganisationAccount.objects.get(pk=id)\n            organisation_account.delete()\n\n            return True\n        except OrganisationAccount.DoesNotExist as e:\n            logger.error(f\"Failed to delete OrganisationAccount due to: {e}\")\n            return False\n\n    @staticmethod\n    def credit(account: OrganisationAccount, granting_object: object) -> None:\n        credit_reason = OrganisationAccountCreditReasons.GRANT\n        type_of_points = PointTypes.NONLIQUID\n\n        if (granting_object.__class__.__name__.lower()) == \"salesorder\":\n            credit_reason = OrganisationAccountCreditReasons.SALE\n            type_of_points = PointTypes.LIQUID\n\n        # only grant points if granting_object has no existing related credit\n        if not granting_object.organisation_account_credit:\n            organisation_account_credit_service = OrganisationAccountCreditService()\n            credit = organisation_account_credit_service.create(\n                organisation_account=account,\n                number_of_points=granting_object.number_of_points,\n                credit_reason=credit_reason,\n                type_of_points=type_of_points,\n            )\n            OrganisationAccountService._recalculate_balances(account)\n            granting_object.mark_points_as_granted(credit)\n\n    @staticmethod\n    def _recalculate_balances(account: OrganisationAccount) -> None:\n        nonliquid_credits = (\n            OrganisationAccountCredit.objects.filter(\n                organisation_account=account,\n                type_of_points=PointTypes.NONLIQUID,\n            ).aggregate(Sum(\"number_of_points\"))[\"number_of_points__sum\"]\n            or 0\n        )\n        nonliquid_debits = 0\n        account.nonliquid_points_balance = nonliquid_credits - nonliquid_debits\n\n        liquid_credits = (\n            OrganisationAccountCredit.objects.filter(\n                organisation_account=account, type_of_points=PointTypes.LIQUID\n            ).aggregate(Sum(\"number_of_points\"))[\"number_of_points__sum\"]\n            or 0\n        )\n        liquid_debits = 0\n        account.liquid_points_balance = liquid_credits - liquid_debits\n\n        account.save()\n\n\nclass OrganisationAccountCreditService:\n    # @transaction.atomic\n    # def create(\n    #     self, organisation_account: OrganisationAccount, number_of_points: int\n    # ) -> OrganisationAccountCredit:\n    #     org_acc_credit = OrganisationAccountCredit(\n    #         organisation_account=organisation_account, number_of_points=number_of_points\n    #     )\n    #     org_acc_credit.save()\n    #     return org_acc_credit\n\n    @transaction.atomic\n    def update(\n        self,\n        id: int,\n        organisation_account: OrganisationAccount,\n        number_of_points: int,\n        type_of_points: PointTypes,\n        credit_reason: OrganisationAccountCreditReasons,\n    ) -> OrganisationAccountCredit:\n        org_acc_credit = OrganisationAccountCredit.objects.get(pk=id)\n        org_acc_credit.organisation_account = organisation_account\n        org_acc_credit.number_of_points = number_of_points\n        org_acc_credit.type_of_points = type_of_points\n        org_acc_credit.credit_reason = credit_reason\n        org_acc_credit.save()\n\n    @transaction.atomic\n    def delete(self, id: int) -> bool:\n        try:\n            org_acc_credit = OrganisationAccountCredit.objects.get(pk=id)\n            org_acc_credit.delete()\n        except OrganisationAccountCredit.DoesNotExist as e:\n            logger.error(f\"Failed to delete OrganisationAccountCredit due to: {e}\")\n            return False\n\n\nclass CartService:\n    @staticmethod\n    def create(**kwargs):\n        currency_of_payment = kwargs.get(\"current_of_payment\", None)\n        if not currency_of_payment:\n            currency_of_payment = Cart.currency_of_payment.field.default\n\n        price_per_point_in_cents = CartService._get_point_inbound_price_in_cents(currency_of_payment)\n\n        number_of_points = kwargs.get(\"number_of_points\", None)\n        if not number_of_points:\n            number_of_points = Cart.number_of_points.field.default\n\n        subtotal_in_cents = number_of_points * price_per_point_in_cents\n        sales_tax_in_cents = 0  # TODO: create logic for sales tax based on org account\n        total_payable_in_cents = subtotal_in_cents + sales_tax_in_cents\n\n        kwargs[\"subtotal_in_cents\"] = subtotal_in_cents\n        kwargs[\"sales_tax_in_cents\"] = sales_tax_in_cents\n        kwargs[\"total_payable_in_cents\"] = total_payable_in_cents\n        kwargs[\"price_per_point_in_cents\"] = price_per_point_in_cents\n\n        cart = Cart(**kwargs)\n        cart.save()\n\n        return cart\n\n    # @transaction.atomic\n    # def create(\n    #     self,\n    #     organisation_account: OrganisationAccount,\n    #     creator: Person,\n    #     number_of_points: int,\n    #     currency_of_payment: CurrencyTypes,\n    #     payment_type: PaymentTypes,\n    # ) -> Cart:\n    #     price_per_point_in_cents = self._get_point_inbound_price_in_cents(\n    #         currency_of_payment\n    #     )\n    #     subtotal_in_cents = number_of_points * price_per_point_in_cents\n    #     sales_tax_in_cents = 0  # TODO: create logic for sales tax based on org account\n    #     total_payable_in_cents = subtotal_in_cents + sales_tax_in_cents\n\n    #     cart = Cart(\n    #         organisation_account=organisation_account,\n    #         creator=creator,\n    #         number_of_points=number_of_points,\n    #         currency_of_payment=currency_of_payment,\n    #         payment_type=payment_type,\n    #         price_per_point_in_cents=price_per_point_in_cents,\n    #         subtotal_in_cents=subtotal_in_cents,\n    #         sales_tax_in_cents=sales_tax_in_cents,\n    #         total_payable_in_cents=total_payable_in_cents,\n    #     )\n    #     cart.save()\n\n    #     return cart\n\n    @transaction.atomic\n    def delete(self, id: int) -> bool:\n        try:\n            cart = Cart.objects.get(pk=id)\n            cart.delete()\n            return True\n        except Cart.DoesNotExist as e:\n            logger.error(f\"Failed to delete OrganisationAccountCredit due to: {e}\")\n            return False\n\n    @staticmethod\n    def _get_point_inbound_price_in_cents(currency: CurrencyTypes) -> int:\n        conversion_rate_queryset = PointPriceConfiguration.objects.filter(\n            applicable_from_date__lte=datetime.date.today()\n        ).order_by(\"-created_at\")\n        conversion_rates = conversion_rate_queryset.first()\n\n        if currency == CurrencyTypes.USD:\n            return conversion_rates.usd_point_inbound_price_in_cents\n        elif currency == CurrencyTypes.EUR:\n            return conversion_rates.eur_point_inbound_price_in_cents\n        elif currency == CurrencyTypes.GBP:\n            return conversion_rates.gbp_point_inbound_price_in_cents\n        else:\n            raise ValueError(\"No conversion rate for given currency.\", currency)\n\n\nclass SalesOrderService:\n    @transaction.atomic\n    def create(\n        self,\n        organisation_account: OrganisationAccount,\n        organisation_account_credit: OrganisationAccountCredit,\n        cart: Cart,\n        number_of_points: int,\n        currency_of_payments: CurrencyTypes,\n        price_per_point_in_cents: int,\n        subtotal_in_cents: int,\n        sales_tax_in_cents: int,\n        total_payable_in_cents: int,\n        payment_type: PaymentTypes,\n        payment_status: PaymentStatusOptions,\n        process_status: LifecycleStatusOptions,\n    ) -> SalesOrder:\n        sales_order = SalesOrder(\n            organisation_account=organisation_account,\n            organisation_account_credit=organisation_account_credit,\n            cart=cart,\n            number_of_points=number_of_points,\n            currency_of_payments=currency_of_payments,\n            price_per_point_in_cents=price_per_point_in_cents,\n            subtotal_in_cents=subtotal_in_cents,\n            sales_tax_in_cents=sales_tax_in_cents,\n            total_payable_in_cents=total_payable_in_cents,\n            payment_type=payment_type,\n            payment_status=payment_status,\n            process_status=process_status,\n        )\n        sales_order.save()\n\n        return sales_order\n\n    @transaction.atomic\n    def update(\n        self,\n        id: int,\n        organisation_account: OrganisationAccount,\n        organisation_account_credit: OrganisationAccountCredit,\n        cart: Cart,\n        number_of_points: int,\n        currency_of_payments: CurrencyTypes,\n        price_per_point_in_cents: int,\n        subtotal_in_cents: int,\n        sales_tax_in_cents: int,\n        total_payable_in_cents: int,\n        payment_type: PaymentTypes,\n        payment_status: PaymentStatusOptions,\n        process_status: LifecycleStatusOptions,\n    ) -> SalesOrder:\n        try:\n            sales_order = SalesOrder.objects.get(pk=id)\n            sales_order.organisation_account = organisation_account\n            sales_order.organisation_account_credit = organisation_account_credit\n            sales_order.cart = cart\n            sales_order.number_of_points = number_of_points\n            sales_order.currency_of_payments = currency_of_payments\n            sales_order.price_per_point_in_cents = price_per_point_in_cents\n            sales_order.subtotal_in_cents = subtotal_in_cents\n            sales_order.sales_tax_in_cents = sales_tax_in_cents\n            sales_order.total_payable_in_cents = total_payable_in_cents\n            sales_order.payment_type = payment_type\n            sales_order.payment_status = payment_status\n            sales_order.process_status = process_status\n\n            sales_order.save()\n\n            return sales_order\n        except SalesOrder.DoesNotExist as e:\n            logger.error(f\"Failed to update SalesOrder due to: {e}\")\n            return None\n\n    @transaction.atomic\n    def create_from_cart(self, cart: Cart) -> SalesOrder:\n        sales_order = SalesOrder(\n            organisation_account=cart.organisation_account,\n            cart=cart,\n            number_of_points=cart.number_of_points,\n            currency_of_payment=cart.currency_of_payment,\n            price_per_point_in_cents=cart.price_per_point_in_cents,\n            subtotal_in_cents=cart.subtotal_in_cents,\n            payment_type=cart.payment_type,\n            sales_tax_in_cents=cart.sales_tax_in_cents,\n            total_payable_in_cents=cart.total_payable_in_cents,\n        )\n        sales_order.save()\n\n        return sales_order\n\n    @transaction.atomic\n    def delete(self, id: int) -> bool:\n        try:\n            sales_order = SalesOrder.objects.get(pk=id)\n            sales_order.delete()\n        except SalesOrder.DoesNotExist as e:\n            logger.error(f\"Failed to delete SalesOrder due to: {e}\")\n\n    def register_payment(\n        self,\n        sales_order: SalesOrder,\n        currency_of_payment: CurrencyTypes,\n        amount_paid_in_cents: int,\n        detail: str,\n    ):\n        payment = InboundPayment.objects.create(\n            sales_order=sales_order,\n            payment_type=sales_order.payment_type,\n            currency_of_payment=currency_of_payment,\n            amount_paid_in_cents=amount_paid_in_cents,\n            transaction_detail=detail,\n        )\n        if self._is_paid_in_full(sales_order, currency_of_payment):\n            sales_order.payment_status = PaymentStatusOptions.PAID\n            sales_order.save\n            # credit points to organisation account\n            OrganisationAccountService.credit(self)\n\n        return payment\n\n    def _is_paid_in_full(self, sales_order: SalesOrder, currency_of_payment: CurrencyTypes) -> bool:\n        total_paid_in_cents = InboundPayment.objects.filter(\n            sales_order=sales_order, currency_of_payment=currency_of_payment\n        ).aggregate(Sum(\"amount_paid_in_cents\"))[\"amount_paid_in_cents__sum\"]\n        if total_paid_in_cents == self.total_payable_in_cents:\n            return True\n        else:\n            return False\n\n    @staticmethod\n    def mark_points_as_granted(sales_order, credit):\n        sales_order.organisation_account_credit = credit\n        sales_order.process_status = LifecycleStatusOptions.COMPLETE\n        sales_order.save()\n\n\nclass PointPriceConfigurationService:\n    @transaction.atomic\n    def create(\n        self,\n        applicable_from_date: datetime.date,\n        usd_point_inbound_price_in_cents: int,\n        eur_point_inbound_price_in_cents: int,\n        gbp_point_inbound_price_in_cents: int,\n        usd_point_outbound_price_in_cents: int,\n        eur_point_outbound_price_in_cents: int,\n        gbp_point_outbound_price_in_cents: int,\n    ) -> PointPriceConfiguration:\n        if not self._is_profitable(\n            usd_point_inbound_price_in_cents,\n            usd_point_outbound_price_in_cents,\n            eur_point_inbound_price_in_cents,\n            eur_point_outbound_price_in_cents,\n            gbp_point_inbound_price_in_cents,\n            gbp_point_outbound_price_in_cents,\n        ):\n            logger.error(\n                \"A non-profitable PointPriceConfiguration is tried to be created. No configuration is created.\"\n            )\n            return None\n\n        point_price_config = PointPriceConfiguration(\n            applicable_from_date=applicable_from_date,\n            usd_point_inbound_price_in_cents=usd_point_inbound_price_in_cents,\n            eur_point_inbound_price_in_cents=eur_point_inbound_price_in_cents,\n            gbp_point_inbound_price_in_cents=gbp_point_inbound_price_in_cents,\n            usd_point_outbound_price_in_cents=usd_point_outbound_price_in_cents,\n            eur_point_outbound_price_in_cents=eur_point_outbound_price_in_cents,\n            gbp_point_outbound_price_in_cents=gbp_point_outbound_price_in_cents,\n        )\n        point_price_config.save()\n        return point_price_config\n\n    @transaction.atomic\n    def update(\n        self,\n        id: int,\n        applicable_from_date: datetime.date = None,\n        usd_point_inbound_price_in_cents: int = None,\n        eur_point_inbound_price_in_cents: int = None,\n        gbp_point_inbound_price_in_cents: int = None,\n        usd_point_outbound_price_in_cents: int = None,\n        eur_point_outbound_price_in_cents: int = None,\n        gbp_point_outbound_price_in_cents: int = None,\n    ) -> PointPriceConfiguration:\n        try:\n            point_price_config = self.get(id)\n        except PointPriceConfiguration.DoesNotExist as e:\n            logger.error(f\"Failed to update SalesOrder due to: {e}\")\n            return None\n\n        if not self._is_profitable(\n            usd_point_inbound_price_in_cents,\n            usd_point_outbound_price_in_cents,\n            eur_point_inbound_price_in_cents,\n            eur_point_outbound_price_in_cents,\n            gbp_point_inbound_price_in_cents,\n            gbp_point_outbound_price_in_cents,\n        ):\n            logger.error(\n                \"A non-profitable PointPriceConfiguration is tried to be updated. No configuration is updated.\"\n            )\n            return None\n\n        if applicable_from_date is not None:\n            point_price_config.applicable_from_date = applicable_from_date\n        if usd_point_inbound_price_in_cents is not None:\n            point_price_config.usd_point_inbound_price_in_cents = usd_point_inbound_price_in_cents\n        if eur_point_inbound_price_in_cents is not None:\n            point_price_config.eur_point_inbound_price_in_cents = eur_point_inbound_price_in_cents\n        if gbp_point_inbound_price_in_cents is not None:\n            point_price_config.gbp_point_inbound_price_in_cents = gbp_point_inbound_price_in_cents\n        if usd_point_outbound_price_in_cents is not None:\n            point_price_config.usd_point_outbound_price_in_cents = usd_point_outbound_price_in_cents\n        if eur_point_outbound_price_in_cents is not None:\n            point_price_config.eur_point_outbound_price_in_cents = eur_point_outbound_price_in_cents\n        if gbp_point_outbound_price_in_cents is not None:\n            point_price_config.gbp_point_outbound_price_in_cents = gbp_point_outbound_price_in_cents\n\n        point_price_config.save()\n        return point_price_config\n\n    def _is_profitable(\n        self,\n        usd_point_inbound_price_in_cents,\n        usd_point_outbound_price_in_cents,\n        eur_point_inbound_price_in_cents,\n        eur_point_outbound_price_in_cents,\n        gbp_point_inbound_price_in_cents,\n        gbp_point_outbound_price_in_cents,\n    ):\n        profitable = True\n        if usd_point_inbound_price_in_cents < usd_point_outbound_price_in_cents:\n            profitable = False\n\n        if eur_point_inbound_price_in_cents < eur_point_outbound_price_in_cents:\n            profitable = False\n\n        if gbp_point_inbound_price_in_cents < gbp_point_outbound_price_in_cents:\n            profitable = False\n\n        return profitable\n\n    @transaction.atomic\n    def delete(self, id):\n        point_price_config = self.get(id)\n        if point_price_config is not None:\n            point_price_config.delete()\n            return True\n        return False\n"}
{"type": "source_file", "path": "apps/capabilities/commerce/migrations/0003_alter_cart_currency_of_payment_and_more.py", "content": "# Generated by Django 4.2.2 on 2024-11-03 19:13\n\nimport apps.capabilities.commerce.utils\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('commerce', '0002_initial'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='cart',\n            name='currency_of_payment',\n            field=models.IntegerField(choices=[(1, 'USD'), (2, 'EUR'), (3, 'GBP')], default=apps.capabilities.commerce.utils.CurrencyTypes['USD']),\n        ),\n        migrations.AlterField(\n            model_name='cart',\n            name='payment_type',\n            field=models.IntegerField(choices=[(1, 'NONE'), (2, 'ONLINE'), (3, 'OFFLINE')], default=apps.capabilities.commerce.utils.PaymentTypes['ONLINE']),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/commerce/utils.py", "content": "from enum import IntEnum\n\n\nclass CurrencyTypes(IntEnum):\n    USD = 1\n    EUR = 2\n    GBP = 3\n\n    @classmethod\n    def choices(cls):\n        return [(key.value, key.name) for key in cls]\n\n\nclass PointTypes(IntEnum):\n    NONLIQUID = 1\n    LIQUID = 2\n\n    @classmethod\n    def choices(cls):\n        return [(key.value, key.name) for key in cls]\n\n\nclass OrganisationAccountCreditReasons(IntEnum):\n    GRANT = 1\n    SALE = 2\n\n    @classmethod\n    def choices(cls):\n        return [(key.value, key.name) for key in cls]\n\n\nclass PaymentTypes(IntEnum):\n    NONE = 1\n    ONLINE = 2\n    OFFLINE = 3\n\n    @classmethod\n    def choices(cls):\n        return [(key.value, key.name) for key in cls]\n\n\nclass PaymentStatusOptions(IntEnum):\n    PENDING = 1\n    PAID = 2\n    CANCELLED = 3\n    REFUNDED = 4\n\n    @classmethod\n    def choices(cls):\n        return [(key.value, key.name) for key in cls]\n\n\nclass LifecycleStatusOptions(IntEnum):\n    NEW = 1\n    COMPLETE = 2\n    CANCELLED = 3\n\n    @classmethod\n    def choices(cls):\n        return [(key.value, key.name) for key in cls]\n\n\nclass CommunityStatusOptions(IntEnum):\n    DRONE = 1\n    HONEY_BEE = 2\n    TRUSTED_BEE = 3\n    QUEEN_BEE = 4\n    BEE_KEEPER = 5\n\n    @classmethod\n    def choices(cls):\n        return [(key.value, key.name) for key in cls]\n"}
{"type": "source_file", "path": "apps/canopy/apps.py", "content": "from django.apps import AppConfig\n\n\nclass CanopyConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.canopy\"\n"}
{"type": "source_file", "path": "apps/canopy/views.py", "content": "import uuid\n\nfrom django.http import JsonResponse\nfrom django.shortcuts import redirect, render\nfrom django.urls import reverse\nfrom django.views import generic\n\nfrom apps.canopy import utils\nfrom apps.capabilities.product_management import models as mgt\n\n\ndef introduction(request):\n    return render(request, \"introduction.html\")\n\n\ndef chapter1(request):\n    return render(request, \"chapter-1.html\")\n\n\nclass ProductTreeView(generic.CreateView):\n    template_name = \"unauthenticated_tree/index.html\"\n    model = mgt.ProductTree\n    fields = [\"name\"]\n\n    def get_context_data(self, **kwargs):\n        if \"tree_session_id\" not in self.request.session:\n            session_id = str(uuid.uuid4())\n            self.request.session[\"tree_session_id\"] = session_id\n        else:\n            session_id = self.request.session[\"tree_session_id\"]\n\n        product_tree = mgt.ProductTree.objects.filter(session_id=session_id).first()\n\n        if not product_tree:\n            product_tree = mgt.ProductTree.objects.create(name=utils.generate_unique_name(), session_id=session_id)\n            mgt.ProductArea.add_root(\n                name=\"Product Area\",\n                description=\"Description of Product Area\",\n                product_tree=product_tree,\n            )\n        show_share_button = True\n\n        return utils.shareable_tree_helper(self.request, product_tree, show_share_button)\n\n\nclass ProductTreeUpdateView(generic.UpdateView):\n    template_name = \"unauthenticated_tree/index.html\"\n    model = mgt.ProductTree\n    fields = [\"name\"]\n\n    def get_context_data(self, **kwargs):\n        return utils.shareable_tree_helper(self.request, self.get_object())\n\n    def form_valid(self, form):\n        obj = form.save()\n        return JsonResponse({\"name\": obj.name})\n\n    def form_invalid(self, form):\n        return JsonResponse({\"error\": \"This name isn't available\"}, status=400)\n\n\ndef reset_tree(request):\n    request.session.pop(\"tree_session_id\", None)\n    return redirect(reverse(\"shareable_product_tree\"))\n\n\ndef add_root_node(request, tree_id):\n    context = {}\n    if request.method == \"POST\":\n        return utils.add_root_node_helper(request, tree_id, context)\n\n    context[\"can_modify_product\"] = True\n    context[\"depth\"] = int(request.POST.get(\"depth\", 0)) + 1\n    context[\"tree_id\"] = tree_id\n    context[\"id\"] = str(uuid.uuid4())[:8]\n    return render(request, \"product_tree/components/partials/create_root_node_partial.html\", context)\n\n\ndef add_node(request, parent_id):\n    product_area = mgt.ProductArea.objects.get(pk=parent_id)\n    context = {}\n    if request.method == \"POST\":\n        return utils.add_node_helper(request, product_area, context)\n    context[\"id\"] = str(uuid.uuid4())[:8]\n    context[\"margin_left\"] = int(request.GET.get(\"margin_left\", 0)) + 4\n    context[\"depth\"] = int(request.GET.get(\"depth\", 0)) + 1\n    context[\"parent_id\"] = product_area.id\n    context[\"product_area\"] = product_area\n    context[\"can_modify_product\"] = True\n    return render(request, \"product_tree/components/partials/create_node_partial.html\", context)\n\n\ndef delete_node(request, pk):\n    product_area = mgt.ProductArea.objects.get(pk=pk)\n    parent = product_area.get_parent() or None\n\n    if product_area.numchild > 0:\n        return JsonResponse({\"error\": \"Unable to delete a node with a child.\"}, status=400)\n    product_area.delete()\n    context = {\n        \"message\": \"The node has deleted successfully\",\n        \"parent_id\": parent.id if parent else None,\n        \"parent_child_count\": parent.get_children_count() if parent else 0,\n    }\n    return JsonResponse(context)\n\n\ndef update_node(request, pk):\n    product_area = mgt.ProductArea.objects.get(pk=pk)\n    if request.method == \"POST\":\n        return utils.update_node_helper(request, product_area)\n    context = {\n        \"margin_left\": int(request.GET.get(\"margin_left\", 0)) + 4,\n        \"parent_id\": product_area.id,\n        \"depth\": int(request.GET.get(\"depth\", 0)),\n        \"product_area\": product_area,\n        \"can_modify_product\": True,\n    }\n    return render(request, \"product_tree/components/partials/update_node_partial.html\", context)\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/admin.py", "content": "from django.contrib import admin\n\nfrom apps.capabilities.product_management import models as product\n\n\n@admin.register(product.Product)\nclass ProductAdmin(admin.ModelAdmin):\n    list_display = [\"slug\", \"name\", \"visibility\", \"owner_type\", \"owner\"]\n    list_filter = [\"visibility\"]\n    search_fields = [\"slug\", \"name\", \"organisation__name\", \"person__name\"]\n    raw_id_fields = [\"organisation\", \"person\"]\n\n\n@admin.register(product.Initiative)\nclass InitiativeAdmin(admin.ModelAdmin):\n    list_display = [\"product\", \"status\"]\n    search_fields = [\"product__name\", \"status\"]\n\n\n@admin.register(product.ProductTree)\nclass ProductTreeAdmin(admin.ModelAdmin):\n    list_display = [\"name\", \"created_at\"]\n    search_fields = [\"name\"]\n\n\n@admin.register(product.ProductArea)\nclass ProductAreaAdmin(admin.ModelAdmin):\n    list_display = [\"pk\", \"name\", \"product_tree\", \"video_link\", \"path\"]\n    search_fields = [\"name\", \"video_link\"]\n    filter_horizontal = (\"attachments\",)\n\n\n@admin.register(product.Challenge)\nclass ChallengeAdmin(admin.ModelAdmin):\n    def product_area_name(self, obj):\n        return obj.product_area.name if obj.product_area else \"-\"\n\n    list_display = [\"pk\", \"title\", \"status\", \"priority\", \"product_area_name\"]\n    search_fields = [\"title\"]\n    filter_horizontal = [\"attachments\"]\n\n\n@admin.register(product.Bounty)\nclass BountyAdmin(admin.ModelAdmin):\n    list_display = [\"pk\", \"title\", \"status\"]\n    list_filter = [\"status\"]\n    search_fields = [\"title\"]\n    filter_horizontal = [\"expertise\", \"attachments\"]\n"}
{"type": "source_file", "path": "apps/capabilities/ai_factory/admin.py", "content": "from django.contrib import admin\n\n# Register your models here.\n"}
{"type": "source_file", "path": "apps/capabilities/ai_factory/models.py", "content": "from django.db import models\n\n# Create your models here.\n"}
{"type": "source_file", "path": "apps/capabilities/commerce/apps.py", "content": "from django.apps import AppConfig\n\n\nclass CommerceConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.capabilities.commerce\"\n"}
{"type": "source_file", "path": "apps/capabilities/commerce/migrations/0002_initial.py", "content": "# Generated by Django 4.2.2 on 2023-09-26 11:29\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = [\n        (\"talent\", \"0001_initial\"),\n        (\"commerce\", \"0001_initial\"),\n        (\"product_management\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name=\"productaccountreservation\",\n            name=\"bounty_claim\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"talent.bountyclaim\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"productaccountdebit\",\n            name=\"bounty_claim\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"talent.bountyclaim\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"productaccountcredit\",\n            name=\"actioned_by\",\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=\"talent.person\"),\n        ),\n        migrations.AddField(\n            model_name=\"productaccountcredit\",\n            name=\"organisation_account_debit\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.organisationaccountdebit\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"productaccountcredit\",\n            name=\"product_account\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.productaccount\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"productaccount\",\n            name=\"product\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"product_management.product\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"paymentorder\",\n            name=\"contributor_account\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.contributoraccount\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"outboundpayment\",\n            name=\"payment_order\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.paymentorder\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"organisationaccountdebit\",\n            name=\"organisation_account\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.organisationaccount\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"organisationaccountcredit\",\n            name=\"organisation_account\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.organisationaccount\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"organisationaccount\",\n            name=\"organisation\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.organisation\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"inboundpayment\",\n            name=\"sales_order\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.salesorder\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"grant\",\n            name=\"approving_bee_keeper\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"approver\",\n                to=\"talent.person\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"grant\",\n            name=\"nominating_bee_keeper\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"nominator\",\n                to=\"talent.person\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"grant\",\n            name=\"organisation_account\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.organisationaccount\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"grant\",\n            name=\"organisation_account_credit\",\n            field=models.ForeignKey(\n                null=True,\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.organisationaccountcredit\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributorreward\",\n            name=\"contributor_account\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.contributoraccount\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoraccountdebit\",\n            name=\"contributor_account\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.contributoraccount\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoraccountdebit\",\n            name=\"payment_order\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.paymentorder\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoraccountcredit\",\n            name=\"bounty_claim\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"talent.bountyclaim\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoraccountcredit\",\n            name=\"contributor_account\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.contributoraccount\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoraccountcredit\",\n            name=\"contributor_reward\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.contributorreward\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoraccountcredit\",\n            name=\"payment_order\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.paymentorder\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoraccount\",\n            name=\"owner\",\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=\"talent.person\"),\n        ),\n        migrations.AddField(\n            model_name=\"cart\",\n            name=\"creator\",\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=\"talent.person\"),\n        ),\n        migrations.AddField(\n            model_name=\"cart\",\n            name=\"organisation_account\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"commerce.organisationaccount\",\n            ),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/commerce/migrations/__init__.py", "content": ""}
{"type": "source_file", "path": "apps/capabilities/commerce/migrations/0001_initial.py", "content": "# Generated by Django 4.2.2 on 2023-09-26 11:29\n\nimport apps.capabilities.commerce.utils\nimport django.core.validators\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport uuid\n\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name=\"Cart\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"number_of_points\", models.IntegerField(default=500)),\n                (\n                    \"currency_of_payment\",\n                    models.IntegerField(\n                        choices=apps.capabilities.commerce.utils.CurrencyTypes.choices,\n                        default=apps.capabilities.commerce.utils.CurrencyTypes[\"USD\"],\n                    ),\n                ),\n                (\"price_per_point_in_cents\", models.IntegerField()),\n                (\"subtotal_in_cents\", models.PositiveBigIntegerField()),\n                (\"sales_tax_in_cents\", models.PositiveBigIntegerField()),\n                (\"total_payable_in_cents\", models.PositiveBigIntegerField()),\n                (\n                    \"payment_type\",\n                    models.IntegerField(\n                        choices=apps.capabilities.commerce.utils.PaymentTypes.choices,\n                        default=apps.capabilities.commerce.utils.PaymentTypes[\"ONLINE\"],\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ContributorAccount\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"community_status\",\n                    models.IntegerField(\n                        choices=[\n                            (1, \"DRONE\"),\n                            (2, \"HONEY_BEE\"),\n                            (3, \"TRUSTED_BEE\"),\n                            (4, \"QUEEN_BEE\"),\n                            (5, \"BEE_KEEPER\"),\n                        ],\n                        default=apps.capabilities.commerce.utils.CommunityStatusOptions[\"DRONE\"],\n                    ),\n                ),\n                (\n                    \"liquid_points_balance\",\n                    models.PositiveBigIntegerField(default=0),\n                ),\n                (\n                    \"nonliquid_points_balance\",\n                    models.PositiveBigIntegerField(default=0),\n                ),\n            ],\n        ),\n        migrations.CreateModel(\n            name=\"ContributorAccountCredit\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\n                    \"reason\",\n                    models.IntegerField(\n                        choices=[\n                            (1, \"BOUNTY\"),\n                            (2, \"LIQUIDATION\"),\n                            (3, \"REWARD\"),\n                        ],\n                        default=0,\n                    ),\n                ),\n                (\"number_of_points\", models.PositiveIntegerField()),\n                (\n                    \"type_of_points\",\n                    models.IntegerField(\n                        choices=[(1, \"NONLIQUID\"), (2, \"LIQUID\")],\n                        default=apps.capabilities.commerce.utils.PointTypes[\"NONLIQUID\"],\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ContributorAccountDebit\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\n                    \"reason\",\n                    models.IntegerField(\n                        choices=[(1, \"LIQUIDATION\"), (2, \"PUNISHMENT\")],\n                        default=0,\n                    ),\n                ),\n                (\"number_of_points\", models.PositiveIntegerField()),\n                (\n                    \"type_of_points\",\n                    models.IntegerField(\n                        choices=[(1, \"NONLIQUID\"), (2, \"LIQUID\")],\n                        default=apps.capabilities.commerce.utils.PointTypes[\"NONLIQUID\"],\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ContributorReward\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\n                    \"action\",\n                    models.IntegerField(\n                        choices=[\n                            (1, \"INVITED FRIENDS\"),\n                            (2, \"VERIFIED IDENTITY\"),\n                        ],\n                        default=0,\n                    ),\n                ),\n                (\"points\", models.IntegerField(default=10)),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"Grant\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"description\", models.TextField(max_length=1024)),\n                (\"number_of_points\", models.IntegerField(default=500)),\n                (\n                    \"status\",\n                    models.IntegerField(\n                        choices=[\n                            (1, \"NEW\"),\n                            (2, \"COMPLETE\"),\n                            (3, \"CANCELLED\"),\n                        ],\n                        default=apps.capabilities.commerce.utils.LifecycleStatusOptions[\"NEW\"],\n                    ),\n                ),\n            ],\n        ),\n        migrations.CreateModel(\n            name=\"InboundPayment\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\n                    \"payment_type\",\n                    models.IntegerField(\n                        choices=[(1, \"NONE\"), (2, \"ONLINE\"), (3, \"OFFLINE\")],\n                        default=apps.capabilities.commerce.utils.PaymentTypes[\"ONLINE\"],\n                    ),\n                ),\n                (\n                    \"currency_of_payment\",\n                    models.IntegerField(\n                        choices=[(1, \"USD\"), (2, \"EUR\"), (3, \"GBP\")],\n                        default=apps.capabilities.commerce.utils.CurrencyTypes[\"USD\"],\n                    ),\n                ),\n                (\"amount_paid_in_cents\", models.PositiveBigIntegerField()),\n                (\"transaction_detail\", models.TextField(max_length=1024)),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"Organisation\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\n                    \"username\",\n                    models.CharField(\n                        default=\"\",\n                        max_length=39,\n                        unique=True,\n                        validators=[\n                            django.core.validators.RegexValidator(\n                                code=\"invalid_username\",\n                                message=\"Username may only contain letters and numbers\",\n                                regex=\"^[a-z0-9]*$\",\n                            )\n                        ],\n                    ),\n                ),\n                (\"name\", models.CharField(max_length=512, unique=True)),\n                (\n                    \"photo\",\n                    models.ImageField(blank=True, null=True, upload_to=\"avatars/\"),\n                ),\n            ],\n            options={\n                \"verbose_name_plural\": \"Organisations\",\n            },\n        ),\n        migrations.CreateModel(\n            name=\"OrganisationAccount\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"liquid_points_balance\", models.PositiveBigIntegerField()),\n                (\"nonliquid_points_balance\", models.PositiveBigIntegerField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name=\"OrganisationAccountCredit\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"number_of_points\", models.PositiveIntegerField()),\n                (\n                    \"type_of_points\",\n                    models.IntegerField(\n                        choices=[(1, \"NONLIQUID\"), (2, \"LIQUID\")],\n                        default=apps.capabilities.commerce.utils.PointTypes[\"NONLIQUID\"],\n                    ),\n                ),\n                (\n                    \"credit_reason\",\n                    models.IntegerField(\n                        choices=[(1, \"GRANT\"), (2, \"SALE\")],\n                        default=apps.capabilities.commerce.utils.OrganisationAccountCreditReasons[\"GRANT\"],\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"OrganisationAccountDebit\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\n                    \"type_of_points\",\n                    models.IntegerField(\n                        choices=[(1, \"NONLIQUID\"), (2, \"LIQUID\")],\n                        default=apps.capabilities.commerce.utils.PointTypes[\"NONLIQUID\"],\n                    ),\n                ),\n                (\n                    \"debit_reason\",\n                    models.IntegerField(choices=[(1, \"TRANSFER\"), (2, \"EXPIRY\")], default=0),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"OutboundPayment\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"details\", models.TextField(max_length=1024)),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"PaymentOrder\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\n                    \"currency_of_payment\",\n                    models.IntegerField(\n                        choices=[(1, \"USD\"), (2, \"EUR\"), (3, \"GBP\")],\n                        default=apps.capabilities.commerce.utils.CurrencyTypes[\"USD\"],\n                    ),\n                ),\n                (\"subtotal_in_cents\", models.PositiveBigIntegerField()),\n                (\"sales_tax_in_cents\", models.PositiveBigIntegerField()),\n                (\"total_payable_in_cents\", models.PositiveBigIntegerField()),\n                (\n                    \"payment_type\",\n                    models.IntegerField(\n                        choices=[(1, \"PARTNER\"), (2, \"BANK TRANSFER\")],\n                        default=0,\n                    ),\n                ),\n                (\n                    \"status\",\n                    models.IntegerField(\n                        choices=[\n                            (1, \"NEW\"),\n                            (2, \"COMPLETE\"),\n                            (3, \"CANCELLED\"),\n                        ],\n                        default=apps.capabilities.commerce.utils.LifecycleStatusOptions[\"NEW\"],\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"PointPriceConfiguration\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"applicable_from_date\", models.DateField()),\n                (\"usd_point_inbound_price_in_cents\", models.IntegerField()),\n                (\"eur_point_inbound_price_in_cents\", models.IntegerField()),\n                (\"gbp_point_inbound_price_in_cents\", models.IntegerField()),\n                (\"usd_point_outbound_price_in_cents\", models.IntegerField()),\n                (\"eur_point_outbound_price_in_cents\", models.IntegerField()),\n                (\"gbp_point_outbound_price_in_cents\", models.IntegerField()),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ProductAccount\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"liquid_points_balance\", models.PositiveBigIntegerField()),\n                (\"nonliquid_points_balance\", models.PositiveBigIntegerField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name=\"ProductAccountCredit\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"number_of_points\", models.PositiveIntegerField()),\n                (\n                    \"type_of_points\",\n                    models.IntegerField(\n                        choices=[(1, \"NONLIQUID\"), (2, \"LIQUID\")],\n                        default=apps.capabilities.commerce.utils.PointTypes[\"NONLIQUID\"],\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ProductAccountDebit\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"number_of_points\", models.PositiveIntegerField()),\n                (\n                    \"type_of_points\",\n                    models.IntegerField(\n                        choices=[(1, \"NONLIQUID\"), (2, \"LIQUID\")],\n                        default=apps.capabilities.commerce.utils.PointTypes[\"NONLIQUID\"],\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ProductAccountReservation\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"number_of_points\", models.PositiveIntegerField()),\n                (\n                    \"type_of_points\",\n                    models.IntegerField(\n                        choices=[(1, \"NONLIQUID\"), (2, \"LIQUID\")],\n                        default=apps.capabilities.commerce.utils.PointTypes[\"NONLIQUID\"],\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"SalesOrder\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"number_of_points\", models.IntegerField()),\n                (\n                    \"currency_of_payment\",\n                    models.IntegerField(\n                        choices=[(1, \"USD\"), (2, \"EUR\"), (3, \"GBP\")],\n                        default=apps.capabilities.commerce.utils.CurrencyTypes[\"USD\"],\n                    ),\n                ),\n                (\"price_per_point_in_cents\", models.IntegerField()),\n                (\"subtotal_in_cents\", models.PositiveBigIntegerField()),\n                (\"sales_tax_in_cents\", models.PositiveBigIntegerField()),\n                (\"total_payable_in_cents\", models.PositiveBigIntegerField()),\n                (\n                    \"payment_type\",\n                    models.IntegerField(\n                        choices=[(1, \"NONE\"), (2, \"ONLINE\"), (3, \"OFFLINE\")],\n                        default=apps.capabilities.commerce.utils.PaymentTypes[\"ONLINE\"],\n                    ),\n                ),\n                (\n                    \"payment_status\",\n                    models.IntegerField(\n                        choices=[\n                            (1, \"PENDING\"),\n                            (2, \"PAID\"),\n                            (3, \"CANCELLED\"),\n                            (4, \"REFUNDED\"),\n                        ],\n                        default=apps.capabilities.commerce.utils.PaymentStatusOptions[\"PENDING\"],\n                    ),\n                ),\n                (\n                    \"process_status\",\n                    models.IntegerField(\n                        choices=[\n                            (1, \"NEW\"),\n                            (2, \"COMPLETE\"),\n                            (3, \"CANCELLED\"),\n                        ],\n                        default=apps.capabilities.commerce.utils.LifecycleStatusOptions[\"NEW\"],\n                    ),\n                ),\n                (\n                    \"cart\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"commerce.cart\",\n                    ),\n                ),\n                (\n                    \"organisation_account\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"commerce.organisationaccount\",\n                    ),\n                ),\n                (\n                    \"organisation_account_credit\",\n                    models.ForeignKey(\n                        null=True,\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"commerce.organisationaccountcredit\",\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/decorators.py", "content": "from functools import wraps\nfrom django.core.exceptions import PermissionDenied\nfrom django.shortcuts import get_object_or_404\nfrom django.contrib.auth.views import redirect_to_login\n\nfrom apps.capabilities.security.services import RoleService\nfrom .models import Product, Bounty, Challenge\nfrom .services import ProductService\n\ndef get_product_from_kwargs(kwargs):\n    \"\"\"Helper function to get product from various URL kwargs patterns\"\"\"\n    if 'product_slug' in kwargs:\n        return get_object_or_404(Product, slug=kwargs['product_slug'])\n        \n    if 'bounty_id' in kwargs:\n        bounty = get_object_or_404(Bounty, id=kwargs['bounty_id'])\n        return bounty.challenge.product\n        \n    if 'challenge_id' in kwargs:\n        challenge = get_object_or_404(Challenge, id=kwargs['challenge_id'])\n        return challenge.product\n        \n    raise ValueError(\"Cannot determine product from URL parameters\")\n\ndef require_product_management(view_func):\n    \"\"\"\n    Decorator for function-based views requiring management permissions.\n    \n    Checks if the user:\n    1. Is authenticated\n    2. Has management access to the product\n    \n    Raises:\n        PermissionDenied: If user doesn't have required permissions\n        Http404: If product not found\n    \"\"\"\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        # Check authentication first\n        if not request.user.is_authenticated:\n            return redirect_to_login(request.get_full_path())\n            \n        try:\n            product = get_product_from_kwargs(kwargs)\n            if not RoleService.has_product_management_access(request.user.person, product):\n                raise PermissionDenied(\"You don't have management access to this product\")\n            return view_func(request, *args, **kwargs)\n        except ValueError as e:\n            raise PermissionDenied(str(e))\n            \n    return wrapper\n\ndef require_product_visibility(view_func):\n    \"\"\"\n    Decorator for function-based views requiring visibility access.\n    \n    Checks if:\n    1. Product is public (GLOBAL visibility)\n    2. Or user has required visibility access\n    \n    Raises:\n        PermissionDenied: If user doesn't have required permissions\n        Http404: If product not found\n    \"\"\"\n    @wraps(view_func)\n    def wrapper(request, *args, **kwargs):\n        try:\n            product = get_product_from_kwargs(kwargs)\n            \n            # Check if product is public\n            if product.visibility == Product.Visibility.GLOBAL:\n                return view_func(request, *args, **kwargs)\n                \n            # If not public, require authentication\n            if not request.user.is_authenticated:\n                return redirect_to_login(request.get_full_path())\n                \n            # Check visibility access\n            if not RoleService.can_access_product_by_visibility(request.user.person, product):\n                raise PermissionDenied(\"You don't have access to this product\")\n                \n            return view_func(request, *args, **kwargs)\n            \n        except ValueError as e:\n            raise PermissionDenied(str(e))\n            \n    return wrapper"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0013_alter_capability_description.py", "content": "# Generated by Django 4.2.2 on 2024-03-22 05:40\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0012_alter_capability_description\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"capability\",\n            name=\"description\",\n            field=models.TextField(blank=True, default=\"\", max_length=1000, null=True),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0004_alter_product_capability_start.py", "content": "# Generated by Django 4.2.2 on 2023-10-22 18:38\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0003_alter_product_full_description\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"product\",\n            name=\"capability_start\",\n            field=models.ForeignKey(\n                editable=False,\n                null=True,\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"product\",\n                to=\"product_management.capability\",\n            ),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/filters.py", "content": "from django import forms, template\n\nimport django_filters\n\nfrom apps.capabilities.product_management.models import Challenge\n\nregister = template.Library()\n\n\nclass ChallengeFilter(django_filters.FilterSet):\n    status = django_filters.ChoiceFilter(\n        choices=Challenge.ChallengeStatus.choices,\n        initial=\"Draft\",\n        empty_label=\"All Statuses\",\n        widget=forms.Select(\n            attrs={\n                \"class\": (\n                    \"w-full rounded-md border-0 py-1.5 px-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300\"\n                    \" focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\"\n                ),\n            },\n        ),\n    )\n    priority = django_filters.ChoiceFilter(\n        choices=Challenge.ChallengePriority.choices,\n        empty_label=\"All Priorities\",\n        widget=forms.Select(\n            attrs={\n                \"class\": (\n                    \"w-full rounded-md border-0 py-1.5 px-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300\"\n                    \" focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\"\n                ),\n            },\n        ),\n    )\n    reward_type = django_filters.ChoiceFilter(\n        choices=Challenge.RewardType.choices,\n        empty_label=\"All Reward Types\",\n        widget=forms.Select(\n            attrs={\n                \"class\": (\n                    \"w-full rounded-md border-0 py-1.5 px-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300\"\n                    \" focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\"\n                ),\n            },\n        ),\n    )\n\n    class Meta:\n        model = Challenge\n        fields = [\n            \"status\",\n            \"priority\",\n            \"reward_type\",\n        ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0006_alter_challenge_description.py", "content": "# Generated by Django 4.2.2 on 2023-10-31 13:50\n\nimport ckeditor.fields\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0005_alter_product_photo\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"challenge\",\n            name=\"description\",\n            field=ckeditor.fields.RichTextField(),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0003_alter_product_full_description.py", "content": "# Generated by Django 4.2.2 on 2023-10-01 12:22\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0002_initial\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"product\",\n            name=\"full_description\",\n            field=models.TextField(),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0010_alter_attachment_options_remove_attachment_file_type_and_more.py", "content": "# Generated by Django 4.2.2 on 2023-11-25 13:36\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0009_alter_bounty_points\"),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name=\"attachment\",\n            options={},\n        ),\n        migrations.RemoveField(\n            model_name=\"attachment\",\n            name=\"file_type\",\n        ),\n        migrations.RemoveField(\n            model_name=\"attachment\",\n            name=\"name\",\n        ),\n        migrations.RemoveField(\n            model_name=\"attachment\",\n            name=\"path\",\n        ),\n        migrations.AddField(\n            model_name=\"attachment\",\n            name=\"file\",\n            field=models.FileField(default=None, upload_to=\"attachments\"),\n            preserve_default=False,\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/forms.py", "content": "import json\nfrom datetime import date\n\nfrom django import forms\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.core.exceptions import ObjectDoesNotExist, ValidationError\nfrom django.forms import modelformset_factory\nfrom django.urls import reverse_lazy\nfrom django.utils.translation import gettext_lazy as _\n\nfrom tinymce.widgets import TinyMCE\n\nfrom apps.capabilities.commerce.models import Organisation\nfrom apps.capabilities.security.models import ProductRoleAssignment\nfrom apps.capabilities.talent.models import BountyClaim, Person\nfrom apps.utility import utils as global_utils\nfrom apps.capabilities.security.services import RoleService\n\nfrom .models import Bounty, Bug, Challenge, Idea, Initiative, Product, ProductArea, ProductContributorAgreementTemplate, FileAttachment\n\n\nclass DateInput(forms.DateInput):\n    input_type = \"date\"\n\n\nclass BountyClaimForm(forms.ModelForm):\n    is_agreement_accepted = forms.BooleanField(label=_(\"I have read and agree to the Contribution Agreement\"))\n\n    class Meta:\n        model = BountyClaim\n        fields = [\"expected_finish_date\"]\n        labels = {\n            \"expected_finish_date\": \"Expected Submission Date\",\n        }\n\n        widgets = {\n            \"expected_finish_date\": DateInput(),\n        }\n\n    def clean_expected_finish_date(self):\n        finish_date = self.cleaned_data.get(\"expected_finish_date\")\n\n        if finish_date < date.today():\n            raise ValidationError(_(\"Expected finish date cannot be earlier than today\"))\n\n        return finish_date\n\n\nclass IdeaForm(forms.ModelForm):\n    class Meta:\n        model = Idea\n        fields = [\"title\", \"description\"]\n        widgets = {\n            \"title\": forms.TextInput(\n                attrs={\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Write the title of your idea\",\n                }\n            ),\n            \"description\": forms.Textarea(\n                attrs={\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 min-h-[104px] w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Describe your idea in detail\",\n                }\n            ),\n        }\n\n\nclass BugForm(forms.ModelForm):\n    class Meta:\n        model = Bug\n        fields = [\"title\", \"description\"]\n        widgets = {\n            \"title\": forms.TextInput(\n                attrs={\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Write the title of the bug\",\n                }\n            ),\n            \"description\": forms.Textarea(\n                attrs={\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 min-h-[104px] w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Describe the bug in detail\",\n                }\n            ),\n        }\n\n\nclass OrganisationForm(forms.ModelForm):\n    class Meta:\n        model = Organisation\n        exclude = [\"id\"]\n\n        widgets = {\n            \"name\": forms.TextInput(\n                attrs={\n                    \"class\": (\n                        \"block w-full pl-2 rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset\"\n                        \" ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600\"\n                        \" sm:text-sm sm:leading-6\"\n                    ),\n                    \"hx-post\": reverse_lazy(\"create-organisation\"),\n                    \"hx-trigger\": \"input\",\n                    \"hx-target\": \"#organisation-name-errors\",\n                    \"hx-select\": \"#organisation-name-errors\",\n                    \"hx-indicator\": \"#ind-name\",\n                }\n            ),\n            \"username\": forms.TextInput(\n                attrs={\n                    \"class\": (\n                        \"block w-full pl-2 rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset\"\n                        \" ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600\"\n                        \" sm:text-sm sm:leading-6\"\n                    ),\n                    \"hx-post\": reverse_lazy(\"create-organisation\"),\n                    \"hx-trigger\": \"input\",\n                    \"hx-target\": \"#organisation-username-errors\",\n                    \"hx-select\": \"#organisation-username-errors\",\n                    \"hx-indicator\": \"#ind-username\",\n                }\n            ),\n            \"photo\": forms.FileInput(\n                attrs={\n                    \"class\": (\n                        \"rounded-md bg-white px-2.5 py-1.5 text-sm font-semibold text-gray-900 shadow-sm ring-1\"\n                        \" ring-inset ring-gray-300 hover:bg-gray-50\"\n                    ),\n                }\n            ),\n        }\n\n    def clean_name(self):\n        name = self.cleaned_data.get(\"name\")\n\n        try:\n            Organisation.objects.get(name=name)\n            raise ValidationError(_(\"This name already taken.\"))\n        except ObjectDoesNotExist:\n            return name\n\n    def clean_username(self):\n        username = self.cleaned_data.get(\"username\")\n\n        if Organisation.objects.filter(username=username) or Person.objects.filter(user__username=username):\n            raise ValidationError(_(\"This username is already taken.\"))\n\n        return username\n\n\nclass ChallengeForm(forms.ModelForm):\n    class Meta:\n        model = Challenge\n        fields = ['title', 'description', 'status', 'priority']\n\n\nclass BountyForm(forms.ModelForm):\n    MIN_POINTS = 1\n    MAX_POINTS = 1000\n\n    skill = forms.CharField(\n        widget=forms.HiddenInput(attrs={\"id\": \"%(prefix)s_skill_id\"}))\n    expertise_ids = forms.CharField(\n        widget=forms.HiddenInput(attrs={\"id\": \"%(prefix)s_expertise_ids\"}),\n        required=False)\n\n    class Meta:\n        model = Bounty\n        fields = [\"title\", \"description\", \"points\"]\n\n        widgets = {\n            \"points\": forms.NumberInput(attrs={\"class\": global_utils.text_field_class_names}),\n        }\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        for key, field in self.fields.items():\n            attributes = {\n                \"class\": global_utils.text_field_class_names,\n                \"placeholder\": global_utils.placeholder(key),\n            }\n            if key == \"description\":\n                attributes[\"cols\"] = 40\n                attributes[\"rows\"] = 2\n\n            if key != \"points\":\n                field.widget.attrs.update(**attributes)\n\n    def clean_points(self):\n        points = self.cleaned_data['points']\n        if points < self.MIN_POINTS or points > self.MAX_POINTS:\n            raise ValidationError(f\"Points must be between {self.MIN_POINTS} and {self.MAX_POINTS}\")\n        return points\n\n\nclass InitiativeForm(forms.ModelForm):\n    product = forms.ModelChoiceField(\n        empty_label=\"Select a product\",\n        queryset=Product.objects.all(),\n        widget=forms.Select(\n            attrs={\n                \"class\": (\n                    \"block w-full rounded-md border-0 p-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300\"\n                    \" focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\"\n                ),\n            }\n        ),\n    )\n\n    def __init__(self, *args, **kwargs):\n        self.slug = kwargs.pop(\"slug\", None)\n        super().__init__(*args, **kwargs)\n\n        if self.slug:\n            queryset = Product.objects.filter(slug=self.slug)\n            self.fields[\"product\"].queryset = Product.objects.filter(slug=self.slug)\n            self.fields[\"product\"].initial = queryset.first()\n\n    class Meta:\n        model = Initiative\n        fields = \"__all__\"\n        exclude = [\"product\", \"video_url\"]\n\n        widgets = {\n            \"name\": forms.TextInput(\n                attrs={\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Initiative Name\",\n                }\n            ),\n            \"description\": forms.Textarea(\n                attrs={\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 min-h-[104px] w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Describe your initiative in detail\",\n                }\n            ),\n            \"status\": forms.Select(\n                attrs={\n                    \"class\": (\n                        \"block w-full rounded-md border-0 p-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300\"\n                        \" focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\"\n                    ),\n                },\n                choices=Initiative.InitiativeStatus.choices,\n            ),\n        }\n\n\nclass ProductAreaForm(forms.ModelForm):\n    class Meta:\n        model = ProductArea\n        fields = [\n            \"id\",\n            \"name\",\n            \"video_link\",\n            \"video_name\",\n            \"video_duration\",\n            \"description\",\n        ]\n\n        widgets = {\n            \"name\": forms.TextInput(attrs={\"placeholder\": \"Enter name here\"}),\n            \"video_link\": forms.TextInput(attrs={\"placeholder\": \"Enter video link here\"}),\n            \"video_name\": forms.TextInput(attrs={\"placeholder\": \"Enter video video_name here\"}),\n            \"video_duration\": forms.TextInput(attrs={\"placeholder\": \"Enter video video_name here, E.x 7:20\"}),\n            \"description\": forms.Textarea(attrs={\"placeholder\": \"Enter description here\", \"columns\": 2}),\n        }\n\n    def __init__(self, *args, **kwargs):\n        can_modify_product = kwargs.pop(\"can_modify_product\", False)\n        super(ProductAreaForm, self).__init__(*args, **kwargs)\n\n        class_names = (\n            \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none\"\n            \" focus:shadow-outline\"\n        )\n        for key, field in self.fields.items():\n            field.widget.attrs.update({\"class\": class_names})\n            field.widget.attrs[\"readonly\"] = not can_modify_product\n\n\nclass ProductAreaForm1(forms.ModelForm):\n    \"\"\"TODO Merge this form to ProductAreaForm if we can\"\"\"\n\n    root = forms.ModelChoiceField(\n        required=False,\n        empty_label=\"Select a product area\",\n        queryset=ProductArea.objects.all(),\n        widget=forms.Select(\n            attrs={\n                \"class\": (\n                    \"block w-full rounded-md border-0 p-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300\"\n                    \" focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\"\n                ),\n            }\n        ),\n        help_text=\"If you want to create a root product area, you can left this field empty.\",\n    )\n\n    CHOICES = [\n        (\"1\", \"Add root\"),\n        (\"2\", \"Add sibling\"),\n        (\"3\", \"Add children\"),\n    ]\n\n    creation_method = forms.ChoiceField(\n        widget=forms.RadioSelect,\n        choices=CHOICES,\n    )\n\n    # def __init__(self, *args, **kwargs):\n    #     self.slug = kwargs.pop(\"slug\", None)\n    #     super().__init__(*args, **kwargs)\n\n    #     if self.slug:\n    #         product = Product.objects.get(slug=self.slug)\n    #         self.fields[\"root\"].queryset = Capability.objects.filter(product=product)\n\n    class Meta:\n        model = ProductArea\n        fields = [\"name\", \"description\"]\n\n        widgets = {\n            \"name\": forms.TextInput(\n                attrs={\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Initiative Name\",\n                }\n            ),\n            \"description\": forms.Textarea(\n                attrs={\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 min-h-[104px] w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Describe your initiative in detail\",\n                }\n            ),\n        }\n\n\nclass ContributorAgreementTemplateForm(forms.ModelForm):\n    product = forms.ModelChoiceField(\n        empty_label=\"Select a product\",\n        queryset=Product.objects.all(),\n        widget=forms.Select(\n            attrs={\n                \"class\": (\n                    \"block w-full rounded-md border-0 p-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300\"\n                    \" focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\"\n                )\n            }\n        ),\n    )\n\n    def __init__(self, *args, **kwargs):\n        self.slug = kwargs.pop(\"slug\", None)\n        super().__init__(*args, **kwargs)\n\n        if self.slug:\n            queryset = Product.objects.filter(slug=self.slug)\n            self.fields[\"product\"].queryset = Product.objects.filter(slug=self.slug)\n            self.fields[\"product\"].initial = queryset.first()\n\n    class Meta:\n        model = ProductContributorAgreementTemplate\n        fields = \"__all__\"\n        exclude = [\"created_by\"]\n\n        widgets = {\n            \"title\": forms.TextInput(\n                attrs={\n                    \"class\": (\n                        \"block w-full rounded-md border-0 p-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300\"\n                        \" focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\"\n                    )\n                }\n            ),\n            \"effective_date\": forms.DateInput(\n                attrs={\n                    \"type\": \"date\",\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 min-h-[104px] w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Select effective date\",\n                }\n            ),\n            \"content\": TinyMCE(\n                attrs={\n                    \"class\": (\n                        \"pt-2 px-4 pb-3 w-full text-sm text-black border border-solid border-[#D9D9D9]\"\n                        \" focus:outline-none rounded-sm\"\n                    ),\n                    \"placeholder\": \"Agreement content\",\n                    \"cols\": 80,\n                    \"rows\": 50,\n                }\n            ),\n        }\n\n\nclass ProductForm(forms.ModelForm):\n    make_me_owner = forms.BooleanField(\n        required=False,\n        initial=True,\n        label='Make me the owner of this product'\n    )\n    video_url = forms.URLField(\n        required=False,\n        widget=forms.URLInput(attrs={\n            'class': 'block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6',\n            'placeholder': 'https://youtube.com/...'\n        })\n    )\n    detail_url = forms.URLField(\n        label=\"Product URL\",\n        help_text=\"The public URL where users can view this product\",\n        required=False,\n        widget=forms.URLInput(attrs={\n            'class': 'block w-full flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6'\n        })\n    )\n\n    class Meta:\n        model = Product\n        fields = [\n            'name',\n            'short_description',\n            'full_description',\n            'website',\n            'organisation',\n            'make_me_owner',\n            'video_url',\n            'detail_url',\n            'photo',\n            'visibility'\n        ]\n        \n        widgets = {\n            'name': forms.TextInput(\n                attrs={\n                    'class': (\n                        'block w-full rounded-md border-0 p-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300'\n                        ' focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6'\n                    ),\n                    'placeholder': 'Product Name'\n                }\n            ),\n            # ... other widget definitions remain the same ...\n        }\n\n    def __init__(self, *args, person=None, **kwargs):\n        self.person = person\n        super().__init__(*args, **kwargs)\n        \n        # Initialize form fields\n        if self.person and not self.instance.pk:\n            self.fields['make_me_owner'].initial = True\n\n    def clean(self):\n        cleaned_data = super().clean()\n        # Either organization or make_me_owner must be set\n        if not cleaned_data.get('organisation') and not cleaned_data.get('make_me_owner'):\n            raise ValidationError(\"Either organization or make_me_owner must be specified\")\n        return cleaned_data\n\nAttachmentFormSet = modelformset_factory(\n    FileAttachment,\n    fields=('file',),\n    extra=1,\n    can_delete=True\n)\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0008_alter_challenge_description.py", "content": "# Generated by Django 4.2.2 on 2023-11-20 14:47\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0007_create_bug_table\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"challenge\",\n            name=\"description\",\n            field=models.TextField(),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/apps.py", "content": "from django.apps import AppConfig\n\n\nclass ProductManagementConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"apps.capabilities.product_management\"\n    verbose_name = \"Product Management\"\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0011_capability_video_duration_capability_video_name_and_more.py", "content": "# Generated by Django 4.2.2 on 2024-03-21 23:32\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\n            \"product_management\",\n            \"0010_alter_attachment_options_remove_attachment_file_type_and_more\",\n        ),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name=\"capability\",\n            name=\"video_duration\",\n            field=models.CharField(blank=True, max_length=255, null=True),\n        ),\n        migrations.AddField(\n            model_name=\"capability\",\n            name=\"video_name\",\n            field=models.CharField(blank=True, max_length=255, null=True),\n        ),\n        migrations.AlterField(\n            model_name=\"capability\",\n            name=\"video_link\",\n            field=models.URLField(blank=True, max_length=255, null=True),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/management/commands/update_product_roles.py", "content": "from django.core.management.base import BaseCommand\n\nfrom apps.capabilities.security.models import ProductRoleAssignment\n\n\nclass Command(BaseCommand):\n    help = \"Update product roles from int to string values\"\n\n    def handle(self, *args, **options):\n        updated_count = 0\n        product_role_mapping = {\n            \"0\": \"Contributor\",\n            \"1\": \"Manager\",\n            \"2\": \"Admin\",\n        }\n\n        for product_role in ProductRoleAssignment.objects.all():\n            if len(product_role.role) == 1:\n                product_role.role = product_role_mapping[product_role.role]\n                product_role.save()\n                updated_count += 1\n\n        self.stdout.write(self.style.SUCCESS(f\"Updated {updated_count} product roles.\"))\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0007_create_bug_table.py", "content": "# Generated by Django 4.2.2 on 2023-11-01 16:33\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"talent\", \"0002_bountydeliveryattempt_attachment_and_more\"),\n        (\"product_management\", \"0006_alter_challenge_description\"),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"Bug\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"title\", models.CharField(max_length=256)),\n                (\"description\", models.TextField()),\n                (\n                    \"person\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"talent.person\",\n                    ),\n                ),\n                (\n                    \"product\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"product_management.product\",\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0005_alter_product_photo.py", "content": "# Generated by Django 4.2.2 on 2023-10-30 05:57\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0004_alter_product_capability_start\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"product\",\n            name=\"photo\",\n            field=models.ImageField(blank=True, null=True, upload_to=\"products/\"),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0015_producttree_productarea_product_tree.py", "content": "# Generated by Django 4.2.2 on 2024-03-23 15:21\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport uuid\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0014_rename_capability_productarea_and_more\"),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"ProductTree\",\n            fields=[\n                (\n                    \"id\",\n                    models.UUIDField(\n                        default=uuid.UUID(\"09332c8a-0484-43c7-b283-42e07798686e\"),\n                        primary_key=True,\n                        serialize=False,\n                    ),\n                ),\n                (\"name\", models.CharField(max_length=255)),\n                (\n                    \"product\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        related_name=\"product_trees\",\n                        to=\"product_management.product\",\n                    ),\n                ),\n            ],\n        ),\n        migrations.AddField(\n            model_name=\"productarea\",\n            name=\"product_tree\",\n            field=models.ForeignKey(\n                blank=True,\n                null=True,\n                on_delete=django.db.models.deletion.SET_NULL,\n                related_name=\"product_areas\",\n                to=\"product_management.producttree\",\n            ),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0012_alter_capability_description.py", "content": "# Generated by Django 4.2.2 on 2024-03-22 05:38\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\n            \"product_management\",\n            \"0011_capability_video_duration_capability_video_name_and_more\",\n        ),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"capability\",\n            name=\"description\",\n            field=models.TextField(default=\"\", max_length=1000, null=True),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0014_rename_capability_productarea_and_more.py", "content": "# Generated by Django 4.2.2 on 2024-03-23 14:28\n\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"talent\", \"0003_alter_bountyclaim_kind\"),\n        (\"product_management\", \"0013_alter_capability_description\"),\n    ]\n\n    operations = [\n        migrations.RenameModel(\n            old_name=\"Capability\",\n            new_name=\"ProductArea\",\n        ),\n        migrations.RemoveField(\n            model_name=\"product\",\n            name=\"capability_start\",\n        ),\n        migrations.AlterModelTable(\n            name=\"productarea\",\n            table=None,\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0009_alter_bounty_points.py", "content": "# Generated by Django 4.2.2 on 2023-11-21 11:16\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0008_alter_challenge_description\"),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name=\"bounty\",\n            name=\"points\",\n            field=models.PositiveIntegerField(),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0016_alter_productarea_options_alter_producttree_id.py", "content": "# Generated by Django 4.2.2 on 2024-03-24 21:56\n\nfrom django.db import migrations, models\nimport uuid\n\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"product_management\", \"0015_producttree_productarea_product_tree\"),\n    ]\n\n    operations = [\n        migrations.AlterModelOptions(\n            name=\"productarea\",\n            options={},\n        ),\n        migrations.AlterField(\n            model_name=\"producttree\",\n            name=\"id\",\n            field=models.UUIDField(\n                default=uuid.UUID(\"b070549e-8a1a-4ad9-a5e9-8d4f3cdfeddd\"),\n                primary_key=True,\n                serialize=False,\n            ),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/management/commands/update_bounties.py", "content": "from django.core.management.base import BaseCommand\n\nfrom apps.capabilities.product_management.models import Bounty\nfrom apps.capabilities.talent.models import BountyClaim\n\n\nclass Command(BaseCommand):\n    help = \"Update bounties\"\n\n    def handle(self, *args, **options):\n        updated_count = 0\n        for bounty in Bounty.objects.all():\n            last_claim = (\n                bounty.bountyclaim_set.filter(\n                    status__in=[\n                        BountyClaim.Status.GRANTED,\n                        BountyClaim.Status.COMPLETED,\n                        BountyClaim.Status.CONTRIBUTED,\n                    ]\n                )\n                .select_related(\"person\", \"bounty\")\n                .first()\n            )\n            if last_claim:\n                bounty.claimed_by = last_claim.person\n                bounty.save()\n                updated_count += 1\n\n        self.stdout.write(self.style.SUCCESS(f\"Updated {updated_count} bounties.\"))\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0002_initial.py", "content": "# Generated by Django 4.2.2 on 2023-09-26 11:29\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = [\n        (\"talent\", \"0001_initial\"),\n        (\"product_management\", \"0001_initial\"),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name=\"idea\",\n            name=\"person\",\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=\"talent.person\"),\n        ),\n        migrations.AddField(\n            model_name=\"idea\",\n            name=\"product\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"product_management.product\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributorguide\",\n            name=\"product\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"product_contributor_guide\",\n                to=\"product_management.product\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributorguide\",\n            name=\"skill\",\n            field=models.ForeignKey(\n                blank=True,\n                default=None,\n                null=True,\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"category_contributor_guide\",\n                to=\"talent.skill\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoragreementacceptance\",\n            name=\"agreement\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"product_management.contributoragreement\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoragreementacceptance\",\n            name=\"person\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"person_contributor_agreement_acceptance\",\n                to=\"talent.person\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"contributoragreement\",\n            name=\"product\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"product_contributor_agreement\",\n                to=\"product_management.product\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challengedependency\",\n            name=\"preceding_challenge\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"product_management.challenge\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challengedependency\",\n            name=\"subsequent_challenge\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"Challenge\",\n                to=\"product_management.challenge\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"attachment\",\n            field=models.ManyToManyField(\n                blank=True,\n                related_name=\"challenge_attachements\",\n                to=\"product_management.attachment\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"capability\",\n            field=models.ForeignKey(\n                blank=True,\n                null=True,\n                on_delete=django.db.models.deletion.SET_NULL,\n                to=\"product_management.capability\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"comments_start\",\n            field=models.ForeignKey(\n                editable=False,\n                null=True,\n                on_delete=django.db.models.deletion.SET_NULL,\n                to=\"talent.challengecomment\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"contribution_guide\",\n            field=models.ForeignKey(\n                blank=True,\n                default=None,\n                null=True,\n                on_delete=django.db.models.deletion.SET_NULL,\n                to=\"product_management.contributorguide\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"created_by\",\n            field=models.ForeignKey(\n                blank=True,\n                null=True,\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"created_by\",\n                to=\"talent.person\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"initiative\",\n            field=models.ForeignKey(\n                blank=True,\n                null=True,\n                on_delete=django.db.models.deletion.SET_NULL,\n                to=\"product_management.initiative\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"product\",\n            field=models.ForeignKey(\n                null=True,\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"product_management.product\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"reviewer\",\n            field=models.ForeignKey(\n                null=True,\n                on_delete=django.db.models.deletion.SET_NULL,\n                to=\"talent.person\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"tag\",\n            field=models.ManyToManyField(\n                blank=True,\n                related_name=\"challenge_tags\",\n                to=\"product_management.tag\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"challenge\",\n            name=\"updated_by\",\n            field=models.ForeignKey(\n                blank=True,\n                null=True,\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"updated_by\",\n                to=\"talent.person\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"capabilityattachment\",\n            name=\"attachment\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"product_management.attachment\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"capabilityattachment\",\n            name=\"capability\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"product_management.capability\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"capability\",\n            name=\"comments_start\",\n            field=models.ForeignKey(\n                editable=False,\n                null=True,\n                on_delete=django.db.models.deletion.SET_NULL,\n                to=\"talent.capabilitycomment\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"bounty\",\n            name=\"challenge\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,\n                to=\"product_management.challenge\",\n            ),\n        ),\n        migrations.AddField(\n            model_name=\"bounty\",\n            name=\"expertise\",\n            field=models.ManyToManyField(related_name=\"bounty_expertise\", to=\"talent.expertise\"),\n        ),\n        migrations.AddField(\n            model_name=\"bounty\",\n            name=\"skill\",\n            field=models.ForeignKey(\n                blank=True,\n                default=None,\n                null=True,\n                on_delete=django.db.models.deletion.CASCADE,\n                related_name=\"bounty_skill\",\n                to=\"talent.skill\",\n            ),\n        ),\n    ]\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/management/commands/generate_tree.py", "content": "from django.core.management.base import BaseCommand\nfrom apps.portal.services.portal_services import ProductTreeGenerationService\nfrom apps.capabilities.product_management.models import Product\nimport json\n\nclass Command(BaseCommand):\n    help = 'Generates a product tree'\n\n    def add_arguments(self, parser):\n        parser.add_argument('product_id', type=int, help='ID of the product')\n        parser.add_argument('--context-file', type=str, help='Path to additional context file')\n\n    def handle(self, *args, **options):\n        try:\n            product = Product.objects.get(id=options['product_id'])\n            \n            # Load additional context if provided\n            additional_context = \"\"\n            if options['context_file']:\n                with open(options['context_file'], 'r') as f:\n                    additional_context = f.read()\n            \n            service = ProductTreeGenerationService()\n            success, tree_str, error = service.generate_initial_tree(\n                product,\n                additional_context=additional_context\n            )\n            \n            if success and tree_str:\n                tree = json.loads(tree_str)\n                self.stdout.write(json.dumps(tree, indent=2))\n            else:\n                self.stderr.write(f\"Error: {error}\")\n                \n        except Product.DoesNotExist:\n            self.stderr.write(f\"Product with ID {options['product_id']} not found\")\n        except Exception as e:\n            self.stderr.write(f\"Error: {e}\")\n"}
{"type": "source_file", "path": "apps/capabilities/product_management/migrations/0001_initial.py", "content": "# Generated by Django 4.2.2 on 2023-09-26 11:29\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport django_lifecycle.mixins\nimport uuid\n\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = [\n        (\"contenttypes\", \"0002_remove_content_type_name\"),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"Attachment\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"name\", models.CharField(max_length=512)),\n                (\"path\", models.URLField()),\n                (\n                    \"file_type\",\n                    models.CharField(blank=True, max_length=5, null=True),\n                ),\n            ],\n            options={\n                \"ordering\": [\"name\"],\n            },\n        ),\n        migrations.CreateModel(\n            name=\"Bounty\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"points\", models.IntegerField()),\n                (\n                    \"status\",\n                    models.IntegerField(\n                        choices=[\n                            (0, \"Draft\"),\n                            (1, \"Blocked\"),\n                            (2, \"Available\"),\n                            (3, \"Claimed\"),\n                            (4, \"Done\"),\n                            (5, \"In review\"),\n                        ],\n                        default=2,\n                    ),\n                ),\n                (\"is_active\", models.BooleanField(default=True)),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"Capability\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"path\", models.CharField(max_length=255, unique=True)),\n                (\"depth\", models.PositiveIntegerField()),\n                (\"numchild\", models.PositiveIntegerField(default=0)),\n                (\"name\", models.CharField(max_length=255)),\n                (\"description\", models.TextField(default=\"\", max_length=1000)),\n                (\n                    \"video_link\",\n                    models.CharField(blank=True, max_length=255, null=True),\n                ),\n            ],\n            options={\n                \"verbose_name_plural\": \"capabilities\",\n                \"db_table\": \"capability\",\n            },\n        ),\n        migrations.CreateModel(\n            name=\"CapabilityAttachment\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n            ],\n            options={\n                \"db_table\": \"capability_attachment\",\n            },\n        ),\n        migrations.CreateModel(\n            name=\"Challenge\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"title\", models.TextField()),\n                (\"description\", models.TextField()),\n                (\"short_description\", models.TextField(max_length=256)),\n                (\n                    \"status\",\n                    models.IntegerField(\n                        choices=[\n                            (0, \"Draft\"),\n                            (1, \"Blocked\"),\n                            (2, \"Available\"),\n                            (3, \"Claimed\"),\n                            (4, \"Done\"),\n                            (5, \"In review\"),\n                        ],\n                        default=0,\n                    ),\n                ),\n                (\"blocked\", models.BooleanField(default=False)),\n                (\"featured\", models.BooleanField(default=False)),\n                (\n                    \"priority\",\n                    models.IntegerField(\n                        choices=[(0, \"High\"), (1, \"Medium\"), (2, \"Low\")],\n                        default=1,\n                    ),\n                ),\n                (\n                    \"published_id\",\n                    models.IntegerField(blank=True, default=0, editable=False),\n                ),\n                (\n                    \"auto_approve_task_claims\",\n                    models.BooleanField(default=True),\n                ),\n                (\"video_url\", models.URLField(blank=True, null=True)),\n                (\n                    \"reward_type\",\n                    models.IntegerField(\n                        choices=[\n                            (0, \"Liquid Points\"),\n                            (1, \"Non-liquid Points\"),\n                        ],\n                        default=1,\n                    ),\n                ),\n            ],\n            options={\n                \"verbose_name_plural\": \"Challenges\",\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ChallengeDependency\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n            ],\n            options={\n                \"db_table\": \"product_management_challenge_dependencies\",\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ContributorAgreement\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"agreement_content\", models.TextField()),\n            ],\n            options={\n                \"db_table\": \"contribution_management_contributor_agreement\",\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ContributorAgreementAcceptance\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"accepted_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n            ],\n            options={\n                \"db_table\": \"contribution_management_contributor_agreement_acceptance\",\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ContributorGuide\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"title\", models.CharField(max_length=60, unique=True)),\n                (\"description\", models.TextField(blank=True, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name=\"Idea\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"title\", models.CharField(max_length=256)),\n                (\"description\", models.TextField()),\n                (\"vote_count\", models.PositiveSmallIntegerField(default=0)),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"Product\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\n                    \"photo\",\n                    models.ImageField(blank=True, null=True, upload_to=\"avatars/\"),\n                ),\n                (\"name\", models.TextField()),\n                (\"short_description\", models.TextField()),\n                (\"full_description\", models.TextField(blank=True, null=True)),\n                (\n                    \"website\",\n                    models.CharField(blank=True, max_length=512, null=True),\n                ),\n                (\"detail_url\", models.URLField(blank=True, null=True)),\n                (\"video_url\", models.URLField(blank=True, null=True)),\n                (\"slug\", models.SlugField(unique=True)),\n                (\"is_private\", models.BooleanField(default=False)),\n                (\"object_id\", models.PositiveIntegerField()),\n                (\n                    \"attachment\",\n                    models.ManyToManyField(\n                        blank=True,\n                        related_name=\"product_attachments\",\n                        to=\"product_management.attachment\",\n                    ),\n                ),\n                (\n                    \"capability_start\",\n                    models.ForeignKey(\n                        editable=False,\n                        null=True,\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"product_management.capability\",\n                    ),\n                ),\n                (\n                    \"content_type\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"contenttypes.contenttype\",\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),\n        ),\n        migrations.CreateModel(\n            name=\"Tag\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"name\", models.CharField(max_length=128)),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"ProductChallenge\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\n                    \"challenge\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"product_management.challenge\",\n                    ),\n                ),\n                (\n                    \"product\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"product_management.product\",\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n        migrations.CreateModel(\n            name=\"Initiative\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"created_at\",\n                    models.DateTimeField(auto_now_add=True, null=True),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True, null=True)),\n                (\"uuid\", models.UUIDField(default=uuid.uuid4, editable=False)),\n                (\"name\", models.TextField()),\n                (\"description\", models.TextField(blank=True, null=True)),\n                (\n                    \"status\",\n                    models.IntegerField(\n                        choices=[\n                            (1, \"Active\"),\n                            (2, \"Completed\"),\n                            (3, \"Draft\"),\n                            (4, \"Cancelled\"),\n                        ],\n                        default=1,\n                    ),\n                ),\n                (\"video_url\", models.URLField(blank=True, null=True)),\n                (\n                    \"product\",\n                    models.ForeignKey(\n                        blank=True,\n                        null=True,\n                        on_delete=django.db.models.deletion.CASCADE,\n                        to=\"product_management.product\",\n                    ),\n                ),\n            ],\n            options={\n                \"abstract\": False,\n            },\n        ),\n    ]\n"}
