{"repo_info": {"repo_name": "fastapi-graphql", "repo_owner": "moluwole", "repo_url": "https://github.com/moluwole/fastapi-graphql"}}
{"type": "test_file", "path": "tests/conftest.py", "content": "import pytest\nfrom masoniteorm.migrations import Migration\n\nfrom models.Comment import Comment\nfrom models.Post import Post\nfrom models.User import User\n\n\n@pytest.fixture(autouse=True)\ndef setup_database():\n    config_path = \"config/test_config.py\"\n\n    migrator = Migration(config_path=config_path)\n    migrator.create_table_if_not_exists()\n\n    migrator.refresh()\n\n\n@pytest.fixture(scope=\"function\")\ndef user():\n    user = User()\n    user.name = \"John Doe\"\n    user.address = \"United States of Nigeria\"\n    user.phone_number = 123456789\n    user.sex = \"male\"\n    user.email = \"foo@bar.com\"\n    user.save()\n\n    return user\n\n\n@pytest.fixture(scope=\"function\")\ndef post(user):\n    post = Post()\n    post.title = \"Test Title\"\n    post.body = \"this is the post body and can be as long as possible\"\n    post.user_id = user.id\n    post.save()\n\n    user.attach(\"posts\", post)\n    return post\n\n\n@pytest.fixture(scope=\"function\")\ndef comment(user, post):\n    comment = Comment()\n    comment.body = \"This is a comment body\"\n    comment.user_id = user.id\n    comment.post_id = post.id\n\n    comment.save()\n\n    user.attach(\"comments\", comment)\n    post.attach(\"comments\", comment)\n\n    return comment\n"}
{"type": "test_file", "path": "config/test_config.py", "content": "from masoniteorm.connections import ConnectionResolver\n\n\nDATABASES = {\n  \"default\": \"sqlite\",\n  \"sqlite\": {\n    \"driver\": \"sqlite\",\n    \"database\": \"db.sqlite3\",\n  }\n}\n\nDB = ConnectionResolver().set_connection_details(DATABASES)\n"}
{"type": "test_file", "path": "tests/test_query.py", "content": "from fastapi.testclient import TestClient\n\nfrom main import app  # => FastAPI app created in our main.py file\n\n\nclient = TestClient(app)\n\n\ndef test_create_user():\n    query = \"\"\"\n        mutation {\n            addUser(userData: {\n                name: \"Test User\",\n                email: \"email@test.com\",\n                sex: \"male\",\n                address: \"My Address\",\n                phoneNumber: \"123456789\",\n            })\n            {\n                id\n                name\n                address\n            }\n        }\n    \"\"\"\n\n    response = client.post(\"/graphql\", json={\"query\": query})\n    assert response is not None\n    assert response.status_code == 200\n\n    result = response.json()\n    assert result[\"data\"][\"addUser\"][\"name\"] == \"Test User\"\n    assert result[\"data\"][\"addUser\"][\"address\"] == \"My Address\"\n\ndef test_get_user_list(user):\n    query = \"\"\"\n      query {\n          users {\n              name\n              address\n          }\n      }\n    \"\"\"\n\n    response = client.post(\"/graphql\", json={\"query\": query})\n    assert response is not None\n    assert response.status_code == 200\n\n    result = response.json()\n    assert type(result['data']['users']) == list\n    assert result[\"data\"][\"users\"][0][\"name\"] == user.name\n\n\n\ndef test_get_single_user(user):\n    query = \"\"\"\n      query {\n          getSingleUser(userId: %s) {\n              name\n              address\n          }\n      }\n    \"\"\" % user.id\n\n    response = client.post(\"/graphql\", json={\"query\": query})\n    assert response is not None\n    assert response.status_code == 200\n\n    result = response.json()\n    assert type(result['data']['getSingleUser']) == dict\n    assert result[\"data\"][\"getSingleUser\"][\"name\"] == user.name\n"}
{"type": "source_file", "path": "config/database.py", "content": "from masoniteorm.connections import ConnectionResolver\n\nDATABASES = {\n  \"default\": \"sqlite\",\n  \"mysql\": {\n    \"host\": \"127.0.0.1\",\n    \"driver\": \"mysql\",\n    \"database\": \"masonite\",\n    \"user\": \"root\",\n    \"password\": \"\",\n    \"port\": 3306,\n    \"log_queries\": False,\n    \"options\": {\n      #\n    }\n  },\n  \"postgres\": {\n    \"host\": \"127.0.0.1\",\n    \"driver\": \"postgres\",\n    \"database\": \"test\",\n    \"user\": \"test\",\n    \"password\": \"test\",\n    \"port\": 5432,\n    \"log_queries\": False,\n    \"options\": {\n      #\n    }\n  },\n  \"sqlite\": {\n    \"driver\": \"sqlite\",\n    \"database\": \"db.sqlite3\",\n  }\n}\n\nDB = ConnectionResolver().set_connection_details(DATABASES)\n"}
{"type": "source_file", "path": "core.py", "content": "from typing import List, Optional\n\nimport strawberry\n\nfrom controller import CreateMutation, Queries\nfrom schema import UserType, PostType, CommentsType\n\n\n@strawberry.type\nclass Mutation:\n    add_user: UserType = strawberry.mutation(resolver=CreateMutation.add_user)\n    add_post: PostType = strawberry.mutation(resolver=CreateMutation.add_post)\n    add_comment: CommentsType = strawberry.mutation(resolver=CreateMutation.add_comment)\n\n\n@strawberry.type\nclass Query:\n    users: List[UserType] = strawberry.field(resolver=Queries.get_all_users)\n    get_single_user: UserType = strawberry.field(resolver=Queries.get_single_user)\n"}
{"type": "source_file", "path": "databases/migrations/2023_02_20_120522_migration_for_user_table.py", "content": "\"\"\"MigrationForUserTable Migration.\"\"\"\n\nfrom masoniteorm.migrations import Migration\n\n\nclass MigrationForUserTable(Migration):\n    def up(self):\n        \"\"\"\n        Run the migrations.\n        \"\"\"\n        with self.schema.create(\"users\") as table:\n            table.increments(\"id\")\n            table.string(\"name\")\n            table.string(\"email\").unique()\n            table.text(\"address\").nullable()\n            table.string(\"phone_number\", 11).nullable()\n            table.enum(\"sex\", [\"male\", \"female\"]).nullable()\n            table.timestamps()\n\n    def down(self):\n        \"\"\"\n        Revert the migrations.\n        \"\"\"\n        self.schema.drop(\"users\")\n"}
{"type": "source_file", "path": "controller.py", "content": "from typing import List\n\nfrom models.Comment import Comment\nfrom models.Post import Post\nfrom models.User import User\nfrom schema import CommentInput, CommentsType, PostInput, PostType, UserInput, UserType\n\n\nclass CreateMutation:\n\n    def add_user(self, user_data: UserInput):\n        user = User.where(\"email\", user_data.email).get()\n        if user:\n            raise Exception(\"User already exists\")\n\n        user = User()\n\n        user.name = user_data.name\n        user.email = user_data.email\n        user.address = user_data.address\n        user.phone_number = user_data.phone_number\n        user.sex = user_data.sex\n\n        user.save()\n\n        return user\n\n    def add_post(self, post_data: PostInput):\n        user = User.find(post_data.user_id)\n        if not user:\n            raise Exception(\"User not found\")\n        post = Post()\n        post.title = post_data.title\n        post.body = post_data.body\n        post.user_id = post_data.user_id\n        post.save()\n\n        user.attach(\"posts\", post)\n\n        return post\n\n    def add_comment(self, comment_data: CommentInput):\n        post = Post.find(comment_data.post_id)\n        if not post:\n            raise Exception(\"Post not found\")\n        user = User.find(comment_data.user_id)\n        if not user:\n            raise Exception(\"User not found\")\n\n        comment = Comment()\n        comment.body = comment_data.body\n        comment.user_id = comment_data.user_id\n        comment.post_id = comment_data.post_id\n\n        comment.save()\n\n        user.attach(\"comments\", comment)\n        post.attach(\"comments\", comment)\n\n        return comment\n\n\nclass Queries:\n\n    def get_all_users(self) -> List[UserType]:\n        return User.all()\n\n    def get_single_user(self, user_id: int) -> UserType:\n        user = User.find(user_id)\n        if not user:\n            raise Exception(\"User not found\")\n        return user\n"}
{"type": "source_file", "path": "models/comment.py", "content": "\"\"\" Comment Model \"\"\"\n\nfrom masoniteorm.models import Model\n\n\nclass Comment(Model):\n    \"\"\"Comment Model\"\"\"\n\n    pass\n"}
{"type": "source_file", "path": "databases/migrations/2023_02_20_120547_migration_for_post_table.py", "content": "\"\"\"MigrationForPostTable Migration.\"\"\"\n\nfrom masoniteorm.migrations import Migration\n\n\nclass MigrationForPostTable(Migration):\n    def up(self):\n        \"\"\"\n        Run the migrations.\n        \"\"\"\n        with self.schema.create(\"posts\") as table:\n            table.increments(\"id\")\n            table.integer(\"user_id\").unsigned()\n            table.foreign(\"user_id\").references(\"id\").on(\"users\")\n            table.string(\"title\")\n            table.text(\"body\")\n            table.timestamps()\n\n    def down(self):\n        \"\"\"\n        Revert the migrations.\n        \"\"\"\n        self.schema.drop(\"posts\")\n"}
{"type": "source_file", "path": "databases/migrations/2023_02_20_120553_migration_for_comment_table.py", "content": "\"\"\"MigrationForCommentTable Migration.\"\"\"\n\nfrom masoniteorm.migrations import Migration\n\n\nclass MigrationForCommentTable(Migration):\n    def up(self):\n        \"\"\"\n        Run the migrations.\n        \"\"\"\n        with self.schema.create(\"comments\") as table:\n            table.increments(\"id\")\n            table.integer(\"user_id\").unsigned().nullable()\n            table.foreign(\"user_id\").references(\"id\").on(\"users\")\n            table.integer(\"post_id\").unsigned().nullable()\n            table.foreign(\"post_id\").references(\"id\").on(\"posts\")\n            table.text(\"body\")\n            table.timestamps()\n\n    def down(self):\n        \"\"\"\n        Revert the migrations.\n        \"\"\"\n        self.schema.drop(\"comments\")\n"}
{"type": "source_file", "path": "models/user.py", "content": "\"\"\" User Model \"\"\"\n\nfrom masoniteorm.models import Model\nfrom masoniteorm.relationships import has_many\n\n\nclass User(Model):\n    \"\"\"User Model\"\"\"\n\n    @has_many(\"id\", \"user_id\")\n    def posts(self):\n        from .Post import Post\n\n        return Post\n\n    @has_many(\"id\", \"user_id\")\n    def comments(self):\n        from .Comment import Comment\n\n        return Comment\n"}
{"type": "source_file", "path": "main.py", "content": "import strawberry\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\n\nfrom core import Mutation, Query\n\n\nschema = strawberry.Schema(query=Query, mutation=Mutation)\ngraphql_app = GraphQLRouter(schema)\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n\n\n@app.get(\"/\")\ndef ping():\n    return {\"ping\": \"pong\"}\n"}
{"type": "source_file", "path": "schema.py", "content": "import strawberry\n\nfrom typing import List, Optional\n\n\n@strawberry.type\nclass CommentsType:\n    id: int\n    user_id: int\n    post_id: int\n    body: str\n\n\n@strawberry.type\nclass PostType:\n    id: int\n    user_id: int\n    title: str\n    body: str\n    comments: Optional[List[CommentsType]]\n\n\n@strawberry.type\nclass UserType:\n    id: int\n    name: str\n    address: str\n    phone_number: str\n    sex: str\n    posts: Optional[List[PostType]]\n    comments: Optional[List[CommentsType]]\n\n\n@strawberry.input\nclass UserInput:\n    name: str\n    email: str\n    address: str\n    phone_number: str\n    sex: str\n\n@strawberry.input\nclass PostInput:\n    user_id: int\n    title: str\n    body: str\n\n\n@strawberry.input\nclass CommentInput:\n    user_id: int\n    post_id: int\n    body: str\n"}
{"type": "source_file", "path": "models/post.py", "content": "\"\"\" Post Model \"\"\"\n\nfrom masoniteorm.models import Model\nfrom masoniteorm.relationships import has_many\n\n\nclass Post(Model):\n    \"\"\"Post Model\"\"\"\n\n    @has_many(\"id\", \"post_id\")\n    def comments(self):\n        from .Comment import Comment\n\n        return Comment\n"}
