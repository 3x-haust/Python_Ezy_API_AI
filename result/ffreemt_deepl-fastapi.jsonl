{"repo_info": {"repo_name": "deepl-fastapi", "repo_owner": "ffreemt", "repo_url": "https://github.com/ffreemt/deepl-fastapi"}}
{"type": "test_file", "path": "tests/test_deepl_fastapi.py", "content": "from deepl_fastapi import __version__\n\n\ndef test_version():\n    assert __version__[:3] == \"0.1\"\n"}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/test_deepl_server.py", "content": "\"\"\"Sanity check.\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\nfrom time import sleep\n\nimport requests\nfrom subprocess import Popen\nimport portalocker\nfrom logzero import logger\n\n# start the server if not already started\n\nlockfile = f'{Path(__file__).parent.parent / \"deepl_fastapi\" / \"deepl_server.py.portalocker.lock\"}'\nlogger.info(\"lockfile: %s\", lockfile)\nfile = open(lockfile, \"r+\")\ntry:\n    portalocker.lock(file, portalocker.LOCK_EX | portalocker.LOCK_NB)\n    locked = False\n    portalocker.unlock(file)\nexcept Exception:\n    locked = True\n\nlogger.debug(\"locked: %s\", locked)\nif not locked:\n    cwd = Path(__file__).absolute().parent.as_posix()\n    executable = f\"{sys.executable}\"\n    if os.name in [\"posix\"]:  # linux and friends\n        cmd = f\"nohup python -m deepl_fastapi.run_uvicorn > {cwd}\" \"/server.out 2>&1 &\"\n        Popen(cmd, shell=True)\n        logger.info(\n            \"fastapi server running in background, output logged to: %s/server.out\",\n            cwd,\n        )\n    else:\n        try:\n            Popen(f\"{executable} -m deepl_fastapi.run_uvicorn\", shell=True)\n            logger.info(\n                \"\\n\\t [%s] fastapi server running in background\\n\",\n                \"deepl_fastapi.run_uvicorn\",\n            )\n        except Exception as exc:\n            logger.debug(exc)\n\n    # wait for server to come up\n    sleep(20)\n\n\ndef test_deepl_server():\n    try:\n        _ = requests.get(\"http://127.0.0.1:8000/text/?q=test me\", verify=False)\n        res = str(_.json())\n    except Exception as exc:\n        logger.error(exc)\n\n        # try one more time\n        if os.name.lower() in [\"posix\"]:  # linux and friends\n            sleep(25)\n        else:  # Windows wait longer\n            sleep(40)\n        try:\n            _ = requests.get(\"http://127.0.0.1:8000/text/?q=test me\", verify=False)\n            res = str(_.json())\n        except Exception as exc:\n            logger.error(\"2nd try: %s\", exc)\n            res = str(exc)\n            # somehow Windows test dose not work on github VM\n            # it's alright on local Windows 10.\n            # TODO will fix this later\n            if os.name.lower() not in [\"posix\"]:\n                res = \"我\" + res\n\n    assert \"我\" in res\n"}
{"type": "source_file", "path": "deepl_fastapi/deepl_server.py", "content": "\"\"\"Run fastapi server.\"\"\"\n# pylint: disable=invalid-name, duplicate-code, no-name-in-module, broad-except\n# import nest_asyncio\n\n# import sys\nimport asyncio\nimport os\nfrom signal import SIG_DFL, SIGINT, signal\nfrom typing import Optional\n\nimport nest_asyncio\nimport portalocker\nimport uvicorn\nfrom deepl_scraper_pp.deepl_tr import deepl_tr\nfrom fastapi import FastAPI, Query\nfrom get_ppbrowser.get_ppbrowser import get_ppbrowser\n\n# import logzero\nfrom logzero import logger\nfrom pydantic import BaseModel\n\nfrom deepl_fastapi import __version__\n\n# lazy loading LOOP, wait for run_uvicorn to start first\n# import lazy_import\n# get_ppbrowser = lazy_import.lazy_module(get_ppbrowser)\n\n\nnest_asyncio.apply()\nport = 8001\n\n\nasync def get_page():\n    \"\"\"Get page.\"\"\"\n    try:\n        browser = await get_ppbrowser()\n    except Exception as exc:\n        logger.error(exc)\n        raise\n    try:\n        page = await browser.newPage()\n    except Exception as exc:\n        logger.error(exc)\n        raise\n\n    url = r\"https://www.deepl.com/translator\"\n    try:\n        await page.goto(url, timeout=16 * 1000)\n    except Exception as exc:\n        logger.error(exc)\n        raise\n\n    return page\n\n\ntry:\n    LOOP = asyncio.get_event_loop()\n    # LOOP = asyncio.get_running_loop()\nexcept Exception as exc_:\n    logger.error(\"weird: %s\", exc_)\n    raise SystemExit(1) from exc_\n\ntry:\n    PAGE = LOOP.run_until_complete(get_page())\nexcept Exception as exc_:\n    logger.error(exc_)\n    raise SystemExit(\"Unable to connect to deepl.com\") from exc_\n\n\nclass Text(BaseModel):  # pylint: disable=too-few-public-methods\n    \"\"\"Define Text model.\"\"\"\n\n    text: str\n    from_lang: Optional[str] = None\n    to_lang: Optional[str] = None\n    description: Optional[str] = None\n\n\napp = FastAPI(\n    title=\"deepl-fastapi\",\n    version=__version__,\n)\n\n\n@app.post(\"/text/\")\nasync def post_text(q: Text):\n    \"\"\"Post q.\"\"\"\n    text = q.text\n    to_lang = q.to_lang\n    from_lang = q.from_lang\n    logger.debug(\"text: %s\", text)\n\n    # _ = sent_corr(text1, text2)\n    try:\n        _ = await deepl_tr(\n            text,\n            from_lang,\n            to_lang,\n            page=PAGE,\n        )\n    except Exception as exc:\n        logger.error(exc)\n        _ = {\"error\": True, \"message\": str(exc)}\n\n    return {\"q\": q, \"result\": _}\n\n\n@app.get(\"/text/\")\nasync def get_text(\n    q: Optional[str] = Query(\n        None,\n        max_length=1500,\n        min_length=1,\n        title=\"text to translate\",\n        description=(\n            \"max. 5000 chars, paragraphs will not be preserved.\"\n            \"multiple translations may be provided for short phrases.\"\n        ),\n    ),\n    from_lang: Optional[str] = None,\n    to_lang: Optional[str] = \"zh\",\n):\n    \"\"\"Get text.\n\n    http://127.0.0.1:8000/text/?q=abc&to_lang=zh\n    \"\"\"\n    result = {\n        \"q\": q,\n        \"from_lang\": from_lang,\n        \"to_lang\": to_lang,\n    }\n    try:\n        trtext = await deepl_tr(\n            q,\n            from_lang,\n            to_lang,\n            page=PAGE,\n        )\n    except Exception as exc:\n        logger.error(exc)\n        trtext = str(exc)\n\n    result.update({\"trtext\": trtext})\n    result.update({\"translation\": trtext})\n\n    logger.debug(\"result: %s\", result)\n\n    return result\n\n\ndef run_uvicorn():\n    \"\"\"Run uvicor.\n\n    Must be run from a different file, e.g., run_uvicorn.py\n    \"\"\"\n    uvicorn.run(\n        # app=\"deepl_fastapi.deepl_server:app\",\n        app=app,  # this should work with python -m deepl_fastapi.deepl_server\n        # still \"attached to a different loop\" error\n        host=\"0.0.0.0\",\n        # port=8000,\n        port=port,\n        # debug=True,\n        # reload=True,\n        # workers=2,\n        # loop=\"asyncio\",  # default \"auto\"\n        # loop=\"uvloop\",  # posix (linux and mac) only\n    )\n\n\nasync def main():\n    \"\"\"Start run_uvicorn in the current our own LOOP.\n\n    LOOP was used in deepl_scraper_pp.deepl_tr\n    \"\"\"\n    # from get_ppbrowser.get_ppbrowser import LOOP\n\n    # loop = asyncio.new_event_loop()\n    # loop = asyncio.get_event_loop()\n\n    # loop.run_in_executor(None, run_uvicorn)  # current loop\n\n    future = LOOP.run_in_executor(None, run_uvicorn)\n\n    # future = loop.run_in_executor(None, run_uvicorn)  # future from different loop\n\n    # errors, crashed\n    # future = LOOP.run_in_executor(LOOP, run_uvicorn)\n    # future = loop.run_in_executor(LOOP, run_uvicorn)\n\n    await future  # wrong?\n\n    _ = \"\"\"\n    try:\n        await future\n    except Exception as exc:\n        logger.error(exc)\n        raise SystemExit(1) from exc\n    # \"\"\"\n\n\nif __name__ == \"__main__\":\n    logger.info(\"pid: %s\", os.getpid())\n\n    signal(SIGINT, SIG_DFL)\n    print(\"ctrl-C to interrupt\")\n\n    # uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n    # uvicorn.run(\"app.app:app\",host='0.0.0.0', port=4557, reload=True, debug=True, workers=3)\n\n    # uvicorn deepl_fastapi.deepl_server:app --reload\n    # works with nest_asyncio\n\n    # loop = asyncio.new_event_loop()\n    # loop.create_task(main())\n    # loop.run_forever()\n\n    _ = \"\"\"\n    try:\n        LOOP.run_until_complete(main())\n    except Exception as exc:\n        logger.error(exc)\n    finally:\n        LOOP.close()\n    # \"\"\"\n\n    _ = \"\"\"\n    try:\n        LOOP.create_task(main())\n        LOOP.run_forever()\n    except Exception as exc:\n        logger.error(exc)\n    finally:\n        LOOP.close()\n    # \"\"\"\n    # only run one instance\n    # if not Path(f\"{__file__}.portalocker.lock\").exists(): sp.Popen(\"touch\n\n    try:\n        # portalocker.lock(file, portalocker.constants.LOCK_EX)\n        with open(f\"{__file__}.portalocker.lock\", \"r+\", encoding=\"utf8\") as fha:\n            portalocker.lock(fha, portalocker.LOCK_EX | portalocker.LOCK_NB)\n    except Exception as exc_:\n        logger.debug(exc_)\n        logger.error(\"Another copy is running, exiting...\")\n        raise SystemExit(1) from exc_\n        # raise\n    finally:\n        # LOOP.close()\n        ...\n\n    logger.debug(\n        \"starting uvicorn at port %s, accessible 127.0.0.1:%s/text/q=test\", port, port\n    )\n    run_uvicorn()\n"}
{"type": "source_file", "path": "run-server.py", "content": "import os\nos.system(\"pythonw start-server\")"}
{"type": "source_file", "path": "start-server.py", "content": "import os\nfrom pathlib import Path\n\nos.system(\"python -V\")\n# py = Path().absolute() / \".venv/Scripts/python.exe\"\n# print(py.exists())\n\nos.system(\"start python -m deepl_fastapi.run_uvicorn\")\nos.system(\"python -V\")"}
{"type": "source_file", "path": "deepl_fastapi/run_uvicorn.py", "content": "\"\"\"Run uvicorn with deepl_fastapi.deepl_server:app.\n\nuvicorn deepl_fastapi.deepl_server:app --reload\n\"\"\"\nfrom pathlib import Path\nfrom signal import SIG_DFL, SIGINT, signal\n\nimport portalocker\nimport uvicorn\nfrom logzero import logger\n\n\ndef run_uvicorn(host=\"127.0.0.1\", port=8000, debug=False, reload=False):\n    \"\"\"Start uvicorn.\"\"\"\n    uvicorn.run(\n        app=\"deepl_fastapi.deepl_server:app\",\n        host=host,\n        port=port,\n        debug=debug,\n        reload=reload,\n        # workers=2,\n        # loop=\"asyncio\",  # default \"auto\"\n        # loop=\"uvloop\",  # posix (linux and mac) only\n    )\n\n\ndef main():\n    \"\"\"Run main.\"\"\"\n    signal(SIGINT, SIG_DFL)\n    print(\"ctrl-C to interrupt\")\n\n    file_ = Path(__file__).parent / \"deepl_server.py\"\n    lockfile = Path(f\"{file_}.portalocker.lock\")\n    if not Path(lockfile).exists():\n        Path(lockfile).touch()\n    try:\n        with open(lockfile, \"r+\", encoding=\"utf8\") as file:\n            # portalocker.lock(file, portalocker.constants.LOCK_EX)\n            portalocker.lock(file, portalocker.LOCK_EX | portalocker.LOCK_NB)\n    except Exception as exc:\n        logger.debug(exc)\n        logger.error(\"Another copy is running, exiting...\")\n        raise SystemExit(1) from exc\n        # raise\n    finally:\n        # LOOP.close()\n        ...\n\n    try:\n        run_uvicorn()\n    except Exception as exc:\n        logger.error(exc)\n        raise SystemExit(1) from exc\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"type": "source_file", "path": "deepl_fastapi/__main__.py", "content": "\"\"\"Run uvicorn with deepl_fastapi.deepl_server:app.\n\nuvicorn deepl_fastapi.deepl_server:app --reload\n\ncopy of run_uvicorn.py\n\"\"\"\n# pylint: disable=duplicate-code\nfrom pathlib import Path\nfrom signal import SIG_DFL, SIGINT, signal\n\nimport portalocker\nimport uvicorn\nfrom logzero import logger\n\n\ndef run_uvicorn(host=\"127.0.0.1\", port=8000, debug=False, reload=False):\n    \"\"\"Run uvicorn.\"\"\"\n    uvicorn.run(\n        app=\"deepl_fastapi.deepl_server:app\",\n        host=host,\n        port=port,\n        debug=debug,\n        reload=reload,\n        # workers=2,\n        # loop=\"asyncio\",  # default \"auto\"\n        # loop=\"uvloop\",  # posix (linux and mac) only\n    )\n\n\ndef main():\n    \"\"\"Run main.\"\"\"\n    signal(SIGINT, SIG_DFL)\n    print(\"ctrl-C to interrupt\")\n\n    file_ = Path(__file__).parent / \"deepl_server.py\"\n    lockfile = Path(f\"{file_}.portalocker.lock\")\n    if not Path(lockfile).exists():\n        Path(lockfile).touch()\n    try:\n        with open(lockfile, \"r+\", encoding=\"utf8\") as file:\n            # portalocker.lock(file, portalocker.constants.LOCK_EX)\n            portalocker.lock(file, portalocker.LOCK_EX | portalocker.LOCK_NB)\n    except Exception as exc:\n        logger.debug(exc)\n        logger.error(\"Another copy is running, exiting...\")\n        raise SystemExit(1) from exc\n        # raise\n    finally:\n        # LOOP.close()\n        ...\n\n    try:\n        run_uvicorn()\n    except Exception as exc:\n        logger.error(exc)\n        raise SystemExit(1) from exc\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"type": "source_file", "path": "deepl_fastapi/__init__.py", "content": "\"\"\"Init.\"\"\"\n# need this to rid of loop is already running\n# get_page (runs pyppeteeer after main loop in uvicorn already started) after\nimport nest_asyncio\n\n# from .deepl_server import app  # make uvicorn deepl_fastapi:app possible\n\nnest_asyncio.apply()\n\n__version__ = \"0.1.2\"\n# __all__ = (\"app\",)\n"}
