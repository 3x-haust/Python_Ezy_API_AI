{"repo_info": {"repo_name": "property-aggregator", "repo_owner": "DEENUU1", "repo_url": "https://github.com/DEENUU1/property-aggregator"}}
{"type": "test_file", "path": "app/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "app/tests/test_integrationtests/test_city.py", "content": "from .fixtures import user_admin, user_admin_access_token, user, user_access_token, city, region\n\n\ndef test_success_return_status_code_201_create_city(client, user_admin_access_token, user, region) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"api/v1/location/city\",\n        json={\n            \"name\": \"Lodz\",\n            \"region_id\": str(region.id),\n        },\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 201\n\n\ndef test_error_return_status_code_400_create_city_already_exists(client, user_admin_access_token, user, region) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"api/v1/location/city\",\n        json={\n            \"name\": \"Lodz\",\n            \"region_id\": str(region.id),\n        },\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 201\n\n\ndef test_error_return_status_code_401_create_city_without_authorization(client, user, region) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"api/v1/location/city\",\n        json={\n            \"name\": \"Lodz\",\n            \"region_id\": str(region.id),\n        },\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_401_create_city_with_invalid_authorization(\n        client,\n        user,\n        region,\n        user_access_token\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"api/v1/location/city\",\n        json={\n            \"name\": \"Lodz\",\n            \"region_id\": str(region.id),\n        },\n        headers={\"Authorization\": f\"Bearer {user_access_token}\"}\n    )\n    assert response.status_code == 403\n\n\ndef test_success_return_status_code_200_get_cities_by_region_id(client, region, city) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f\"api/v1/location/city/region/{region.id}\",\n    )\n    assert response.status_code == 200\n\n\ndef test_success_return_status_code_200_get_cities(client, region, city) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"api/v1/location/city\",\n    )\n    assert response.status_code == 200\n\n\ndef test_success_return_status_code_204_delete_city(client, user_admin_access_token, city) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"api/v1/location/city/{city.id}\",\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 204\n\n\ndef test_error_return_status_code_401_delete_city_without_authorization(client, city) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"api/v1/location/city/{city.id}\",\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_401_delete_city_with_invalid_authorization(\n        client,\n        city,\n        user,\n        user_access_token\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"api/v1/location/city/{city.id}\",\n        headers={\"Authorization\": f\"Bearer {user_access_token}\"}\n    )\n    assert response.status_code == 403\n\n\ndef test_success_return_status_code_200_update_city(client, city, user_admin_access_token) -> None:\n\n    test_client, test_session = client\n\n    response = test_client.put(\n        f\"api/v1/location/city/{city.id}\",\n        json={\n            \"name\": \"Lodz\",\n            \"region_id\": str(city.region_id),\n        },\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 200\n\n\ndef test_error_return_status_code_401_update_city_without_authorization(client, city) -> None:\n    test_client, test_session = client\n\n    response = test_client.put(\n        f\"api/v1/location/city/{city.id}\",\n        json={\n            \"name\": \"Lodz\",\n        },\n    )\n    assert response.status_code == 401\n"}
{"type": "test_file", "path": "app/tests/test_integrationtests/test_notification.py", "content": "from .fixtures import (\n    user,\n    notification,\n    notification_filter,\n    user_admin,\n    user_admin_access_token,\n    offer,\n    region,\n    city,\n    user_access_token\n)\n\n\ndef test_success_return_status_code_201_create_filter(client, user, user_access_token) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        '/api/v1/notification/filter',\n        json={\"user_id\": str(user.id), \"category\": \"Mieszkanie\"},\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 201\n\n\ndef test_error_return_status_code_401_create_filter_annonymous_user(client) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        '/api/v1/notification/filter',\n        json={\"user_id\": \"1\", \"category\": \"Mieszkanie\"}\n    )\n    assert response.status_code == 401\n\n\ndef test_success_return_status_code_200_update_status(client, user, user_access_token, notification_filter) -> None:\n    test_client, test_session = client\n\n    response = test_client.put(\n        f'/api/v1/notification/filter/{notification_filter.id}',\n        json={\"status\": True},\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 200\n\n\ndef test_error_return_status_code_401_update_status_annonymous_user(client, notification_filter) -> None:\n    test_client, test_session = client\n\n    response = test_client.put(\n        f'/api/v1/notification/filter/{notification_filter.id}',\n        json={\"status\": True}\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_404_update_status_notification_filter_not_found(\n        client,\n        user,\n        user_access_token\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.put(\n        f'/api/v1/notification/filter/279dcf76-a100-48b2-9fd4-f891d5093f4c',\n        json={\"status\": True},\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 404\n\n\ndef test_error_return_status_code_403_update_status_notification_filter_invalid_user(\n        client,\n        user_admin,\n        user_admin_access_token,\n        notification_filter\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.put(\n        f'/api/v1/notification/filter/{notification_filter.id}',\n        json={\"status\": True},\n        headers={'Authorization': f'Bearer {user_admin_access_token}'}\n    )\n    assert response.status_code == 403\n\n\ndef test_success_return_status_code_204_delete_notification_filter(\n        client,\n        user,\n        user_access_token,\n        notification_filter\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f'/api/v1/notification/filter/{notification_filter.id}',\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 204\n\n\ndef test_error_return_status_code_404_delete_notification_filter_not_found(\n        client,\n        user,\n        user_access_token,\n        notification_filter\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f'/api/v1/notification/filter/279dcf76-a100-48b2-9fd4-f891d5093f4c',\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 404\n\n\ndef test_error_return_status_code_401_delete_notification_filter_annonymous_user(client, notification_filter) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f'/api/v1/notification/filter/{notification_filter.id}'\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_403_delete_notification_filter_invalid_user(\n        client,\n        notification_filter,\n        user_admin,\n        user_admin_access_token\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f'/api/v1/notification/filter/{notification_filter.id}',\n        headers={'Authorization': f'Bearer {user_admin_access_token}'}\n    )\n    assert response.status_code == 403\n\n\ndef test_success_return_status_code_200_get_all_by_user(client, user, user_access_token, notification_filter) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f'/api/v1/notification/filter',\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 200\n\n\ndef test_success_return_status_code_200_get_notifications_by_user(\n        client,\n        user,\n        user_access_token,\n        notification\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f'/api/v1/notification',\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 200\n\n\ndef test_error_return_status_code_401_get_notifications_by_user_annonymous_user(client) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f'/api/v1/notification'\n    )\n    assert response.status_code == 401\n\n\ndef test_success_return_status_code_200_get_notification_by_user(client, user, user_access_token, notification) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f'/api/v1/notification/{notification.id}',\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 200\n\n\ndef test_error_return_status_code_404_get_notification_by_user_not_found(\n        client,\n        user,\n        user_access_token,\n        notification\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f'/api/v1/notification/279dcf76-a100-48b2-9fd4-f891d5093f4c',\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 404\n\n\ndef test_error_return_status_code_401_get_notification_by_user_annonymous_user(client, notification) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f'/api/v1/notification/{notification.id}'\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_401_get_unread_user_count_annonymous_user(client) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f'/api/v1/notification/unread'\n    )\n    assert response.status_code == 401\n\n"}
{"type": "test_file", "path": "app/tests/test_integrationtests/test_favourite.py", "content": "from .fixtures import user_access_token, user_admin_access_token, user, user_admin, favourite, offer, city, region\n\n\ndef test_success_return_status_code_201_create_favourite(\n        client,\n        user,\n        user_access_token,\n        region,\n        city,\n        offer\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        '/api/v1/favourite',\n        headers={'Authorization': f'Bearer {user_access_token}'},\n        json={'offer_id': str(offer.id)}\n    )\n    assert response.status_code == 201\n\n\ndef test_error_return_status_code_404_create_favourite_offer_not_found(\n        client,\n        user,\n        user_access_token,\n        region,\n        city\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        '/api/v1/favourite',\n        headers={'Authorization': f'Bearer {user_access_token}'},\n        json={'offer_id': '279dcf76-a100-48b2-9fd4-f891d5093f4c'}\n    )\n    assert response.status_code == 404\n\n\ndef test_error_return_status_code_401_create_favourite_anonymous_user(\n        client,\n        region,\n        city,\n        offer,\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        '/api/v1/favourite',\n        json={'offer_id': str(offer.id)}\n    )\n    assert response.status_code == 401\n\n\ndef test_success_return_status_code_204_delete_favourite(\n        client,\n        user,\n        user_access_token,\n        favourite\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f'/api/v1/favourite/{favourite.id}',\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 204\n\n\ndef test_error_return_status_code_404_delete_favourite_favourite_not_found(\n        client,\n        user,\n        user_access_token,\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        '/api/v1/favourite/279dcf76-a100-48b2-9fd4-f891d5093f4c',\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 404\n\n\ndef test_error_return_status_code_401_delete_favourite_anonymous_user(\n        client,\n        region,\n        city,\n        offer,\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f'/api/v1/favourite/{offer.id}',\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_401_delete_favourite_invalid_user(\n        client,\n        user_admin,\n        user_admin_access_token,\n        favourite\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f'/api/v1/favourite/{favourite.id}',\n        headers={'Authorization': f'Bearer {user_admin_access_token}'}\n    )\n    assert response.status_code == 401\n\n\ndef test_success_return_status_code_200_get_all_by_user(\n        client,\n        user,\n        user_access_token,\n        favourite\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"api/v1/favourite\",\n        headers={'Authorization': f'Bearer {user_access_token}'}\n    )\n    assert response.status_code == 200\n\n\ndef test_error_return_status_code_401_get_all_by_user_anonymous_user(\n        client,\n        region,\n        city,\n        offer,\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"api/v1/favourite\",\n    )\n    assert response.status_code == 401\n"}
{"type": "test_file", "path": "app/tests/conftest.py", "content": "import os\nimport sys\nfrom typing import Generator, Any\n\nimport pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\nfrom models import offer, location, user, favourite, photo, notification, notification_filter\nfrom config.database import get_db\nfrom routers.api import router\nfrom utils.init_db import create_tables\n\nengine = create_engine(\n    \"sqlite:///:memory:\",\n    connect_args={\"check_same_thread\": False},\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\ndef test_init_db() -> None:\n    offer.Offer.metadata.create_all(bind=engine)\n    location.Region.metadata.create_all(bind=engine)\n    location.City.metadata.create_all(bind=engine)\n    photo.Photo.metadata.create_all(bind=engine)\n    user.User.metadata.create_all(bind=engine)\n    favourite.Favorite.metadata.create_all(bind=engine)\n    notification.Notification.metadata.create_all(bind=engine)\n    notification_filter.NotificationFilter.metadata.create_all(bind=engine)\n\n\ndef start_app():\n    app = FastAPI()\n    app.include_router(router)\n    return app\n\n\n@pytest.fixture()\ndef app() -> Generator:\n    create_tables()\n    _app = start_app()\n    yield _app\n\n\n@pytest.fixture\ndef test_get_db():\n    test_init_db()\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n        engine.dispose()\n\n\nSessionTesting = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\n@pytest.fixture(scope=\"function\")\ndef db_session(app: FastAPI) -> Generator[SessionTesting, Any, None]:\n    connection = engine.connect()\n    transaction = connection.begin()\n    session = SessionTesting(bind=connection)\n    yield session  # use the session in tests.\n    session.close()\n    transaction.rollback()\n    connection.close()\n\n\n@pytest.fixture(scope=\"function\")\ndef client(\n        app: FastAPI, db_session: SessionTesting\n) -> Generator[TestClient, Any, None]:\n    \"\"\"\n    Create a new FastAPI TestClient that uses the `db_session` fixture to override\n    the `get_db` dependency that is injected into routes.\n    \"\"\"\n    test_init_db()\n\n    def _get_test_db():\n        try:\n            yield db_session\n        finally:\n            pass\n\n    app.dependency_overrides[get_db] = _get_test_db\n    with TestClient(app) as client:\n        yield client, db_session\n"}
{"type": "test_file", "path": "app/tests/test_integrationtests/fixtures.py", "content": "import pytest\n\nfrom auth.security import get_password_hash\nfrom models.offer import CategoryEnum, SubCategoryEnum, BuildingTypeEnum\nfrom repositories.city_repository import CityRepository\nfrom repositories.offer_repository import OfferRepository\nfrom repositories.region_repository import RegionRepository\nfrom repositories.user_repository import UserRepository\nfrom schemas.location import RegionInput, CityInput\nfrom schemas.offer import OfferScraper\nfrom schemas.photo import PhotoInput\nfrom schemas.user import UserIn\nfrom schemas.favourite import FavouriteInput\nfrom repositories.favourite_repository import FavouriteRepository\nfrom repositories.notification_repository import NotificationRepository\nfrom repositories.notificationfilter_repository import NotificationFilterRepository\nfrom schemas.notification import NotificationInput\nfrom schemas.notification_filter import NotificationFilterInput\n\n\n@pytest.fixture(scope=\"function\")\ndef region(client):\n    test_client, db_session = client\n\n    region = RegionRepository(db_session).create(RegionInput(name=\"Łódzkie\"))\n    return region\n\n\n@pytest.fixture(scope=\"function\")\ndef city(client, region):\n    test_client, db_session = client\n\n    city = CityRepository(db_session).create(CityInput(name=\"Łódź\", region_id=region.id))\n    return city\n\n\n@pytest.fixture(scope=\"function\")\ndef offer(client, city):\n    test_client, test_session = client\n    photo_input = PhotoInput(url=\"https://google.com/img/123\")\n\n    data = OfferScraper(\n        title=\"string\",\n        details_url=\"string\",\n        category=CategoryEnum.MIESZKANIE,\n        sub_category=SubCategoryEnum.WYNAJEM,\n        building_type=BuildingTypeEnum.BLOK,\n        price=1000.00,\n        rent=200,\n        description=\"test\",\n        price_per_m=300,\n        area=1000,\n        building_floot=10,\n        floor=1,\n        rooms=2,\n        photos=[photo_input],\n        region_name=\"Łódzkie\",\n        city_name=\"Łódź\",\n    )\n    return OfferRepository(test_session).create(data, city.id)\n\n\n@pytest.fixture(scope=\"function\")\ndef user_admin(client):\n    test_client, db_session = client\n\n    password = \"XXXX\"\n    hashed_password = get_password_hash(password)\n\n    user = UserRepository(db_session).create(\n        UserIn(\n            email=\"test@example.com\",\n            password=password,\n            username=\"XXXX\",\n            is_superuser=True,\n        ),\n        hashed_password=hashed_password\n    )\n    return user\n\n\n@pytest.fixture(scope=\"function\")\ndef user(client):\n    test_client, db_session = client\n\n    password = \"XXXX\"\n    hashed_password = get_password_hash(password)\n\n    user = UserRepository(db_session).create(\n        UserIn(\n            email=\"test2@example.com\",\n            password=password,\n            username=\"XXXX2\",\n        ),\n        hashed_password=hashed_password\n    )\n    return user\n\n\n@pytest.fixture(scope=\"function\")\ndef user_admin_access_token(user_admin, client):\n    test_client, db_session = client\n\n    data = {'grant_type': '', 'username': 'XXXX', 'password': \"XXXX\", 'scope': '', 'client_id': '',\n            'client_secret': ''}\n    access_token = test_client.post(\n        \"/api/v1/user/login\",\n        data=data,\n    ).json()[\"access_token\"]\n    return access_token\n\n\n@pytest.fixture(scope=\"function\")\ndef user_access_token(user, client):\n    test_client, db_session = client\n\n    data = {'grant_type': '', 'username': 'XXXX2', 'password': \"XXXX\", 'scope': '', 'client_id': '',\n            'client_secret': ''}\n    access_token = test_client.post(\n        \"/api/v1/user/login\",\n        data=data,\n    ).json()[\"access_token\"]\n    return access_token\n\n\n@pytest.fixture(scope=\"function\")\ndef favourite(client, user, offer):\n    test_client, db_session = client\n\n    return FavouriteRepository(db_session).create(FavouriteInput(user_id=user.id, offer_id=offer.id))\n\n\n@pytest.fixture(scope=\"function\")\ndef notification(client, user, offer):\n    test_client, db_session = client\n\n    return NotificationRepository(db_session).create(\n        NotificationInput(\n            user_id=user.id,\n            title=\"New 4 offers\",\n            message=\"test message\"\n        )\n    )\n\n\n@pytest.fixture(scope=\"function\")\ndef notification_filter(client, user):\n    test_client, db_session = client\n\n    return NotificationFilterRepository(db_session).create(\n        NotificationFilterInput(\n            user_id=user.id,\n            category=CategoryEnum.MIESZKANIE,\n        )\n    )\n\n\noffer_data = {\n    \"title\": \"string\",\n    \"details_url\": \"string\",\n    \"category\": \"Mieszkanie\",\n    \"sub_category\": \"Wynajem\",\n    \"building_type\": \"Apartamentowiec\",\n    \"price\": 0,\n    \"rent\": 0,\n    \"description\": \"string\",\n    \"price_per_m\": 0,\n    \"area\": 0,\n    \"building_floot\": 0,\n    \"floor\": 0,\n    \"rooms\": 0,\n    \"furniture\": True,\n    \"photos\": [\n        {\n            \"url\": \"string\"\n        }\n    ],\n    \"region_name\": \"string\",\n    \"city_name\": \"string\"\n}"}
{"type": "test_file", "path": "app/tests/test_integrationtests/__init__.py", "content": ""}
{"type": "test_file", "path": "app/tests/test_integrationtests/test_region.py", "content": "from .fixtures import user_admin, user_admin_access_token, user, user_access_token, region\n\n\ndef test_success_return_status_code_201_create_region(client, user_admin, user_admin_access_token) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"api/v1/location/region\",\n        json={\n            \"name\": \"Łódzkie\"\n        },\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 201\n\n\ndef test_error_status_code_400_create_region_already_exists(\n        client,\n        user_admin,\n        user_admin_access_token,\n        region\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"api/v1/location/region\",\n        json={\n            \"name\": region.name\n        },\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 400\n\n\ndef test_error_return_status_code_401_create_region_annoymous_user(client) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"api/v1/location/region\",\n        json={\n            \"name\": \"Łódzkie\"\n        }\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_403_create_region_user_account(client, user, user_access_token) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"api/v1/location/region\",\n        json={\n            \"name\": \"Łódzkie\"\n        },\n        headers={\"Authorization\": f\"Bearer {user_access_token}\"}\n    )\n    assert response.status_code == 403\n\n\ndef test_success_return_status_code_200_get_regions(client) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"api/v1/location/region\"\n    )\n    assert response.status_code == 200\n\n\ndef test_success_return_status_code_204_delete_region(client, user_admin, user_admin_access_token, region) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"api/v1/location/region/{region.id}\",\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 204\n\n\ndef test_error_return_status_code_401_delete_region_annoymous_user(client, region) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"api/v1/location/region/{region.id}\"\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_404_delete_region_region_does_not_exists(\n        client,\n        user_admin,\n        user_admin_access_token\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"api/v1/location/region/279dcf76-a100-48b2-9fd4-f891d5093f4c\",\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 404\n\n\ndef test_success_return_status_code_200_update_region(client, user_admin, user_admin_access_token, region) -> None:\n    test_client, test_session = client\n\n    response = test_client.put(\n        f\"api/v1/location/region/{region.id}\",\n        json={\n            \"name\": \"Lodzkie\"\n        },\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 200\n\n\ndef test_error_return_status_code_401_update_region_annoymous_user(client, region) -> None:\n    test_client, test_session = client\n\n    response = test_client.put(\n        f\"api/v1/location/region/{region.id}\",\n        json={\n            \"name\": \"Lodzkie\"\n        }\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_404_update_region_region_does_not_exists(\n        client,\n        user_admin,\n        user_admin_access_token\n) -> None:\n    test_client, test_session = client\n\n    response = test_client.put(\n        f\"api/v1/location/region/279dcf76-a100-48b2-9fd4-f891d5093f4c\",\n        json={\n            \"name\": \"Lodzkie\"\n        },\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"}\n    )\n    assert response.status_code == 404\n"}
{"type": "test_file", "path": "app/tests/test_integrationtests/test_root.py", "content": "def test_success_health(client) -> None:\n    test_client, _ = client\n\n    response = test_client.get(\"api/v1/health\")\n    assert response.status_code == 200\n    assert response.json() == {\"status\": \"ok\"}\n"}
{"type": "test_file", "path": "app/tests/test_unittests/test_city.py", "content": "import os\nimport sys\n\nimport pytest\n\nfrom ..conftest import test_get_db\nfrom repositories.city_repository import CityRepository\nfrom repositories.region_repository import RegionRepository\nfrom schemas.location import CityInput, RegionInput\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\n@pytest.fixture()\ndef region(test_get_db):\n    repository = RegionRepository(test_get_db)\n    region = repository.create(RegionInput(name=\"Łódzkie\"))\n    return region\n\n\ndef test_success_create_city_object(test_get_db, region) -> None:\n    repository = CityRepository(test_get_db)\n    city = repository.create(CityInput(name=\"Uć\", region_id=region.id))\n\n    assert city.name == \"Uć\"\n    assert city.region_id == region.id\n\n\ndef test_success_get_all_city_objects(test_get_db, region) -> None:\n    repository = CityRepository(test_get_db)\n    repository.create(CityInput(name=\"Uć\", region_id=region.id))\n    repository.create(CityInput(name=\"Łódź\", region_id=region.id))\n\n    get_all = repository.get_all()\n    assert len(get_all) == 2\n    assert get_all[0].name == \"Uć\"\n    assert get_all[1].name == \"Łódź\"\n\n\ndef test_success_get_all_city_objects_by_region(test_get_db, region) -> None:\n    repository = CityRepository(test_get_db)\n    repository.create(CityInput(name=\"Uć\", region_id=region.id))\n    repository.create(CityInput(name=\"Łódź\", region_id=region.id))\n\n    get_all = repository.get_all_by_region(region.id)\n    assert len(get_all) == 2\n    assert get_all[0].name == \"Uć\"\n    assert get_all[1].name == \"Łódź\"\n\n\ndef test_success_city_exists_by_name(test_get_db, region) -> None:\n    repository = CityRepository(test_get_db)\n    repository.create(CityInput(name=\"Uć\", region_id=region.id))\n\n    assert repository.city_exists_by_name(\"Uć\")\n"}
{"type": "test_file", "path": "app/tests/test_unittests/test_user.py", "content": "import os\nimport sys\n\nimport pytest\n\nfrom ..conftest import test_get_db\nfrom repositories.user_repository import UserRepository\nfrom schemas.user import UserIn\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\n@pytest.fixture()\ndef user(test_get_db):\n    repository = UserRepository(test_get_db)\n    hashed_password = \"test_hasshed_password\"\n    user = repository.create(\n        UserIn(\n            email=\"test@example.com\",\n            username=\"test_user\",\n            password=\"test_password\"\n        ),\n        hashed_password=hashed_password\n    )\n    return user\n\n\ndef test_success_create_user_object(test_get_db, user) -> None:\n    assert user.email == \"test@example.com\"\n    assert user.username == \"test_user\"\n    assert user.is_active\n    assert user.is_superuser == False\n\n\ndef test_success_user_exists_by_email(test_get_db, user) -> None:\n    repository = UserRepository(test_get_db)\n    assert repository.user_exists_by_email(user.email)\n\n\ndef test_success_user_exists_by_username(test_get_db, user) -> None:\n    repository = UserRepository(test_get_db)\n    assert repository.user_exists_by_username(user.username)\n\n\ndef test_success_get_user_by_email(test_get_db, user) -> None:\n    repository = UserRepository(test_get_db)\n    user = repository.get_user_by_email(user.email)\n    assert user.email == \"test@example.com\"\n    assert user.username == \"test_user\"\n    assert user.is_active\n    assert user.is_superuser == False\n\n\ndef test_success_get_user_by_username(test_get_db, user) -> None:\n    repository = UserRepository(test_get_db)\n    user = repository.get_user_by_username(user.username)\n    assert user.email == \"test@example.com\"\n    assert user.username == \"test_user\"\n    assert user.is_active\n    assert user.is_superuser == False\n"}
{"type": "test_file", "path": "app/tests/test_integrationtests/test_offer.py", "content": "from .fixtures import user_admin_access_token, user, user_access_token, city, region, offer, offer_data, user_admin\n\n\ndef test_success_return_status_code_201_create_offer(client, user_admin, user_admin_access_token, city, region) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"/api/v1/offer\",\n        json=[offer_data],\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"},\n    )\n    assert response.status_code == 201\n\n\ndef test_error_return_status_code_400_create_offer_already_exists(client, city, region, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.post(\n        \"/api/v1/offer\",\n        json=[offer_data],\n    )\n    assert response.status_code == 400\n\n\ndef test_success_return_status_code_204_delete_offer(client, user_admin_access_token, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"/api/v1/offer/{offer.id}\",\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"},\n    )\n    assert response.status_code == 204\n\n\ndef test_error_return_status_code_404_delete_offer_not_found(client, user_admin_access_token) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"/api/v1/offer/279dcf76-a100-48b2-9fd4-f891d5093f4c\",\n        headers={\"Authorization\": f\"Bearer {user_admin_access_token}\"},\n    )\n    assert response.status_code == 404\n\n\ndef test_error_return_status_code_401_delete_offer_unauthorized(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"/api/v1/offer/{offer.id}\",\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_403_delete_offer_user(client, offer, user, user_access_token) -> None:\n    test_client, test_session = client\n\n    response = test_client.delete(\n        f\"/api/v1/offer/{offer.id}\",\n        headers={\"Authorization\": f\"Bearer {user_access_token}\"},\n    )\n    assert response.status_code == 403\n\n\ndef test_success_return_status_code_200_get_offers(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"/api/v1/offer\",\n    )\n    assert response.status_code == 200\n\n\ndef test_success_return_status_code_200_get_offer_valid_params(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"/api/v1/offer?page=1&page_size=15&category=Mieszkanie&subcategory=Wynajem&floor=1\",\n    )\n    assert response.status_code == 200\n\n\ndef test_error_return_status_code_422_get_offer_page_number_lower_than_zero(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"/api/v1/offer?page=-1\",\n    )\n    assert response.status_code == 422\n\n\ndef test_error_return_status_code_422_get_offer_price_min_lower_than_zero(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"/api/v1/offer?price_min=-1\",\n    )\n    assert response.status_code == 422\n\n\ndef test_error_return_status_code_422_get_offer_price_max_lower_than_zero(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"/api/v1/offer?price_max=-1\",\n    )\n    assert response.status_code == 422\n\n\ndef test_error_return_status_code_422_get_offer_area_min_lower_than_zero(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"/api/v1/offer?area_min=-1\",\n    )\n    assert response.status_code == 422\n\n\ndef test_error_return_status_code_422_get_offer_area_max_lower_than_zero(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"/api/v1/offer?area_max=-1\",\n    )\n    assert response.status_code == 422\n\n\ndef test_error_return_status_code_422_get_offer_rooms_lower_than_zero(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        \"/api/v1/offer?rooms=-1\",\n    )\n    assert response.status_code == 422\n\n\ndef test_success_return_status_code_200_get_offer(client, offer) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f\"/api/v1/offer/{offer.id}\",\n    )\n    assert response.status_code == 200\n\n\ndef test_error_return_status_code_404_get_offer_not_found(client) -> None:\n    test_client, test_session = client\n\n    response = test_client.get(\n        f\"/api/v1/offer/279dcf76-a100-48b2-9fd4-f891d5093f4c\",\n    )\n    assert response.status_code == 404\n"}
{"type": "test_file", "path": "app/tests/test_unittests/test_region.py", "content": "import os\nimport sys\n\nfrom ..conftest import test_get_db\nfrom repositories.region_repository import RegionRepository\nfrom schemas.location import RegionInput\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\ndef test_success_create_region_object(test_get_db) -> None:\n    repository = RegionRepository(test_get_db)\n    created_region = repository.create(RegionInput(name=\"Test Region\"))\n    assert created_region.name == \"Test Region\"\n\n\ndef test_success_get_all_regions_objects(test_get_db) -> None:\n    repository = RegionRepository(test_get_db)\n    repository.create(RegionInput(name=\"Test Region\"))\n    regions = repository.get_all()\n    assert len(regions) == 1\n\n\ndef test_success_get_region_by_id(test_get_db) -> None:\n    repository = RegionRepository(test_get_db)\n    created_region = repository.create(RegionInput(name=\"Test Region\"))\n    fetched_region = repository.get_by_id(created_region.id)\n    assert fetched_region.name == \"Test Region\"\n\n\ndef test_success_update_region(test_get_db) -> None:\n    repository = RegionRepository(test_get_db)\n    created_region = repository.create(RegionInput(name=\"Test Region\"))\n    region = repository.get_by_id(created_region.id)\n    updated_region_input = RegionInput(name=\"Updated Region\")\n    updated_region = repository.update(region, updated_region_input)\n    assert updated_region.name == \"Updated Region\"\n\n\ndef test_success_delete_region(test_get_db) -> None:\n    repository = RegionRepository(test_get_db)\n    created_region = repository.create(RegionInput(name=\"Test Region\"))\n    region = repository.get_by_id(created_region.id)\n    assert repository.delete(region)\n"}
{"type": "test_file", "path": "app/tests/test_unittests/test_favourite.py", "content": "import os\nimport sys\n\nimport pytest\n\nfrom ..conftest import test_get_db\nfrom models.offer import CategoryEnum, SubCategoryEnum, BuildingTypeEnum\nfrom repositories.city_repository import CityRepository\nfrom repositories.favourite_repository import FavouriteRepository\nfrom repositories.offer_repository import OfferRepository\nfrom repositories.region_repository import RegionRepository\nfrom repositories.user_repository import UserRepository\nfrom schemas.favourite import FavouriteInput\nfrom schemas.location import CityInput, RegionInput\nfrom schemas.offer import OfferScraper\nfrom schemas.photo import PhotoInput\nfrom schemas.user import UserIn\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\n@pytest.fixture()\ndef user(test_get_db):\n    repository = UserRepository(test_get_db)\n    hashed_password = \"test_hasshed_password\"\n    user = repository.create(\n        UserIn(\n            email=\"test@example.com\",\n            username=\"test_user\",\n            password=\"test_password\"\n        ),\n        hashed_password=hashed_password\n    )\n    return user\n\n\n@pytest.fixture()\ndef region(test_get_db):\n    repository = RegionRepository(test_get_db)\n    return repository.create(RegionInput(name=\"Łódzkie\"))\n\n\n@pytest.fixture()\ndef city(test_get_db, region):\n    repository = CityRepository(test_get_db)\n    city_created = repository.create(CityInput(name=\"Łódź\", region_id=region.id))\n    city = repository.get_by_name(city_created.name)\n    return city\n\n\n@pytest.fixture()\ndef offer(test_get_db, city):\n    data = OfferScraper(\n        title=\"test offer\",\n        details_url=\"https://google.com\",\n        category=CategoryEnum.POKOJ,\n        sub_category=SubCategoryEnum.WYNAJEM,\n        building_type=BuildingTypeEnum.POZOSTALE,\n        description=\"test offer\",\n        price=999.999,\n        rent=100,\n        price_per_m=100,\n        area=100,\n        building_floot=1,\n        floor=1,\n        rooms=1,\n        furniture=True,\n        photos=[PhotoInput(url=\"https://google.com/img123\")],\n        region_name=\"Łódzkie\",\n        city_name=\"Łódź\",\n    )\n\n    repository = OfferRepository(test_get_db)\n    offer = repository.create(data, city.id)\n    return offer\n\n\ndef test_success_create_favourite_object(test_get_db, offer, user) -> None:\n    repository = FavouriteRepository(test_get_db)\n    favourite = repository.create(FavouriteInput(user_id=user.id, offer_id=offer.id))\n    assert favourite.user_id == user.id\n    assert favourite.offer_id == offer.id\n\n\ndef test_get_all_by_user(test_get_db, offer, user) -> None:\n    repository = FavouriteRepository(test_get_db)\n    repository.create(FavouriteInput(user_id=user.id, offer_id=offer.id))\n\n    user_favourites = repository.get_all_by_user(user.id)\n    assert len(user_favourites) == 1\n    assert user_favourites[0].offer_id == offer.id\n"}
{"type": "test_file", "path": "app/tests/test_unittests/test_offer.py", "content": "import os\nimport sys\n\nimport pytest\n\nfrom ..conftest import test_get_db\nfrom models.offer import SubCategoryEnum, CategoryEnum, BuildingTypeEnum\nfrom repositories.city_repository import CityRepository\nfrom repositories.offer_repository import OfferRepository\nfrom repositories.region_repository import RegionRepository\nfrom schemas.location import CityInput, RegionInput\nfrom schemas.offer import OfferScraper\nfrom schemas.photo import PhotoInput\n\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\n\n@pytest.fixture()\ndef region(test_get_db):\n    repository = RegionRepository(test_get_db)\n    return repository.create(RegionInput(name=\"Łódzkie\"))\n\n\n@pytest.fixture()\ndef city(test_get_db, region):\n    repository = CityRepository(test_get_db)\n    city_created = repository.create(CityInput(name=\"Łódź\", region_id=region.id))\n    city = repository.get_by_name(city_created.name)\n    return city\n\n\n@pytest.fixture()\ndef offer(test_get_db, city):\n    data = OfferScraper(\n        title=\"test offer\",\n        details_url=\"https://google.com\",\n        category=CategoryEnum.POKOJ,\n        sub_category=SubCategoryEnum.WYNAJEM,\n        building_type=BuildingTypeEnum.POZOSTALE,\n        description=\"test offer\",\n        price=999.999,\n        rent=100,\n        price_per_m=100,\n        area=100,\n        building_floot=1,\n        floor=1,\n        rooms=1,\n        furniture=True,\n        photos=[PhotoInput(url=\"https://google.com/img123\")],\n        region_name=\"Łódzkie\",\n        city_name=\"Łódź\",\n    )\n    return data\n\n\ndef test_success_create_offer_scraper_object(test_get_db, offer, city) -> None:\n    repository = OfferRepository(test_get_db)\n    offer = repository.create(offer, city.id)\n    assert offer.title == \"test offer\"\n    assert offer.details_url == \"https://google.com\"\n    assert offer.category == CategoryEnum.POKOJ\n    assert offer.sub_category == SubCategoryEnum.WYNAJEM\n    assert offer.building_type == BuildingTypeEnum.POZOSTALE\n    assert offer.price == 999.999\n    assert offer.rent == 100\n    assert offer.price_per_m == 100\n    assert offer.area == 100\n    assert offer.building_floot == 1\n    assert offer.floor == 1\n    assert offer.rooms == 1\n    assert offer.furniture == True\n    assert offer.photos[0].url == \"https://google.com/img123\"\n\n\ndef test_success_offer_exists_by_url(test_get_db, offer, city) -> None:\n    repository = OfferRepository(test_get_db)\n    offer = repository.create(offer, city.id)\n    assert repository.offer_exists_by_url(offer.details_url)\n\n\ndef test_success_offer_exists_by_id(test_get_db, offer, city) -> None:\n    repository = OfferRepository(test_get_db)\n    offer = repository.create(offer, city.id)\n    assert repository.offer_exists_by_id(offer.id)\n"}
{"type": "test_file", "path": "app/tests/test_integrationtests/test_user.py", "content": "from auth.security import get_password_hash\nfrom repositories.user_repository import UserRepository\nfrom schemas.user import UserIn\n\n\ndef test_success_return_201_status_code_register(client) -> None:\n    test_client, db_session = client\n\n    response = test_client.post(\n        \"/api/v1/user/register\",\n        json={\n            \"email\": \"test@example.com\",\n            \"password\": \"Test123@\",\n            \"username\": \"test\",\n        },\n    )\n    assert response.status_code == 201\n\n\ndef test_error_return_400_status_code_register_invalid_password_7_character(client) -> None:\n    test_client, db_session = client\n\n    response = test_client.post(\n        \"/api/v1/user/register\",\n        json={\n            \"email\": \"test@example.com\",\n            \"password\": \"Test123\",\n            \"username\": \"test\",\n        },\n    )\n    assert response.status_code == 400\n\n\ndef test_error_return_400_status_code_register_invalid_password_no_upper_letters(client) -> None:\n    test_client, db_session = client\n\n    response = test_client.post(\n        \"/api/v1/user/register\",\n        json={\n            \"email\": \"test@example.com\",\n            \"password\": \"test123@\",\n            \"username\": \"test\",\n        },\n    )\n    assert response.status_code == 400\n\n\ndef test_error_return_400_status_code_register_invalid_password_no_special_characters(client) -> None:\n    test_client, db_session = client\n\n    response = test_client.post(\n        \"/api/v1/user/register\",\n        json={\n            \"email\": \"test@example.com\",\n            \"password\": \"Test1234\",\n            \"username\": \"test\",\n        },\n    )\n    assert response.status_code == 400\n\n\ndef test_error_return_400_status_code_register_invalid_password_no_digits(client) -> None:\n    test_client, db_session = client\n\n    response = test_client.post(\n        \"/api/v1/user/register\",\n        json={\n            \"email\": \"test@example.com\",\n            \"password\": \"Testtest@\",\n            \"username\": \"test\",\n        },\n    )\n    assert response.status_code == 400\n\n\ndef test_error_return_status_code_400_register_create_user_with_already_used_email_address(client) -> None:\n    test_client, db_session = client\n\n    UserRepository(db_session).create(\n        UserIn(\n            email=\"test@example.com\",\n            password=\"XXXX\",\n            username=\"test123\"),\n        hashed_password=\"asd\"\n    )\n\n    response = test_client.post(\n        \"/api/v1/user/register\",\n        json={\n            \"email\": \"test@example.com\",\n            \"password\": \"XXXX\",\n            \"username\": \"XXXX\",\n        },\n    )\n    assert response.status_code == 400\n\n\ndef test_error_return_status_code_400_register_create_user_with_already_used_username_address(client) -> None:\n    test_client, db_session = client\n\n    UserRepository(db_session).create(\n        UserIn(\n            email=\"test123@example.com\",\n            password=\"XXXX\",\n            username=\"XXXX\"),\n        hashed_password=\"asd\"\n    )\n\n    response = test_client.post(\n        \"/api/v1/user/register\",\n        json={\n            \"email\": \"test@example.com\",\n            \"password\": \"XXXX\",\n            \"username\": \"XXXX\",\n        },\n    )\n    assert response.status_code == 400\n\n\ndef test_success_return_status_code_201_login(client) -> None:\n    test_client, db_session = client\n\n    password = \"XXXX\"\n    hashed_password = get_password_hash(password)\n\n    UserRepository(db_session).create(\n        UserIn(\n            email=\"test@example.com\",\n            password=password,\n            username=\"XXXX\"),\n        hashed_password=hashed_password\n    )\n    data = {'grant_type': '', 'username': 'XXXX', 'password': password, 'scope': '', 'client_id': '',\n            'client_secret': ''}\n    response = test_client.post(\n        \"/api/v1/user/login\",\n        data=data\n    )\n    assert response.status_code == 201\n\n\ndef test_error_return_status_code_401_login_user_account_does_not_exist(client) -> None:\n    test_client, db_session = client\n\n    data = {'grant_type': '', 'username': 'XXXX', 'password': 'XXXX', 'scope': '', 'client_id': '',\n            'client_secret': ''}\n    response = test_client.post(\n        \"/api/v1/user/login\",\n        data=data\n    )\n    assert response.status_code == 401\n\n\ndef test_error_return_status_code_return_status_code_401_login_user_account_invalid_password(client) -> None:\n    test_client, db_session = client\n\n    password = \"XXXX\"\n    hashed_password = get_password_hash(password)\n\n    UserRepository(db_session).create(\n        UserIn(\n            email=\"test@example.com\",\n            password=password,\n            username=\"XXXX\"),\n        hashed_password=hashed_password\n    )\n    data = {'grant_type': '', 'username': 'XXXX', 'password': 'invalidPassword', 'scope': '', 'client_id': '',\n            'client_secret': ''}\n    response = test_client.post(\n        \"/api/v1/user/login\",\n        data=data\n    )\n    assert response.status_code == 401\n\n\ndef test_success_return_status_code_200_get_me(client) -> None:\n    test_client, db_session = client\n\n    password = \"XXXX\"\n    hashed_password = get_password_hash(password)\n\n    UserRepository(db_session).create(\n        UserIn(\n            email=\"test@example.com\",\n            password=password,\n            username=\"XXXX\"),\n        hashed_password=hashed_password\n    )\n    data = {'grant_type': '', 'username': 'XXXX', 'password': password, 'scope': '', 'client_id': '',\n            'client_secret': ''}\n    response = test_client.post(\n        \"/api/v1/user/login\",\n        data=data\n    )\n    access_token = response.json()[\"access_token\"]\n    response = test_client.get(\n        \"/api/v1/user/me\",\n        headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 200\n\n\ndef test_success_return_status_code_204_delete_me(client) -> None:\n    test_client, db_session = client\n\n    password = \"XXXX\"\n    hashed_password = get_password_hash(password)\n\n    UserRepository(db_session).create(\n        UserIn(\n            email=\"test@example.com\",\n            password=password,\n            username=\"XXXX\"),\n        hashed_password=hashed_password\n    )\n    data = {'grant_type': '', 'username': 'XXXX', 'password': password, 'scope': '', 'client_id': '',\n            'client_secret': ''}\n    response = test_client.post(\n        \"/api/v1/user/login\",\n        data=data\n    )\n    access_token = response.json()[\"access_token\"]\n    response = test_client.delete(\n        \"/api/v1/user/me\",\n        headers={\"Authorization\": f\"Bearer {access_token}\"}\n    )\n    assert response.status_code == 204\n"}
{"type": "test_file", "path": "app/tests/test_unittests/__init__.py", "content": ""}
{"type": "source_file", "path": "app/auth/email_validator.py", "content": "import re\nfrom fastapi import HTTPException, status\n\n\ndef validate_email(email: str) -> None:\n    if not re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Invalid email address\"\n        )\n"}
{"type": "source_file", "path": "app/auth/password_validator.py", "content": "from fastapi import HTTPException, status\n\n\ndef validate_password(password: str) -> None:\n    if len(password) < 8:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Password must be at least 8 characters long\"\n        )\n\n    if not any(char.isupper() for char in password):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Password must contain at least one uppercase letter\"\n        )\n\n    if not any(char.isdigit() for char in password):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Password must contain at least one number\"\n        )\n\n    if not any(char in \"!@#$%^&*()\" for char in password):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Password must contain at least one special character\"\n        )\n"}
{"type": "source_file", "path": "app/auth/security.py", "content": "from datetime import datetime, timedelta, timezone\nfrom typing import Optional\n\nfrom jose import jwt\nfrom passlib.context import CryptContext\n\nfrom config.settings import settings\n\nSECRET_KEY = settings.SECRET_KEY\nALGORITHM = settings.ALGORITHM\nACCESS_TOKEN_EXPIRE_MINUTES = settings.ACCESS_TOKEN_EXPIRE_MINUTES\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n\ndef get_password_hash(password: str):\n    \"\"\"\n    Generate a password hash.\n\n    Args:\n        password (str): The password to hash.\n\n    Returns:\n        str: The hashed password.\n    \"\"\"\n    return pwd_context.hash(password)\n\n\ndef create_access_token(*, data: dict, expires_delta: Optional[timedelta] = None):\n    \"\"\"\n    Create an access token.\n\n    Args:\n        data (dict): The data to encode in the token.\n        expires_delta (Optional[timedelta], optional): The expiration time delta.\n            If None, a default expiration time will be used.\n\n    Returns:\n        str: The encoded access token.\n    \"\"\"\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.now(timezone.utc) + expires_delta\n    else:\n        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n"}
{"type": "source_file", "path": "app/config/__init__.py", "content": ""}
{"type": "source_file", "path": "app/enums/__init__.py", "content": ""}
{"type": "source_file", "path": "app/models/favourite.py", "content": "import uuid\n\nfrom sqlalchemy import Column, ForeignKey, UUID\nfrom sqlalchemy.orm import relationship\n\nfrom config.database import Base\n\n\nclass Favorite(Base):\n    __tablename__ = \"favorites\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    offer_id = Column(UUID(as_uuid=True), ForeignKey(\"offers.id\"))\n\n    user = relationship(\"User\", back_populates=\"favorites\")\n    offer = relationship(\"Offer\", back_populates=\"favorited_by\")\n"}
{"type": "source_file", "path": "app/models/offer.py", "content": "import uuid\nfrom enum import Enum\n\nfrom sqlalchemy import Column, Integer, String, FLOAT, Boolean, ForeignKey, DateTime, func\nfrom sqlalchemy import Enum as SQLAlchemyEnum\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import relationship\n\nfrom config.database import Base\nfrom models.notification import notification_offer_association\n\n\nclass CategoryEnum(str, Enum):\n    \"\"\"\n    Enumeration for categories.\n    \"\"\"\n    MIESZKANIE = \"Mieszkanie\"  # or kawalerka\n    POKOJ = \"Pokój\"\n    DOM = \"Dom\"\n    DZIALKA = \"DZIAŁKA\"\n    BIURA_I_LOKALE = \"Biura i lokale\"\n    GARAZE_I_PARKINGI = \"Garaże i parkingi\"\n    STANCJE_I_POKOJE = \"Stancje i pokoje\"\n    HALE_I_MAGAZYNY = \"Hale i magazyny\"\n    POZOSTALE = \"Pozostałe\"  # Inwestycje\n\n\nclass BuildingTypeEnum(str, Enum):\n    \"\"\"\n    Enumeration for types of buildings.\n    \"\"\"\n    APARTAMENTOWIEC = \"Apartamentowiec\"\n    BLOK = \"Blok\"\n    KAMIENICA = \"Kamienica\"\n    POZOSTALE = \"Pozostałe\"\n    LOFT = \"Loft\"\n\n\nclass SubCategoryEnum(str, Enum):\n    \"\"\"\n    Enumeration for subcategories.\n    \"\"\"\n    WYNAJEM = \"Wynajem\"\n    SPRZEDAZ = \"Sprzedaż\"\n\n\nclass Offer(Base):\n    __tablename__ = \"offers\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    title = Column(String, nullable=False)\n    details_url = Column(String, unique=True, nullable=False)\n    category = Column(SQLAlchemyEnum(CategoryEnum), nullable=False)\n    sub_category = Column(SQLAlchemyEnum(SubCategoryEnum), nullable=False)\n    building_type = Column(SQLAlchemyEnum(BuildingTypeEnum), nullable=True)\n    price = Column(FLOAT, nullable=True)\n    rent = Column(FLOAT, nullable=True)\n    description = Column(String, nullable=True)\n    price_per_m = Column(FLOAT, nullable=True)\n    area = Column(FLOAT, nullable=True)\n    building_floot = Column(Integer, nullable=True)  # TODO change this to floor typo\n    floor = Column(Integer, nullable=True)\n    rooms = Column(Integer, nullable=True)\n    furniture = Column(Boolean, nullable=True)\n    city_id = Column(UUID(as_uuid=True), ForeignKey(\"cities.id\"))\n    city = relationship(\"City\", back_populates=\"offers\")\n    photos = relationship(\"Photo\", back_populates=\"offer\")\n    created_at = Column(DateTime, default=func.now())\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())\n    favorited_by = relationship(\"Favorite\", back_populates=\"offer\")\n    notifications = relationship(\n        \"Notification\",\n        secondary=notification_offer_association,\n        back_populates=\"offers\"\n    )\n"}
{"type": "source_file", "path": "app/notification/abc/__init__.py", "content": ""}
{"type": "source_file", "path": "app/repositories/statistics/offer_statistic_repository.py", "content": "from collections import defaultdict\nfrom typing import Dict, List\n\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import Session\n\nfrom models.offer import Offer\n\n\nclass OfferStatisticRepository:\n    \"\"\"\n    Repository class for retrieving statistics related to offers.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initialize the repository with a database session.\n\n        Args:\n            session (Session): The database session.\n        \"\"\"\n        self.session = session\n\n    def get_number_of_offers_by_month(self) -> List[Dict[str, int]]:\n        \"\"\"\n        Get the number of offers created per month.\n\n        Returns:\n            List[Dict[str, int]]: A list of dictionaries containing month-year and count.\n        \"\"\"\n        offer_counts = self.session.query(\n            func.strftime('%Y-%m', Offer.created_at).label('month_year'),\n            func.count('*').label('count')\n        ).group_by(func.strftime('%Y-%m', Offer.created_at)).all()\n\n        result = [{'month_year': row[0], 'count': row[1]} for row in offer_counts]\n        return result\n\n    def count_offers_by_category(self) -> Dict[str, int]:\n        \"\"\"\n        Count the number of offers by category.\n\n        Returns:\n            Dict[str, int]: A dictionary containing category and its count.\n        \"\"\"\n        category_counts = defaultdict(int)\n        offers = self.session.query(Offer).all()\n        for offer in offers:\n            category_counts[offer.category.value] += 1\n        return category_counts\n\n    def count_offers_by_subcategory(self) -> Dict[str, int]:\n        \"\"\"\n        Count the number of offers by subcategory.\n\n        Returns:\n            Dict[str, int]: A dictionary containing subcategory and its count.\n        \"\"\"\n        subcategory_counts = defaultdict(int)\n        offers = self.session.query(Offer).all()\n        for offer in offers:\n            subcategory_counts[offer.sub_category.value] += 1\n        return subcategory_counts\n"}
{"type": "source_file", "path": "app/repositories/favourite_repository.py", "content": "from typing import Type, List\n\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\n\nfrom models.favourite import Favorite\nfrom schemas.favourite import FavouriteInput, FavouriteOutput, FavouriteInDb\n\n\nclass FavouriteRepository:\n    \"\"\"\n    Repository class for handling favourites.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initialize the repository with a database session.\n\n        Args:\n            session (Session): The database session.\n        \"\"\"\n        self.session = session\n\n    def create(self, data: FavouriteInput) -> FavouriteInDb:\n        \"\"\"\n        Create a new favourite.\n\n        Args:\n            data (FavouriteInput): The favourite data.\n\n        Returns:\n            FavouriteInDb: The created favourite.\n        \"\"\"\n        favourite = Favorite(**data.model_dump(exclude_none=True))\n        self.session.add(favourite)\n        self.session.commit()\n        self.session.refresh(favourite)\n        return FavouriteInDb(**favourite.__dict__)\n\n    def favourite_exists_by_id(self, _id: UUID4) -> bool:\n        \"\"\"\n        Check if a favourite exists by ID.\n\n        Args:\n            _id (UUID4): The favourite ID.\n\n        Returns:\n            bool: True if the favourite exists, False otherwise.\n        \"\"\"\n        favourite = self.session.query(Favorite).filter_by(id=_id).first()\n        return bool(favourite)\n\n    def get_favourite(self, _id: UUID4) -> Type[Favorite]:\n        \"\"\"\n        Get a favourite by ID.\n\n        Args:\n            _id (UUID4): The favourite ID.\n\n        Returns:\n            Type[Favorite]: The favourite instance.\n        \"\"\"\n        return self.session.query(Favorite).filter_by(id=_id).first()\n\n    def get_all_by_user(self, user_id: UUID4) -> List[FavouriteOutput]:\n        \"\"\"\n        Get all favourites by user.\n\n        Args:\n            user_id (UUID4): The user ID.\n\n        Returns:\n            List[FavouriteOutput]: A list of favourite outputs.\n        \"\"\"\n        favourites = self.session.query(Favorite).filter_by(user_id=user_id).all()\n        return [FavouriteOutput(**favourite.__dict__) for favourite in favourites]\n\n    def offer_saved_by_user(self, user_id: UUID4, offer_id: UUID4) -> bool:\n        \"\"\"\n        Check if an offer is saved by a user.\n\n        Args:\n            user_id (UUID4): The user ID.\n            offer_id (UUID4): The offer ID.\n\n        Returns:\n            bool: True if the offer is saved, False otherwise.\n        \"\"\"\n        favourite = self.session.query(Favorite).filter(Favorite.offer_id == offer_id).filter(\n            Favorite.user_id == user_id\n        ).first()\n        return bool(favourite)\n\n    def delete(self, favourite: Type[Favorite]) -> bool:\n        \"\"\"\n        Delete a favourite.\n\n        Args:\n            favourite (Type[Favorite]): The favourite instance.\n\n        Returns:\n            bool: True if deletion was successful, False otherwise.\n        \"\"\"\n        self.session.delete(favourite)\n        self.session.commit()\n        return True\n"}
{"type": "source_file", "path": "app/auth/auth.py", "content": "from fastapi import Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\nfrom sqlalchemy.orm import Session\n\nfrom auth import security\nfrom config.database import get_db\nfrom models.user import User\nfrom schemas.user import TokenData\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n\ndef get_user(db: Session, username: str):\n    \"\"\"\n    Retrieve a user from the database by their username.\n\n    Args:\n        db (Session): The database session.\n        username (str): The username of the user to retrieve.\n\n    Returns:\n        User: The user object if found, otherwise None.\n    \"\"\"\n    return db.query(User).filter(User.username == username).first()\n\n\nasync def get_current_user(\n        token: str = Depends(oauth2_scheme),\n        db: Session = Depends(get_db)\n):\n    \"\"\"\n    Get the current user based on the provided token.\n\n    Args:\n        token (str): The authentication token.\n        db (Session): The database session.\n\n    Raises:\n        HTTPException: If credentials cannot be validated.\n\n    Returns:\n        User: The current user.\n    \"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(\n            token, security.SECRET_KEY, algorithms=[security.ALGORITHM]\n        )\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user(db, username=token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n"}
{"type": "source_file", "path": "app/repositories/region_repository.py", "content": "from sqlalchemy.orm import Session\nfrom models.location import Region\nfrom schemas.location import RegionInput, RegionOutput\nfrom typing import List, Optional, Type\nfrom pydantic import UUID4\n\nclass RegionRepository:\n    \"\"\"\n    Repository class for handling regions.\n    \"\"\"\n    def __init__(self, session: Session):\n        \"\"\"\n        Initialize the repository with a database session.\n\n        Args:\n            session (Session): The database session.\n        \"\"\"\n        self.session = session\n\n    def create(self, data: RegionInput) -> RegionOutput:\n        \"\"\"\n        Create a new region.\n\n        Args:\n            data (RegionInput): The region data.\n\n        Returns:\n            RegionOutput: The created region.\n        \"\"\"\n        region = Region(**data.model_dump(exclude_none=True))\n        self.session.add(region)\n        self.session.commit()\n        self.session.refresh(region)\n        return RegionOutput(id=region.id, name=region.name)\n\n    def get_all(self) -> List[Optional[RegionOutput]]:\n        \"\"\"\n        Get all regions.\n\n        Returns:\n            List[Optional[RegionOutput]]: List of regions.\n        \"\"\"\n        regions = self.session.query(Region).all()\n        return [RegionOutput(**region.__dict__) for region in regions]\n\n    def get_region(self, _id: UUID4) -> RegionOutput:\n        \"\"\"\n        Get a region by ID.\n\n        Args:\n            _id (UUID4): The ID of the region.\n\n        Returns:\n            RegionOutput: The region.\n        \"\"\"\n        region = self.session.query(Region).filter_by(id=_id).first()\n        return RegionOutput(**region.__dict__)\n\n    def get_by_id(self, _id: UUID4) -> Type[Region]:\n        \"\"\"\n        Get a region by ID.\n\n        Args:\n            _id (UUID4): The ID of the region.\n\n        Returns:\n            Type[Region]: The region instance.\n        \"\"\"\n        return self.session.query(Region).filter_by(id=_id).first()\n\n    def get_by_name(self, name: str) -> Type[Region]:\n        \"\"\"\n        Get a region by name.\n\n        Args:\n            name (str): The name of the region.\n\n        Returns:\n            Type[Region]: The region instance.\n        \"\"\"\n        return self.session.query(Region).filter_by(name=name).first()\n\n    def region_exists_by_id(self, _id: UUID4) -> bool:\n        \"\"\"\n        Check if a region exists by ID.\n\n        Args:\n            _id (UUID4): The ID of the region.\n\n        Returns:\n            bool: True if the region exists, False otherwise.\n        \"\"\"\n        region = self.session.query(Region).filter_by(id=_id).first()\n        return region is not None\n\n    def region_exists_by_name(self, name: str) -> bool:\n        \"\"\"\n        Check if a region exists by name.\n\n        Args:\n            name (str): The name of the region.\n\n        Returns:\n            bool: True if the region exists, False otherwise.\n        \"\"\"\n        region = self.session.query(Region).filter_by(name=name).first()\n        return region is not None\n\n    def update(self, region: Type[Region], data: RegionInput) -> RegionInput:\n        \"\"\"\n        Update a region.\n\n        Args:\n            region (Type[Region]): The region instance.\n            data (RegionInput): The updated region data.\n\n        Returns:\n            RegionInput: The updated region data.\n        \"\"\"\n        region.name = data.name\n        self.session.commit()\n        self.session.refresh(region)\n        return RegionInput(**region.__dict__)\n\n    def delete(self, region: Type[Region]) -> bool:\n        \"\"\"\n        Delete a region.\n\n        Args:\n            region (Type[Region]): The region instance.\n\n        Returns:\n            bool: True if deletion was successful, False otherwise.\n        \"\"\"\n        self.session.delete(region)\n        self.session.commit()\n        return True\n"}
{"type": "source_file", "path": "app/models/notification.py", "content": "import uuid\n\nfrom sqlalchemy import Boolean, Column, ForeignKey, DateTime, func, String, Table\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import relationship\n\nfrom config.database import Base\n\nnotification_offer_association = Table(\n    'notification_offer_association',\n    Base.metadata,\n    Column('notification_id', UUID(as_uuid=True), ForeignKey('notifications.id')),\n    Column('offer_id', UUID(as_uuid=True), ForeignKey('offers.id'))\n)\n\n\nclass Notification(Base):\n    __tablename__ = \"notifications\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    title = Column(String, nullable=True)\n    message = Column(String, nullable=True)\n    read = Column(Boolean, default=False)\n    created_at = Column(DateTime, default=func.now())\n    user_id = Column(UUID(as_uuid=True), ForeignKey('users.id'))\n    user = relationship(\"User\", back_populates=\"notifications\")\n    offers = relationship(\"Offer\", secondary=notification_offer_association, back_populates=\"notifications\")\n"}
{"type": "source_file", "path": "app/repositories/notificationfilter_repository.py", "content": "from typing import Type, List\n\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\n\nfrom models.notification_filter import NotificationFilter\nfrom schemas.notification_filter import NotificationFilterInput, NotificationFilterOutput\n\n\nclass NotificationFilterRepository:\n    \"\"\"\n    Repository class for handling notification filters.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initialize the repository with a database session.\n\n        Args:\n            session (Session): The database session.\n        \"\"\"\n        self.session = session\n\n    def create(self, data: NotificationFilterInput) -> NotificationFilterOutput:\n        \"\"\"\n        Create a new notification filter.\n\n        Args:\n            data (NotificationFilterInput): The notification filter data.\n\n        Returns:\n            NotificationFilterOutput: The created notification filter.\n        \"\"\"\n        notification = NotificationFilter(**data.model_dump(exclude_none=True))\n        self.session.add(notification)\n        self.session.commit()\n        self.session.refresh(notification)\n        return NotificationFilterOutput(**notification.__dict__)\n\n    def notification_exists_by_id(self, _id: UUID4) -> bool:\n        \"\"\"\n        Check if a notification filter exists by ID.\n\n        Args:\n            _id (UUID4): The notification filter ID.\n\n        Returns:\n            bool: True if the notification filter exists, False otherwise.\n        \"\"\"\n        notification = self.session.query(NotificationFilter).filter(NotificationFilter.id == _id).first()\n        return notification is not None\n\n    def update_status(self, notification: Type[NotificationFilter], status: bool) -> bool:\n        \"\"\"\n        Update the status of a notification filter.\n\n        Args:\n            notification (Type[NotificationFilter]): The notification filter instance.\n            status (bool): The new status.\n\n        Returns:\n            bool: True if the update was successful, False otherwise.\n        \"\"\"\n        notification.active = status\n        self.session.commit()\n        return True\n\n    def get_notification_by_id(self, _id: UUID4) -> Type[NotificationFilter]:\n        \"\"\"\n        Get a notification filter by ID.\n\n        Args:\n            _id (UUID4): The notification filter ID.\n\n        Returns:\n            Type[NotificationFilter]: The notification filter instance.\n        \"\"\"\n        notification = self.session.query(NotificationFilter).filter(NotificationFilter.id == _id).first()\n        return notification\n\n    def get_all(self) -> List[NotificationFilterOutput]:\n        \"\"\"\n        Get all notification filters.\n\n        Returns:\n            List[NotificationFilterOutput]: A list of notification filter outputs.\n        \"\"\"\n        notifications = self.session.query().all()\n        return [NotificationFilterOutput(**notification.__dict__) for notification in notifications]\n\n    def get_all_active(self) -> List[NotificationFilterOutput]:\n        \"\"\"\n        Get all active notification filters.\n\n        Returns:\n            List[NotificationFilterOutput]: A list of active notification filter outputs.\n        \"\"\"\n        notifications = self.session.query(NotificationFilter).filter(NotificationFilter.active == True).all()\n        return [NotificationFilterOutput(**notification.__dict__) for notification in notifications]\n\n    def get_all_by_user(self, user_id: UUID4) -> List[NotificationFilterOutput]:\n        \"\"\"\n        Get all notification filters by user ID.\n\n        Args:\n            user_id (UUID4): The user ID.\n\n        Returns:\n            List[NotificationFilterOutput]: A list of notification filter outputs.\n        \"\"\"\n        notifications = self.session.query(NotificationFilter).filter(NotificationFilter.user_id == user_id).all()\n        return [NotificationFilterOutput(**notification.__dict__) for notification in notifications]\n\n    def delete(self, notification: Type[NotificationFilter]) -> bool:\n        \"\"\"\n        Delete a notification filter.\n\n        Args:\n            notification (Type[NotificationFilter]): The notification filter instance.\n\n        Returns:\n            bool: True if deletion was successful, False otherwise.\n        \"\"\"\n        self.session.delete(notification)\n        self.session.commit()\n        return True\n"}
{"type": "source_file", "path": "app/config/settings.py", "content": "import os\nfrom typing import Optional\n\nfrom dotenv import load_dotenv\nfrom pydantic_settings import BaseSettings\n\nload_dotenv()\n\n\nclass Settings(BaseSettings):\n    \"\"\"\n    Application settings.\n    \"\"\"\n    # FastAPI\n    # Debug should be set to False on production\n    DEBUG: Optional[bool] = os.getenv(\"DEBUG\") == \"True\"\n    # Title is the name of application\n    TITLE: Optional[str] = os.getenv(\"TITLE\")\n    # SQLITE connection string\n    SQLITE_CONNECTION_STRING: Optional[str] = \"sqlite:///database.db\"  # os.getenv(\"SQLITE_CONNECTION_STRING\")\n    # JWT\n    SECRET_KEY: Optional[str] = os.getenv(\"SECRET_KEY\")\n    ALGORITHM: Optional[str] = os.getenv(\"ALGORITHM\")\n    ACCESS_TOKEN_EXPIRE_MINUTES: Optional[int] = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\"))\n    # Origins\n    ORIGINS: Optional[str] = os.getenv(\"ORIGINS\")\n    # Redis & Celery\n    BROKER: Optional[str] = os.getenv(\"BROKER\")\n    BACKEND: Optional[str] = os.getenv(\"BACKEND\")\n    # PostgreSQL connection string\n    POSTGRESS_USER: Optional[str] = os.getenv(\"POSTGRES_USER\")\n    POSTGRESS_PASSWORD: Optional[str] = os.getenv(\"POSTGRES_PASSWORD\")\n    POSTGRES_CONNECTION_STRING: str = f\"postgresql://{POSTGRESS_USER}:{POSTGRESS_PASSWORD}@postgresserver/db\"\n\n\nsettings = Settings()\n"}
{"type": "source_file", "path": "app/models/location.py", "content": "import uuid\n\nfrom sqlalchemy import Column, String, ForeignKey\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import relationship\n\nfrom config.database import Base\n\n\nclass Region(Base):\n    __tablename__ = \"regions\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    name = Column(String, nullable=False)\n    cities = relationship(\"City\", back_populates=\"region\")\n\n\nclass City(Base):\n    __tablename__ = \"cities\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    name = Column(String, nullable=False)\n    region_id = Column(UUID(as_uuid=True), ForeignKey(\"regions.id\"))\n    region = relationship(\"Region\", back_populates=\"cities\")\n    offers = relationship(\"Offer\", back_populates=\"city\")\n"}
{"type": "source_file", "path": "app/notification/email_notification.py", "content": "from schemas.notification import NotificationOutput\nfrom .abc import notification_strategy\n\n\nclass EmailNotificationStrategy(notification_strategy.NotificationStrategy):\n    \"\"\"\n    Notification strategy for sending email notifications.\n    \"\"\"\n\n    def notify(self, data: NotificationOutput) -> None:\n        \"\"\"\n        Send an email notification.\n\n        Args:\n            data (NotificationOutput): The notification data.\n        \"\"\"\n        print(f\"Sending email notification: {data.message} to {data.user_id}\")\n        return\n"}
{"type": "source_file", "path": "app/models/photo.py", "content": "import uuid\n\nfrom sqlalchemy import Column, String, ForeignKey\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import relationship\n\nfrom config.database import Base\n\n\nclass Photo(Base):\n    __tablename__ = \"photos\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    url = Column(String, nullable=False)\n    offer_id = Column(UUID(as_uuid=True), ForeignKey(\"offers.id\"))\n    offer = relationship(\"Offer\", back_populates=\"photos\")\n"}
{"type": "source_file", "path": "app/notification/__init__.py", "content": ""}
{"type": "source_file", "path": "app/models/notification_filter.py", "content": "import uuid\n\nfrom sqlalchemy import String, Boolean, Column, Float, Integer, ForeignKey\nfrom sqlalchemy import Enum as SQLAlchemyEnum\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom config.database import Base\nfrom .offer import SubCategoryEnum, CategoryEnum, BuildingTypeEnum\nfrom sqlalchemy.orm import relationship\n\n\nclass NotificationFilter(Base):\n    __tablename__ = 'notifications_filters'\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    category = Column(SQLAlchemyEnum(CategoryEnum), nullable=True)\n    sub_category = Column(SQLAlchemyEnum(SubCategoryEnum), nullable=True)\n    building_type = Column(SQLAlchemyEnum(BuildingTypeEnum), nullable=True)\n    price_min = Column(Float, nullable=True)\n    price_max = Column(Float, nullable=True)\n    area_min = Column(Float, nullable=True)\n    area_max = Column(Float, nullable=True)\n    rooms = Column(Integer, nullable=True)\n    furniture = Column(Boolean, nullable=True)\n    floor = Column(Integer, nullable=True)\n    query = Column(String, nullable=True)\n    active = Column(Boolean, default=True)\n    user_id = Column(UUID(as_uuid=True), ForeignKey('users.id'))\n    user = relationship(\"User\", back_populates=\"notifications_filters\")\n"}
{"type": "source_file", "path": "app/repositories/notification_repository.py", "content": "from typing import List, Type\n\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\n\nfrom models.notification import Notification\nfrom models.offer import Offer\nfrom schemas.notification import NotificationOutput, NotificationInput\n\n\nclass NotificationRepository:\n    \"\"\"\n    Repository class for handling notifications.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initialize the repository with a database session.\n\n        Args:\n            session (Session): The database session.\n        \"\"\"\n        self.session = session\n\n    def create(self, notification: NotificationInput) -> NotificationOutput:\n        \"\"\"\n        Create a new notification.\n\n        Args:\n            notification (NotificationInput): The notification data.\n\n        Returns:\n            NotificationOutput: The created notification.\n        \"\"\"\n        new_notification = Notification(**notification.model_dump(exclude_none=True))\n        self.session.add(new_notification)\n        self.session.commit()\n        self.session.refresh(new_notification)\n        return NotificationOutput(**new_notification.__dict__)\n\n    def get_all_by_user_id(self, user_id: UUID4) -> List[NotificationOutput]:\n        \"\"\"\n        Get all notifications by user ID.\n\n        Args:\n            user_id (UUID4): The user ID.\n\n        Returns:\n            List[NotificationOutput]: A list of notification outputs.\n        \"\"\"\n        notifications = self.session.query(Notification).filter(Notification.user_id == user_id).all()\n        return [\n            NotificationOutput(**notification.__dict__) for notification in notifications\n        ]\n\n    def get_by_id(self, _id: UUID4) -> NotificationOutput:\n        \"\"\"\n        Get a notification by ID.\n\n        Args:\n            _id (UUID4): The notification ID.\n\n        Returns:\n            NotificationOutput: The notification output.\n        \"\"\"\n        notification = self.session.query(Notification).filter(Notification.id == _id).first()\n        return NotificationOutput(**notification.__dict__)\n\n    def notification_exists_by_id(self, _id: UUID4) -> bool:\n        \"\"\"\n        Check if a notification exists by ID.\n\n        Args:\n            _id (UUID4): The notification ID.\n\n        Returns:\n            bool: True if the notification exists, False otherwise.\n        \"\"\"\n        notification = self.session.query(Notification).filter(Notification.id == _id).first()\n        return bool(notification)\n\n    def get_notification(self, _id: UUID4) -> Type[Notification]:\n        \"\"\"\n        Get a notification by ID.\n\n        Args:\n            _id (UUID4): The notification ID.\n\n        Returns:\n            Type[Notification]: The notification instance.\n        \"\"\"\n        notification = self.session.query(Notification).filter(Notification.id == _id).first()\n        return notification\n\n    def mark_as_read(self, notification: Type[Notification]) -> bool:\n        \"\"\"\n        Mark a notification as read.\n\n        Args:\n            notification (Type[Notification]): The notification instance.\n\n        Returns:\n            bool: True if the operation was successful, False otherwise.\n        \"\"\"\n        notification.read = True\n        self.session.commit()\n        self.session.refresh(notification)\n        return True\n\n    def get_notification_by_id(self, _id: UUID4) -> NotificationOutput:\n        \"\"\"\n        Get a notification by ID.\n\n        Args:\n            _id (UUID4): The notification ID.\n\n        Returns:\n            NotificationOutput: The notification output.\n        \"\"\"\n        notification = self.session.query(Notification).filter(Notification.id == _id).first()\n        return NotificationOutput(**notification.model_dump(exclude_none=True))\n\n    def update_offers(self, notification: Type[Notification], offers: List[Type[Offer]]) -> bool:\n        \"\"\"\n        Update offers associated with a notification.\n\n        Args:\n            notification (Type[Notification]): The notification instance.\n            offers (List[Type[Offer]]): The list of offer instances.\n\n        Returns:\n            bool: True if the operation was successful, False otherwise.\n        \"\"\"\n        for offer in offers:\n            if offer not in notification.offers:\n                notification.offers.append(offer)\n        self.session.commit()\n        return True\n\n    def get_unread_user_count(self, user_id: UUID4) -> int:\n        \"\"\"\n        Get the count of unread notifications for a user.\n\n        Args:\n            user_id (UUID4): The user ID.\n\n        Returns:\n            int: The count of unread notifications.\n        \"\"\"\n        return self.session.query(Notification).filter(\n            Notification.user_id == user_id, Notification.read == False\n        ).count()\n"}
{"type": "source_file", "path": "app/repositories/city_repository.py", "content": "from typing import List, Optional, Type\n\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\n\nfrom models.location import City\nfrom schemas.location import CityInput, CityOutput, RegionOutput, CityInDb\n\n\nclass CityRepository:\n    \"\"\"\n    Repository class for handling cities.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initialize the repository with a database session.\n\n        Args:\n            session (Session): The database session.\n        \"\"\"\n        self.session = session\n\n    def create(self, data: CityInput) -> CityInDb:\n        \"\"\"\n        Create a new city.\n\n        Args:\n            data (CityInput): The city data.\n\n        Returns:\n            CityInDb: The created city.\n        \"\"\"\n        city = City(**data.model_dump(exclude_none=True))\n        self.session.add(city)\n        self.session.commit()\n        self.session.refresh(city)\n        return CityInDb(**city.__dict__)\n\n    def get_all(self) -> List[Optional[CityOutput]]:\n        \"\"\"\n        Get all cities.\n\n        Returns:\n            List[Optional[CityOutput]]: A list of city outputs.\n        \"\"\"\n        cities = self.session.query(City).all()\n        return self._map_city_to_schema_list(cities)\n\n    def get_all_by_region(self, region_id: UUID4) -> List[Optional[CityOutput]]:\n        \"\"\"\n        Get all cities by region.\n\n        Args:\n            region_id (UUID4): The region ID.\n\n        Returns:\n            List[Optional[CityOutput]]: A list of city outputs.\n        \"\"\"\n        cities = self.session.query(City).filter_by(region_id=region_id).all()\n        return self._map_city_to_schema_list(cities)\n\n    @staticmethod\n    def _map_city_to_schema_list(cities: List[Type[City]]) -> List[CityOutput]:\n        \"\"\"\n        Map cities to CityOutput schema.\n\n        Args:\n            cities (List[Type[City]]): List of City instances.\n\n        Returns:\n            List[CityOutput]: List of CityOutput instances.\n        \"\"\"\n        return [\n            CityOutput(\n                id=city.id,\n                name=city.name,\n                region=RegionOutput(\n                    id=city.region.id, name=city.region.name\n                )\n            )\n            for city in cities\n        ]\n\n    def get_by_id(self, _id: UUID4) -> Type[City]:\n        \"\"\"\n        Get city by ID.\n\n        Args:\n            _id (UUID4): The city ID.\n\n        Returns:\n            Type[City]: The city instance.\n        \"\"\"\n        return self.session.query(City).filter_by(id=_id).first()\n\n    def get_by_name(self, name: str) -> Type[City]:\n        \"\"\"\n        Get city by name.\n\n        Args:\n            name (str): The city name.\n\n        Returns:\n            Type[City]: The city instance.\n        \"\"\"\n        return self.session.query(City).filter_by(name=name).first()\n\n    def city_exists_by_name(self, name: str) -> bool:\n        \"\"\"\n        Check if a city exists by name.\n\n        Args:\n            name (str): The city name.\n\n        Returns:\n            bool: True if the city exists, False otherwise.\n        \"\"\"\n        city = self.session.query(City).filter_by(name=name).first()\n        return bool(city)\n\n    def city_exists_by_id(self, _id: UUID4) -> bool:\n        \"\"\"\n        Check if a city exists by ID.\n\n        Args:\n            _id (UUID4): The city ID.\n\n        Returns:\n            bool: True if the city exists, False otherwise.\n        \"\"\"\n        city = self.session.query(City).filter_by(id=_id).first()\n        return bool(city)\n\n    def update(self, city: Type[City], data: CityInput) -> CityInput:\n        \"\"\"\n        Update a city.\n\n        Args:\n            city (Type[City]): The city instance.\n            data (CityInput): The updated city data.\n\n        Returns:\n            CityInput: The updated city data.\n        \"\"\"\n        for key, value in data.model_dump(exclude_none=True).items():\n            setattr(city, key, value)\n        self.session.commit()\n        self.session.refresh(city)\n        return CityInput(**city.__dict__)\n\n    def delete(self, city: Type[City]) -> bool:\n        \"\"\"\n        Delete a city.\n\n        Args:\n            city (Type[City]): The city instance.\n\n        Returns:\n            bool: True if deletion was successful, False otherwise.\n        \"\"\"\n        self.session.delete(city)\n        self.session.commit()\n        return True\n"}
{"type": "source_file", "path": "app/__init__.py", "content": ""}
{"type": "source_file", "path": "app/auth/__init__.py", "content": ""}
{"type": "source_file", "path": "app/models/user.py", "content": "import uuid\n\nfrom sqlalchemy import String, Boolean, Column, func, DateTime\nfrom sqlalchemy.dialects.postgresql import UUID\nfrom sqlalchemy.orm import relationship\nfrom config.database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    username = Column(String, unique=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_superuser = Column(Boolean, default=False)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime, default=func.now())\n    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())\n    favorites = relationship(\"Favorite\", back_populates=\"user\")\n    notifications_filters = relationship(\"NotificationFilter\", back_populates=\"user\")\n    notifications = relationship(\"Notification\", back_populates=\"user\")\n"}
{"type": "source_file", "path": "app/main.py", "content": "from fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\n\nfrom config.settings import settings\nfrom routers.api import router\nfrom utils.init_db import create_tables\nfrom tasks.celery_worker import create_notifications\nfrom config.database import get_db\n\napp = FastAPI(\n    debug=bool(settings.DEBUG),\n    title=settings.TITLE,\n)\n\n\n@app.on_event(\"startup\")\ndef on_startup() -> None:\n    \"\"\"\n    Initializes the database tables when the application starts up.\n    \"\"\"\n    create_tables()\n\n\nif settings.DEBUG:\n    origins = [\"*\"]\nelse:\n    origins = [\n        str(origin).strip(\",\") for origin in settings.ORIGINS\n    ]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\napp.include_router(router)\n"}
{"type": "source_file", "path": "app/repositories/statistics/__init__.py", "content": ""}
{"type": "source_file", "path": "app/config/database.py", "content": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nfrom .settings import settings\n\nif settings.DEBUG:\n    SQLALCHEMY_DATABASE_URL = settings.SQLITE_CONNECTION_STRING\nelse:\n    SQLALCHEMY_DATABASE_URL = settings.POSTGRES_CONNECTION_STRING\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL,\n    connect_args={\"check_same_thread\": False},\n)\nSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine,\n)\n\nBase = declarative_base()\n\n\ndef get_db():\n    \"\"\"\n    Create a database session.\n\n    Yields:\n        Session: The database session.\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n"}
{"type": "source_file", "path": "app/models/__init__.py", "content": ""}
{"type": "source_file", "path": "app/notification/abc/notification_strategy.py", "content": "from abc import ABC, abstractmethod\n\nfrom schemas.notification import NotificationOutput\n\n\nclass NotificationStrategy(ABC):\n    \"\"\"\n    Abstract base class for notification strategies.\n    \"\"\"\n\n    @abstractmethod\n    def notify(self, data: NotificationOutput):\n        \"\"\"\n        Abstract method to notify based on the provided data.\n\n        Args:\n            data (NotificationOutput): The notification data.\n        \"\"\"\n        pass\n"}
{"type": "source_file", "path": "app/repositories/__init__.py", "content": ""}
{"type": "source_file", "path": "app/notification/context.py", "content": "from schemas.notification import NotificationOutput\nfrom .abc.notification_strategy import NotificationStrategy\n\n\nclass Context:\n    \"\"\"\n    Context class for handling notification strategies.\n    \"\"\"\n\n    def __init__(self, strategy: NotificationStrategy):\n        \"\"\"\n        Initialize the Context with a notification strategy.\n\n        Args:\n            strategy (NotificationStrategy): The notification strategy to use.\n        \"\"\"\n        self._strategy = strategy\n\n    def send_notification(self, data: NotificationOutput):\n        \"\"\"\n        Send a notification using the selected strategy.\n\n        Args:\n            data (NotificationOutput): The notification data to send.\n        \"\"\"\n        return self._strategy.notify(data)\n"}
{"type": "source_file", "path": "app/repositories/offer_repository.py", "content": "from typing import Type, Dict, Any, List\n\nfrom pydantic import UUID4\nfrom sqlalchemy import asc, desc\nfrom sqlalchemy.orm import Session\n\nfrom enums.offer_sort import OfferSortEnum\nfrom models.offer import Offer\nfrom models.photo import Photo\nfrom schemas.location import CityOutput, RegionOutput\nfrom schemas.offer import OfferScraper, OfferList\n\n\nclass OfferRepository:\n    \"\"\"\n    Repository class for handling offers.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initialize the repository with a database session.\n\n        Args:\n            session (Session): The database session.\n        \"\"\"\n        self.session = session\n\n    def create(self, data: OfferScraper, city_id: str) -> Offer:\n        \"\"\"\n        Create a new offer.\n\n        Args:\n            data (OfferScraper): The offer data.\n            city_id (str): The ID of the city associated with the offer.\n\n        Returns:\n            Offer: The created offer.\n        \"\"\"\n        db_offer = Offer(**data.model_dump(exclude_none=True, exclude={\"photos\", \"region_name\", \"city_name\"}))\n        db_offer.city_id = city_id\n        self.session.add(db_offer)\n        self.session.commit()\n        self.session.refresh(db_offer)\n\n        for photo in data.photos:\n            db_photo = Photo(url=photo.url, offer_id=db_offer.id)\n            self.session.add(db_photo)\n            self.session.commit()\n            self.session.refresh(db_photo)\n\n        return db_offer\n\n    def offer_exists_by_url(self, url: str) -> bool:\n        \"\"\"\n        Check if an offer exists by URL.\n\n        Args:\n            url (str): The URL of the offer.\n\n        Returns:\n            bool: True if the offer exists, False otherwise.\n        \"\"\"\n        offer = self.session.query(Offer).filter_by(details_url=url).first()\n        return offer is not None\n\n    def offer_exists_by_id(self, _id: UUID4) -> bool:\n        \"\"\"\n        Check if an offer exists by ID.\n\n        Args:\n            _id (UUID4): The ID of the offer.\n\n        Returns:\n            bool: True if the offer exists, False otherwise.\n        \"\"\"\n        offer = self.session.query(Offer).filter_by(id=_id).first()\n        return offer is not None\n\n    def get_offer_by_id(self, _id: UUID4) -> Type[Offer]:\n        \"\"\"\n        Get an offer by ID.\n\n        Args:\n            _id (UUID4): The ID of the offer.\n\n        Returns:\n            Type[Offer]: The offer instance.\n        \"\"\"\n        offer = self.session.query(Offer).filter_by(id=_id).first()\n        return offer\n\n    def get_details(self, _id: UUID4) -> Dict[str, Any]:\n        \"\"\"\n        Get details of an offer by ID.\n\n        Args:\n            _id (UUID4): The ID of the offer.\n\n        Returns:\n            Dict[str, Any]: Details of the offer.\n        \"\"\"\n        offer = self.session.query(Offer).filter_by(id=_id).first()\n        photo_list = [{\"url\": photo.url} for photo in offer.photos]\n        return self._map_model_to_schema(offer, photo_list)\n\n    def get_all(\n            self,\n            offset: int = 1,\n            page_limit: int = 15,\n            category: str = None,\n            sub_category: str = None,\n            building_type: str = None,\n            price_min: int = None,\n            price_max: int = None,\n            area_min: int = None,\n            area_max: int = None,\n            rooms: int = None,\n            furniture: bool = None,\n            floor: int = None,\n            query: str = None,\n            sort_by: OfferSortEnum = OfferSortEnum.NEWEST,\n    ) -> OfferList:\n        \"\"\"\n        Get all offers based on filters and sorting parameters.\n\n        Args:\n            offset (int): Offset for pagination.\n            page_limit (int): Page size for pagination.\n            category (str): Offer category.\n            sub_category (str): Offer sub-category.\n            building_type (str): Building type.\n            price_min (int): Minimum price.\n            price_max (int): Maximum price.\n            area_min (int): Minimum area.\n            area_max (int): Maximum area.\n            rooms (int): Number of rooms.\n            furniture (bool): Furniture availability.\n            floor (int): Floor number.\n            query (str): Search query.\n            sort_by (OfferSortEnum): Sorting criteria.\n\n        Returns:\n            OfferList: List of offers with pagination information.\n        \"\"\"\n        offers = self.session.query(Offer)\n\n        if query:\n            offers = offers.filter(Offer.title.like(f\"%{query}%\"))\n\n        if category:\n            offers = offers.filter(Offer.category == category)\n        if sub_category:\n            offers = offers.filter(Offer.sub_category == sub_category)\n        if building_type:\n            offers = offers.filter(Offer.building_type == building_type)\n        if price_min:\n            offers = offers.filter(Offer.price >= price_min)\n        if price_max:\n            offers = offers.filter(Offer.price <= price_max)\n        if area_min:\n            offers = offers.filter(Offer.area >= area_min)\n        if area_max:\n            offers = offers.filter(Offer.area <= area_max)\n        if rooms:\n            offers = offers.filter(Offer.rooms == rooms)\n        if furniture is not None:\n            offers = offers.filter(Offer.furniture == furniture)\n        if floor:\n            offers = offers.filter(Offer.floor == floor)\n\n        if sort_by == OfferSortEnum.NEWEST:\n            offers = offers.order_by(desc(Offer.created_at))\n        elif sort_by == OfferSortEnum.OLDEST:\n            offers = offers.order_by(asc(Offer.created_at))\n        elif sort_by == OfferSortEnum.PRICE_LOWEST:\n            offers = offers.order_by(asc(Offer.price))\n        elif sort_by == OfferSortEnum.PRICE_HIGHEST:\n            offers = offers.order_by(desc(Offer.price))\n\n        offers = offers.offset(offset).limit(page_limit).all()\n\n        offer_list = []\n        for offer in offers:\n            photo_list = [{\"url\": photo.url} for photo in offer.photos]\n            offer_mapped = self._map_model_to_schema(offer, photo_list)\n            offer_list.append(offer_mapped)\n\n        result = OfferList(offers=offer_list, page=offset, page_size=len(offer_list))\n        return result\n\n    def delete(self, offer: Type[Offer]) -> bool:\n        \"\"\"\n        Delete an offer.\n\n        Args:\n            offer (Type[Offer]): The offer instance.\n\n        Returns:\n            bool: True if deletion was successful, False otherwise.\n        \"\"\"\n        self.session.delete(offer)\n        self.session.commit()\n        return True\n\n    @staticmethod\n    def _map_model_to_schema(offer: Type[Offer], photo_list: List[Dict]) -> Dict[str, Any]:\n        \"\"\"\n        Map offer model to schema.\n\n        Args:\n            offer (Type[Offer]): The offer instance.\n            photo_list (List[Dict]): List of photo dictionaries.\n\n        Returns:\n            Dict[str, Any]: Mapped offer data.\n        \"\"\"\n        data = {\n            \"id\": offer.id,\n            \"title\": offer.title,\n            \"details_url\": offer.details_url,\n            \"category\": offer.category,\n            \"sub_category\": offer.sub_category,\n            \"building_type\": offer.building_type,\n            \"price\": offer.price,\n            \"rent\": offer.rent,\n            \"description\": offer.description,\n            \"price_per_m\": offer.price_per_m,\n            \"area\": offer.area,\n            \"building_floor\": offer.building_floot,\n            \"floor\": offer.floor,\n            \"rooms\": offer.rooms,\n            \"furniture\": offer.furniture,\n            \"photos\": photo_list,\n            \"city\": CityOutput(\n                id=offer.city.id,\n                name=offer.city.name,\n                region=RegionOutput(\n                    id=offer.city.region.id, name=offer.city.region.name\n                )\n            ),\n            \"created_at\": offer.created_at,\n            \"updated_at\": offer.updated_at\n        }\n        return data\n"}
{"type": "source_file", "path": "app/enums/offer_sort.py", "content": "from enum import Enum\n\n\nclass OfferSortEnum(Enum):\n    \"\"\"\n    Enumeration for sorting options for offers.\n    \"\"\"\n    PRICE_LOWEST = 'price_lowest'\n    PRICE_HIGHEST = 'price_highest'\n    NEWEST = 'newest'\n    OLDEST = 'oldest'\n"}
{"type": "source_file", "path": "app/repositories/statistics/user_statistic_repository.py", "content": "from typing import Dict, List\n\nfrom sqlalchemy import func\nfrom sqlalchemy.orm import Session\n\nfrom models.user import User\n\n\nclass UserStatisticRepository:\n    \"\"\"\n    Repository class for retrieving statistics related to users.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initialize the repository with a database session.\n\n        Args:\n            session (Session): The database session.\n        \"\"\"\n        self.session = session\n\n    def get_number_of_users_by_month(self) -> List[Dict[str, int]]:\n        \"\"\"\n        Get the number of users created per month.\n\n        Returns:\n            List[Dict[str, int]]: A list of dictionaries containing month-year and count.\n        \"\"\"\n        users_count = self.session.query(\n            func.strftime('%Y-%m', User.created_at).label('month_year'),\n            func.count('*').label('count')\n        ).group_by(func.strftime('%Y-%m', User.created_at)).all()\n\n        result = [{'month_year': row[0], 'count': row[1]} for row in users_count]\n        return result\n"}
{"type": "source_file", "path": "app/routers/v1/notification.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\n\nfrom auth.auth import get_current_user\nfrom config.database import get_db\nfrom schemas.notification import NotificationOutput\nfrom schemas.notification_filter import (\n    NotificationFilterInput,\n    NotificationFilterOutput,\n    NotificationFilterUpdateStatus\n)\nfrom schemas.user import UserInDB\nfrom services.notification_service import NotificationService\nfrom services.notificationfilter_service import NotificationFilterService\n\nrouter = APIRouter(\n    prefix=\"/notification\",\n    tags=[\"notification\"]\n)\n\n\n@router.post(\"/filter\", status_code=201, response_model=NotificationFilterOutput)\ndef create(\n        notification: NotificationFilterInput,\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Create a new notification filter for the current user.\n\n    Args:\n        notification (NotificationFilterInput): The notification filter details.\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        NotificationFilterOutput: Details of the created notification filter.\n    \"\"\"\n    _service = NotificationFilterService(db)\n    notification.user_id = current_user.id\n    return _service.create(notification)\n\n\n@router.put(\"/filter/{_id}\", status_code=200)\ndef update_status(\n        status: NotificationFilterUpdateStatus,\n        _id: UUID4,\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Update the status of a notification filter.\n\n    Args:\n        status (NotificationFilterUpdateStatus): The status to be updated.\n        _id (UUID4): The ID of the notification filter to be updated.\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        None\n    \"\"\"\n    _service = NotificationFilterService(db)\n    _service.update_status(_id, status.status, current_user.id)\n\n\n@router.delete(\"/filter/{_id}\", status_code=204)\ndef delete(\n        _id: UUID4,\n        db: Session = Depends(get_db),\n        current_user: UUID4 = Depends(get_current_user)\n):\n    \"\"\"\n    Delete a notification filter.\n\n    Args:\n        _id (UUID4): The ID of the notification filter to be deleted.\n        db (Session): Database session.\n        current_user (UUID4): Current user's ID.\n\n    Returns:\n        None\n    \"\"\"\n    _service = NotificationFilterService(db)\n    _service.delete(_id, current_user.id)\n\n\n@router.get(\"/filter\", status_code=200, response_model=List[NotificationFilterOutput])\ndef get_all_by_user(\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Retrieve all notification filters belonging to the current user.\n\n    Args:\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        List[NotificationFilterOutput]: List of notification filters belonging to the current user.\n    \"\"\"\n    _service = NotificationFilterService(db)\n    return _service.get_all_by_user(current_user.id)\n\n\n@router.get(\"\", status_code=200, response_model=List[NotificationOutput])\ndef get_notifications_by_user(\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Retrieve all notifications belonging to the current user.\n\n    Args:\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        List[NotificationOutput]: List of notifications belonging to the current user.\n    \"\"\"\n    _service = NotificationService(db)\n    return _service.get_all_by_user(current_user.id)\n\n\n@router.get(\"/{_id}\", status_code=200, response_model=NotificationOutput)\ndef get_notification_by_user(\n        _id: UUID4,\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Retrieve a specific notification belonging to the current user.\n\n    Args:\n        _id (UUID4): The ID of the notification to be retrieved.\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        NotificationOutput: Details of the requested notification.\n    \"\"\"\n    _service = NotificationService(db)\n    return _service.get_notification_by_id(_id, current_user.id)\n\n\n@router.get(\"/unread\", status_code=200)\ndef get_unread_user_count(\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Retrieve the count of unread notifications for the current user.\n\n    Args:\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        int: Count of unread notifications for the current user.\n    \"\"\"\n    _service = NotificationService(db)\n    return _service.get_unread_user_count(current_user.id)\n"}
{"type": "source_file", "path": "app/routers/v1/statistic.py", "content": "from fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\n\nfrom auth.auth import get_current_user\nfrom config.database import get_db\nfrom schemas.user import UserInDB\nfrom services.statistics.offer_statistic_service import OfferStatisticService\nfrom services.statistics.user_statistic_service import UserStatisticService\n\nrouter = APIRouter(\n    prefix=\"/statistic\",\n    tags=[\"statistic\"]\n)\n\n\n@router.get(\"/offer/timeline\")\ndef get_offer_timeline(\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Retrieve offer statistics over time.\n\n    Args:\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        Statistics: Offer statistics over time.\n    \"\"\"\n    _service = OfferStatisticService(db)\n    return _service.get_number_of_offers_by_month(current_user.id)\n\n\n@router.get(\"/offer/category\")\ndef get_offer_count_by_category(\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Retrieve offer count grouped by category.\n\n    Args:\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        Statistics: Offer count grouped by category.\n    \"\"\"\n    _service = OfferStatisticService(db)\n    return _service.count_offers_by_category(current_user.id)\n\n\n@router.get(\"/offer/subcategory\")\ndef get_offer_count_by_subcategory(\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Retrieve offer count grouped by subcategory.\n\n    Args:\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        Statistics: Offer count grouped by subcategory.\n    \"\"\"\n    _service = OfferStatisticService(db)\n    return _service.count_offers_by_subcategory(current_user.id)\n\n\n@router.get(\"/user/timeline\")\ndef get_user_timeline(\n        db: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user)\n):\n    \"\"\"\n    Retrieve user statistics over time.\n\n    Args:\n        db (Session): Database session.\n        current_user (UserInDB): Current user's details.\n\n    Returns:\n        Statistics: User statistics over time.\n    \"\"\"\n    _service = UserStatisticService(db)\n    return _service.get_number_of_users_by_month(current_user.id)\n"}
{"type": "source_file", "path": "app/routers/v1/__init__.py", "content": ""}
{"type": "source_file", "path": "app/repositories/user_repository.py", "content": "from typing import Type\n\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\n\nfrom models.user import User\nfrom schemas.user import UserIn, UserInDBBase\n\n\nclass UserRepository:\n    \"\"\"\n    Repository class for handling users.\n    \"\"\"\n\n    def __init__(self, session: Session):\n        \"\"\"\n        Initialize the repository with a database session.\n\n        Args:\n            session (Session): The database session.\n        \"\"\"\n        self.session = session\n\n    def create(self, data: UserIn, hashed_password: str) -> UserInDBBase:\n        \"\"\"\n        Create a new user.\n\n        Args:\n            data (UserIn): The user data.\n            hashed_password (str): The hashed password.\n\n        Returns:\n            UserInDBBase: The created user.\n        \"\"\"\n        db_user = User(**data.model_dump(exclude={\"password\"}), hashed_password=hashed_password)\n        self.session.add(db_user)\n        self.session.commit()\n        self.session.refresh(db_user)\n        return UserInDBBase(**db_user.__dict__)\n\n    def user_exists_by_email(self, email: str) -> bool:\n        \"\"\"\n        Check if a user exists by email.\n\n        Args:\n            email (str): The email to check.\n\n        Returns:\n            bool: True if the user exists, False otherwise.\n        \"\"\"\n        return self.session.query(User).filter(User.email == email).first() is not None\n\n    def user_exists_by_username(self, username: str) -> bool:\n        \"\"\"\n        Check if a user exists by username.\n\n        Args:\n            username (str): The username to check.\n\n        Returns:\n            bool: True if the user exists, False otherwise.\n        \"\"\"\n        return self.session.query(User).filter(User.username == username).first() is not None\n\n    def get_user_by_email(self, email: str):\n        \"\"\"\n        Get a user by email.\n\n        Args:\n            email (str): The email of the user.\n\n        Returns:\n            User: The user.\n        \"\"\"\n        return self.session.query(User).filter(User.email == email).first()\n\n    def get_user_by_username(self, username: str):\n        \"\"\"\n        Get a user by username.\n\n        Args:\n            username (str): The username of the user.\n\n        Returns:\n            User: The user.\n        \"\"\"\n        return self.session.query(User).filter(User.username == username).first()\n\n    def get_user_object_by_id(self, _id: UUID4) -> Type[User]:\n        \"\"\"\n        Get a user object by ID.\n\n        Args:\n            _id (UUID4): The ID of the user.\n\n        Returns:\n            Type[User]: The user instance.\n        \"\"\"\n        return self.session.query(User).filter(User.id == _id).first()\n\n    def user_exists_by_id(self, _id: UUID4) -> bool:\n        \"\"\"\n        Check if a user exists by ID.\n\n        Args:\n            _id (UUID4): The ID of the user.\n\n        Returns:\n            bool: True if the user exists, False otherwise.\n        \"\"\"\n        return self.session.query(User).filter(User.id == _id).first() is not None\n\n    def delete_user(self, user: Type[User]) -> bool:\n        \"\"\"\n        Delete a user.\n\n        Args:\n            user (Type[User]): The user instance.\n\n        Returns:\n            bool: True if deletion was successful, False otherwise.\n        \"\"\"\n        self.session.delete(user)\n        self.session.commit()\n        return True\n"}
{"type": "source_file", "path": "app/routers/v1/offer.py", "content": "from fastapi import APIRouter, Depends, Query\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\nfrom typing import List, Dict, Any\nfrom auth.auth import get_current_user\nfrom config.database import get_db\nfrom enums.offer_sort import OfferSortEnum\nfrom schemas.offer import OfferScraper, OfferList\nfrom schemas.user import UserIn\nfrom services.offer_service import OfferService\n\nrouter = APIRouter(\n    prefix=\"/offer\",\n    tags=[\"offer\"]\n)\n\n\n@router.post(\"\", status_code=201)\ndef create(offer: List[OfferScraper], session: Session = Depends(get_db)):\n    \"\"\"\n    Create a new offers.\n\n    Args:\n        offer (OfferScraper): Details of the offer to be created.\n        session (Session): Database session.\n\n    Returns:\n        List[OfferScraper]: Details of the created offers.\n    \"\"\"\n    _service = OfferService(session).create(offer)\n    return _service\n\n\n@router.delete(\"/{_id}\", status_code=204)\ndef delete(_id: UUID4, session: Session = Depends(get_db),\n           current_user: UserIn = Depends(get_current_user)):\n    \"\"\"\n    Delete an offer.\n\n    Args:\n        _id (UUID4): The ID of the offer to be deleted.\n        session (Session): Database session.\n        current_user (UserIn): Current user's details.\n\n    Returns:\n        None\n    \"\"\"\n    _service = OfferService(session).delete(_id, current_user.id)\n    return _service\n\n\n@router.get(\"\", status_code=200)\ndef get_all(\n        session: Session = Depends(get_db),\n        page: int = Query(1, gt=0),\n        page_size: int = Query(15, gt=0),\n        category: str = Query(None),\n        sub_category: str = Query(None),\n        building_type: str = Query(None),\n        price_min: int = Query(None, gt=0),\n        price_max: int = Query(None, gt=0),\n        area_min: int = Query(None, gt=0),\n        area_max: int = Query(None, gt=0),\n        rooms: int = Query(None, gt=0),\n        furniture: bool = Query(None),\n        floor: int = Query(None),\n        query: str = Query(None),\n        sort_by: OfferSortEnum = Query(OfferSortEnum.NEWEST)\n):\n    \"\"\"\n    Retrieve all offers based on the provided filters and sorting criteria.\n\n    Args:\n        session (Session): Database session.\n        page (int): Page number for pagination (default is 1).\n        page_size (int): Number of offers per page (default is 15).\n        category (str): Category filter.\n        sub_category (str): Sub-category filter.\n        building_type (str): Building type filter.\n        price_min (int): Minimum price filter.\n        price_max (int): Maximum price filter.\n        area_min (int): Minimum area filter.\n        area_max (int): Maximum area filter.\n        rooms (int): Number of rooms filter.\n        furniture (bool): Furniture filter.\n        floor (int): Floor filter.\n        query (str): Search query.\n        sort_by (OfferSortEnum): Sorting criteria (default is NEWEST).\n\n    Returns:\n        List[OfferScraper]: List of offers based on the provided filters and sorting criteria.\n    \"\"\"\n    _service = OfferService(session).get_all(\n        offset=page,\n        page_size=page_size,\n        category=category,\n        sub_category=sub_category,\n        building_type=building_type,\n        price_min=price_min,\n        price_max=price_max,\n        area_min=area_min,\n        area_max=area_max,\n        rooms=rooms,\n        furniture=furniture,\n        floor=floor,\n        query=query,\n        sort_by=sort_by,\n    )\n    return _service\n\n\n@router.get(\"/{_id}\", status_code=200)\ndef get_details(_id: UUID4, session: Session = Depends(get_db)) -> Dict[str, Any]:\n    \"\"\"\n    Retrieve details of a specific offer.\n\n    Args:\n        _id (UUID4): The ID of the offer to retrieve details for.\n        session (Session): Database session.\n\n    Returns:\n        OfferScraper: Details of the requested offer.\n    \"\"\"\n    _service = OfferService(session).get_by_id(_id)\n    return _service\n"}
{"type": "source_file", "path": "app/routers/v1/city.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\n\nfrom auth.auth import get_current_user\nfrom config.database import get_db\nfrom schemas.location import CityInput, CityOutput\nfrom schemas.user import UserIn\nfrom services.city_service import CityService\n\nrouter = APIRouter(\n    prefix=\"/location/city\",\n    tags=[\"location\"]\n)\n\n\n@router.post(\"\", status_code=201, response_model=CityOutput)\ndef create_city(\n        data: CityInput, session: Session = Depends(get_db),\n        current_user: UserIn = Depends(get_current_user)\n):\n    \"\"\"\n    Create a new city.\n\n    Args:\n        data (CityInput): City data to be created.\n        session (Session, optional): Database session. Defaults to Depends(get_db).\n        current_user (UserIn, optional): Current user. Defaults to Depends(get_current_user).\n\n    Returns:\n        CityOutput: Created city.\n    \"\"\"\n    _service = CityService(session)\n    return _service.create(data, current_user.id)\n\n\n@router.get(\"/region/{region_id}\", status_code=200, response_model=List[CityOutput])\ndef get_cities_by_region(region_id: UUID4, session: Session = Depends(get_db)):\n    \"\"\"\n    Get all cities by region ID.\n\n    Args:\n        region_id (UUID4): ID of the region.\n        session (Session, optional): Database session. Defaults to Depends(get_db).\n\n    Returns:\n        List[CityOutput]: List of cities in the specified region.\n    \"\"\"\n    _service = CityService(session)\n    return _service.get_all_by_region(region_id)\n\n\n@router.get(\"\", status_code=200, response_model=List[CityOutput])\ndef get_cities(session: Session = Depends(get_db)):\n    \"\"\"\n    Get all cities.\n\n    Args:\n        session (Session, optional): Database session. Defaults to Depends(get_db).\n\n    Returns:\n        List[CityOutput]: List of all cities.\n    \"\"\"\n    _service = CityService(session)\n    return _service.get_all()\n\n\n@router.delete(\"/{_id}\", status_code=204)\ndef delete_city(\n        _id: UUID4,\n        session: Session = Depends(get_db),\n        current_user: UserIn = Depends(get_current_user)\n):\n    \"\"\"\n    Delete a city by ID.\n\n    Args:\n        _id (UUID4): ID of the city to delete.\n        session (Session, optional): Database session. Defaults to Depends(get_db).\n        current_user (UserIn, optional): Current user. Defaults to Depends(get_current_user).\n\n    Returns:\n        None\n    \"\"\"\n    _service = CityService(session)\n    if not _service.delete(_id, current_user.id):\n        raise HTTPException(status_code=404, detail=\"City not found\")\n\n\n@router.put(\"/{_id}\", status_code=200, response_model=CityInput)\ndef update_city(\n        _id: UUID4,\n        data: CityInput,\n        session: Session = Depends(get_db),\n        current_user: UserIn = Depends(get_current_user)\n):\n    \"\"\"\n    Update a city by ID.\n\n    Args:\n        _id (UUID4): ID of the city to update.\n        data (CityInput): Updated city data.\n        session (Session, optional): Database session. Defaults to Depends(get_db).\n        current_user (UserIn, optional): Current user. Defaults to Depends(get_current_user).\n\n    Returns:\n        CityInput: Updated city data.\n    \"\"\"\n    _service = CityService(session)\n    city = _service.update(_id, data, current_user.id)\n    if not city:\n        raise HTTPException(status_code=404, detail=\"City not found\")\n    return city\n"}
{"type": "source_file", "path": "app/schemas/location.py", "content": "from pydantic import BaseModel, UUID4, Field\n\n\nclass RegionInput(BaseModel):\n    name: str = Field(min_length=1, max_length=120)\n\n\nclass RegionOutput(BaseModel):\n    id: UUID4\n    name: str\n\n\nclass CityInput(BaseModel):\n    name: str = Field(min_length=1, max_length=120)\n    region_id: UUID4\n\n\nclass CityInDb(BaseModel):\n    id: UUID4\n    name: str\n    region_id: UUID4\n\n    class Config:\n        orm_mode = True\n\n\nclass CityOutput(BaseModel):\n    id: UUID4\n    name: str\n    region: RegionOutput\n\n"}
{"type": "source_file", "path": "app/routers/v1/user.py", "content": "from fastapi import APIRouter, Depends\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlalchemy.orm import Session\n\nfrom auth.auth import get_current_user\nfrom config.database import get_db\nfrom schemas.user import UserIn, UserInDBBase\nfrom services.user_service import UserService\n\nrouter = APIRouter(\n    prefix=\"/user\",\n    tags=[\"user\"]\n)\n\n\n@router.post(\"/register\", status_code=201, response_model=UserInDBBase)\ndef register(data: UserIn, session: Session = Depends(get_db)):\n    \"\"\"\n    Register a new user.\n\n    Args:\n        data (UserIn): Details of the user to be registered.\n        session (Session): Database session.\n\n    Returns:\n        UserInDBBase: Details of the registered user.\n    \"\"\"\n    _service = UserService(session)\n    return _service.create(data)\n\n\n@router.post(\"/login\", status_code=201)\ndef login(data: OAuth2PasswordRequestForm = Depends(), session: Session = Depends(get_db)):\n    \"\"\"\n    Login user.\n\n    Args:\n        data (OAuth2PasswordRequestForm): User credentials.\n        session (Session): Database session.\n\n    Returns:\n        None\n    \"\"\"\n    _service = UserService(session)\n    return _service.login(data)\n\n\n@router.get(\"/me\", status_code=200)\ndef get_me(user: UserIn = Depends(get_current_user)):\n    \"\"\"\n    Retrieve information of the authenticated user.\n\n    Args:\n        user (UserIn): Current user's details.\n\n    Returns:\n        UserIn: Details of the authenticated user.\n    \"\"\"\n    return user\n\n\n@router.delete(\"/me\", status_code=204)\ndef delete_me(user: UserIn = Depends(get_current_user),\n              session: Session = Depends(get_db)):\n    \"\"\"\n    Delete the authenticated user.\n\n    Args:\n        user (UserIn): Current user's details.\n        session (Session): Database session.\n\n    Returns:\n        None\n    \"\"\"\n    _service = UserService(session)\n    return _service.delete_user(user.id)\n"}
{"type": "source_file", "path": "app/routers/__init__.py", "content": ""}
{"type": "source_file", "path": "app/routers/v1/root.py", "content": "from fastapi import APIRouter\n\nrouter = APIRouter(\n    prefix=\"/health\",\n    tags=[\"root\"]\n)\n\n\n@router.get(\"\", status_code=200)\ndef health():\n    return {\"status\": \"ok\"}\n"}
{"type": "source_file", "path": "app/routers/api.py", "content": "from fastapi import APIRouter\n\nfrom routers.v1 import root, region, city, offer, user, favourite, notification, statistic\n\nrouter = APIRouter(\n    prefix=\"/api/v1\"\n)\n\nrouter.include_router(root.router)\nrouter.include_router(region.router)\nrouter.include_router(city.router)\nrouter.include_router(offer.router)\nrouter.include_router(user.router)\nrouter.include_router(favourite.router)\nrouter.include_router(notification.router)\nrouter.include_router(statistic.router)\n"}
{"type": "source_file", "path": "app/routers/v1/favourite.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\n\nfrom auth.auth import get_current_user\nfrom config.database import get_db\nfrom schemas.favourite import FavouriteInput, FavouriteOfferOutput\nfrom schemas.user import UserInDB\nfrom services.favourite_service import FavouriteService\n\nrouter = APIRouter(\n    prefix=\"/favourite\",\n    tags=[\"favourite\"]\n)\n\n\n@router.post(\"\", status_code=201, response_model=FavouriteInput)\ndef create(\n        favourite: FavouriteInput,\n        session: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user),\n):\n    \"\"\"\n    Create a new favourite.\n\n    Args:\n        favourite (FavouriteInput): Favourite data to be created.\n        session (Session, optional): Database session. Defaults to Depends(get_db).\n        current_user (UserInDB, optional): Current user. Defaults to Depends(get_current_user).\n\n    Returns:\n        FavouriteInput: Created favourite data.\n    \"\"\"\n    favourite.user_id = current_user.id\n    _service = FavouriteService(session).create(favourite)\n    return _service\n\n\n@router.delete(\"/{_id}\", status_code=204)\ndef delete(\n        _id: UUID4,\n        session: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user),\n):\n    \"\"\"\n    Delete a favourite by ID.\n\n    Args:\n        _id (UUID4): ID of the favourite to delete.\n        session (Session, optional): Database session. Defaults to Depends(get_db).\n        current_user (UserInDB, optional): Current user. Defaults to Depends(get_current_user).\n\n    Returns:\n        None\n    \"\"\"\n    _service = FavouriteService(session).delete(_id, current_user.id)\n    if not _service:\n        raise HTTPException(status_code=404, detail=\"Favourite not found\")\n\n\n@router.get(\"\", status_code=200, response_model=List[FavouriteOfferOutput])\ndef get_all_by_user(\n        session: Session = Depends(get_db),\n        current_user: UserInDB = Depends(get_current_user),\n):\n    \"\"\"\n    Get all favourites by user.\n\n    Args:\n        session (Session, optional): Database session. Defaults to Depends(get_db).\n        current_user (UserInDB, optional): Current user. Defaults to Depends(get_current_user).\n\n    Returns:\n        List[FavouriteOfferOutput]: List of favourites of the current user.\n    \"\"\"\n    _service = FavouriteService(session).get_all_by_user(current_user.id)\n    return _service\n"}
{"type": "source_file", "path": "app/routers/v1/region.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends\nfrom pydantic import UUID4\nfrom sqlalchemy.orm import Session\n\nfrom auth.auth import get_current_user\nfrom config.database import get_db\nfrom schemas.location import RegionOutput, RegionInput\nfrom schemas.user import UserIn\nfrom services.region_service import RegionService\n\nrouter = APIRouter(\n    prefix=\"/location/region\",\n    tags=[\"location\"]\n)\n\n\n@router.post(\"\", status_code=201, response_model=RegionOutput)\ndef create_region(\n        data: RegionInput,\n        session: Session = Depends(get_db),\n        current_user: UserIn = Depends(get_current_user)\n):\n    \"\"\"\n    Create a new region.\n\n    Args:\n        data (RegionInput): Details of the region to be created.\n        session (Session): Database session.\n        current_user (UserIn): Current user's details.\n\n    Returns:\n        RegionOutput: Details of the created region.\n    \"\"\"\n    _service = RegionService(session)\n    return _service.create(data, current_user.id)\n\n\n@router.get(\"\", status_code=200, response_model=List[RegionOutput])\ndef get_regions(session: Session = Depends(get_db)) -> List[RegionOutput]:\n    \"\"\"\n    Retrieve all regions.\n\n    Args:\n        session (Session): Database session.\n\n    Returns:\n        List[RegionOutput]: List of all regions.\n    \"\"\"\n    _service = RegionService(session)\n    return _service.get_all()\n\n\n@router.delete(\"/{_id}\", status_code=204)\ndef delete_region(\n        _id: UUID4,\n        session: Session = Depends(get_db),\n        current_user: UserIn = Depends(get_current_user)\n):\n    \"\"\"\n    Delete a region.\n\n    Args:\n        _id (UUID4): The ID of the region to be deleted.\n        session (Session): Database session.\n        current_user (UserIn): Current user's details.\n\n    Returns:\n        None\n    \"\"\"\n    _service = RegionService(session)\n    return _service.delete(_id, current_user.id)\n\n\n@router.put(\"/{_id}\", status_code=200, response_model=RegionInput)\ndef update_region(\n        _id: UUID4,\n        data: RegionInput,\n        session: Session = Depends(get_db),\n        current_user: UserIn = Depends(get_current_user)\n):\n    \"\"\"\n    Update a region.\n\n    Args:\n        _id (UUID4): The ID of the region to be updated.\n        data (RegionInput): Updated details of the region.\n        session (Session): Database session.\n        current_user (UserIn): Current user's details.\n\n    Returns:\n        RegionInput: Updated details of the region.\n    \"\"\"\n    _service = RegionService(session)\n    return _service.update(_id, data, current_user.id)\n"}
{"type": "source_file", "path": "app/schemas/favourite.py", "content": "from typing import List, Dict, Any, Optional\n\nfrom pydantic import BaseModel, UUID4\n\n\nclass FavouriteInput(BaseModel):\n    offer_id: UUID4\n    # user_id is set to None, and it's defined as Optional\n    # because user_id is assigned on the app site not from client\n    user_id: Optional[UUID4] = None\n\n\nclass FavouriteInDb(BaseModel):\n    id: UUID4\n    offer_id: UUID4\n    user_id: UUID4\n\n    class Config:\n        orm_mode = True\n\n\nclass FavouriteOutput(BaseModel):\n    id: UUID4\n    offer_id: UUID4\n\n\nclass FavouriteOfferOutput(BaseModel):\n    id: UUID4\n    offer: Dict[str, Any]\n"}
{"type": "source_file", "path": "app/schemas/__init__.py", "content": ""}
