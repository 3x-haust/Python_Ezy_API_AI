{"repo_info": {"repo_name": "bulldoggy-reminders-app", "repo_owner": "AutomationPanda", "repo_url": "https://github.com/AutomationPanda/bulldoggy-reminders-app"}}
{"type": "test_file", "path": "tests/conftest.py", "content": "\"\"\"\nThis module provides fixtures for testing.\n\nWARNING:\nWhy don't we just use command line arguments for base URL and passwords?\nBecause it's annoying to type them out every time we want to run tests!\n\nTODO: storage state for UI and API\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nimport json\nimport pytest\n\nfrom playwright.sync_api import Playwright\nfrom testlib.inputs import User\n\n\n# --------------------------------------------------------------------------------\n# Private Functions\n# --------------------------------------------------------------------------------\n\ndef _build_user(inputs, index):\n  assert 'users' in inputs, \"inputs are missing 'users' key\"\n  users = inputs['users']\n\n  assert len(users) > index, f\"index {index} is out of range for input 'users'\"\n  assert 'username' in users[index], f\"input 'users[{index}]' is missing 'username'\"\n  assert 'password' in users[index], f\"input 'users[{index}]' is missing 'password'\"\n  user = User(users[index]['username'], users[index]['password'])\n\n  return user\n\n\n# --------------------------------------------------------------------------------\n# Input Fixtures\n# --------------------------------------------------------------------------------\n\n@pytest.fixture(scope='session')\ndef test_inputs():\n  with open('inputs.json') as inputs_json:\n    data = json.load(inputs_json)\n  return data\n\n\n@pytest.fixture(scope='session')\ndef base_url(test_inputs):\n  assert 'base_url' in test_inputs, \"inputs are missing 'base_url' key\"\n  return test_inputs['base_url']\n\n\n@pytest.fixture(scope='session')\ndef user(test_inputs):\n  return _build_user(test_inputs, 0)\n\n\n@pytest.fixture(scope='session')\ndef alt_user(test_inputs):\n  return _build_user(test_inputs, 1)\n\n\n# --------------------------------------------------------------------------------\n# Playwright Fixtures\n# --------------------------------------------------------------------------------\n\n@pytest.fixture\ndef bulldoggy_api(playwright: Playwright, base_url: str):\n  return playwright.request.new_context(base_url=base_url)\n"}
{"type": "test_file", "path": "tests/test_api.py", "content": "\"\"\"\nThis module contains API tests for the Bulldoggy app.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nfrom playwright.sync_api import APIRequestContext\nfrom testlib.inputs import User\n\n\n# --------------------------------------------------------------------------------\n# Tests\n# --------------------------------------------------------------------------------\n\ndef test_successful_api_login(bulldoggy_api: APIRequestContext, user: User, base_url: str):\n  response = bulldoggy_api.post('/login', form={'username': user.username, 'password': user.password})\n  assert response.ok\n  assert response.url == f'{base_url}/reminders'\n\n  cookie = bulldoggy_api.storage_state()['cookies'][0]\n  assert cookie['name'] == 'reminders_session'\n  assert cookie['value']\n"}
{"type": "test_file", "path": "tests/test_unit.py", "content": "\"\"\"\nThis module contains unit tests for the Bulldoggy app.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nfrom app.utils.auth import serialize_token, deserialize_token\nfrom testlib.inputs import User\n\n\n# --------------------------------------------------------------------------------\n# Tests\n# --------------------------------------------------------------------------------\n\ndef test_token_serialization(user: User):\n  token = serialize_token(user.username)\n  assert token\n  assert isinstance(token, str)\n  assert token != user.username\n\n  username = deserialize_token(token)\n  assert username == user.username\n"}
{"type": "test_file", "path": "tests/test_ui.py", "content": "\"\"\"\nThis module contains Web UI tests for the Bulldoggy app.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nimport re\n\nfrom playwright.sync_api import Page, expect\nfrom testlib.inputs import User\n\n\n# --------------------------------------------------------------------------------\n# Login Behaviors\n#\n#   log in successfully\n#   no login credentials\n#   no username\n#   no password\n#   incorrect username\n#   incorrect password\n#   log out\n# --------------------------------------------------------------------------------\n\ndef test_successful_login(page: Page, user: User):\n\n  # Given the login page is displayed\n  page.goto('/login')\n\n  # When the user logs into the app with valid credentials\n  page.locator('[name=\"username\"]').fill(user.username)\n  page.locator('[name=\"password\"]').fill(user.password)\n  page.get_by_text('Login').click()\n\n  # Then the reminders page is displayed\n  expect(page).to_have_title('Reminders | Bulldoggy reminders app')\n  expect(page).to_have_url(re.compile(re.escape('/') + 'reminders'))\n  expect(page.locator('id=bulldoggy-logo')).to_be_visible()\n  expect(page.locator('id=bulldoggy-title')).to_have_text('Bulldoggy')\n  expect(page.get_by_role('button', name='Logout')).to_be_visible()\n\n  # And the reminders page title card displays \"Reminders for\" the user's username\n  expect(page.locator('id=reminders-message')).to_have_text(f'Reminders for {user.username}')\n\n\n# --------------------------------------------------------------------------------\n# Navigation Behaviors\n#\n#   load the login page\n#   load the reminders page\n#   home redirects to login when not authenticated\n#   home redirects to reminders when logged in\n#   invalid navigation redirects to not found\n# --------------------------------------------------------------------------------\n\n\n# --------------------------------------------------------------------------------\n# Reminders Behaviors\n#\n#   the initial reminders page is empty\n#   create the first list\n#   create more lists\n#   create the first item in a list\n#   create more items in a list\n#   strike an item as completed\n#   unstrike an item from being completed\n#   edit the name of an uncompleted item\n#   edit the name of a completed item\n#   begin editing the name of a list but cancel by clicking X\n#   begin editing the name of a list but cancel by clicking away\n#   begin editing the name of a list but cancel by typing ESCAPE\n#   delete an item\n#   delete all items\n#   creat new items after deleting all items in a list\n#   select a different list\n#   edit the name of an unselected list\n#   edit the name of a selected list\n#   commit an edit by clicking check\n#   commit an edit by typing ENTER\n#   begin editing the name of a list but cancel by clicking X\n#   begin editing the name of a list but cancel by clicking away\n#   begin editing the name of a list but cancel by typing ESCAPE\n#   delete an unselected list\n#   delete a selected list\n#   delete all lists\n#   create new lists after deleting all lists\n#   verify only one row (list or item) may be edited at a time:\n#     list name\n#     new list name\n#     item description\n#     new item description\n#   data persists after page refresh\n#   data persists after logout and log back in\n# --------------------------------------------------------------------------------\n\n\n# --------------------------------------------------------------------------------\n# User Behaviors\n#\n#   log in as separate users in separate sessions\n#   one user cannot see another user's reminders\n# --------------------------------------------------------------------------------\n"}
{"type": "source_file", "path": "app/routers/__init__.py", "content": ""}
{"type": "source_file", "path": "app/__init__.py", "content": "\"\"\"\nThis module builds shared parts for other modules.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nimport json\n\nfrom fastapi.templating import Jinja2Templates\n\n\n# --------------------------------------------------------------------------------\n# Read Configuration\n# --------------------------------------------------------------------------------\n\nwith open('config.json') as config_json:\n  config = json.load(config_json)\n  users = config['users']\n  db_path = config['db_path']\n\n\n# --------------------------------------------------------------------------------\n# Establish the Secret Key\n# --------------------------------------------------------------------------------\n\nsecret_key = config['secret_key']\n\n\n# --------------------------------------------------------------------------------\n# Templates\n# --------------------------------------------------------------------------------\n\ntemplates = Jinja2Templates(directory=\"templates\")\n"}
{"type": "source_file", "path": "app/main.py", "content": "\"\"\"\nThis module is the main module for the FastAPI app.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nfrom app.utils.exceptions import UnauthorizedPageException\nfrom app.routers import api, login, reminders, root\n\nfrom fastapi import FastAPI, Request\nfrom fastapi.openapi.utils import get_openapi\nfrom fastapi.responses import JSONResponse, RedirectResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom starlette.exceptions import HTTPException\n\n\n# --------------------------------------------------------------------------------\n# App Creation\n# --------------------------------------------------------------------------------\n\napp = FastAPI()\napp.include_router(root.router)\napp.include_router(api.router)\napp.include_router(login.router)\napp.include_router(reminders.router)\n\n\n# --------------------------------------------------------------------------------\n# Static Files\n# --------------------------------------------------------------------------------\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n\n# --------------------------------------------------------------------------------\n# Exception Handlers\n# --------------------------------------------------------------------------------\n\n@app.exception_handler(UnauthorizedPageException)\nasync def unauthorized_exception_handler(request: Request, exc: UnauthorizedPageException):\n  return RedirectResponse('/login?unauthorized=True', status_code=302)\n\n\n@app.exception_handler(404)\nasync def page_not_found_exception_handler(request: Request, exc: HTTPException):\n  if request.url.path.startswith('/api/'):\n    return JSONResponse({'detail': exc.detail}, status_code=exc.status_code)\n  else:\n    return RedirectResponse('/not-found')\n\n\n# --------------------------------------------------------------------------------\n# OpenAPI Customization\n# --------------------------------------------------------------------------------\n\ndef custom_openapi():\n  if app.openapi_schema:\n    return app.openapi_schema\n  \n  description = \\\n    \"\"\"Bulldoggy is a web app for tracking reminders.\n    It is a full-stack Python app built using FastAPI and HTMX.\n    It is meant to be an \"example\" or \"demo\" app used for instructional purposes.\n    \"\"\"\n\n  openapi_schema = get_openapi(\n    title=\"Bulldoggy: The Reminders App\",\n    version=\"1.0.0\",\n    description=description,\n    routes=app.routes,\n    tags=[\n      {\n        \"name\": \"API\",\n        \"description\": \"Backend API routes for managing reminder lists and items.\",\n      },\n      {\n        \"name\": \"Pages\",\n        \"description\": \"The main Bulldoggy web pages.\",\n      },\n      {\n        \"name\": \"Authentication\",\n        \"description\": \"Routes for logging into and out of the app.\",\n      },\n      {\n        \"name\": \"HTMX Partials\",\n        \"description\": \"Routes that serve partial web page contents for HTMX-based requests.\",\n      },\n    ]\n  )\n\n  openapi_schema[\"info\"][\"x-logo\"] = {\n    \"url\": \"static/img/logos/bulldoggy-500px.png\"\n  }\n\n  app.openapi_schema = openapi_schema\n  return app.openapi_schema\n\n\napp.openapi = custom_openapi\n"}
{"type": "source_file", "path": "app/routers/root.py", "content": "\"\"\"\nThis module provides routes for authentication.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nfrom app import templates\nfrom app.utils.auth import AuthCookie, get_auth_cookie\n\nfrom fastapi import APIRouter, Depends, Request\nfrom fastapi.responses import FileResponse, RedirectResponse\nfrom typing import Optional\n\n\n# --------------------------------------------------------------------------------\n# Router\n# --------------------------------------------------------------------------------\n\nrouter = APIRouter()\n\n\n# --------------------------------------------------------------------------------\n# Routes\n# --------------------------------------------------------------------------------\n\n@router.get(\n  path=\"/\",\n  summary=\"Redirects to the login or reminders pages\",\n  tags=[\"Pages\"]\n)\nasync def read_root(\n  cookie: Optional[AuthCookie] = Depends(get_auth_cookie)\n):\n  path = '/reminders' if cookie else '/login'\n  return RedirectResponse(path, status_code=302)\n\n\n@router.get(\n  path=\"/favicon.ico\",\n  include_in_schema=False\n)\nasync def get_favicon():\n  return FileResponse(\"static/img/favicon.ico\")\n\n\n@router.get(\n  path=\"/not-found\",\n  summary=\"Gets the \\\"Not Found\\\" page\",\n  tags=[\"Pages\"]\n)\nasync def get_not_found(\n  request: Request\n):\n  return templates.TemplateResponse(\"pages/not-found.html\", {'request': request})\n"}
{"type": "source_file", "path": "app/routers/login.py", "content": "\"\"\"\nThis module provides routes for authentication.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nfrom app import templates\nfrom app.utils.auth import AuthCookie, get_login_form_creds, get_auth_cookie\nfrom app.utils.exceptions import UnauthorizedPageException\n\nfrom fastapi import APIRouter, Depends, Request\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom typing import Optional\n\n\n# --------------------------------------------------------------------------------\n# Router\n# --------------------------------------------------------------------------------\n\nrouter = APIRouter()\n\n\n# --------------------------------------------------------------------------------\n# Routes\n# --------------------------------------------------------------------------------\n\n@router.get(\n  path=\"/login\",\n  summary=\"Gets the login page\",\n  tags=[\"Pages\", \"Authentication\"],\n  response_class=HTMLResponse\n)\nasync def get_login(\n  request: Request,\n  invalid: Optional[bool] = None,\n  logged_out: Optional[bool] = None,\n  unauthorized: Optional[bool] = None):\n\n  context = {'request': request, 'invalid': invalid, 'logged_out': logged_out, 'unauthorized': unauthorized}\n  return templates.TemplateResponse(\"pages/login.html\", context)\n\n\n@router.post(\n  path=\"/login\",\n  summary=\"Logs into the app\",\n  tags=[\"Authentication\"]\n)\nasync def post_login(cookie: Optional[AuthCookie] = Depends(get_login_form_creds)) -> dict:\n  if cookie:\n    response = RedirectResponse('/reminders', status_code=302)\n    response.set_cookie(key=cookie.name, value=cookie.token)\n  else:\n    response = RedirectResponse('/login?invalid=True', status_code=302)\n  \n  return response\n\n\nlogout = dict(\n  path=\"/logout\",\n  summary=\"Logs out of the app\",\n  tags=[\"Authentication\"]\n)\n@router.get(**logout)\n@router.post(**logout)\nasync def post_login(cookie: Optional[AuthCookie] = Depends(get_auth_cookie)) -> dict:\n  if not cookie:\n    raise UnauthorizedPageException()\n  \n  response = RedirectResponse('/login?logged_out=True', status_code=302)\n  response.set_cookie(key=cookie.name, value=cookie.token, expires=-1)\n  return response\n"}
{"type": "source_file", "path": "app/routers/reminders.py", "content": "\"\"\"\nThis module provides routes for the reminders pages.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nfrom app import templates\nfrom app.utils.auth import get_storage_for_page\nfrom app.utils.storage import ReminderStorage\n\nfrom fastapi import APIRouter, Depends, Form, Request\nfrom fastapi.responses import HTMLResponse\n\n\n# --------------------------------------------------------------------------------\n# Router\n# --------------------------------------------------------------------------------\n\nrouter = APIRouter(prefix=\"/reminders\")\n\n\n# --------------------------------------------------------------------------------\n# Helpers\n# --------------------------------------------------------------------------------\n\ndef _build_full_page_context(request: Request, storage: ReminderStorage):\n  reminder_lists = storage.get_lists()\n  selected_list = storage.get_selected_list()\n\n  return {\n    'request': request,\n    'owner': storage.owner,\n    'reminder_lists': reminder_lists,\n    'selected_list': selected_list}\n\n\ndef _get_reminders_grid(request: Request, storage: ReminderStorage):\n  context = _build_full_page_context(request, storage)\n  return templates.TemplateResponse(\"partials/reminders/content.html\", context)\n\n\n# --------------------------------------------------------------------------------\n# Routes\n# --------------------------------------------------------------------------------\n\n@router.get(\n  path=\"\",\n  summary=\"Gets the reminders page\",\n  tags=[\"Pages\"],\n  response_class=HTMLResponse\n)\nasync def get_reminders(\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  context = _build_full_page_context(request, storage)\n  return templates.TemplateResponse(\"pages/reminders.html\", context)\n\n\n# --------------------------------------------------------------------------------\n# Routes for list row partials\n# --------------------------------------------------------------------------------\n\n@router.get(\n  path=\"/list-row/{list_id}\",\n  summary=\"Partial: Gets a reminder list row by ID\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def get_reminders_list_row(\n  list_id: int,\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  reminder_list = storage.get_list(list_id)\n  selected_list = storage.get_selected_list()\n  context = {'request': request, 'reminder_list': reminder_list, 'selected_list': selected_list}\n  return templates.TemplateResponse(\"partials/reminders/list-row.html\", context)\n\n\n@router.delete(\n  path=\"/list-row/{list_id}\",\n  summary=\"Partial: Deletes a reminder list row\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def delete_reminders_list_row(\n  list_id: int,\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  storage.delete_list(list_id)\n  storage.reset_selected_after_delete(list_id)\n  return _get_reminders_grid(request, storage)\n\n\n@router.patch(\n  path=\"/list-row-name/{list_id}\",\n  summary=\"Partial: Updates a reminder list row's name\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def patch_reminders_list_row_name(\n  list_id: int,\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page),\n  new_name: str = Form()\n):\n  storage.update_list_name(list_id, new_name)\n  storage.set_selected_list(list_id)\n  return _get_reminders_grid(request, storage)\n\n\n@router.get(\n  path=\"/list-row-edit/{list_id}\",\n  summary=\"Partial: Changes a reminder list row into editing mode\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def get_reminders_list_row_edit(\n  list_id: int,\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  reminder_list = storage.get_list(list_id)\n  selected_list = storage.get_selected_list()\n  context = {'request': request, 'reminder_list': reminder_list, 'selected_list': selected_list}\n  return templates.TemplateResponse(\"partials/reminders/list-row-edit.html\", context)\n\n\n@router.get(\n  path=\"/new-list-row\",\n  summary=\"Partial: Gets the row for adding a new reminder list\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def get_reminders_new_list_row(\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  context = {'request': request}\n  return templates.TemplateResponse(\"partials/reminders/new-list-row.html\", context)\n\n\n@router.post(\n  path=\"/new-list-row\",\n  summary=\"Partial: Creates a new reminder list\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def post_reminders_new_list_row(\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page),\n  reminder_list_name: str = Form()\n):\n  list_id = storage.create_list(reminder_list_name)\n  storage.set_selected_list(list_id)\n  return _get_reminders_grid(request, storage)\n\n\n@router.get(\n  path=\"/new-list-row-edit\",\n  summary=\"Partial: Changes the new reminder list row into editing mode\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def get_reminders_new_list_row_edit(\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  context = {'request': request}\n  return templates.TemplateResponse(\"partials/reminders/new-list-row-edit.html\", context)\n\n\n@router.post(\n  path=\"/select/{list_id}\",\n  summary=\"Partial: Selects a new reminder list row\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def post_reminders_select(\n  list_id: int,\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  storage.set_selected_list(list_id)\n  return _get_reminders_grid(request, storage)\n\n\n# --------------------------------------------------------------------------------\n# Routes for item row partials\n# --------------------------------------------------------------------------------\n\n@router.get(\n  path=\"/item-row/{item_id}\",\n  summary=\"Partial: Gets a new reminder item row by ID\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def get_reminders_item_row(\n  item_id: int,\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  reminder_item = storage.get_item(item_id)\n  context = {'request': request, 'reminder_item': reminder_item}\n  return templates.TemplateResponse(\"partials/reminders/item-row.html\", context)\n\n\n@router.delete(\n  path=\"/item-row/{item_id}\",\n  summary=\"Partial: Deletes a new reminder item row\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def delete_reminders_item_row(\n  item_id: int,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  storage.delete_item(item_id)\n  return \"\"\n\n\n@router.patch(\n  path=\"/item-row-description/{item_id}\",\n  summary=\"Partial: Updates a reminder item row's description\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def patch_reminders_item_row_description(\n  item_id: int,\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page),\n  new_description: str = Form()\n):\n  storage.update_item_description(item_id, new_description)\n  reminder_item = storage.get_item(item_id)\n  context = {'request': request, 'reminder_item': reminder_item}\n  return templates.TemplateResponse(\"partials/reminders/item-row.html\", context)\n\n\n@router.patch(\n  path=\"/item-row-strike/{item_id}\",\n  summary=\"Partial: Toggles a reminder item's completed status\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def patch_reminders_item_row_strike(\n  item_id: int,\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  storage.strike_item(item_id)\n  reminder_item = storage.get_item(item_id)\n  context = {'request': request, 'reminder_item': reminder_item}\n  return templates.TemplateResponse(\"partials/reminders/item-row.html\", context)\n\n\n@router.get(\n  path=\"/item-row-edit/{item_id}\",\n  summary=\"Partial: Changes a reminder item row into editing mode\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def get_reminders_item_row_edit(\n  item_id: int,\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  reminder_item = storage.get_item(item_id)\n  context = {'request': request, 'reminder_item': reminder_item}\n  return templates.TemplateResponse(\"partials/reminders/item-row-edit.html\", context)\n\n\n@router.get(\n  path=\"/new-item-row\",\n  summary=\"Partial: Gets the new reminder item row\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def get_reminders_new_item_row(\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  context = {'request': request}\n  return templates.TemplateResponse(\"partials/reminders/new-item-row.html\", context)\n\n\n@router.post(\n  path=\"/new-item-row\",\n  summary=\"Partial: Creates a new reminder item in the selected list\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def post_reminders_new_item_row(\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page),\n  reminder_item_name: str = Form()\n):\n  selected_list = storage.get_selected_list()\n  storage.add_item(selected_list.id, reminder_item_name)\n  return _get_reminders_grid(request, storage)\n\n\n@router.get(\n  path=\"/new-item-row-edit\",\n  summary=\"Partial: Changes the new reminder item row into edit mode\",\n  tags=[\"HTMX Partials\"],\n  response_class=HTMLResponse\n)\nasync def get_reminders_new_item_row_edit(\n  request: Request,\n  storage: ReminderStorage = Depends(get_storage_for_page)\n):\n  context = {'request': request}\n  return templates.TemplateResponse(\"partials/reminders/new-item-row-edit.html\", context)\n"}
{"type": "source_file", "path": "app/routers/api.py", "content": "\"\"\"\nThis module provides routes for the API,\nwhich provides a \"backdoor\" for reminder data management.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nfrom app.utils.auth import get_storage_for_api\nfrom app.utils.storage import ReminderList, ReminderItem, ReminderStorage\n\nfrom fastapi import APIRouter, Depends\nfrom pydantic import BaseModel\nfrom typing import Dict, List, Optional\n\n\n# --------------------------------------------------------------------------------\n# Router\n# --------------------------------------------------------------------------------\n\nrouter = APIRouter(\n  prefix=\"/api\",\n  tags=[\"API\"]\n)\n\n\n# --------------------------------------------------------------------------------\n# Models\n# --------------------------------------------------------------------------------\n\nclass NewReminderListName(BaseModel):\n  name: str\n\n\nclass NewReminderItem(BaseModel):\n  description: str\n\n\nclass SelectedListId(BaseModel):\n  list_id: Optional[int]\n\n\n# --------------------------------------------------------------------------------\n# Routes for reminder lists\n# --------------------------------------------------------------------------------\n\n@router.get(\n  path=\"/reminders\",\n  summary=\"Get the user's reminder lists\",\n  response_model=List[ReminderList]\n)\nasync def get_reminders(\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> list[ReminderList]:\n  \"\"\"Gets the list of all reminder lists owned by the user.\"\"\"\n\n  return storage.get_lists()\n\n\n@router.post(\n  path=\"/reminders\",\n  summary=\"Create a new reminder list\",\n  response_model=ReminderList\n)\nasync def post_reminders(\n  reminder_list: NewReminderListName,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> ReminderList:\n  \"\"\"Creates a new reminder list for the user.\"\"\"\n\n  list_id = storage.create_list(reminder_list.name)\n  return storage.get_list(list_id)\n\n\n@router.get(\n  path=\"/reminders/{list_id}\",\n  summary=\"Get a reminder list by ID\",\n  response_model=ReminderList\n)\nasync def get_list_id(\n  list_id: int,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> ReminderList:\n  \"\"\"Gets a reminder list by ID.\"\"\"\n\n  return storage.get_list(list_id)\n\n\n@router.patch(\n  path=\"/reminders/{list_id}\",\n  summary=\"Updates a reminder list's name\",\n  response_model=ReminderList\n)\nasync def patch_list_id(\n  list_id: int,\n  reminder_list: NewReminderListName,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> ReminderList:\n  \"\"\"Updates a reminder list's name.\"\"\"\n  \n  storage.update_list_name(list_id, reminder_list.name)\n  return storage.get_list(list_id)\n\n\n@router.delete(\n  path=\"/reminders/{list_id}\",\n  summary=\"Deletes a reminder list\",\n  response_model=dict\n)\nasync def delete_list_id(\n  list_id: int,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> Dict:\n  \"\"\"Deletes a reminder list by ID.\"\"\"\n\n  storage.delete_list(list_id)\n  return dict()\n\n\n# --------------------------------------------------------------------------------\n# Routes for reminder items\n# --------------------------------------------------------------------------------\n\n@router.get(\n  path=\"/reminders/{list_id}/items\",\n  summary=\"Get all reminder items for a list\",\n  response_model=List[ReminderItem]\n)\nasync def get_list_id_items(\n  list_id: int,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> List[ReminderItem]:\n  \"\"\"Gets all reminder items for a list.\"\"\"\n\n  return storage.get_items(list_id)\n\n\n@router.post(\n  path=\"/reminders/{list_id}/items\",\n  summary=\"Add a new item to a reminder list\",\n  response_model=ReminderItem\n)\nasync def post_reminders_list_id_items(\n  list_id: int,\n  reminder_item: NewReminderItem,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> ReminderItem:\n  \"\"\"Adds a new item to a reminder list.\"\"\"\n\n  item_id = storage.add_item(list_id, reminder_item.description)\n  return storage.get_item(item_id)\n\n\n@router.get(\n  path=\"/reminders/items/{item_id}\",\n  summary=\"Get a reminder item by ID\",\n  response_model=ReminderItem\n)\nasync def get_items_item_id(\n  item_id: int,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> ReminderItem:\n  \"\"\"Gets a reminder item by ID.\"\"\"\n\n  return storage.get_item(item_id)\n\n\n@router.patch(\n  path=\"/reminders/items/{item_id}\",\n  summary=\"Update a reminder item's description\",\n  response_model=ReminderItem\n)\nasync def patch_items_item_id(\n  item_id: int,\n  reminder_item: NewReminderItem,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> ReminderItem:\n  \"\"\"Updates a reminder item's description.\"\"\"\n  \n  storage.update_item_description(item_id, reminder_item.description)\n  return storage.get_item(item_id)\n\n\n@router.patch(\n  path=\"/reminders/items/strike/{item_id}\",\n  summary=\"Toggle the completed status of a reminder item\",\n  response_model=ReminderItem\n)\nasync def patch_items_strike_item_id(\n  item_id: int,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> ReminderItem:\n  \"\"\"Toggles the completed status of a reminder item.\"\"\"\n  \n  storage.strike_item(item_id)\n  return storage.get_item(item_id)\n\n\n@router.delete(\n  path=\"/reminders/items/{item_id}\",\n  summary=\"Deletes a reminder item\",\n  response_model=Dict\n)\nasync def delete_items_item_id(\n  item_id: int,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> Dict:\n  \"\"\"Deletes a reminder item by ID.\"\"\"\n\n  storage.delete_item(item_id)\n  return dict()\n\n\n# --------------------------------------------------------------------------------\n# Routes for selected lists\n# --------------------------------------------------------------------------------\n\n@router.get(\n  path=\"/reminders/selected\",\n  summary=\"Get the selected reminder list\",\n  response_model=SelectedListId\n)\nasync def get_selected(\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> SelectedListId:\n  \"\"\"Gets the selected reminder list.\"\"\"\n\n  list_id = storage.get_selected_list_id()\n  return SelectedListId(list_id=list_id)\n\n\n@router.post(\n  path=\"/reminders/select/{list_id}\",\n  summary=\"Select a reminder list\",\n  response_model=Dict\n)\nasync def post_select_list_id(\n  list_id: int,\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> Dict:\n  \"\"\"Selects a reminder list.\"\"\"\n\n  storage.set_selected_list(list_id)\n  return {}\n\n\n@router.post(\n  path=\"/reminders/unselect\",\n  summary=\"Unselect any reminder list\",\n  response_model=Dict\n)\nasync def post_unselect(\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> Dict:\n  \"\"\"Unselects any reminder list.\"\"\"\n\n  storage.set_selected_list(None)\n  return {}\n\n\n# --------------------------------------------------------------------------------\n# Routes for data management\n# --------------------------------------------------------------------------------\n\n@router.delete(\n  path=\"/reminders/delete-lists\",\n  summary=\"Delete all the user's reminder lists\",\n  response_model=Dict\n)\nasync def delete_delete_lists(\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> Dict:\n  \"\"\"Deletes all the user's reminder lists.\"\"\"\n\n  storage.delete_lists()\n  return {}\n\n\n@router.post(\n  path=\"/reminders/create-new-lists\",\n  summary=\"Create an entirely new set of reminders after deleting old reminders\",\n  response_model=Dict\n)\nasync def post_create_new_lists(\n  storage: ReminderStorage = Depends(get_storage_for_api)\n) -> Dict:\n  \"\"\"Creates an entirely new set of reminders after deleting old reminders.\"\"\"\n\n  storage.delete_lists()\n\n  # Chores\n  chores_id = storage.create_list(\"Chores\")\n  storage.set_selected_list(chores_id)\n  storage.add_item(chores_id, \"Buy groceries\")\n  storage.add_item(chores_id, \"Mow the lawn\")\n  storage.strike_item(storage.add_item(chores_id, \"Walk the dog\"))\n  storage.strike_item(storage.add_item(chores_id, \"Wash the dishes\"))\n  storage.add_item(chores_id, \"Do laundry\")\n\n  # Groceries\n  groceries_id = storage.create_list(\"Groceries\")\n  storage.add_item(groceries_id, \"Tomatoes\")\n  storage.add_item(groceries_id, \"Garlic\")\n  storage.add_item(groceries_id, \"Olive oil\")\n  storage.add_item(groceries_id, \"Spaghetti\")\n  storage.add_item(groceries_id, \"Parmesan cheese\")\n  storage.add_item(groceries_id, \"Garlic bread\")\n\n  # Projects\n  projects_id = storage.create_list(\"Projects\")\n  storage.strike_item(storage.add_item(projects_id, \"Paint the fence\"))\n  storage.add_item(projects_id, \"Replace the toilet\")\n  storage.add_item(projects_id, \"Install new curtain rods\")\n\n  return {}\n"}
{"type": "source_file", "path": "app/utils/__init__.py", "content": ""}
{"type": "source_file", "path": "app/utils/storage.py", "content": "\"\"\"\nThis module handles the persistence layer (the \"database\") for the app.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nfrom app.utils.exceptions import NotFoundException, ForbiddenException\n\nfrom pydantic import BaseModel\nfrom tinydb import TinyDB, Query\nfrom tinydb.table import Document\nfrom typing import List, Optional\n\n\n# --------------------------------------------------------------------------------\n# Models\n# --------------------------------------------------------------------------------\n\nclass ReminderItem(BaseModel):\n  id: int\n  list_id: int\n  description: str\n  completed: bool\n\n\nclass ReminderList(BaseModel):\n  id: int\n  owner: str\n  name: str\n\n\nclass SelectedList(BaseModel):\n  id: int\n  owner: str\n  name: str\n  items: List[ReminderItem]\n\n\n# --------------------------------------------------------------------------------\n# ReminderStorage Class\n# --------------------------------------------------------------------------------\n\nclass ReminderStorage:\n  \n\n  def __init__(self, owner: str, db_path: str = 'reminder_db.json') -> None:\n    self.owner = owner\n    self._db_path = db_path\n    self._db = TinyDB(db_path)\n    self._lists_table = self._db.table('reminder_lists')\n    self._items_table = self._db.table('reminder_items')\n    self._selected_table = self._db.table('selected_lists')\n\n\n  # Private Methods\n\n  def _get_raw_list(self, list_id: int) -> Document:\n    reminder_list = self._lists_table.get(doc_id=list_id)\n\n    if not reminder_list:\n      raise NotFoundException()\n    elif reminder_list[\"owner\"] != self.owner:\n      raise ForbiddenException()\n    \n    return reminder_list\n  \n\n  def _get_raw_item(self, item_id: int) -> Document:\n    item = self._items_table.get(doc_id=item_id)\n    if not item:\n      raise NotFoundException()\n    \n    self._verify_list_exists(item['list_id'])\n    return item\n\n\n  def _verify_list_exists(self, list_id: int) -> None:\n    # Just get the list and make sure no exceptions happen\n    self._get_raw_list(list_id)\n  \n\n  def _verify_item_exists(self, item_id: int) -> None:\n    # Just get the item and make sure no exceptions happen\n    self._get_raw_item(item_id)\n\n\n  # Reminder Lists\n\n  def create_list(self, name: str) -> int:\n    reminder_list = {'name': name, 'owner': self.owner}\n    list_id = self._lists_table.insert(reminder_list)\n    return list_id\n  \n\n  def delete_list(self, list_id: int) -> None:\n    self._verify_list_exists(list_id)\n    self._lists_table.remove(doc_ids=[list_id])\n    self._items_table.remove(Query().list_id == list_id)\n\n\n  def delete_lists(self) -> None:\n    for rem_list in self.get_lists():\n      self.delete_list(rem_list.id)\n\n\n  def get_list(self, list_id: int) -> ReminderList:\n    reminder_list = self._get_raw_list(list_id)\n    reminder_list['id'] = list_id\n    model = ReminderList(**reminder_list)\n    return model\n\n\n  def get_lists(self) -> List[ReminderList]:\n    reminder_lists = self._lists_table.search(Query().owner == self.owner)\n    models = [ReminderList(id=rems.doc_id, **rems) for rems in reminder_lists]\n    return models\n  \n\n  def update_list_name(self, list_id: int, new_name: str) -> None:\n    reminder_list = self._get_raw_list(list_id)\n    reminder_list['name'] = new_name\n    self._lists_table.update(reminder_list, doc_ids=[list_id])\n  \n\n  # Reminder Items\n\n  def add_item(self, list_id: int, description: str) -> int:\n    reminder_item = {\n      'list_id': list_id,\n      'description': description,\n      'completed': False,\n    }\n\n    self._verify_list_exists(list_id)\n    item_id = self._items_table.insert(reminder_item)\n    return item_id\n  \n\n  def delete_item(self, item_id: int) -> None:\n    self._verify_item_exists(item_id)\n    self._items_table.remove(doc_ids=[item_id])\n\n\n  def get_item(self, item_id: int) -> ReminderItem:\n    item = self._get_raw_item(item_id)\n    item['id'] = item_id\n    model = ReminderItem(**item)\n    return model\n\n\n  def get_items(self, list_id: int) -> List[ReminderItem]:\n    self._verify_list_exists(list_id)\n    items = self._items_table.search(Query().list_id == list_id)\n    models = [ReminderItem(id=item.doc_id, ** item) for item in items]\n    return models\n  \n\n  def strike_item(self, item_id: int) -> None:\n    item = self._get_raw_item(item_id)\n    item['completed'] = not item['completed']\n    self._items_table.update(item, doc_ids=[item_id])\n  \n\n  def update_item_description(self, item_id: int, new_description: str) -> None:\n    item = self._get_raw_item(item_id)\n    item['description'] = new_description\n    self._items_table.update(item, doc_ids=[item_id])\n\n\n  # Selected Lists\n\n  def get_selected_list_id(self) -> Optional[int]:\n    selected_list = self._selected_table.search(Query().owner == self.owner)\n    if not selected_list:\n      return None\n    \n    list_id = selected_list[0]['list_id']\n    return list_id\n\n\n  def get_selected_list(self) -> Optional[SelectedList]:\n    list_id = self.get_selected_list_id()\n    if list_id is None:\n      return None\n\n    try:\n      reminder_list = self.get_list(list_id)\n      reminder_items = self.get_items(list_id)\n    except:\n      self._selected_table.update({'list_id': None}, Query().owner == self.owner)\n      return None\n\n    return SelectedList(\n      id=reminder_list.id,\n      owner=reminder_list.owner,\n      name=reminder_list.name,\n      items=reminder_items)\n\n\n  def set_selected_list(self, list_id: Optional[int]) -> None:\n    selected_list = self._selected_table.search(Query().owner == self.owner)\n\n    if selected_list:\n      self._selected_table.update({'list_id': list_id}, Query().owner == self.owner)\n    else:\n      self._selected_table.insert({'owner': self.owner, 'list_id': list_id})\n\n\n  def reset_selected_after_delete(self, deleted_id: int) -> None:\n    selected_list = self._selected_table.search(Query().owner == self.owner)\n\n    if selected_list and selected_list[0]['list_id'] == deleted_id:\n      reminder_lists = self._lists_table.all()\n      list_id = reminder_lists[0].doc_id if reminder_lists else None\n      self.set_selected_list(list_id)\n"}
{"type": "source_file", "path": "app/utils/auth.py", "content": "\"\"\"\nThis module provides security and authentication.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nimport jwt\nimport secrets\n\nfrom app import db_path, users, secret_key\nfrom app.utils.exceptions import UnauthorizedException, UnauthorizedPageException\nfrom app.utils.storage import ReminderStorage\n\nfrom fastapi import Cookie, Depends, Form\nfrom fastapi.security import HTTPBasic\nfrom pydantic import BaseModel\nfrom typing import Optional\n\n\n# --------------------------------------------------------------------------------\n# Globals\n# --------------------------------------------------------------------------------\n\nbasic_auth = HTTPBasic(auto_error=False)\nauth_cookie_name = \"reminders_session\"\n\n\n# --------------------------------------------------------------------------------\n# Models\n# --------------------------------------------------------------------------------\n\nclass AuthCookie(BaseModel):\n  name: str\n  token: str\n  username: str\n\n\n# --------------------------------------------------------------------------------\n# Serializers\n# --------------------------------------------------------------------------------\n\ndef serialize_token(username: str) -> str:\n  return jwt.encode({\"username\": username}, secret_key, algorithm=\"HS256\")\n\n\ndef deserialize_token(token: str) -> str:\n  try:\n    data = jwt.decode(token, secret_key, algorithms=[\"HS256\"])\n    return data['username']\n  except:\n    return None\n\n\n# --------------------------------------------------------------------------------\n# Authentication Checkers\n# --------------------------------------------------------------------------------\n\ndef get_login_form_creds(username: str = Form(), password: str = Form()) -> Optional[AuthCookie]:\n  cookie = None\n\n  if username in users:\n    if secrets.compare_digest(password, users[username]):\n      token = serialize_token(username)\n      cookie = AuthCookie(\n        name=auth_cookie_name,\n        username=username,\n        token=token)\n\n  return cookie\n\n\ndef get_auth_cookie(reminders_session: Optional[str] = Cookie(default=None)) -> Optional[AuthCookie]:\n  cookie = None\n\n  if reminders_session:\n    username = deserialize_token(reminders_session)\n    if username and username in users:\n      cookie = AuthCookie(\n        name=auth_cookie_name,\n        username=username,\n        token=reminders_session)\n  \n  return cookie\n\n\ndef get_username_for_api(cookie: Optional[AuthCookie] = Depends(get_auth_cookie)) -> str:\n  if not cookie:\n    raise UnauthorizedException()\n  \n  return cookie.username\n\n\ndef get_username_for_page(cookie: Optional[AuthCookie] = Depends(get_auth_cookie)) -> str:\n  if not cookie:\n    raise UnauthorizedPageException()\n  \n  return cookie.username\n\n\ndef get_storage_for_api(username: str = Depends(get_username_for_api)) -> ReminderStorage:\n  return ReminderStorage(owner=username, db_path=db_path)\n\n\ndef get_storage_for_page(username: str = Depends(get_username_for_page)) -> ReminderStorage:\n  return ReminderStorage(owner=username, db_path=db_path)\n"}
{"type": "source_file", "path": "app/utils/exceptions.py", "content": "\"\"\"\nThis module provides exceptions for the app.\n\"\"\"\n\n# --------------------------------------------------------------------------------\n# Imports\n# --------------------------------------------------------------------------------\n\nfrom fastapi import HTTPException, status\n\n\n# --------------------------------------------------------------------------------\n# Exceptions\n# --------------------------------------------------------------------------------\n\nclass UnauthorizedException(HTTPException):\n  def __init__(self):\n    super().__init__(status.HTTP_401_UNAUTHORIZED, \"Unauthorized\")\n\n\nclass UnauthorizedPageException(HTTPException):\n  def __init__(self):\n    super().__init__(status.HTTP_401_UNAUTHORIZED, \"Unauthorized\")\n\n\nclass ForbiddenException(HTTPException):\n  def __init__(self):\n    super().__init__(status.HTTP_403_FORBIDDEN, \"Forbidden\")\n\n\nclass NotFoundException(HTTPException):\n  def __init__(self):\n    super().__init__(status.HTTP_404_NOT_FOUND, \"Not Found\")\n"}
