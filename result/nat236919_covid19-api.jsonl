{"repo_info": {"repo_name": "covid19-api", "repo_owner": "nat236919", "repo_url": "https://github.com/nat236919/covid19-api"}}
{"type": "test_file", "path": "app/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "app/tests/test_get_data.py", "content": "\"\"\"\nFILE: test_get_data.py\nDESCRIPTION: Test reading raw files from GitHub\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 11-April-2020\n\"\"\"\n# Import libraries\nimport pandas as pd\n\nfrom ..utils.get_data import (DailyReports, DataTimeSeries, get_data,\n                              get_data_lookup_table)\n\ndaily_reports = DailyReports()\ntime_series = DataTimeSeries()\n\n\n# Test - Get Lookup table\ndef test_get_data_lookup_table() -> None:\n    result = get_data_lookup_table()\n    assert len(result) > 0\n    assert isinstance(result, dict) is True\n\n\n# Test - Get data from daily reports\ndef test_get_data_daily_reports() -> None:\n    result = daily_reports.get_data_daily_reports()\n    assert len(result) > 0\n    assert isinstance(result, pd.DataFrame) is True \n\n\n# Test - Get data from daily reports (US)\ndef test_get_data_daily_reports_US() -> None:\n    result = daily_reports.get_data_daily_reports(US=True)\n    assert len(result) > 0\n    assert isinstance(result, pd.DataFrame) is True \n\n\n# Test - Get data from time series\ndef test_get_data_time_series() -> None:\n    result = time_series.get_data_time_series()\n    assert len(result) > 0\n    assert isinstance(result, dict) is True\n\n\n# Test - Get data from time series (US)\ndef test_get_US_time_series() -> None:\n    result = time_series.get_data_time_series(US=True)\n    assert len(result) > 0\n    assert isinstance(result, dict) is True\n\n\n# Test - Get Data (API v1)\ndef test_get_data() -> None:\n    result = get_data()\n    assert len(result) > 0\n    assert isinstance(result, dict) is True\n\n\n# Test - Get Data (API v1)\ndef test_get_data(time_series = True) -> None:\n    result = get_data()\n    assert len(result) > 0\n    assert isinstance(result, dict) is True\n"}
{"type": "test_file", "path": "app/tests/test_covid_integrator_api_v1.py", "content": "\"\"\"\nFILE: test_covid_model_api_v1.py\nDESCRIPTION: Test Covid-19 Model for API v1\nAUTHOR: Maria Elsa\nDATE: 14-October 2020\n\"\"\"\n# Import libraries\nimport pytest\nimport pandas as pd\nfrom ..utils import get_data\nfrom ..integrators import covid_api_v1_integrator\n\n\n# Prepare the model\nINTEGRATOR = covid_api_v1_integrator.CovidAPIv1Integrator()\n\n# Test Initial attributes\ndef test_init() -> None:\n    assert isinstance(INTEGRATOR.df_confirmed, pd.DataFrame) is True\n    assert isinstance(INTEGRATOR.df_deaths, pd.DataFrame) is True\n    assert isinstance(INTEGRATOR.df_recovered, pd.DataFrame) is True\n    assert isinstance(INTEGRATOR.df_time_series_confirmed, dict) is True\n    assert isinstance(INTEGRATOR.df_time_series_deaths, dict) is True\n    assert isinstance(INTEGRATOR.df_time_series_recovered, dict) is True\n    assert isinstance(INTEGRATOR.datetime_raw, str) is True\n    assert isinstance(INTEGRATOR.timestamp, float) is True\n"}
{"type": "test_file", "path": "app/tests/test_covid_integrator_api_v2.py", "content": "\"\"\"\nFILE: test_covid_model_api_v2.py\nDESCRIPTION: Test Covid-19 Model for API v2\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 12-April-2020\n\"\"\"\n# Import libraries\nimport pytest\nimport pandas as pd\n\nfrom ..models.covid_api_v2_model import (ActiveModel, ConfirmedModel,\n                                         CountryModel, CurrentModel,\n                                         CurrentUSModel, DeathsModel,\n                                         RecoveredModel,\n                                         TimeseriesCaseCoordinatesModel,\n                                         TimeseriesCaseDataModel,\n                                         TimeseriesCaseModel,\n                                         TimeseriesGlobalModel,\n                                         TimeseriesUSCoordinatesModel,\n                                         TimeseriesUSDataModel,\n                                         TimeseriesUSInfoModel,\n                                         TimeseriesUSModel, TotalModel)\nfrom ..utils.get_data import (DailyReports, DataTimeSeries,\n                              get_data_lookup_table)\nfrom ..integrators.covid_api_v2_integrator import CovidAPIv2Integrator\n\n\n# Prepare the model\nDAILY_REPORTS = DailyReports()\nDATA_TIME_SERIES = DataTimeSeries()\nCOVID_API_V2 = CovidAPIv2Integrator(DAILY_REPORTS, DATA_TIME_SERIES)\n\n\n# Test Initial attibutes\ndef test_init() -> None:\n    assert isinstance(COVID_API_V2.lookup_table, dict) is True\n    assert isinstance(COVID_API_V2.scheme, dict) is True\n    assert isinstance(\n        COVID_API_V2.daily_reports.get_data_daily_reports(), pd.DataFrame) is True\n    assert isinstance(\n        COVID_API_V2.time_series.get_data_time_series(), dict) is True\n\n\n# Test - Get Current\ndef test_get_current() -> None:\n    result = COVID_API_V2.get_current().data\n    assert isinstance(result, list) is True\n    assert isinstance(result[0], CurrentModel) is True\n    assert isinstance(result[0].location, str) is True\n    assert isinstance(result[0].confirmed, int) is True\n    assert isinstance(result[0].deaths, int) is True\n    assert isinstance(result[0].recovered, int) is True\n    assert isinstance(result[0].active, int) is True\n\n\n# Test - Get country\ndef test_get_country() -> None:\n    result_th = COVID_API_V2.get_country('th').data\n    assert isinstance(result_th, CountryModel) is True\n    assert result_th.location == 'Thailand'\n\n    result_cn = COVID_API_V2.get_country('china').data\n    assert isinstance(result_cn, CountryModel) is True\n    assert result_cn.location == 'China'\n\n\n# Test - Get Confirmed\ndef test_get_confirmed() -> None:\n    result = COVID_API_V2.get_confirmed().data\n    assert isinstance(result, ConfirmedModel) is True\n    assert isinstance(result.confirmed, int) is True\n\n\n# Test - Get Deaths\ndef test_get_deaths() -> None:\n    result = COVID_API_V2.get_deaths().data\n    assert isinstance(result, DeathsModel) is True\n    assert isinstance(result.deaths, int) is True\n\n\n# Test - Get Recovered\ndef test_get_recovered() -> None:\n    result = COVID_API_V2.get_recovered().data\n    assert isinstance(result, RecoveredModel) is True\n    assert isinstance(result.recovered, int) is True\n\n\n# Test - Get Active\ndef test_get_active() -> None:\n    result = COVID_API_V2.get_active().data\n    assert isinstance(result, ActiveModel) is True\n    assert isinstance(result.active, int) is True\n\n\n# Test - Get Total\ndef test_get_total() -> None:\n    result = COVID_API_V2.get_total().data\n    assert isinstance(result, TotalModel) is True\n    assert isinstance(result.confirmed, int) is True\n    assert isinstance(result.deaths, int) is True\n    assert isinstance(result.recovered, int) is True\n    assert isinstance(result.active, int) is True\n\n\n# Test - Get Time Series\ndef test_get_time_series() -> None:\n    result = COVID_API_V2.get_time_series('global').data\n    assert isinstance(result, list) is True\n\n    result = COVID_API_V2.get_time_series('confirmed').data\n    assert isinstance(result[0], TimeseriesCaseModel) is True\n    assert isinstance(result[0].Province_State, str) is True\n    assert isinstance(result[0].Country_Region, str) is True\n    assert isinstance(result[0].Coordinates,\n                      TimeseriesCaseCoordinatesModel) is True\n    assert isinstance(result[0].TimeSeries, list) is True\n\n    result = COVID_API_V2.get_time_series('deaths').data\n    assert isinstance(result[0], TimeseriesCaseModel) is True\n    assert isinstance(result[0].Province_State, str) is True\n    assert isinstance(result[0].Country_Region, str) is True\n    assert isinstance(result[0].Coordinates,\n                      TimeseriesCaseCoordinatesModel) is True\n    assert isinstance(result[0].TimeSeries, list) is True\n\n    result = COVID_API_V2.get_time_series('recovered').data\n    assert isinstance(result[0], TimeseriesCaseModel) is True\n    assert isinstance(result[0].Province_State, str) is True\n    assert isinstance(result[0].Country_Region, str) is True\n    assert isinstance(result[0].Coordinates,\n                      TimeseriesCaseCoordinatesModel) is True\n    assert isinstance(result[0].TimeSeries, list) is True\n\n\n# Test - Get Time Series (US)\n@pytest.mark.skip(reason='Time consuming since US timeseries API requires heavy calc')\ndef test_get_US_time_series() -> None:\n    result = COVID_API_V2.get_US_time_series('confirmed').data\n    assert isinstance(result[0], TimeseriesUSModel) is True\n    assert isinstance(result[0].Province_State, str) is True\n    assert isinstance(result[0].Country_Region, str) is True\n    assert isinstance(result[0].Info, TimeseriesUSInfoModel) is True\n    assert isinstance(result[0].Coordinates,\n                      TimeseriesUSCoordinatesModel) is True\n    assert isinstance(result[0].TimeSeries, list) is True\n\n    result = COVID_API_V2.get_US_time_series('deaths').data\n    assert isinstance(result[0], TimeseriesUSModel) is True\n    assert isinstance(result[0].Province_State, str) is True\n    assert isinstance(result[0].Country_Region, str) is True\n    assert isinstance(result[0].Info, TimeseriesUSInfoModel) is True\n    assert isinstance(result[0].Coordinates,\n                      TimeseriesUSCoordinatesModel) is True\n    assert isinstance(result[0].TimeSeries, list) is True\n"}
{"type": "test_file", "path": "app/tests/test_helper.py", "content": "\"\"\"\nFILE: test_helper.py\nDESCRIPTION: Test helper functions\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 02-Sep-2020\n\"\"\"\n# Import libraries\nimport pandas as pd\nfrom ..utils import helper, file_paths\n\n\n# Test DataFrame\nDATA = {'col_1': list(range(5)), 'col_2': [1, None, '', None, None]}\nDF = pd.DataFrame(DATA)\n\n\n# Test df cleaning\ndef test_helper_df_cleaning() -> None:\n    df = DF.copy()\n    res_df = helper.helper_df_cleaning(df)\n    res_col_1 = [i for i in res_df['col_1'].values]\n    res_col_2 = [i for i in res_df['col_2'].values]\n    assert isinstance(res_df, pd.DataFrame) is True\n    assert res_col_1 == [i for i in DF['col_1'].values]\n    assert res_col_2 == [1, '', '', '', '']\n\n\n# Test df cleaning on columns\ndef test_helper_df_cols_cleaning() -> None:\n    df = DF.copy()\n    res_df = helper.helper_df_cols_cleaning(df, ['col_2'], str)\n    res_col_1 = [i for i in res_df['col_1'].values]\n    res_col_2 = [i for i in res_df['col_2'].values]\n    assert isinstance(res_df, pd.DataFrame) is True\n    assert res_col_1 == [i for i in DF['col_1'].values]\n    assert res_col_2 != [i for i in DF['col_2'].values]\n\n\n# Test get latest data\ndef test_helper_get_latest_data_url() -> None:\n    assert isinstance(helper.helper_get_latest_data_url(file_paths.JHU_CSSE_FILE_PATHS['BASE_URL_LOOKUP_TABLE']), str)\n    assert isinstance(helper.helper_get_latest_data_url(file_paths.JHU_CSSE_FILE_PATHS['BASE_URL_DAILY_REPORTS']), str)\n    assert isinstance(helper.helper_get_latest_data_url(file_paths.JHU_CSSE_FILE_PATHS['BASE_URL_DAILY_REPORTS_US']), str)\n    ## Temporily disable timeseries testing\n    # assert isinstance(helper.helper_get_latest_data_url(file_paths.JHU_CSSE_FILE_PATHS['BASE_URL_TIME_SERIES']), str)\n    # assert isinstance(helper.helper_get_latest_data_url(file_paths.JHU_CSSE_FILE_PATHS['BASE_URL_US_TIME_SERIES']), str)\n"}
{"type": "source_file", "path": "app/integrators/covid_api_v2_integrator.py", "content": "\"\"\"\nFILE: covid_api_v2_integrator.py\nDESCRIPTION: Integrators for API v2\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 01-March-2021\n\"\"\"\n# Import libraries\nfrom datetime import datetime\nfrom functools import wraps\nfrom typing import Any, Dict, List\n\nimport pandas as pd\n\nfrom models.base_model import ResponseModel\nfrom models.covid_api_v2_model import (ActiveModel, ConfirmedModel,\n                                       CountryModel, CurrentModel,\n                                       CurrentUSModel, DeathsModel,\n                                       RecoveredModel,\n                                       TimeseriesCaseCoordinatesModel,\n                                       TimeseriesCaseDataModel,\n                                       TimeseriesCaseModel,\n                                       TimeseriesGlobalModel,\n                                       TimeseriesUSCoordinatesModel,\n                                       TimeseriesUSDataModel,\n                                       TimeseriesUSInfoModel,\n                                       TimeseriesUSModel, TotalModel)\nfrom utils.get_data import (DailyReports, DataTimeSeries,\n                            get_data_lookup_table)\n\n\nclass CovidAPIv2Integrator:\n    \"\"\" Covid-19 API v2 methods\n        SCHEMA: {\n            \"data\": Any,\n            \"dt\": str = \"{datetime}\",\n            \"ts\": int = \"{timestamp}\n        }\n    \"\"\"\n\n    def __init__(self,  daily_reports: DailyReports, time_series: DataTimeSeries) -> None:\n        \"\"\" Initiate instances \"\"\"\n        self.lookup_table = get_data_lookup_table()\n        self.scheme = {\n            'data': None,\n            'dt': None,\n            'ts': None\n        }\n        self.daily_reports = daily_reports\n        self.time_series = time_series\n\n    def wrap_data(func) -> ResponseModel:\n        \"\"\" Wrap a result in a schemed data \"\"\"\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            packed_data = self.scheme\n            packed_data['data'] = []\n            try:\n                packed_data['data'] = func(self, *args, **kwargs)\n            except Exception as e:\n                print(e)\n            finally:\n                time_format = '%m-%d-%Y'\n                packed_data['dt'] = datetime.utcnow().strftime(time_format)\n                packed_data['ts'] = datetime.strptime(\n                    packed_data['dt'], time_format).timestamp()\n                reponse_model = ResponseModel(**packed_data)\n            return reponse_model\n        return wrapper\n\n    #######################################################################################\n    # GET - Current\n    #######################################################################################\n    @wrap_data\n    def get_current(self) -> List[CurrentModel]:\n        \"\"\" Current data from all locations (Lastest date) \"\"\"\n        concerned_columns = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n        self.df = self.daily_reports.get_data_daily_reports()  # Get base data\n        self.df_grp_by_country = self.df.groupby(\n            'Country_Region')[concerned_columns].sum()\n        self.df_grp_by_country[concerned_columns] = self.df_grp_by_country[concerned_columns].astype(\n            int)\n\n        df_grp_by_country = self.df_grp_by_country.sort_values(\n            by='Confirmed', ascending=False)\n        df_grp_by_country = df_grp_by_country.reset_index()\n        df_grp_by_country.columns = [\n            'location', 'confirmed', 'deaths', 'recovered', 'active']\n\n        data = [CurrentModel(**v)\n                for v in df_grp_by_country.to_dict('index').values()]\n\n        return data\n\n    #######################################################################################\n    # GET - Current US\n    #######################################################################################\n    @wrap_data\n    def get_current_US(self) -> List[CurrentUSModel]:\n        \"\"\" Get current data for USA's situation \"\"\"\n        self.df_US = self.daily_reports.get_data_daily_reports(\n            US=True)  # Get base data\n\n        concerned_columns = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n        df = self.df_US.groupby(['Province_State'])[concerned_columns].sum(\n        ).sort_values(by='Confirmed', ascending=False)\n        df = df[concerned_columns].astype(int)\n        df = df.reset_index()\n        df.columns = ['Province_State'] + concerned_columns\n\n        data = [CurrentUSModel(**v) for v in df.to_dict('index').values()]\n\n        return data\n\n    #######################################################################################\n    # GET - Country\n    #######################################################################################\n    @wrap_data\n    def get_country(self, country_name: str) -> CountryModel:\n        \"\"\" Get a country data from its name or ISO 2 \"\"\"\n        concerned_columns = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n        self.df = self.daily_reports.get_data_daily_reports()  # Get base data\n        self.df_grp_by_country = self.df.groupby(\n            'Country_Region')[concerned_columns].sum()\n        self.df_grp_by_country[concerned_columns] = self.df_grp_by_country[concerned_columns].astype(\n            int)\n\n        df_grp_by_country = self.df_grp_by_country.sort_values(\n            by='Confirmed', ascending=False)\n        df_grp_by_country = df_grp_by_country.reset_index()\n        df_grp_by_country.columns = [\n            'location', 'confirmed', 'deaths', 'recovered', 'active']\n\n        all_country_data = [CountryModel(\n            **v) for v in df_grp_by_country.to_dict('index').values()]\n\n        # Check input\n        if not isinstance(country_name, str) or not country_name.isalpha():\n            return {}\n\n        # Search for a given country\n        country_name = country_name.lower()\n        country_name_from_code = self.lookup_table.get(\n            country_name.upper(), '').lower()\n\n        data = [country_data for country_data in all_country_data if country_data.location.lower() in [\n            country_name, country_name_from_code]]\n        data = data[0] if data else {}\n\n        return data\n\n    #######################################################################################\n    # GET - Confirm\n    #######################################################################################\n    @wrap_data\n    def get_confirmed(self) -> ConfirmedModel:\n        \"\"\" Summation of all confirmed cases \"\"\"\n        self.df = self.daily_reports.get_data_daily_reports()  # Get base data\n        data = ConfirmedModel(\n            confirmed=int(self.df['Confirmed'].sum())\n        )\n        return data\n\n    #######################################################################################\n    # GET - Deaths\n    #######################################################################################\n    @wrap_data\n    def get_deaths(self) -> DeathsModel:\n        \"\"\" Summation of all deaths \"\"\"\n        self.df = self.daily_reports.get_data_daily_reports()  # Get base data\n        data = DeathsModel(\n            deaths=int(self.df['Deaths'].sum())\n        )\n        return data\n\n    #######################################################################################\n    # GET - Recovered\n    #######################################################################################\n    @wrap_data\n    def get_recovered(self) -> RecoveredModel:\n        \"\"\" Summation of all recovers \"\"\"\n        self.df = self.daily_reports.get_data_daily_reports()  # Get base data\n        data = RecoveredModel(\n            recovered=int(self.df['Recovered'].sum())\n        )\n        return data\n\n    #######################################################################################\n    # GET - Active\n    #######################################################################################\n    @wrap_data\n    def get_active(self) -> ActiveModel:\n        \"\"\" Summation of all actives \"\"\"\n        self.df = self.daily_reports.get_data_daily_reports()  # Get base data\n        data = ActiveModel(\n            active=int(self.df['Active'].sum())\n        )\n        return data\n\n    #######################################################################################\n    # GET - Total\n    #######################################################################################\n    @wrap_data\n    def get_total(self) -> TotalModel:\n        \"\"\" Summation of Confirmed, Deaths, Recovered, Active \"\"\"\n        self.df = self.daily_reports.get_data_daily_reports()  # Get base data\n        data = TotalModel(\n            confirmed=int(self.df['Confirmed'].sum()),\n            deaths=int(self.df['Deaths'].sum()),\n            recovered=int(self.df['Recovered'].sum()),\n            active=int(self.df['Active'].sum())\n        )\n        return data\n\n    #######################################################################################\n    # GET - Timeseries\n    #######################################################################################\n    @wrap_data\n    def get_time_series(self, case: str) -> List[Any]:\n        \"\"\" Get time series data from a given case\n            1.) global\n            2.) confirmed, deaths, recovered\n        \"\"\"\n        self.df_time_series = self.time_series.get_data_time_series()  # Get base data\n\n        if case not in ['global']:\n            raw_data = self.df_time_series[case].T.to_dict()\n            data = self.__extract_time_series(raw_data)\n        else:\n            raw_data = self.df_time_series\n            data = self.__extract_time_series_global(raw_data)\n\n        return data\n\n    def __extract_time_series(self, time_series: Dict) -> List[TimeseriesCaseModel]:\n        \"\"\" Extract time series from a given case \"\"\"\n\n        def __unpack_inner_time_series(time_series: Dict[str, Any]) -> TimeseriesCaseModel:\n            for data in time_series.values():\n                excluded_cols = ['Province/State',\n                                 'Country/Region', 'Lat', 'Long']\n                # Coordinates\n                timeseries_coordinates_model = TimeseriesCaseCoordinatesModel(\n                    Lat=float(data['Lat']) if data['Lat'] else 0,\n                    Long=float(data['Long']) if data['Long'] else 0\n                )\n                # Timeseries Data\n                temp_time_series_dict = {\n                    k: int(v) for k, v in data.items() if k not in excluded_cols}\n                timeseries_data_model_list = [TimeseriesCaseDataModel(\n                    date=k, value=v) for k, v in temp_time_series_dict.items()]\n\n                # Main Model\n                timeseries_case_model = TimeseriesCaseModel(\n                    Province_State=data['Province/State'],\n                    Country_Region=data['Country/Region'],\n                    Coordinates=timeseries_coordinates_model,\n                    TimeSeries=timeseries_data_model_list\n                )\n                yield timeseries_case_model\n\n        # Extract the time series data\n        time_series_data = []\n        for data in __unpack_inner_time_series(time_series):\n            time_series_data.append(data)\n\n        return time_series_data\n\n    def __extract_time_series_global(self, dataframe_dict: Dict[str, pd.DataFrame]) -> List[TimeseriesGlobalModel]:\n        \"\"\" Extract time series for global case\n            Iterating all cases from all time series\n        \"\"\"\n        global_df_list = []\n\n        for key, df in dataframe_dict.items():\n            # Slice to select time series data (exclude country info)\n            df_temp = pd.DataFrame(df.iloc[:, 4:].astype('int32').sum(axis=0))\n            # A dataframe with one column named by a key (case), rows are time series\n            df_temp.columns = [key]\n            global_df_list.append(df_temp)\n\n        # Combine DataFrames\n        global_dict = pd.concat(global_df_list, axis=1, sort=False).T.to_dict()\n        data = [{k: TimeseriesGlobalModel(**v)}\n                for k, v in global_dict.items()]\n\n        return data\n\n    #######################################################################################\n    # GET - Timeseries US\n    #######################################################################################\n    @wrap_data\n    def get_US_time_series(self, case: str) -> List[TimeseriesUSModel]:\n        \"\"\" Get USA time series \"\"\"\n        if case not in ['confirmed', 'deaths']:\n            data = []\n        else:\n            self.df_US_time_series = self.time_series.get_data_time_series(\n                US=True)  # Get base data\n            raw_data = self.df_US_time_series[case].T.to_dict()\n            data = self.__extract_US_time_series(raw_data)\n\n        return data\n\n    def __extract_US_time_series(self, time_series: Dict[str, Any]) -> List[TimeseriesUSModel]:\n        \"\"\" Extract USA time series \"\"\"\n\n        def __unpack_US_inner_time_series(time_series: Dict[str, Any]) -> TimeseriesUSModel:\n            for data in time_series.values():\n                excluded_cols = ['UID', 'iso2', 'iso3', 'code3', 'FIPS',\n                                 'Admin2', 'Province_State', 'Country_Region', 'Lat', 'Long_',\n                                 'Combined_Key', 'Population']\n                # Info\n                timeseries_US_info_model = TimeseriesUSInfoModel(\n                    UID=data['UID'],\n                    iso2=data['iso2'],\n                    iso3=data['iso3'],\n                    code3=data['code3'],\n                    FIPS=data['FIPS'],\n                    Admin2=data['Admin2'],\n                )\n                # Coordinates\n                timeseries_US_coordinates_model = TimeseriesUSCoordinatesModel(\n                    Lat=float(data['Lat']) if data['Lat'] else 0,\n                    Long=float(data['Long_']) if data['Long_'] else 0\n                )\n                # Timeseries\n                temp_time_series_dict = {\n                    k: int(v) for k, v in data.items() if k not in excluded_cols}\n                timeseries_data_model_list = [TimeseriesUSDataModel(\n                    date=k, value=v) for k, v in temp_time_series_dict.items()]\n\n                # Main Model\n                timeseries_US_model = TimeseriesUSModel(\n                    Province_State=data['Province_State'],\n                    Country_Region=data['Country_Region'],\n                    Info=timeseries_US_info_model,\n                    Coordinates=timeseries_US_coordinates_model,\n                    TimeSeries=timeseries_data_model_list\n                )\n                yield timeseries_US_model\n\n        # Extract the time series data\n        time_series_data = []\n        for data in __unpack_US_inner_time_series(time_series):\n            time_series_data.append(data)\n\n        return time_series_data\n"}
{"type": "source_file", "path": "app/config.py", "content": "\"\"\"\nFILE: config.py\nDESCRIPTION: Configurations\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 26-Nov-2020\n\"\"\"\n\nCONFIG = {\n    'app': {\n        'title': 'COVID-19 API',\n        'description': 'Simply FAST API for COVID-19 cases exploration',\n        'version': '2.1.3'\n    }\n}\n"}
{"type": "source_file", "path": "app/integrators/__init__.py", "content": ""}
{"type": "source_file", "path": "app/__init__.py", "content": ""}
{"type": "source_file", "path": "app/integrators/covid_api_v1_integrator.py", "content": "\"\"\"\nFILE: covid_api_v1_integrator.py\nDESCRIPTION: Integrators for API v1\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 02-March-2021\n\"\"\"\n# Import libraries\nfrom datetime import datetime\nfrom typing import Any, Dict, List\n\nimport pandas as pd\n\nfrom models.covid_api_v1_model import (ConfirmedModel, CountriesModel,\n                                       CurrentListModel, CurrentModel,\n                                       DeathsModel, RecoveredModel,\n                                       TimeseriesCoordinatesModel,\n                                       TimeseriesDataModel, TimeseriesModel,\n                                       TotalModel)\nfrom utils.get_data import get_data\n\n\n# Create a model and its methods\nclass CovidAPIv1Integrator:\n    \"\"\" Model and Its methods \"\"\"\n\n    def __init__(self) -> None:\n        \"\"\" Get data from helper -> the source data \"\"\"\n        list_of_dataframes = get_data()\n        self.df_confirmed = list_of_dataframes['confirmed']\n        self.df_deaths = list_of_dataframes['deaths']\n        self.df_recovered = list_of_dataframes['recovered']\n\n        list_of_time_series = get_data(time_series=True)\n        self.df_time_series_confirmed = list_of_time_series['confirmed']\n        self.df_time_series_deaths = list_of_time_series['deaths']\n        self.df_time_series_recovered = list_of_time_series['recovered']\n\n        self.datetime_raw = self.df_confirmed['datetime'].unique().tolist()[0]\n        self.timestamp = datetime.strptime(\n            self.datetime_raw, '%m/%d/%y').timestamp()\n\n    def add_dt_and_ts(self, data: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\" Add datetime and timestamp to Dict data \"\"\"\n        data['dt'] = self.datetime_raw\n        data['ts'] = self.timestamp\n        return data\n\n    def get_current_status(self, list_required: bool = False) -> Dict[str, Any]:\n        \"\"\" Current data (Lastest date) \"\"\"\n        # Create a template\n        countries = self.df_confirmed['Country/Region'].unique().tolist()\n        current_data = {country: {'confirmed': 0, 'deaths': 0,\n                                  'recovered': 0} for country in countries}\n\n        # Extractor\n        def _extractor(col: str, df: pd.DataFrame) -> None:\n            temp_data = df.T.to_dict()\n            for data in temp_data.values():\n                try:\n                    current_data[data['Country/Region']][col] += int(data[col])\n                except:\n                    pass\n            return None\n\n        # Add data to current_data\n        df_list = {'confirmed': self.df_confirmed,\n                   'deaths': self.df_deaths, 'recovered': self.df_recovered}\n        [_extractor(col, df) for col, df in df_list.items()]\n\n        # Create Models sorted by Confirmed\n        current_data = {country_name: CurrentModel(**country_data) for country_name, country_data\n                        in sorted(current_data.items(), key=lambda data: data[-1]['confirmed'], reverse=True)}\n\n        # Check if a List form is required\n        if list_required:\n            current_data['countries'] = [\n                {k: v for k, v in current_data.items()}]\n            # Filter out other keys except countries\n            current_data = {k: v for k, v in current_data.items() if k in [\n                'countries']}\n\n        # Add datetime and timestamp\n        current_data = self.add_dt_and_ts(current_data)\n\n        return current_data\n\n    def get_confirmed_cases(self) -> Dict[str, int]:\n        \"\"\" Summation of all confirmed cases \"\"\"\n        data = {'confirmed': sum([int(i)\n                                 for i in self.df_confirmed['confirmed']])}\n        data = ConfirmedModel(**self.add_dt_and_ts(data))\n        return data\n\n    def get_deaths(self) -> Dict[str, int]:\n        \"\"\" Summation of all deaths \"\"\"\n        data = {'deaths': sum([int(i) for i in self.df_deaths['deaths']])}\n        data = DeathsModel(**self.add_dt_and_ts(data))\n        return data\n\n    def get_recovered(self) -> Dict[str, int]:\n        \"\"\" Summation of all recovers \"\"\"\n        data = {'recovered': sum([int(i)\n                                 for i in self.df_recovered['recovered']])}\n        data = RecoveredModel(**self.add_dt_and_ts(data))\n        return data\n\n    def get_total(self) -> Dict[str, Any]:\n        \"\"\" Summation of Confirmed, Deaths, Recovered \"\"\"\n        data = {\n            'confirmed': self.get_confirmed_cases().confirmed,\n            'deaths': self.get_deaths().deaths,\n            'recovered': self.get_recovered().recovered\n        }\n        data = TotalModel(**self.add_dt_and_ts(data))\n        return data\n\n    def get_affected_countries(self) -> Dict[str, List]:\n        \"\"\" The affected countries \"\"\"\n        # Sorted alphabetically and exlucde 'Others'\n        sort_filter_others = lambda country_list: sorted([country for country in country_list if country not in ['Others']])\n        data = {'countries': sort_filter_others(self.df_confirmed['Country/Region'].unique().tolist())}\n        data = CountriesModel(**self.add_dt_and_ts(data))\n        return data\n\n    def get_time_series(self) -> Dict[str, Dict]:\n        \"\"\" Raw time series \"\"\"\n        data = {\n            'confirmed': [v for v in self.df_time_series_confirmed.values()],\n            'deaths': [v for v in self.df_time_series_deaths.values()],\n            'recovered':  [v for v in self.df_time_series_recovered.values()],\n        }\n        data = self.add_dt_and_ts(data)\n        return data\n"}
{"type": "source_file", "path": "app/routers/v2/router_api_v2.py", "content": "\"\"\"\nFILE: router_api_v2.py\nDESCRIPTION: all routes for API v2\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 04-April-2020\n\"\"\"\n# Import libraries\nfrom datetime import datetime\nfrom functools import wraps\nfrom typing import Any, Dict\n\nfrom fastapi import BackgroundTasks, HTTPException\nfrom integrators.covid_api_v2_integrator import CovidAPIv2Integrator\nfrom starlette.requests import Request\n\nfrom . import v2\nfrom utils.get_data import DailyReports, DataTimeSeries\n\n# Initiate Integrator\nDAILY_REPORTS = DailyReports()\nDATA_TIME_SERIES = DataTimeSeries()\nCOVID_API_V2 = CovidAPIv2Integrator(DAILY_REPORTS, DATA_TIME_SERIES)\n\n\n# Logging\ndef write_log(requested_path: str, client_ip: str) -> None:\n    time_format = '%d-%b-%Y'\n    file_name = datetime.now().strftime(time_format)\n    with open('logs/{}.txt'.format(file_name), mode='a+') as log_file:\n        date_time_message = datetime.now().strftime(\n            f'{time_format}, %H:%M:%S | ')\n        message = date_time_message + requested_path + ' | ' + client_ip + '\\n'\n        log_file.write(message)\n    return None\n\n\n@v2.get('/current')\nasync def get_current(request: Request, background_tasks: BackgroundTasks) -> Dict[str, Any]:\n    \"\"\"\n    Get the current situation data from all reported countries\n\n    - **location**: a country's name\n    - **confirmed**: confirmed cases\n    - **deaths**:  death cases\n    - **recovered**: recovered cases\n    - **active**: active cases\n    \"\"\"\n    try:\n        background_tasks.add_task(write_log, requested_path=str(\n            request.url), client_ip=str(request.client))\n        data = COVID_API_V2.get_current()\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=e)\n\n    return data\n\n\n@v2.get('/current/US')\nasync def get_current_us(request: Request, background_tasks: BackgroundTasks) -> Dict[str, Any]:\n    \"\"\"\n    Get all data from USA's current situation\n\n    - **Province_State**: State's name\n    - **Confirmed**: confirmed cases\n    - **Deaths**: death cases\n    - **Recovered**: recovered cases\n    - **Active**: active cases\n    \"\"\"\n    try:\n        background_tasks.add_task(write_log, requested_path=str(\n            request.url), client_ip=str(request.client))\n        data = COVID_API_V2.get_current_US()\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=e)\n\n    return data\n\n\n@v2.get('/total')\nasync def get_total(request: Request, background_tasks: BackgroundTasks) -> Dict[str, Any]:\n    \"\"\"\n    Get the total numbers of all cases\n\n    - **confirmed**: confirmed cases\n    - **deaths**:  death cases\n    - **recovered**: recovered cases\n    - **active**: active cases\n    \"\"\"\n    try:\n        background_tasks.add_task(write_log, requested_path=str(\n            request.url), client_ip=str(request.client))\n        data = COVID_API_V2.get_total()\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=e)\n\n    return data\n\n\n@v2.get('/confirmed')\nasync def get_confirmed(request: Request, background_tasks: BackgroundTasks) -> Dict[str, int]:\n    \"\"\"\n    Get the total numbers of confirmed cases\n\n    - **confirmed**: confirmed cases\n    \"\"\"\n    try:\n        background_tasks.add_task(write_log, requested_path=str(\n            request.url), client_ip=str(request.client))\n        data = COVID_API_V2.get_confirmed()\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=e)\n\n    return data\n\n\n@v2.get('/deaths')\nasync def get_deaths(request: Request, background_tasks: BackgroundTasks) -> Dict[str, int]:\n    \"\"\"\n    Get the total numbers of death cases\n\n    - **deaths**:  death cases\n    \"\"\"\n    try:\n        background_tasks.add_task(write_log, requested_path=str(\n            request.url), client_ip=str(request.client))\n        data = COVID_API_V2.get_deaths()\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=e)\n\n    return data\n\n\n@v2.get('/recovered')\nasync def get_recovered(request: Request, background_tasks: BackgroundTasks) -> Dict[str, int]:\n    \"\"\"\n    Get the total numbers of recovered cases\n\n    - **recovered**: recovered case\n    \"\"\"\n    try:\n        background_tasks.add_task(write_log, requested_path=str(\n            request.url), client_ip=str(request.client))\n        data = COVID_API_V2.get_recovered()\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=e)\n\n    return data\n\n\n@v2.get('/active')\nasync def get_active(request: Request, background_tasks: BackgroundTasks) -> Dict[str, int]:\n    \"\"\"\n    Get the total numbers of active cases\n\n    - **active**: active case\n    \"\"\"\n    try:\n        background_tasks.add_task(write_log, requested_path=str(\n            request.url), client_ip=str(request.client))\n        data = COVID_API_V2.get_active()\n\n    except Exception as e:\n        raise HTTPException(status_code=400, detail=e)\n\n    return data\n\n\n@v2.get('/country/{country_name}')\nasync def get_country(country_name: str, request: Request, background_tasks: BackgroundTasks) -> Dict[str, Any]:\n    \"\"\"\n    Get the data based on a county's name or its ISO code\n\n    - **location**: a country's name\n    - **confirmed**: confirmed cases\n    - **deaths**:  death cases\n    - **recovered**: recovered cases\n    - **active**: active cases\n    \\f\n    :param country_name: A country name or its ISO code (ALPHA-2)\n    \"\"\"\n    try:\n        background_tasks.add_task(write_log, requested_path=str(\n            request.url), client_ip=str(request.client))\n        raw_data = COVID_API_V2.get_country(country_name.lower())\n\n    except Exception:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n\n    return raw_data\n\n\n@v2.get('/timeseries/{case}')\nasync def get_time_series(case: str, request: Request, background_tasks: BackgroundTasks) -> Dict[str, Any]:\n    \"\"\"\n    Get the time series based on a given case: global, confirmed, deaths, recovered\n\n    global\n    - **key**: datetime\n    - **confirmed**: confirmed cases\n    - **deaths**:  death cases\n    - **recovered**: recovered case\n\n    confirmed, deaths, recovered\n    - **Province_State**: State's name\n    - **Country_Region**: Country's name\n    - **Coordinates**: {\"Lat\": int, \"Long\": int}\n    - **TimeSeries**: [{\"date\": datetime, \"value\": int}]\n    \\f\n    param: case: string case -> global, confirmed, deaths, recovered\n    \"\"\"\n    background_tasks.add_task(write_log, requested_path=str(\n        request.url), client_ip=str(request.client))\n\n    if case.lower() not in ['global', 'confirmed', 'deaths', 'recovered']:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n\n    data = COVID_API_V2.get_time_series(case.lower())\n\n    return data\n\n\n@v2.get('/timeseries/US/{case}')\nasync def get_US_time_series(case: str, request: Request, background_tasks: BackgroundTasks) -> Dict[str, Any]:\n    \"\"\"\n    Get the USA time series based on a given case:\n\n    **confirmed**, **deaths**\n\n    - **Province_State**: State's name\n    - **Country_Region**: Country's name\n    - **Info**:{\n        - **UID**: UID\n        - **iso2**: ISO2\n        - **iso3**: ISO3\n        - **code3**: CODE3\n        - **FIPS**: FIPS\n        - **Admin2**: Admin2\n    }\n    - **Coordinates**: {\n        - **Lat**: float\n        - **Long**: float\n    }\n    - **TimeSeries**: [\n        - {\"date: datetime, \"value\": int}\n    ]\n    \\f\n    param: case: string case -> confirmed, deaths\n    \"\"\"\n    background_tasks.add_task(write_log, requested_path=str(\n        request.url), client_ip=str(request.client))\n\n    if case.lower() not in ['confirmed', 'deaths']:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n\n    data = COVID_API_V2.get_US_time_series(case.lower())\n\n    return data\n"}
{"type": "source_file", "path": "app/models/covid_api_v2_model.py", "content": "\"\"\"\nFILE: covid_api_v2_model.py\nDESCRIPTION: Models for API v2\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 01-March-2021\n\"\"\"\n# Import libraries\nfrom typing import List\n\nfrom pydantic import BaseModel\n\n\n#######################################\n# CurrentModel\n#######################################\nclass CurrentModel(BaseModel):\n    location: str\n    confirmed: int\n    deaths: int\n    recovered: int\n    active: int\n\n\n#######################################\n# CurrentUSModel\n#######################################\nclass CurrentUSModel(BaseModel):\n    Province_State: str\n    Confirmed: int\n    Deaths: int\n    Recovered: int\n    Active: int\n\n\n#######################################\n# TotalModel\n#######################################\nclass TotalModel(BaseModel):\n    confirmed: int\n    deaths: int\n    recovered: int\n    active: int\n\n\n#######################################\n# ConfirmedModel\n#######################################\nclass ConfirmedModel(BaseModel):\n    confirmed: int\n\n\n#######################################\n# DeathsModel\n#######################################\nclass DeathsModel(BaseModel):\n    deaths: int\n\n\n#######################################\n# RecoveredModel\n#######################################\nclass RecoveredModel(BaseModel):\n    recovered: int\n\n\n#######################################\n# ActiveModel\n#######################################\nclass ActiveModel(BaseModel):\n    active: int\n\n\n#######################################\n# CountryModel\n#######################################\nclass CountryModel(BaseModel):\n    location: str\n    confirmed: int\n    deaths: int\n    recovered: int\n    active: int\n\n\n#######################################\n# TimeseriesGlobalModel\n#######################################\nclass TimeseriesGlobalModel(BaseModel):\n    confirmed: int\n    deaths: int\n    recovered: int\n\n\n#######################################\n# TimeseriesCaseModel\n#######################################\nclass TimeseriesCaseCoordinatesModel(BaseModel):\n    Lat: float\n    Long: float\n\n\nclass TimeseriesCaseDataModel(BaseModel):\n    date: str\n    value: int\n\n\nclass TimeseriesCaseModel(BaseModel):\n    Province_State: str\n    Country_Region: str\n    Coordinates: TimeseriesCaseCoordinatesModel\n    TimeSeries: List[TimeseriesCaseDataModel]\n\n\n#######################################\n# TimeseriesUSModel\n#######################################\nclass TimeseriesUSInfoModel(BaseModel):\n    UID: str\n    iso2: str\n    iso3: str\n    code3: str\n    FIPS: str\n    Admin2: str\n\n\nclass TimeseriesUSCoordinatesModel(BaseModel):\n    Lat: float\n    Long: float\n\n\nclass TimeseriesUSDataModel(BaseModel):\n    date: str\n    value: int\n\n\nclass TimeseriesUSModel(BaseModel):\n    Province_State: str\n    Country_Region: str\n    Info: TimeseriesUSInfoModel\n    Coordinates: TimeseriesUSCoordinatesModel\n    TimeSeries: List[TimeseriesUSDataModel]\n"}
{"type": "source_file", "path": "app/models/base_model.py", "content": "\"\"\"\nFILE: base_model.py\nDESCRIPTION: Models for General Usage\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 01-March-2021\n\"\"\"\n# Import libraries\nfrom typing import Any, Dict, List\n\nfrom pydantic import BaseModel\n\n\n#######################################\n# ResponseModel\n#######################################\nclass ResponseModel(BaseModel):\n    data: Any\n    dt: str\n    ts: int\n"}
{"type": "source_file", "path": "app/models/__init__.py", "content": ""}
{"type": "source_file", "path": "app/routers/__init__.py", "content": "\"\"\"\nFILE: __init__.py\nDESCRIPTION: Create a base for all APIs\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 04-April-2020\n\"\"\"\nfrom .v1 import router_api_v1\nfrom .v2 import router_api_v2\n"}
{"type": "source_file", "path": "app/routers/v1/__init__.py", "content": "\"\"\"\nFILE: __init__.py\nDESCRIPTION: Create a base for API v1 routers\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 04-Aril-2020\n\"\"\"\nfrom fastapi import APIRouter\n\nv1 = APIRouter()\n"}
{"type": "source_file", "path": "app/main.py", "content": "\"\"\"\nPROJECT: COVID19-API\nDESCRIPTION: Daily level information on various cases\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 9-Feb-2020\nRUN SERVER: uvicorn main:app --reload\n\"\"\"\n# Import libraries\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\nfrom starlette.responses import RedirectResponse\n\nfrom config import CONFIG\nfrom routers.v1 import v1\nfrom routers.v2 import v2\n\n# Setup application\n# Note: Please visit config.py for modification\napp = FastAPI(\n    title=CONFIG['app'].get('title'),\n    description=CONFIG['app'].get('description'),\n    version=CONFIG['app'].get('version')\n)\n\n# Setup CORS (https://fastapi.tiangolo.com/tutorial/cors/)\n# Note: Wild-card setup is used here for demonstration only,\n#       Please change the setting in accordance with your application\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n\"\"\"\nSECTION: Default route\nDESCRIPTION: Route to API documentation\n\"\"\"\n# API documentation\n@app.get('/', include_in_schema=False)\ndef read_docs() -> None:\n    \"\"\" API documentation \"\"\"\n    return RedirectResponse(url='/docs')\n\n\n\"\"\"\nSECTION: API v2\nDESCRIPTION: New API (v2)\nDATE: 14-March-2020\n\"\"\"\napp.include_router(v2, prefix=\"/v2\", tags=[\"v2\"])\n\n\n\"\"\"\nSECTION: API v1\nREMARK: No further improvement intended unless necessary\n\"\"\"\napp.include_router(v1, prefix=\"\", tags=[\"v1\"])\n"}
{"type": "source_file", "path": "app/routers/v2/__init__.py", "content": "\"\"\"\nFILE: __init__.py\nDESCRIPTION: Create a base for API v2 routers\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 04-Aril-2020\n\"\"\"\nfrom fastapi import APIRouter\n\nv2 = APIRouter()\n"}
{"type": "source_file", "path": "app/models/covid_api_v1_model.py", "content": "\"\"\"\nFILE: covid_api_v1_model.py\nDESCRIPTION: Models for API v1\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 01-March-2021\n\"\"\"\n# Import libraries\nfrom typing import List\n\nfrom pydantic import BaseModel\n\n\n#######################################\n# CurrentModel\n#######################################\nclass CurrentModel(BaseModel):\n    confirmed: int\n    deaths: int\n    recovered: int\n\n\n#######################################\n# CurrentListModel\n#######################################\nclass CurrentListModel(BaseModel):\n    countries: List[CurrentModel]\n    dt: str\n    ts: int\n\n\n#######################################\n# TotalModel\n#######################################\nclass TotalModel(BaseModel):\n    confirmed: int\n    deaths: int\n    recovered: int\n    dt: str\n    ts: int\n\n\n#######################################\n# ConfirmedModel\n#######################################\nclass ConfirmedModel(BaseModel):\n    confirmed: int\n    dt: str\n    ts: int\n\n\n#######################################\n# DeathsModel\n#######################################\nclass DeathsModel(BaseModel):\n    deaths: int\n    dt: str\n    ts: int\n\n\n#######################################\n# RecoveredModel\n#######################################\nclass RecoveredModel(BaseModel):\n    recovered: int\n    dt: str\n    ts: int\n\n\n#######################################\n# CountriesModel\n#######################################\nclass CountriesModel(BaseModel):\n    countries: List[str]\n    dt: str\n    ts: int\n\n\n#######################################\n# TimeSeriesModel\n#######################################\nclass TimeseriesCoordinatesModel(BaseModel):\n    Lat: float\n    Long: float\n\n\nclass TimeseriesDataModel(BaseModel):\n    date: str\n    value: int\n\n\nclass TimeseriesModel(BaseModel):\n    Province_State: str\n    Country_Region: str\n    Coordinates: TimeseriesCoordinatesModel\n    Data: List[TimeseriesDataModel]\n    "}
{"type": "source_file", "path": "app/routers/v1/router_api_v1.py", "content": "\"\"\"\nFILE: router_api_v1.py\nDESCRIPTION: all routes for API v1\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 04-April-2020\n\"\"\"\n# Import libraries\nfrom functools import wraps\nfrom typing import Any, Dict\n\nfrom fastapi import HTTPException\n\nfrom integrators.covid_api_v1_integrator import CovidAPIv1Integrator\nfrom utils.helper import helper_lookup_country\nfrom . import v1\n\n\n# Reload Integrator (APIv1)\ndef reload_api_v1_integrator(func):\n    \"\"\" Reload a model for each quest \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        global COVID_API_V1, dt, ts\n        COVID_API_V1 = CovidAPIv1Integrator()\n        dt, ts = COVID_API_V1.datetime_raw, COVID_API_V1.timestamp\n        return func(*args, **kwargs)\n    return wrapper\n\n\n@v1.get('/current')\n@reload_api_v1_integrator\ndef current_status() -> Dict[str, int]:\n    data = COVID_API_V1.get_current_status()\n    return data\n\n\n@v1.get('/current_list')\n@reload_api_v1_integrator\ndef current_status_list() -> Dict[str, Any]:\n    \"\"\" Coutries are kept in a List \"\"\"\n    data = COVID_API_V1.get_current_status(list_required=True)\n    return data\n\n\n@v1.get('/total')\n@reload_api_v1_integrator\ndef total() -> Dict[str, Any]:\n    data = COVID_API_V1.get_total()\n    return data\n\n\n@v1.get('/confirmed')\n@reload_api_v1_integrator\ndef confirmed_cases() -> Dict[str, int]:\n    data = COVID_API_V1.get_confirmed_cases()\n    return data\n\n\n@v1.get('/deaths')\n@reload_api_v1_integrator\ndef deaths() -> Dict[str, int]:\n    data = COVID_API_V1.get_deaths()\n    return data\n\n\n@v1.get('/recovered')\n@reload_api_v1_integrator\ndef recovered() -> Dict[str, int]:\n    data = COVID_API_V1.get_recovered()\n    return data\n\n\n@v1.get('/countries')\n@reload_api_v1_integrator\ndef affected_countries() -> Dict[int, str]:\n    data = COVID_API_V1.get_affected_countries()\n    return data\n\n\n@v1.get('/country/{country_name}')\n@reload_api_v1_integrator\ndef country(country_name: str) -> Dict[str, Any]:\n    \"\"\" Search by name or ISO (alpha2) \"\"\"\n    raw_data = COVID_API_V1.get_current_status()  # Get all current data\n    try:\n        if country_name.lower() not in ['us', 'uk'] and len(country_name) in [2]:\n            country_name = helper_lookup_country(country_name)\n            data = {k: v for k, v in raw_data.items(\n            ) if country_name.lower() in k.lower()}\n        else:\n            data = {k: v for k, v in raw_data.items(\n            ) if country_name.lower() == k.lower()}\n\n        # Add dt and ts\n        data['dt'] = raw_data['dt']\n        data['ts'] = raw_data['ts']\n\n    except:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n\n    return data\n\n\n@v1.get('/timeseries/{case}')\n@reload_api_v1_integrator\ndef timeseries(case: str) -> Dict[str, Any]:\n    \"\"\" Get the time series based on a given case: confirmed, deaths, recovered \"\"\"\n    raw_data = COVID_API_V1.get_time_series()\n    case = case.lower()\n\n    if case in ['confirmed', 'deaths', 'recovered']:\n        data = {case: raw_data[case]}\n        data['dt'] = raw_data['dt']\n        data['ts'] = raw_data['ts']\n\n    else:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n\n    return data\n"}
{"type": "source_file", "path": "app/utils/file_paths.py", "content": "\"\"\"\nFILE: file_paths.py\nDESCRIPTION: Keep file paths from the data source\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 17-April-2020\n\"\"\"\n# Johns Hopkins CSSE - Datasets (https://github.com/CSSEGISandData/COVID-19)\nJHU_CSSE_BASE_PATH = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/'\nJHU_CSSE_DAILY_REPORT_PATH = JHU_CSSE_BASE_PATH + 'csse_covid_19_daily_reports/'\nJHU_CSSE_DAILY_REPORT_US_PATH = JHU_CSSE_BASE_PATH + 'csse_covid_19_daily_reports_us/'\nJHU_CSSE_TIME_SERIES_PATH = JHU_CSSE_BASE_PATH + 'csse_covid_19_time_series/'\nJHU_CSSE_LOOKUP_TABLE_PATH = JHU_CSSE_BASE_PATH + 'UID_ISO_FIPS_LookUp_Table.csv'\nJHU_CSSE_CATEGORIES = ['confirmed', 'deaths', 'recovered']\n\nJHU_CSSE_FILE_PATHS = {\n    'BASE_URL_LOOKUP_TABLE': JHU_CSSE_LOOKUP_TABLE_PATH,\n    'BASE_URL_DAILY_REPORTS': JHU_CSSE_DAILY_REPORT_PATH + '{}.csv',\n    'BASE_URL_DAILY_REPORTS_US': JHU_CSSE_DAILY_REPORT_US_PATH + '{}.csv',\n    'BASE_URL_TIME_SERIES': JHU_CSSE_TIME_SERIES_PATH + 'time_series_covid19_{}_global.csv',\n    'BASE_URL_US_TIME_SERIES': JHU_CSSE_TIME_SERIES_PATH + 'time_series_covid19_{}_US.csv',\n    'CATEGORIES': JHU_CSSE_CATEGORIES\n}\n"}
{"type": "source_file", "path": "app/utils/get_data.py", "content": "\"\"\"\nFILE: get_data.py\nDESCRIPTION: Read raw files from GitHub\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 9-Feb-2020\n\"\"\"\n# Import libraries\nimport csv\nfrom typing import Dict\n\nimport pandas as pd\n\nfrom .file_paths import JHU_CSSE_FILE_PATHS\nfrom .helper import (helper_df_cleaning, helper_df_cols_cleaning,\n                     helper_get_latest_data_url)\n\n\n# Get Lookup table\ndef get_data_lookup_table() -> Dict[str, str]:\n    \"\"\" Get lookup table (country references for iso2) \"\"\"\n    lookup_table_url = JHU_CSSE_FILE_PATHS['BASE_URL_LOOKUP_TABLE']\n    lookup_df = pd.read_csv(lookup_table_url)[['iso2', 'Country_Region']]\n    \n    # Create referral dictionary\n    data = lookup_df.to_dict('records')\n    data = {v['iso2']: v['Country_Region'] for v in data}\n\n    return data\n\n\n# Get Daily Reports Data (General and US)\nclass DailyReports:\n    def __init__(self) -> None: \n        self.latest_base_url = helper_get_latest_data_url(JHU_CSSE_FILE_PATHS['BASE_URL_DAILY_REPORTS'])\n        self.latest_base_US_url = helper_get_latest_data_url(JHU_CSSE_FILE_PATHS['BASE_URL_DAILY_REPORTS_US'])\n\n    # Get data from daily reports\n    def get_data_daily_reports(self, US: bool = False) -> pd.DataFrame:\n        \"\"\" Get data from BASE_URL_DAILY_REPORTS \"\"\"\n        # Extract the data\n        df = pd.read_csv(self.latest_base_US_url) if US else pd.read_csv(self.latest_base_url)\n\n        # Data pre-processing\n        concerned_columns = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n        df = helper_df_cols_cleaning(df, concerned_columns, int)\n        \n        return df\n\n      \n# Get data from time series (General and US)\nclass DataTimeSeries:\n    \"\"\" Get the tiemseires dataset from JHU CSSE and Prepare DataFrames \"\"\"\n    def get_data_time_series(self, US: bool = False) -> Dict[str, pd.DataFrame]:\n        \"\"\" Get the dataset from JHU CSSE \"\"\"\n        dataframes = {}\n\n        # Determine categories and url\n        if US:\n            categories = JHU_CSSE_FILE_PATHS['CATEGORIES'][:-1] # Select only 'confirmed' and 'deaths'\n            url = JHU_CSSE_FILE_PATHS['BASE_URL_US_TIME_SERIES']\n        else:\n            categories = JHU_CSSE_FILE_PATHS['CATEGORIES']\n            url = JHU_CSSE_FILE_PATHS['BASE_URL_TIME_SERIES']\n\n        # Iterate through all files\n        for category in categories:\n            url = url.format(category)\n            # Extract data from URL\n            df = pd.read_csv(url)\n            df = self._clean_timeseries_dataframe(df, US)\n            dataframes[category] = df\n\n        return dataframes\n    \n    def _clean_timeseries_dataframe(self, df: pd.DataFrame, US: bool = False) -> pd.DataFrame:\n        df_cleaned = helper_df_cleaning(df) # main pre-processing\n        if US:\n            df_cleaned = helper_df_cols_cleaning(df_cleaned, ['Lat', 'Long_'], float)\n        return df_cleaned\n\n      \n# API v1\ndef get_data(time_series: bool = False) -> Dict[str, pd.DataFrame]:\n    \"\"\" Get the dataset from JHU CSSE \"\"\"\n    dataframes = {}\n\n    # Iterate through all files\n    for category in JHU_CSSE_FILE_PATHS['CATEGORIES']:\n        url = JHU_CSSE_FILE_PATHS['BASE_URL_TIME_SERIES'].format(category)\n\n        # Extract data\n        df = pd.read_csv(url)\n        df = df.fillna('')\n        df['Country/Region'] = df['Country/Region'].apply(lambda country_name: country_name.strip()) # Eliminate whitespace\n        df['Country/Region'] = df['Country/Region'].str.replace(' ', '_')\n\n        # Data Preprocessing\n        if time_series:\n            df = df.T.to_dict()\n        else:\n            df = df.iloc[:, [0, 1, -1]] # Select only Region, Country and its last values\n            datetime_raw = list(df.columns.values)[-1] # Ex) '2/11/20 20:44'\n            df.columns = ['Province/State', 'Country/Region', category]\n\n            df[category].fillna(0, inplace=True) # Replace empty cells with 0\n            df[category].replace('', 0, inplace=True) # Replace '' with 0\n\n            df['datetime'] = datetime_raw\n            pd.to_numeric(df[category])\n            df.dropna(axis=0, how='any', thresh=None, subset=None, inplace=False)\n\n        dataframes[category.lower()] = df\n\n    return dataframes\n"}
{"type": "source_file", "path": "app/utils/helper.py", "content": "\"\"\"\nFILE: helper.py\nDESCRIPTION: All functions for helping small tasks\nAUTHOR: Nuttaphat Arunoprayoch\nDATE: 04-April-2020\n\"\"\"\n# Import libraries\nfrom datetime import datetime, timedelta\nfrom typing import List, TypeVar\n\nimport pandas as pd\nimport pycountry\nimport requests\n\n\n# Data preprocessing (DataFrame)\ndef helper_df_cleaning(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\" Fill all empty values with am empty string (e.g., '') \"\"\"\n    return df.fillna('')\n\n\n# Data preprocessing (DataFrame's columns)\nvar_types = TypeVar('ensure_dtype', int, float, str)\ndef helper_df_cols_cleaning(df: pd.DataFrame, cols: List[str], ensure_dtype: var_types = None) -> pd.DataFrame:\n    \"\"\" Clean certain colomns in a DataFrame \"\"\"\n    df[cols] = df[cols].fillna(0) # Replace empty cells with 0\n    df[cols] = df[cols].replace('', 0) # Replace '' with 0\n\n    if ensure_dtype and ensure_dtype in [int, float, str]:\n        df[cols] = df[cols].astype(ensure_dtype)\n\n    return df\n\n\n# Get latest data\ndef helper_get_latest_data_url(base_url: str) -> str:\n    \"\"\" Get the latest base URL \"\"\"\n    time_format = '%m-%d-%Y'\n    current_datetime = datetime.utcnow().strftime(time_format)\n    latest_base_url = base_url.format(current_datetime)\n\n    # Check the latest file by re-acquiring file\n    # If not found, continue\n    time_delta = 1\n    while requests.get(latest_base_url).status_code == 404:\n        current_datetime = datetime.strftime(datetime.utcnow() - timedelta(time_delta), time_format)\n        latest_base_url = base_url.format(current_datetime)\n        time_delta += 1\n\n    return latest_base_url\n\n\n# Look up a country name from a country code\ndef helper_lookup_country(country: str) -> str:\n    \"\"\" Look up a country name from a country code \"\"\"\n    country_name = pycountry.countries.lookup(country).name # Select the first portion of str when , is found\n    if ',' in country_name:\n        country_name = country_name.split(',')[0]\n    elif ' ' in country_name:\n        country_name = country_name.split(' ')[-1]\n    return country_name\n"}
{"type": "source_file", "path": "app/utils/__init__.py", "content": ""}
