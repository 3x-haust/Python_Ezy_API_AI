{"repo_info": {"repo_name": "ollama-crew-mesop", "repo_owner": "rapidarchitect", "repo_url": "https://github.com/rapidarchitect/ollama-crew-mesop"}}
{"type": "source_file", "path": "cli_crew.py", "content": "from crewai import Agent, Task, Crew\nfrom langchain_community.chat_models.ollama import ChatOllama\nimport os\n\n# Set the OpenAI API key as an environment variable\nos.environ[\"OPENAI_API_KEY\"] = \"NA\"\n\n# Initialize the language model (LLM) using the ChatOllama model hosted locally\nllm = ChatOllama(model=\"llama3.1\", base_url=\"http://localhost:11434\")\n\n# Define the prompt for the task\nprompt = \"benefits of using using the SOLID pattern in python\"\n\n# Create a Tech Writer agent responsible for writing the blog post\ngeneral_agent = Agent(\n    role=\"Tech Writer\",\n    backstory=\"\"\"You are a tech writer who is capable of writing\n                tech blog post in depth.\n              \"\"\",\n    goal=\"Write and iterate a high quality blog post.\",\n    llm=llm,\n    verbose=True,\n    allow_delegation=False,\n)\n\n# Create a Tech Researcher agent responsible for gathering relevant information\nresearcher = Agent(\n    role=\"Tech Researcher\",\n    backstory=\"\"\"You are a professional researcher for many technical topics.\n                You are good at gathering keywords, key points and trends of\n                the given topic\n              \"\"\",\n    goal=\"list keywords, key points and trend about for the given topic\",\n    llm=llm,\n    verbose=True,\n    allow_delegation=False,\n)\n\n# Define a task for the researcher to list key knowledge and trends for the topic\ntask = Task(\n    description=f\"\"\"list keywords, key points,trends\n                    for the following topic: {prompt}.\n                    \"\"\",\n    agent=researcher,\n    expected_output=\"Keywords, Key Points and Trends.\",\n)\n\n# Define a task for the Tech Writer to write the blog post based on the research outcomes\ntask2 = Task(\n    description=f\"\"\"Based on the given research outcomes,\n                    write a blog post of {prompt}.\n                    \"\"\",\n    agent=general_agent,\n    expected_output=\"an article that is no more then 250 words\",\n)\n\n# Create a Crew with both agents and tasks, and initiate the workflow\ncrew = Crew(agents=[general_agent, researcher], tasks=[task, task2], verbose=True)\n\n# Execute the tasks and retrieve the result\nresult = crew.kickoff()\n\n# Print the final result\nprint(result)\n"}
{"type": "source_file", "path": "ollama_crew.py", "content": "from crewai import Crew, Process, Agent, Task\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.callbacks import BaseCallbackHandler\nfrom typing import Any, Dict\nimport mesop as me\nimport mesop.labs as mel\n\nllm = ChatOpenAI(\n    model=\"llama3.1\", openai_api_key=\"NA\", base_url=\"http://localhost:11434/v1\"\n)\n\n\nclass MyCustomHandler(BaseCallbackHandler):\n    def __init__(self, agent_name: str) -> None:\n        self.agent_name = agent_name\n\n    def on_chain_start(\n        self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any\n    ) -> None:\n        state = me.state(State)\n        state.agent_messages.append(f\"## Assistant: \\r{inputs['input']}\")\n\n    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> None:\n        state = me.state(State)\n        state.agent_messages.append(f\"## {self.agent_name}: \\r{outputs['output']}\")\n\n\nwriter = Agent(\n    role=\"Tech Writer\",\n    backstory=\"\"\"You are a tech writer who is capable of writing\n                tech blog post in depth.\n              \"\"\",\n    goal=\"Write and iterate a high quality blog post.\",\n    llm=llm,\n    verbose=False,\n    allow_delegation=False,\n    callbacks=[MyCustomHandler(\"Writer\")],\n)\nresearcher = Agent(\n    role=\"Tech Researcher\",\n    backstory=\"\"\"You are a professional researcher for many technical topics.\n                You are good at gathering keywords, key points and trends of\n                the given topic\n              \"\"\",\n    goal=\"list keywords, key points and trend about for the given topic\",\n    llm=llm,\n    verbose=False,\n    allow_delegation=False,\n    callbacks=[MyCustomHandler(\"Researcher\")],\n)\n\n\ndef StartCrew(prompt):\n    task1 = Task(\n        description=f\"\"\"list keywords, key points,trends\n                        for the following topic: {prompt}.\n                        \"\"\",\n        agent=researcher,\n        expected_output=\"Keywords, Key Points and Trends.\",\n    )\n    task2 = Task(\n        description=f\"\"\"Based on the given research outcomes,\n                        write a blog post of {prompt}.\n                        \"\"\",\n        agent=writer,\n        expected_output=\"an article that is no more then 250 words\",\n    )\n\n    project_crew = Crew(\n        tasks=[task1, task2],\n        agents=[researcher, writer],\n        manager_llm=llm,\n        process=Process.sequential,\n    )\n\n    result = project_crew.kickoff()\n\n    return result\n\n\n@me.stateclass\nclass State:\n    agent_messages: list[str]\n\n\n_DEFAULT_BORDER = me.Border.all(me.BorderSide(color=\"#e0e0e0\", width=1, style=\"solid\"))\n_BOX_STYLE = me.Style(\n    display=\"grid\",\n    border=_DEFAULT_BORDER,\n    padding=me.Padding.all(15),\n    overflow_y=\"scroll\",\n    box_shadow=(\"0 3px 1px -2px #0003, 0 2px 2px #00000024, 0 1px 5px #0000001f\"),\n)\n\n\n@me.page(\n    security_policy=me.SecurityPolicy(\n        allowed_iframe_parents=[\"https://google.github.io\"]\n    ),\n    path=\"/\",\n    title=\"Ollama with CrewAI on Mesop\",\n)\ndef app():\n    state = me.state(State)\n    with me.box():\n        mel.text_to_text(\n            StartCrew,\n            title=\"Ollama Blog Generator\",\n        )\n    with me.box(style=_BOX_STYLE):\n        me.text(text=\"Crew Execution..\", type=\"headline-6\")\n        for message in state.agent_messages:\n            with me.box(style=_BOX_STYLE):\n                me.markdown(message)\n"}
{"type": "source_file", "path": "simple_math.py", "content": "from crewai import Agent, Task, Crew\nfrom langchain_community.chat_models.ollama import ChatOllama\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"NA\"\n\nllm = ChatOllama(model=\"llama3.1\", base_url=\"http://localhost:11434\")\n\ngeneral_agent = Agent(\n    role=\"Math Professor\",\n    goal=\"\"\"Provide the solution to the students that are asking mathematical questions and give them the answer.\"\"\",\n    backstory=\"\"\"You are an excellent math professor that likes to solve math questions in a way that everyone can understand your solution\"\"\",\n    allow_delegation=False,\n    verbose=True,\n    llm=llm,\n)\n\ntask = Task(\n    description=\"\"\"what is 3 + 5\"\"\",\n    agent=general_agent,\n    expected_output=\"A numerical answer.\",\n)\n\ncrew = Crew(agents=[general_agent], tasks=[task], verbose=True)\n\nresult = crew.kickoff()\n\nprint(result)\n"}
{"type": "source_file", "path": "openai_crew.py", "content": "from crewai import Crew, Process, Agent, Task\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.callbacks import BaseCallbackHandler\nfrom typing import Any, Dict\nimport os\nimport mesop as me\nimport mesop.labs as mel\n\nllm = ChatOpenAI(model=\"gpt-4o\", openai_api_key=os.environ[\"OPENAI_API_KEY\"])\n\n\nclass MyCustomHandler(BaseCallbackHandler):\n    def __init__(self, agent_name: str) -> None:\n        self.agent_name = agent_name\n\n    def on_chain_start(\n        self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any\n    ) -> None:\n        state = me.state(State)\n        state.agent_messages.append(f\"## Assistant: \\r{inputs['input']}\")\n\n    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> None:\n        state = me.state(State)\n        state.agent_messages.append(f\"## {self.agent_name}: \\r{outputs['output']}\")\n\n\nwriter = Agent(\n    role=\"Tech Writer\",\n    backstory=\"\"\"You are a tech writer who is capable of writing\n                tech blog post in depth.\n              \"\"\",\n    goal=\"Write and iterate a high quality blog post.\",\n    llm=llm,\n    verbose=False,\n    allow_delegation=False,\n    callbacks=[MyCustomHandler(\"Writer\")],\n)\nresearcher = Agent(\n    role=\"Tech Researcher\",\n    backstory=\"\"\"You are a professional researcher for many technical topics.\n                You are good at gathering keywords, key points and trends of\n                the given topic\n              \"\"\",\n    goal=\"list keywords, key points and trend about for the given topic\",\n    llm=llm,\n    verbose=False,\n    allow_delegation=False,\n    callbacks=[MyCustomHandler(\"Researcher\")],\n)\n\n\ndef StartCrew(prompt):\n    task1 = Task(\n        description=f\"\"\"list keywords, key points,trends\n                        for the following topic: {prompt}.\n                        \"\"\",\n        agent=researcher,\n        expected_output=\"Keywords, Key Points and Trends.\",\n    )\n    task2 = Task(\n        description=f\"\"\"Based on the given research outcomes,\n                        write a blog post of {prompt}.\n                        \"\"\",\n        agent=writer,\n        expected_output=\"an article that is no more then 250 words\",\n    )\n\n    project_crew = Crew(\n        tasks=[task1, task2],\n        agents=[researcher, writer],\n        manager_llm=llm,\n        process=Process.sequential,\n    )\n\n    result = project_crew.kickoff()\n\n    return result\n\n\n@me.stateclass\nclass State:\n    agent_messages: list[str]\n\n\n_DEFAULT_BORDER = me.Border.all(me.BorderSide(color=\"#e0e0e0\", width=1, style=\"solid\"))\n_BOX_STYLE = me.Style(\n    display=\"grid\",\n    border=_DEFAULT_BORDER,\n    padding=me.Padding.all(15),\n    overflow_y=\"scroll\",\n    box_shadow=(\"0 3px 1px -2px #0003, 0 2px 2px #00000024, 0 1px 5px #0000001f\"),\n)\n\n\n@me.page(\n    security_policy=me.SecurityPolicy(\n        allowed_iframe_parents=[\"https://google.github.io\"]\n    ),\n    path=\"/\",\n    title=\"Ollama with CrewAI on Mesop\",\n)\ndef app():\n    state = me.state(State)\n    with me.box():\n        mel.text_to_text(\n            StartCrew,\n            title=\"OpenAI Blog Generator\",\n        )\n    with me.box(style=_BOX_STYLE):\n        me.text(text=\"Crew Execution..\", type=\"headline-6\")\n        for message in state.agent_messages:\n            with me.box(style=_BOX_STYLE):\n                me.markdown(message)\n"}
