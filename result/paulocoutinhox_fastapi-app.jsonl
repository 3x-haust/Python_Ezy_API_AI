{"repo_info": {"repo_name": "fastapi-app", "repo_owner": "paulocoutinhox", "repo_url": "https://github.com/paulocoutinhox/fastapi-app"}}
{"type": "test_file", "path": "tests/conftest.py", "content": "import os\nimport sys\n\nimport pytest\nfrom fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# app\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom helpers import router\nfrom helpers.db import get_db\nfrom models.my_model import Base\n\n# database\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n\n# fixtures\n@pytest.fixture(scope=\"function\")\ndef db():\n    Base.metadata.create_all(bind=engine)\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n        Base.metadata.drop_all(bind=engine)\n\n\n@pytest.fixture\ndef app(db) -> FastAPI:\n    app = FastAPI()\n    router.setup(app)\n\n    # replace database session\n    def override_get_db():\n        try:\n            yield db\n        finally:\n            db.close()\n\n    app.dependency_overrides[get_db] = override_get_db\n    return app\n\n\n@pytest.fixture\ndef client(app: FastAPI) -> TestClient:\n    return TestClient(app)\n"}
{"type": "test_file", "path": "tests/test_helpers_cors.py", "content": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom helpers import cors\n\n\ndef test_no_cors(app: FastAPI, client: TestClient):\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n\n    response = client.get(\"/\")\n    assert \"access-control-allow-origin\" not in response.headers\n\n\ndef test_with_cors(app: FastAPI):\n    app = FastAPI()\n    cors.setup(app)\n    client = TestClient(app)\n\n    @app.get(\"/\")\n    def read_root():\n        return {\"Hello\": \"World\"}\n\n    response = client.get(\"/\", headers={\"Origin\": \"http://myhost.com\"})\n    assert response.headers.get(\"access-control-allow-origin\") == \"*\"\n"}
{"type": "test_file", "path": "tests/test_helpers_db.py", "content": "from unittest.mock import patch\n\nfrom sqlalchemy.orm import Session\n\nfrom helpers.db import get_db\n\n\ndef test_get_db(db: Session):\n    with patch(\"helpers.db.SessionLocal\", return_value=db):\n        generator = get_db()\n        db_session = next(generator)\n        assert db_session == db\n        generator.close()\n"}
{"type": "test_file", "path": "tests/test_services_my_model.py", "content": "from unittest.mock import patch\n\nfrom sqlalchemy.orm import Session\n\nfrom models.my_model import MyModel\nfrom services import my_model as service_my_model\n\n\ndef test_create_success(db: Session):\n    obj = MyModel(field1=\"Test 1\", field2=True)\n\n    result = service_my_model.create(obj, db)\n\n    assert result is not None\n    obj_from_db = db.query(MyModel).filter_by(id=result).first()\n    assert obj_from_db is not None\n    assert obj_from_db.field1 == \"Test 1\"\n    assert obj_from_db.field2 == True\n\n\ndef test_create_failure(db: Session):\n    obj = MyModel(field1=\"Test 1\", field2=True)\n\n    with patch.object(db, \"commit\", side_effect=Exception(\"DB Error\")):\n        result = service_my_model.create(obj, db)\n\n    assert result is None\n    obj_from_db = db.query(MyModel).filter_by(field1=\"Test 1\").first()\n    assert obj_from_db is None\n\n\ndef test_get_random_row_success(db: Session):\n    obj1 = MyModel(field1=\"Test 1\", field2=True)\n    obj2 = MyModel(field1=\"Test 2\", field2=False)\n    service_my_model.create(obj1, db)\n    service_my_model.create(obj2, db)\n\n    result = service_my_model.get_random_row(db)\n\n    assert result is not None\n    assert result.field1 in [\"Test 1\", \"Test 2\"]\n\n\ndef test_get_random_row_failure(db: Session):\n    with patch.object(db, \"query\", side_effect=Exception(\"DB Error\")):\n        result = service_my_model.get_random_row(db)\n\n    assert result is None\n\n\ndef test_update_success(db: Session):\n    obj = MyModel(field1=\"Test 1\", field2=True)\n    obj_id = service_my_model.create(obj, db)\n\n    update_obj = MyModel(field1=\"Updated Test 1\", field2=False)\n    result = service_my_model.update(obj_id, update_obj, db)\n\n    assert result is not None\n    assert result.field1 == \"Updated Test 1\"\n    assert result.field2 == False\n\n\ndef test_update_failure(db: Session):\n    obj = MyModel(field1=\"Test 1\", field2=True)\n    obj_id = service_my_model.create(obj, db)\n\n    update_obj = MyModel(field1=\"Updated Test 1\", field2=False)\n\n    with patch.object(db, \"commit\", side_effect=Exception(\"DB Error\")):\n        result = service_my_model.update(obj_id, update_obj, db)\n\n    assert result is None\n\n\ndef test_delete_success(db: Session):\n    obj = MyModel(field1=\"Test 1\", field2=True)\n    obj_id = service_my_model.create(obj, db)\n\n    result = service_my_model.delete(obj_id, db)\n\n    assert result is True\n    obj_from_db = db.query(MyModel).filter_by(id=obj_id).first()\n    assert obj_from_db is None\n\n\ndef test_delete_failure(db: Session):\n    obj = MyModel(field1=\"Test 1\", field2=True)\n    obj_id = service_my_model.create(obj, db)\n\n    with patch.object(db, \"commit\", side_effect=Exception(\"DB Error\")):\n        result = service_my_model.delete(obj_id, db)\n\n    assert result is False\n    obj_from_db = db.query(MyModel).filter_by(id=obj_id).first()\n    assert obj_from_db is not None\n\n\ndef test_find_by_id_success(db: Session):\n    obj = MyModel(field1=\"Test 1\", field2=True)\n    obj_id = service_my_model.create(obj, db)\n\n    result = service_my_model.find_by_id(obj_id, db)\n\n    assert result is not None\n    assert result.id == obj_id\n    assert result.field1 == \"Test 1\"\n    assert result.field2 == True\n\n\ndef test_find_by_id_failure(db: Session):\n    result = service_my_model.find_by_id(1, db)\n\n    assert result is None\n"}
{"type": "test_file", "path": "tests/test_helpers_scheduler.py", "content": "from unittest.mock import patch\n\nimport pytest\nfrom fastapi import FastAPI\n\nfrom helpers.scheduler import scheduler, setup, shutdown_event, startup_event\n\n\ndef test_scheduler_startup_event():\n    with patch.object(scheduler, \"start\", return_value=None) as mock_start:\n        scheduler.start()\n        mock_start.assert_called_once()\n\n\ndef test_scheduler_shutdown_event():\n    with patch.object(scheduler, \"shutdown\", return_value=None) as mock_shutdown:\n        scheduler.shutdown()\n        mock_shutdown.assert_called_once()\n\n\ndef test_setup(app: FastAPI):\n    with patch.object(\n        app, \"add_event_handler\", wraps=app.add_event_handler\n    ) as mock_add_event_handler:\n        setup(app)\n\n        mock_add_event_handler.assert_any_call(\"startup\", startup_event)\n        mock_add_event_handler.assert_any_call(\"shutdown\", shutdown_event)\n\n\n@pytest.mark.asyncio\nasync def test_scheduler_startup_and_shutdown(app: FastAPI):\n    with patch.object(\n        scheduler, \"start\", return_value=None\n    ) as mock_start, patch.object(\n        scheduler, \"shutdown\", return_value=None\n    ) as mock_shutdown:\n        setup(app)\n\n        await startup_event()\n        await shutdown_event()\n\n        mock_start.assert_called_once()\n        mock_shutdown.assert_called_once()\n"}
{"type": "test_file", "path": "tests/test_routes_my_model.py", "content": "from unittest.mock import patch\n\nfrom fastapi.testclient import TestClient\n\nfrom models.my_model import MyModelRequest\n\n\ndef test_my_model_create(client: TestClient):\n    request = MyModelRequest(field1=\"Test 1\", field2=True)\n    response = client.post(\"/api/my-model/create\", json=request.model_dump())\n    assert response.status_code == 200\n    data = response.json()\n    assert \"model\" in data\n    assert data[\"model\"][\"field1\"] == \"Test 1\"\n    assert data[\"model\"][\"field2\"] == True\n\n\ndef test_my_model_random(client: TestClient):\n    # create a registry\n    request = MyModelRequest(field1=\"Test 1\", field2=True)\n    response = client.post(\"/api/my-model/create\", json=request.model_dump())\n    assert response.status_code == 200\n\n    # get random\n    response = client.get(\"/api/my-model/random\")\n    assert response.status_code == 200\n    data = response.json()\n    assert \"model\" in data\n    assert data[\"model\"][\"field1\"] == \"Test 1\"\n    assert data[\"model\"][\"field2\"] == True\n\n\ndef test_my_model_create_fail_create(client: TestClient):\n    request = MyModelRequest(field1=\"Test 1\", field2=True)\n\n    with patch(\"services.my_model.create\", return_value=None):\n        response = client.post(\"/api/my-model/create\", json=request.model_dump())\n        assert response.status_code == 400\n        assert response.json() == {\"detail\": \"Failed to create MyModel\"}\n\n\ndef test_my_model_create_fail_find_by_id(client: TestClient):\n    request = MyModelRequest(field1=\"Test 1\", field2=True)\n\n    with patch(\"services.my_model.create\", return_value=1), patch(\n        \"services.my_model.find_by_id\", return_value=None\n    ):\n        response = client.post(\"/api/my-model/create\", json=request.model_dump())\n        assert response.status_code == 404\n        assert response.json() == {\"detail\": \"MyModel not found after creation\"}\n\n\ndef test_my_model_random_not_found(client: TestClient):\n    with patch(\"services.my_model.get_random_row\", return_value=None):\n        response = client.get(\"/api/my-model/random\")\n        assert response.status_code == 200\n        data = response.json()\n        assert data == {\"message\": \"not-found\"}\n"}
{"type": "test_file", "path": "tests/test_helpers_static.py", "content": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\n\nfrom helpers import static\n\n\ndef test_with_cors(app: FastAPI):\n    app = FastAPI()\n    static.setup(app)\n    client = TestClient(app)\n\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert \"text/html\" in response.headers[\"content-type\"]\n    assert \"FastAPI APP\" in response.text\n"}
{"type": "test_file", "path": "tests/test_jobs_my_model.py", "content": "from unittest.mock import patch\n\nimport pytest\nfrom sqlalchemy.orm import Session\n\nfrom helpers.scheduler import scheduler\nfrom jobs import my_model\nfrom models.my_model import MyModel\n\n\n@pytest.fixture(autouse=True)\ndef run_around_tests():\n    # setup: add job before test\n    scheduler.add_job(my_model.job_create_my_model_list)\n    yield\n    # teardown: remove all jobs after tests\n    scheduler.remove_all_jobs()\n\n\ndef test_job_create_my_model_list(db: Session):\n    # patch db session to use the test database session\n    with patch(\"helpers.db.SessionLocal\", return_value=db):\n        # execute job\n        my_model.job_create_my_model_list()\n\n        # verify the data was inserted\n        obj_from_db = db.query(MyModel).filter_by(field1=\"Test Job\").first()\n        assert obj_from_db is not None\n        assert obj_from_db.field1 == \"Test Job\"\n        assert obj_from_db.field2 == False\n\n        # verify output\n        with patch(\"builtins.print\") as mocked_print:\n            my_model.job_create_my_model_list()\n            print_arg = mocked_print.call_args[0][0]\n            assert print_arg.startswith(\"Job Executed\")\n"}
{"type": "test_file", "path": "tests/test_helpers_log.py", "content": "import logging\nfrom unittest.mock import patch\n\nfrom helpers import log\n\n\ndef test_log_setup():\n    with patch(\"logging.basicConfig\") as mock_basicConfig:\n        log.setup()\n        mock_basicConfig.assert_called_once_with(level=logging.ERROR)\n"}
{"type": "source_file", "path": "helpers/log.py", "content": "import logging\n\n\ndef setup():\n    logging.basicConfig(level=logging.ERROR)\n"}
{"type": "source_file", "path": "helpers/cors.py", "content": "from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\n\ndef setup(app: FastAPI):\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=[\"*\"],\n        allow_credentials=True,\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n    )\n"}
{"type": "source_file", "path": "helpers/db.py", "content": "import os\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import declarative_base, sessionmaker\n\nDEFAULT_DATABASE_URL = \"sqlite:///./app.db\"\nDATABASE_URL = os.environ.get(\"DATABASE_URL\", DEFAULT_DATABASE_URL)\n\nengine = create_engine(\n    DATABASE_URL,\n    connect_args={\"check_same_thread\": False} if \"sqlite\" in DATABASE_URL else {},\n)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n"}
{"type": "source_file", "path": "helpers/static.py", "content": "from fastapi import FastAPI\nfrom fastapi.staticfiles import StaticFiles\n\n\ndef setup(app: FastAPI):\n    app.mount(\"/\", StaticFiles(directory=\"public\", html=True), name=\"public\")\n"}
{"type": "source_file", "path": "helpers/router.py", "content": "from fastapi import FastAPI\n\nfrom routes.my_model import router as router_my_model\n\n\ndef setup(app: FastAPI):\n    app.include_router(router_my_model)\n"}
{"type": "source_file", "path": "jobs/my_model.py", "content": "from helpers import db\nfrom helpers.scheduler import scheduler\nfrom models.my_model import MyModel\nfrom services import my_model as service_my_model\n\n\n@scheduler.scheduled_job(\"cron\", hour=6, minute=0)\ndef job_create_my_model_list():\n    data = {\"field1\": \"Test Job\"}\n    obj = MyModel(**data)\n    id = service_my_model.create(obj, db.SessionLocal())\n    print(f\"Job Executed: ${id}\")\n"}
{"type": "source_file", "path": "jobs/__init__.py", "content": "import importlib\nimport logging\nimport pkgutil\n\nlogger = logging.getLogger(__name__)\n\nfor _, module_name, _ in pkgutil.iter_modules(__path__):\n    try:\n        importlib.import_module(f\"{__name__}.{module_name}\")\n    except Exception as e:\n        pass\n"}
{"type": "source_file", "path": "helpers/rate_limiter.py", "content": "from fastapi import FastAPI\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom throttled.fastapi import IPLimiter, TotalLimiter\nfrom throttled.models import Rate\nfrom throttled.storage.memory import MemoryStorage\n\n\ndef setup(app: FastAPI):\n    memory = MemoryStorage(cache={})\n    total_limiter = TotalLimiter(limit=Rate(1, 1), storage=memory)\n    ip_limiter = IPLimiter(limit=Rate(5, 1), storage=memory)\n\n    app.add_middleware(BaseHTTPMiddleware, dispatch=total_limiter.dispatch)\n    app.add_middleware(BaseHTTPMiddleware, dispatch=ip_limiter.dispatch)\n"}
{"type": "source_file", "path": "helpers/scheduler.py", "content": "from apscheduler.executors.pool import ThreadPoolExecutor\nfrom apscheduler.jobstores.memory import MemoryJobStore\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom fastapi import FastAPI\n\nexecutors = {\n    \"default\": ThreadPoolExecutor(10),\n}\n\njobstores = {\n    \"default\": MemoryJobStore(),\n}\n\nscheduler = AsyncIOScheduler(\n    executors=executors,\n    jobstores=jobstores,\n    timezone=\"UTC\",\n)\n\n\nasync def startup_event():\n    scheduler.start()\n\n\nasync def shutdown_event():\n    scheduler.shutdown()\n\n\ndef setup(app: FastAPI):\n    app.add_event_handler(\"startup\", startup_event)\n    app.add_event_handler(\"shutdown\", shutdown_event)\n"}
{"type": "source_file", "path": "main.py", "content": "from fastapi import FastAPI\n\nfrom helpers import cors, log, rate_limiter, static\nfrom helpers.scheduler import setup as scheduler_setup\n\n# log\nlog.setup()\n\n# app\napp = FastAPI()\nrate_limiter.setup(app)\ncors.setup(app)\n\n# routes\nfrom helpers import router\n\nrouter.setup(app)\nstatic.setup(app)\n\n# scheduler\nscheduler_setup(app)\n\n# scheduler jobs\nimport jobs\n\n_ = jobs.__name__\n"}
{"type": "source_file", "path": "services/my_model.py", "content": "from datetime import datetime\n\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy.sql.expression import func\n\nfrom helpers.log import logging as l\nfrom models.my_model import MyModel\n\n\ndef create(obj: MyModel, db: Session):\n    obj.created_at = datetime.now()\n    try:\n        db.add(obj)\n        db.commit()\n        db.refresh(obj)\n        return obj.id\n    except Exception as e:\n        l.error(f\"[my model : create] ${e}\")\n        db.rollback()\n        return None\n\n\ndef get_random_row(db: Session):\n    try:\n        random_row = db.query(MyModel).order_by(func.random()).first()\n        return random_row\n    except Exception as e:\n        l.error(f\"[my model : get random row] ${e}\")\n        return None\n\n\ndef update(id, obj: MyModel, db: Session):\n    try:\n        item = db.query(MyModel).filter(MyModel.id == id).one()\n        item.field1 = obj.field1\n        item.field2 = obj.field2\n        item.updated_at = datetime.now()\n        db.commit()\n        return item\n    except Exception as e:\n        l.error(f\"[my model : update] ${e}\")\n        db.rollback()\n    return None\n\n\ndef delete(id, db: Session):\n    try:\n        item = db.query(MyModel).filter(MyModel.id == id).one()\n        db.delete(item)\n        db.commit()\n        return True\n    except Exception as e:\n        l.error(f\"[my model : delete] ${e}\")\n        db.rollback()\n        return False\n\n\ndef find_by_id(id, db: Session):\n    try:\n        item = db.query(MyModel).filter(MyModel.id == id).one()\n        return item\n    except Exception as e:\n        l.error(f\"[my model : find by id] ${e}\")\n        return None\n"}
{"type": "source_file", "path": "routes/my_model.py", "content": "from fastapi import APIRouter, Depends, FastAPI, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom helpers.db import get_db\nfrom models.my_model import MyModel, MyModelRequest, MyModelResponse\nfrom services import my_model as service_my_model\n\nrouter = APIRouter()\n\n\n@router.post(\"/api/my-model/create\")\nasync def my_model_create(request: MyModelRequest, db: Session = Depends(get_db)):\n    obj = MyModel(**request.model_dump())\n\n    id = service_my_model.create(obj, db)\n    if id is None:\n        raise HTTPException(status_code=400, detail=\"Failed to create MyModel\")\n\n    obj = service_my_model.find_by_id(id, db)\n    if obj is None:\n        raise HTTPException(status_code=404, detail=\"MyModel not found after creation\")\n\n    response = MyModelResponse(message=\"created\", model=obj.to_dict())\n\n    return response\n\n\n@router.get(\"/api/my-model/random\")\nasync def my_model_random(db: Session = Depends(get_db)):\n    obj = service_my_model.get_random_row(db)\n\n    if obj is None:\n        return {\"message\": \"not-found\"}\n\n    response = MyModelResponse(message=\"random\", model=obj.to_dict())\n\n    return response\n\n\ndef setup(app: FastAPI):\n    app.include_router(router)\n"}
{"type": "source_file", "path": "models/my_model.py", "content": "from typing import Optional\n\nfrom pydantic import BaseModel, ConfigDict\nfrom sqlalchemy import BigInteger, Boolean, Column, DateTime, String\nfrom sqlalchemy.dialects import mysql, postgresql, sqlite\n\nfrom helpers.db import Base\n\nBigIntegerType = BigInteger()\nBigIntegerType = BigIntegerType.with_variant(postgresql.BIGINT(), \"postgresql\")\nBigIntegerType = BigIntegerType.with_variant(mysql.BIGINT(), \"mysql\")\nBigIntegerType = BigIntegerType.with_variant(sqlite.INTEGER(), \"sqlite\")\n\n\nclass MyModel(Base):\n    __tablename__ = \"my_model\"\n\n    id = Column(BigIntegerType, primary_key=True, autoincrement=True)\n    field1 = Column(String(255))\n    field2 = Column(Boolean())\n    created_at = Column(DateTime)\n    updated_at = Column(DateTime)\n\n    def __init__(self, field1, field2=False, **kwargs):\n        self.field1 = field1\n        self.field2 = field2\n        super().__init__(**kwargs)\n\n    def to_dict(self):\n        return {\n            \"id\": self.id,\n            \"field1\": self.field1,\n            \"field2\": self.field2,\n            \"created_at\": self.created_at,\n            \"updated_at\": self.updated_at,\n        }\n\n\nclass MyModelRequest(BaseModel):\n    field1: str\n    field2: bool\n\n\nclass MyModelResponse(BaseModel):\n    message: Optional[str] = None\n    model: Optional[dict] = None\n\n    model_config = ConfigDict(from_attributes=True)\n"}
