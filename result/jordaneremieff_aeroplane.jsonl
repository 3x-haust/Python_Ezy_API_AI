{"repo_info": {"repo_name": "aeroplane", "repo_owner": "jordaneremieff", "repo_url": "https://github.com/jordaneremieff/aeroplane"}}
{"type": "test_file", "path": "aeroplane/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "aeroplane/tests/test_pages.py", "content": "import pytest\n\nfrom aeroplane.schemas import PageSchema\nfrom aeroplane.models import Page\n\n\n@pytest.fixture(scope=\"function\")\ndef page():\n    return Page.objects.create(\n        title=\"Hello World\",\n        slug=\"hello-world\",\n        content=\"Hello world, welcome to the site!\",\n    )\n\n\n@pytest.mark.django_db\ndef test_model_schema(page):\n    schema = PageSchema.from_django(page)\n    assert schema.dict() == {\n        \"id\": page.id,\n        \"title\": page.title,\n        \"slug\": page.slug,\n        \"content\": page.content,\n        \"revisions\": page.revisions,\n        \"created_at\": page.created_at,\n        \"updated_at\": page.updated_at,\n    }\n    assert schema.schema() == {\n        \"title\": \"PageSchema\",\n        \"description\": \"Page(id, title, slug, content, revisions, created_at, updated_at)\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"id\": {\"title\": \"Id\", \"description\": \"id\", \"type\": \"integer\"},\n            \"title\": {\n                \"title\": \"Title\",\n                \"description\": \"The unique title of the page displayed to the public.\",\n                \"maxLength\": 255,\n                \"type\": \"string\",\n            },\n            \"slug\": {\n                \"title\": \"Slug\",\n                \"description\": \"The unique slug identifier used in URL addresses.\",\n                \"maxLength\": 255,\n                \"type\": \"string\",\n            },\n            \"content\": {\"title\": \"Content\", \"description\": \"content\", \"type\": \"string\"},\n            \"revisions\": {\n                \"title\": \"Revisions\",\n                \"description\": \"revisions\",\n                \"anyOf\": [\n                    {\"type\": \"string\", \"format\": \"json-string\"},\n                    {\"type\": \"object\"},\n                    {\"type\": \"array\", \"items\": {}},\n                ],\n            },\n            \"created_at\": {\n                \"title\": \"Created At\",\n                \"description\": \"created_at\",\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n            },\n            \"updated_at\": {\n                \"title\": \"Updated At\",\n                \"description\": \"updated_at\",\n                \"type\": \"string\",\n                \"format\": \"date-time\",\n            },\n        },\n        \"required\": [\"title\", \"slug\", \"content\", \"created_at\", \"updated_at\"],\n    }\n"}
{"type": "source_file", "path": "aeroplane/admin.py", "content": "from django.contrib import admin\n\nfrom aeroplane.models import Page\n\n\nclass PageAdmin(admin.ModelAdmin):\n    pass\n\n\nadmin.site.register(Page, PageAdmin)\n"}
{"type": "source_file", "path": "aeroplane/endpoints.py", "content": "from typing import List\nfrom datetime import datetime\n\nfrom fastapi import APIRouter\n\nfrom aeroplane.models import Page\nfrom aeroplane.schemas import PageSchema, PageCreateUpdateSchema\n\nrouter = APIRouter()\n\n\n@router.post(\"/pages\", response_model=PageSchema)\ndef create_page(page: PageCreateUpdateSchema):\n    page = Page.objects.create(**page.dict())\n\n    return PageSchema.from_django(page)\n\n\n@router.get(\"/pages\", response_model=List[PageSchema])\ndef list_pages():\n    return PageSchema.from_django(Page.objects.all(), many=True)\n\n\n@router.put(\"/pages/{id}\", response_model=PageSchema)\ndef update_page(id: int, page_data: PageCreateUpdateSchema):\n    page = Page.objects.get(id=id)\n\n    # Save the content fields for the current page to the revision history\n    schema = PageCreateUpdateSchema.from_django(page)\n    timestamp = str(datetime.now().timestamp())\n    page.revisions[timestamp] = schema.dict()\n\n    # Update the page object with the new data\n    for k, v in page_data.dict().items():\n        setattr(page, k, v)\n    page.save()\n\n    return PageSchema.from_django(page).dict()\n"}
{"type": "source_file", "path": "aeroplane/apps.py", "content": "from django.apps import AppConfig\n\n\nclass AeroplaneConfig(AppConfig):\n    name = \"aeroplane\"\n"}
{"type": "source_file", "path": "aeroplane/__init__.py", "content": ""}
{"type": "source_file", "path": "aeroplane/main.py", "content": "import os\n\nfrom django.conf import settings\nfrom django.apps import apps\nfrom django.core.asgi import get_asgi_application\n\nfrom fastapi import FastAPI\nfrom starlette.middleware.cors import CORSMiddleware\nfrom mangum import Mangum\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"aeroplane.settings\")\napps.populate(settings.INSTALLED_APPS)\n\n\nfrom aeroplane.endpoints import router\n\n\napp = FastAPI(title=\"Aeroplane\", debug=settings.DEBUG)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.ALLOWED_HOSTS or [\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(router, prefix=\"/api\")\napp.mount(\"/dj\", get_asgi_application())\n\nhandler = Mangum(app)\n"}
{"type": "source_file", "path": "aeroplane/migrations/__init__.py", "content": ""}
{"type": "source_file", "path": "aeroplane/models.py", "content": "from django.db import models\nfrom django.utils.translation import gettext_lazy as _\nfrom django.utils.text import slugify\n\n\nclass Page(models.Model):\n    title = models.CharField(\n        verbose_name=_(\"title\"),\n        max_length=255,\n        help_text=_(\"The unique title of the page displayed to the public.\"),\n    )\n    slug = models.SlugField(\n        verbose_name=_(\"slug\"),\n        allow_unicode=True,\n        max_length=255,\n        help_text=_(\"The unique slug identifier used in URL addresses.\"),\n    )\n    content = models.TextField()\n    revisions = models.JSONField(default=dict, blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        db_table = \"pages\"\n        verbose_name = \"Page\"\n        verbose_name_plural = \"Pages\"\n        constraints = [\n            models.UniqueConstraint(fields=[\"slug\"], name=\"unique_slug\"),\n            models.UniqueConstraint(fields=[\"title\"], name=\"unique_title\"),\n        ]\n        indexes = [\n            models.Index(fields=[\"-created_at\"]),\n            models.Index(fields=[\"-updated_at\"]),\n            models.Index(fields=[\"slug\"]),\n        ]\n\n    def __str__(self) -> str:\n        return self.title\n\n    def save(self, *args, **kwargs) -> None:\n        if not self.slug:\n            self.slug = slugify(self.title, allow_unicode=True)\n        super().save(*args, **kwargs)\n"}
{"type": "source_file", "path": "aeroplane/settings.py", "content": "import os\n\nfrom pathlib import Path\n\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = os.environ.get(\"SECRET_KEY\")\n\nDEBUG = True\n\nALLOWED_HOSTS = [\"*\"]\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"aeroplane\",\n]\n\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\n\nROOT_URLCONF = \"aeroplane.urls\"\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n        \"NAME\": \"postgres\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": os.environ[\"DB_PASSWORD\"],\n        \"HOST\": os.environ[\"DB_HOST\"],\n        \"PORT\": os.environ[\"DB_PORT\"],\n    }\n}\n\n# DATABASES = {\n#     \"default\": {\n#         \"ENGINE\": \"django.db.backends.sqlite3\",\n#         \"NAME\": BASE_DIR / \"db.sqlite3\",\n#     }\n# }\n\nLANGUAGE_CODE = \"en-us\"\n\nTIME_ZONE = \"UTC\"\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = \"/dj/static/\"\n\nSTATICFILES_FINDERS = (\n    \"django.contrib.staticfiles.finders.FileSystemFinder\",\n    \"django.contrib.staticfiles.finders.AppDirectoriesFinder\",\n)\n"}
{"type": "source_file", "path": "aeroplane/schemas.py", "content": "from typing import Optional\n\nfrom djantic import ModelSchema\n\nfrom aeroplane.models import Page\n\n\nclass PageCreateUpdateSchema(ModelSchema):\n\n    slug: Optional[str] = None\n\n    class Config:\n        model = Page\n        include = [\"title\", \"content\"]\n\n\nclass PageSchema(ModelSchema):\n    class Config:\n        model = Page\n"}
{"type": "source_file", "path": "aeroplane/migrations/0001_initial.py", "content": "# Generated by Django 3.1.7 on 2021-04-03 13:46\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name=\"Page\",\n            fields=[\n                (\n                    \"id\",\n                    models.AutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\n                    \"title\",\n                    models.CharField(\n                        help_text=\"The unique title of the page displayed to the public.\",\n                        max_length=255,\n                        verbose_name=\"title\",\n                    ),\n                ),\n                (\n                    \"slug\",\n                    models.SlugField(\n                        allow_unicode=True,\n                        help_text=\"The unique slug identifier used in URL addresses.\",\n                        max_length=255,\n                        verbose_name=\"slug\",\n                    ),\n                ),\n                (\"content\", models.TextField()),\n                (\"revisions\", models.JSONField(blank=True, default=dict, null=True)),\n                (\"created_at\", models.DateTimeField(auto_now_add=True)),\n                (\"updated_at\", models.DateTimeField(auto_now=True)),\n            ],\n            options={\n                \"verbose_name\": \"Page\",\n                \"verbose_name_plural\": \"Pages\",\n                \"db_table\": \"pages\",\n            },\n        ),\n        migrations.AddIndex(\n            model_name=\"page\",\n            index=models.Index(fields=[\"-created_at\"], name=\"pages_created_6eb0ef_idx\"),\n        ),\n        migrations.AddIndex(\n            model_name=\"page\",\n            index=models.Index(fields=[\"-updated_at\"], name=\"pages_updated_9b5c17_idx\"),\n        ),\n        migrations.AddIndex(\n            model_name=\"page\",\n            index=models.Index(fields=[\"slug\"], name=\"pages_slug_2ebe9d_idx\"),\n        ),\n        migrations.AddConstraint(\n            model_name=\"page\",\n            constraint=models.UniqueConstraint(fields=(\"slug\",), name=\"unique_slug\"),\n        ),\n        migrations.AddConstraint(\n            model_name=\"page\",\n            constraint=models.UniqueConstraint(fields=(\"title\",), name=\"unique_title\"),\n        ),\n    ]\n"}
{"type": "source_file", "path": "manage.py", "content": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"aeroplane.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"type": "source_file", "path": "aeroplane/urls.py", "content": "from django.contrib import admin\nfrom django.urls import path\nfrom django.conf import settings\nfrom django.contrib.staticfiles import views\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n]\n\nif settings.DEBUG:\n    from django.urls import re_path\n\n    urlpatterns += [re_path(r\"^static/(?P<path>.*)$\", views.serve)]\n"}
