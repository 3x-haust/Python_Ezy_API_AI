{"repo_info": {"repo_name": "MiniAdmin", "repo_owner": "bosichong", "repo_url": "https://github.com/bosichong/MiniAdmin"}}
{"type": "source_file", "path": "back/__init__.py", "content": ""}
{"type": "source_file", "path": "back/api_v1.py", "content": "\"\"\"\nAuthor: J.sky bosichong@qq.com\nDate: 2022-11-21 09:32:46\nLastEditors: J.sky bosichong@qq.com\nLastEditTime: 2022-11-21 11:20:48\nFilePath: /MiniAdmin/back/v1/main.py\nv1\n\"\"\"\n\nfrom datetime import datetime, timedelta\nfrom typing import Union\n\nfrom fastapi import APIRouter, Depends, HTTPException, status, Form, Request\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlalchemy.orm import Session\nfrom jose import JWTError, jwt\n\nimport crud, schemas, models\nfrom database import get_db, get_casbin_e\nfrom schemas import Token, TokenData\nfrom utils import verify_password, APP_TOKEN_CONFIG, oauth2_scheme, get_username_by_token, get_password_hash, verify_enforce, update_array\n\nrouter = APIRouter(\n    prefix=\"/v1\",\n    tags=[\"v1\"],\n    responses={404: {\"description\": \"Not found\"}},  # 请求异常返回数据\n)\n\nno_permission = HTTPException(\n    status_code=status.HTTP_403_FORBIDDEN,\n    detail=\"您没有该权限！\",\n    headers={\"WWW-Authenticate\": \"Bearer\"},\n)\n\n\ndef return_rule(obj, act):\n    \"\"\"\n    返回一个验证权限的规则，包括obj、act。\n    :param obj:\n    :param act:\n    :return:\n    \"\"\"\n    return schemas.Casbin_rule(obj=obj, act=act)\n\n\n######################################\n# access_token 系统登陆相关的api接口\n######################################\n\ndef create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n    \"\"\"\n    生成token\n    :param data:\n    :param expires_delta:\n    :return:\n    \"\"\"\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=APP_TOKEN_CONFIG.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    # 生成带有时间限制的token\n    encoded_jwt = jwt.encode(to_encode, APP_TOKEN_CONFIG.SECRET_KEY, algorithm=APP_TOKEN_CONFIG.ALGORITHM)\n    return encoded_jwt\n\n\ndef authenticate_user(db: Session, username: str, password: str, ):\n    \"\"\"\n    认证用户，包括检测用户是否存在，密码校验。\n    :param username:\n    :param password:\n    :param db:\n    :return: 成功返回user\n    \"\"\"\n    user = crud.get_user_by_username(db, username=username)  # 获取用户信息\n    # 用户不存在\n    if not user:\n        return False\n    # 校验密码失败\n    if not verify_password(password, user.hashed_password):\n        return False\n    # 成功返回user\n    return user\n\n\n@router.post(\"/token\", response_model=Token)\nasync def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    # 获取用户,如果没有或密码错误并提示错误.\n    user = authenticate_user(db, form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"用户名或密码错误!\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    if user.is_active:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"帐号已被禁用!\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token_expires = timedelta(minutes=APP_TOKEN_CONFIG.ACCESS_TOKEN_EXPIRE_MINUTES)\n    # 生成token\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\n######################################\n# User相关的api接口\n######################################\n\n@router.post('/user/create_user')\nasync def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"用户名称重复！\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    # 注册用户名称不能与用户组的role_key重复。\n    role = crud.get_role_by_role_key(db, user.username)\n    if role:\n        raise credentials_exception\n    return crud.create_user(db, user.username, user.password, user.sex, user.email)\n\n\n@router.get(\"/user/me\", response_model=schemas.User)\nasync def read_users_me(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    \"\"\"\n    返回当前用户的资料\n    \"\"\"\n    username = get_username_by_token(token)\n    user = crud.get_user_by_username(db, username)\n    return user\n\n\n@router.get('/user/user_by_id', response_model=schemas.User)\nasync def get_user_by_id(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db), user_id: int = 0):\n    \"\"\"\n    获取指定id用户的资料\n    :param token:\n    :param db:\n    :param user_id:\n    :return: schemas.User\n    \"\"\"\n    if verify_enforce(token, return_rule('User', 'read')):\n        return crud.get_user_by_id(db, user_id)\n    else:\n        raise no_permission\n\n\n@router.get('/user/get_users', response_model=schemas.Users)\nasync def get_users(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db), skip: int = 0, limit: int = 10, keyword: str = ''):\n    users = schemas.Users(users=crud.get_users(db, skip, limit, keyword), count=crud.get_users_count_by_keyword(db, keyword))\n    return users\n\n\n@router.get('/user/active_change')\nasync def user_active_change(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db), user_id: int = 0):\n    \"\"\"\n    修改用户锁定\n    :param token:\n    :param db:\n    :param user_id:\n    :return:\n    \"\"\"\n    if verify_enforce(token, return_rule('User', 'update')):\n        return crud.active_change(db, user_id)\n    else:\n        raise no_permission\n\n\n@router.get('/user/delete_user')\nasync def delete_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db), user_id: int = 0):\n    \"\"\"\n    删除用户\n    :param token:\n    :param db:\n    :param user_id:\n    :return:\n    \"\"\"\n    if verify_enforce(token, return_rule('User', 'delete')):\n        return crud.delete_user_by_id(db, user_id)\n    else:\n        raise no_permission\n\n\n@router.post('/user/update_user')\nasync def update_user(user: schemas.UserUpdate, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    \"\"\"\n    修改用户资料\n    :param user:\n    :param token:\n    :param db:\n    :return:\n    \"\"\"\n    if verify_enforce(token, return_rule('User', 'update')):\n        credentials_exception = HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"用户名称重复！\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n        u = crud.get_user_by_id(db, user.user_id)\n        # 修改用户名称不能与用户组的role_key重复。\n        role = crud.get_role_by_role_key(db, user.username)\n        if role:\n            raise credentials_exception\n        u.username = user.username\n        u.email = user.email\n        u.sex = user.sex\n        u.remark = user.remark\n        u.avatar = user.avatar\n        if user.password != '':\n            hashed_password = get_password_hash(user.password)\n            u.hashed_password = hashed_password\n        try:\n            db.commit()\n            return True\n        except:\n            return False\n    else:\n        raise no_permission\n\n\n@router.post('/user/update_me')\nasync def update_me(user: schemas.UserUpdate, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    \"\"\"\n    修改用户资料\n    :param user:\n    :param token:\n    :param db:\n    :return:\n    \"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    username = get_username_by_token(token)\n    me = crud.get_user_by_username(db,username)\n    if user.user_id == me.id:\n        u = crud.get_user_by_id(db, user.user_id)\n        u.username = user.username\n        u.email = user.email\n        u.sex = user.sex\n        u.remark = user.remark\n        u.avatar = user.avatar\n        if user.password != '':\n            hashed_password = get_password_hash(user.password)\n            u.hashed_password = hashed_password\n        try:\n            db.commit()\n            return True\n        except:\n            raise credentials_exception\n    else:\n        raise credentials_exception\n\n\n@router.post('/user/change_user_role')\nasync def change_user_role(data: schemas.ChangeUserRole, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    \"\"\"\n    修改用户拥有的用户组\n    :param data:\n    :param token:\n    :param db:\n    :return:\n    \"\"\"\n    if verify_enforce(token, return_rule('User', 'update')):\n        # 将用户组名称改成role_key\n        role_keys = []\n        for name in data.names:\n            role = crud.get_role_by_name(db, name)\n            role_keys.append(role.role_key)\n        return crud.change_user_role(db, data.user_id, role_keys)\n    else:\n        raise no_permission\n\n\n@router.get('/user/get_user_role')\nasync def get_user_role(user_id: int, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    \"\"\"\n    获取用户所拥有的用户组\n    :param user_id:\n    :param token:\n    :param db:\n    :return:\n    \"\"\"\n\n    if verify_enforce(token, return_rule('User', 'read')):\n        user = crud.get_user_by_id(db, user_id)\n        roles = crud.get_roles(db)\n        options = []  # 所有的权限组名称\n        for role in roles:\n            options.append(role.name)\n\n        checkeds = []  # 当前用户所拥有的用户组\n        crs = crud.get_casbin_rules_by_username(db, user.username)\n        for cr in crs:\n            role = crud.get_role_by_role_key(db, cr.v1)\n            checkeds.append(role.name)\n        return {'options': options, 'checkeds': checkeds}\n    else:\n        raise no_permission\n\n\n######################################\n# role相关的api接口\n######################################\n@router.get('/role/get_roles')\nasync def get_roles(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    return crud.get_roles(db)\n\n\n@router.post('/role/create_role')\nasync def create_role(role: schemas.Role, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db), ):\n    \"\"\"\n    创建 role\n    :param role:\n    :param token:\n    :param db:\n    :return:\n    \"\"\"\n    if verify_enforce(token, return_rule('Role', 'create')):\n        new_role = models.Role()\n        new_role.name = role.name\n        new_role.role_key = role.role_key\n        new_role.description = role.description\n        new_role.user_id = int(role.user_id)\n        return crud.create_role(db, new_role)\n    else:\n        raise no_permission\n\n\n@router.get('/role/get_role_by_id')\nasync def get_role_by_id(role_id: int, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    if verify_enforce(token, return_rule('Role', 'read')):\n        return crud.get_role_by_id(db, role_id)\n    else:\n        raise no_permission\n\n\n@router.post('/role/update_role')\nasync def update_role_by_id(role: schemas.EditRole, token: str = Depends(oauth2_scheme),\n                            db: Session = Depends(get_db)):\n    \"\"\"\n    修改role\n    :param role:\n    :param token:\n    :param db:\n    :return:\n    \"\"\"\n    if verify_enforce(token, return_rule('Role', 'update')):\n        new_role = models.Role()\n        new_role.name = role.name\n        new_role.role_key = role.role_key\n        new_role.description = role.description\n        return crud.update_role_by_id(db, role.old_role_id, new_role)\n    else:\n        raise no_permission\n\n\n@router.get('/role/delete_role')\nasync def delete_role_by_id(role_id: int, token: str = Depends(oauth2_scheme),\n                            db: Session = Depends(get_db)):\n    if verify_enforce(token, return_rule('Role', 'delete')):\n        return crud.delete_role_by_id(db, role_id)\n    else:\n        raise no_permission\n\n\n@router.get('/role/get_coca')\nasync def get_co_ca(role_id: int, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    \"\"\"\n    返回用户组role所包含的权限用于前端使用多选框来展示\n    <div  v-for=\"(item,index) of options.value\" >\n        <a-checkbox-group v-model:value=\"checkeds.value[index]\" :options=\"item\" />\n    </div>\n\n    其中options、checkeds是两个数组，前者包括了所有的权限列表，后者只包括当前用户组所拥有的权限。\n    :param role_id: 用户则的id\n    :param token:\n    :param db:\n    :return:\n    \"\"\"\n    cos = crud.get_casbin_objects(db)\n    cas = crud.get_casbin_actions(db)\n    role = crud.get_role_by_id(db, role_id)\n    all_co_ca = []  # 拼装所有权限的列表\n    co_key_name = {}  # 组装一个字典，里边的资源key对应name\n    ca_key_name = {}  # 组装一个字典，里边的动作key对应name\n    # 一个临时的资源和动作的名称数组，类似下边\n    # ['用户管理', '增', '用户管理', '删', '用户管理', '改', '角色管理', '增', '角色管理', '删', '角色管理', '改']\n\n    \"\"\"\n    # 群里大佬提供的算法。\n    input = ['用户管理', '增', '用户管理', '删', '用户管理', '改', '用户管理', '查', '用户管理', '显', '角色管理', '增', '角色管理', '删', '角色管理', '改', '角色管理', '查', '角色管理', '显', '资源管理', '增', '资源管理', '删', '资源管理', '改', '资源管理', '查', '资源管理', '显', '动作管理', '增', '动作管理', '删', '动作管理', '改', '动作管理', '查', '动作管理', '显', '资源分类', '增', '资源分类', '删', '资源分类', '改', '资源分类', '查', '资源分类', '显']\n    \n    m = dict()\n    key = ''\n    for i in range (len(input)):\n        if i % 2 == 0:\n           key = input[i]\n        else:\n            if m.get(key) != None: \n                m[key].append(input[i])\n            else:\n                m[key] = [input[i]]\n    \n    res = []\n    \n    for key in m.keys():\n        item = [key]\n        item = item + m[key]\n        res.append(item)\n    \n    print(res)\n    \n    \n    \"\"\"\n    cks = []\n    checkeds = []  # 当前用户组所拥有的权限\n    for co in cos:\n        coca = [co.name]\n        for ca in cas:\n            coca.append(ca.name)\n        all_co_ca.append(coca)\n\n    for co in cos:\n        co_key_name[co.object_key] = co.name\n    for ca in cas:\n        ca_key_name[ca.action_key] = ca.name\n\n    crs = crud.get_casbin_rules_by_role_key(db, role.role_key)\n\n    for cr in crs:\n        cks.append(co_key_name[cr.v1])\n        cks.append(ca_key_name[cr.v2])\n    # print(cks)\n    temp_nams = list()\n    for ck in cks:\n        if len(temp_nams) == 0:\n            temp_nams.append(ck)\n            # print(temp_nams)\n        elif temp_nams[0] == ck:\n            pass\n        elif ck in co_key_name.values() and ck != temp_nams[0]:\n            checkeds.append(temp_nams)\n            temp_nams = [ck]\n        elif ck in ca_key_name.values() and ck not in temp_nams:\n            temp_nams.append(ck)\n            # print(temp_nams)\n    checkeds.append(temp_nams)\n    # print(checkeds)\n    # print(all_co_ca)\n    # print(update_array(all_co_ca,checkeds))\n    return {'options': all_co_ca, 'checkeds': update_array(all_co_ca,checkeds)}\n\n\n@router.post('/role/change_role')\nasync def change_role(cr_data: schemas.ChangeRole, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    \"\"\"\n    修改用户组所拥有的权限\n    :param cr_data:\n    :param token:\n    :param db:\n    :return:\n    \"\"\"\n    if verify_enforce(token, return_rule('Role', 'update')):\n        role = crud.get_role_by_id(db, cr_data.role_id)\n        cos = crud.get_casbin_objects(db)\n        cas = crud.get_casbin_actions(db)\n        co_name_key = {}  # 组装一个字典，里边的资源name对应key\n        ca_name_key = {}  # 组装一个字典，里边的动作name对应key\n        change_crs = []  # 准备要更新添加的所有casbinrule。\n\n        for co in cos:\n            co_name_key[co.name] = co.object_key\n        for ca in cas:\n            ca_name_key[ca.name] = ca.action_key\n\n        for crs in cr_data.checkeds:\n            if crs:\n                try:\n                    object_key = co_name_key[crs[0]]\n                except:\n                    return False\n                cr_name = crs[0]\n                # print(len(crs))\n                if len(crs) <= 1:\n                    return False\n                for cr in crs:\n                    # print(cr, cr_name)\n                    if cr != cr_name:\n                        # print(role.role_key, object_key, ca_name_key[cr])\n                        change_crs.append(models.CasbinRule(ptype='p', v0=role.role_key, v1=object_key, v2=ca_name_key[cr]))\n        # print(change_crs)\n        return crud.change_role_casbinrules(db, role.role_key, change_crs)\n    else:\n        raise no_permission\n\n\n######################################\n# CasbinObject相关的api接口\n######################################\n\n@router.get('/co/get_cos')\nasync def get_cos(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    return crud.get_casbin_objects(db)\n\n\n@router.post('/co/create_co')\nasync def create_casbin_object(co: schemas.createCasbinObject, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    \"\"\"\n    创建资源\n    :param co:\n    :param token:\n    :param db:\n    :return:\n    \"\"\"\n    if verify_enforce(token, return_rule('CasbinObject', 'create')):\n        new_co = models.CasbinObject()\n        new_co.name = co.name\n        new_co.object_key = co.object_key\n        new_co.description = co.description\n        new_co.user_id = co.user_id\n        return crud.create_casbin_object(db, new_co)\n    else:\n        raise no_permission\n\n\n@router.get('/co/get_co')\nasync def get_casbin_object(co_id: int, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    return crud.get_casbin_object_by_id(db, co_id)\n\n\n@router.post('/co/update_co')\nasync def update_casbin_object_by_id(co: schemas.EditCasbinObject, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    if verify_enforce(token, return_rule('CasbinObject', 'update')):\n        return crud.update_casbin_object(db, co.old_co_id, co.name, co.object_key, co.description)\n    else:\n        raise no_permission\n\n\n@router.get('/co/delete_co')\nasync def delete_casbin_object_by_id(co_id: int, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    if verify_enforce(token, return_rule('CasbinObject', 'read')):\n        return crud.delete_casbin_object_by_id(db, co_id)\n    else:\n        raise no_permission\n\n\n######################################\n# CasbinAction相关的api接口\n######################################\n\n@router.get('/ca/get_cas')\nasync def get_cas(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    return crud.get_casbin_actions(db)\n\n\n@router.post('/ca/create_ca')\nasync def create_ca(ca: schemas.createCasbinAction, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    if verify_enforce(token, return_rule('CasbinAction', 'create')):\n        new_ca = models.CasbinAction()\n        new_ca.name = ca.name\n        new_ca.action_key = ca.action_key\n        new_ca.description = ca.description\n        new_ca.user_id = ca.user_id\n        return crud.create_casbin_action(db, new_ca)\n    else:\n        raise no_permission\n\n\n@router.get('/ca/get_ca')\nasync def get_ca(ca_id: int, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    return crud.get_casbin_action_by_id(db, ca_id)\n\n\n@router.post('/ca/update_ca')\nasync def update_ca(ca: schemas.EditCasbinAction, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    if verify_enforce(token, return_rule('CasbinAction', 'update')):\n        return crud.update_casbin_action_by_id(db, ca.old_ca_id, ca.name, ca.action_key, ca.description)\n    else:\n        raise no_permission\n\n\n@router.get('/ca/delete_ca')\nasync def delete_ca(ca_id: int, token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    if verify_enforce(token, return_rule('CasbinAction', 'delete')):\n        return crud.delete_casbin_action_by_id(db, ca_id)\n    else:\n        raise no_permission\n\n\n######################################\n# Casbin 权限验证的api接口\n######################################\n\n@router.get('/get_menu')\nasync def get_menu_permissions(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):\n    rules = [\n        ['User', 'show'],\n        ['Role', 'show'],\n        ['CasbinObject', 'show'],\n        ['CasbinAction', 'show'],\n    ]\n    menu = {}\n    for r in rules:\n        if verify_enforce(token, schemas.Casbin_rule(obj=r[0], act=r[1])):\n            menu[r[0]] = True\n        else:\n            menu[r[0]] = False\n    # print(menu)\n    return menu\n\n\n@router.post('/isAuthenticated')\nasync def isAuthenticated(rule: schemas.Casbin_rule, token: str = Depends(oauth2_scheme), ):\n    \"\"\"\n    路由页面的权限验证接口\n    :param rule:\n    :param token:\n    :return:\n    \"\"\"\n    # print(\"路由权限验证\")\n    return verify_enforce(token, rule)\n\n\n@router.post(\"/casbin_rule_test\")\nasync def casbin_test(token: str = Depends(oauth2_scheme)):\n    \"\"\"\n    一个关于权限接口的简单测试\n    :param token:\n    :return:\n    \"\"\"\n    rule = schemas.Casbin_rule(obj='User', act='read')\n    if verify_enforce(token, rule):\n        return True\n    else:\n        return False\n"}
{"type": "source_file", "path": "back/main.py", "content": "'''\nAuthor: J.sky bosichong@qq.com\nDate: 2022-11-21 09:16:37\nLastEditors: J.sky bosichong@qq.com\nLastEditTime: 2022-11-21 09:44:08\nFilePath: /MiniAdmin/back/main.py\nMiniAdmin,一个简洁轻快的后台管理框架\n'''\n\nimport os\nimport sys\n\n# 将当前目录添加到系统变量中\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(BASE_DIR)\n\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware  # 解决跨域\nimport uvicorn as uvicorn\n\nfrom database import Base, engine, get_db\nfrom api_v1 import router\nimport crud\n\nfrom fastapi.responses import HTMLResponse  # 响应html\nfrom fastapi.staticfiles import StaticFiles  # 设置静态目录\n\n__version__ = \"0.1.1\"\ndescription = '''Mini Admin,一个简洁轻快的后台管理框架.支持拥有多用户组的RBAC管理后台 🚀'''\n\napp = FastAPI(\n    title=\"MiniAdmin\",\n    description=description,\n    version=__version__,\n    terms_of_service=\"#\",\n    license_info={\n        \"name\": \"MIT\",\n        \"url\":  \"https://opensource.org/licenses/MIT\",\n    },\n)\n\n# 配置允许域名\norigins = [\n    \"http://localhost\",\n    \"http://localhost:5173\",\n    \"http://127.0.0.1:5173\",\n\n]\n# 配置允许域名列表、允许方法、请求头、cookie等\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\napp.include_router(router)\n\n# 静态资源\napp.mount(\"/dist\", StaticFiles(directory=os.path.join(BASE_DIR, 'dist')), name=\"dist\")\napp.mount(\"/assets\", StaticFiles(directory=os.path.join(BASE_DIR, 'dist/assets')), name=\"assets\")\n\n# 删除表，当更新表的结构时可以使用，但是会删除所有数据。慎用！！！！\n# models.Base.metadata.drop_all(bind=engine)\n# 在数据库中生成表结构\nBase.metadata.create_all(bind=engine)\n# 生成初始化数据，添加了一个超级管理员并赋予所有管理权限，以及一些虚拟的用户。\ncrud.create_data(next(get_db()))\n\n\n@app.get(\"/\")\ndef main():\n    html_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'dist', 'index.html')\n    html_content = ''\n    with open(html_path, encoding=\"utf-8\") as f:\n        html_content = f.read()\n    return HTMLResponse(content=html_content, status_code=200)\n\n\nif __name__ == '__main__':\n    print('少年，我看你骨骼精奇，是万中无一的编程奇才，有个程序员大佬qq群[217840699]你加下吧!维护世界和平就靠你了！')\n    uvicorn.run(app='main:app', host=\"127.0.0.1\", port=8000, reload=True, )\n"}
{"type": "source_file", "path": "back/database.py", "content": "'''\nAuthor: J.sky bosichong@qq.com\nDate: 2022-11-21 09:45:04\nLastEditors: J.sky bosichong@qq.com\nLastEditTime: 2022-11-24 09:33:37\nFilePath: /MiniAdmin/back/database.py\n数据库以及连接的配置.\npython交流学习群号:217840699\n'''\n\nimport os\nimport sys\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nimport casbin\nfrom casbin_sqlalchemy_adapter import Adapter\n\n# 将当前目录添加到系统变量中\nBASE_DIR = os.path.dirname(os.path.abspath(__file__))\nsys.path.append(BASE_DIR)\n\n\n# 创建一个使用内存的SQLite数据库 pytest专用。\nSQLALCHEMY_DATABASE_MEMORY = \"sqlite+pysqlite:///:memory:\"\nengine_test = create_engine(SQLALCHEMY_DATABASE_MEMORY, echo=False, )\nSessionLocal_test = sessionmaker(autocommit=False, autoflush=False, bind=engine_test)\n\n\ndef get_db_to_T_E_S_T():\n    '''\n    pytest专用\n    description: 获取一个数据连接 异步fastapi下使用.\n    return ssesion\n    '''\n    db = SessionLocal_test()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n# 组装数据库的绝对地址\nDB_DIR = os.path.join(BASE_DIR, 'miniadmin_data.db')\n# 数据库访问地址\nSQLALCHEMY_DATABASE_URL = \"sqlite:///\" + DB_DIR\n# 创建物理SQLite数据库\nengine = create_engine(SQLALCHEMY_DATABASE_URL + '?check_same_thread=False', echo=False, )\n# 启动会话\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine, )\n\n\ndef get_db():\n    '''\n    dev\n    description: 获取一个数据连接 异步fastapi下使用.\n    return ssesion\n    '''\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\n# 数据模型的基类\nBase = declarative_base()\n\n# casbin 相关配置\nadapter = Adapter(engine)\nmodel_path = os.path.join(BASE_DIR, 'rbac_model.conf')\n\n\ndef get_casbin_e():\n    \"\"\"\n    返回一个\n    :return:\n    \"\"\"\n    return casbin.Enforcer(model_path, adapter)\n"}
{"type": "source_file", "path": "back/crud.py", "content": "\"\"\"\nAuthor: J.sky bosichong@qq.com\nDate: 2022-11-22 08:57:09\nLastEditors: J.sky bosichong@qq.com\nLastEditTime: 2022-11-27 22:01:28\nFilePath: /MiniAdmin/back/crud.py\ncrud 工具\npython交流学习群号:217840699\n\n关于CasbinRule\n在本系统中的经典三元组: 访问实体 (Role)，访问资源 (CasbinObject) 和访问方法 (CasbinAction)。\n若其中的一个数据的key发生修改,则应修改CasbinRule里存储的规则,因为CasbinRule里值存储字符串,所以只能自己写判断.\n\"\"\"\n\nfrom sqlalchemy.orm import Session\nfrom models import User, CasbinAction, CasbinObject, Role, CasbinRule\nfrom utils import verify_password, get_password_hash\nfrom utils import logger\n\nimport random\n\n\ndef create_data(db: Session):\n    \"\"\"\n    添加超级管理员和一些普通的用户。\n    :param db:\n    :return:\n    \"\"\"\n\n    # 创建超级管理员\n    hashed_password = get_password_hash('123456')\n    if not get_user_by_username(db, \"miniadmin\"):\n        add_user(db, User(username='miniadmin', hashed_password=hashed_password, email='admin@example.com', remark='超级管理员，拥有所有权限'))\n        logger.info(\"创建超级管理员：miniadmin\")\n    user = get_user_by_username(db, \"miniadmin\")\n\n    if get_role_count(db) <= 0:\n        # 创建角色role\n        create_role(db, Role(name='超级管理员', role_key='role_superminiadmin', description='超级管理员,拥有所有系统权限', user=user))\n        create_role(db, Role(name='管理员', role_key='role_miniadmin', description='拥有大部分管理权限', user=user))\n        create_role(db, Role(name='普通用户', role_key='role_generaluser', description='默认注册的用户', user=user))\n\n    if get_casbin_action_count(db) <= 0:\n        # 创建CasbinAction\n        cas = [\n            CasbinAction(name='增', action_key='create', description='增加数据', user=user),\n            CasbinAction(name='删', action_key='delete', description='删除数据', user=user),\n            CasbinAction(name='改', action_key='update', description='更新数据', user=user),\n            CasbinAction(name='查', action_key='read', description='读取或查询数据', user=user),\n            CasbinAction(name='显', action_key='show', description='数据相关组件的显示', user=user),\n        ]\n        add_casbin_actions(db, cas)\n\n    if get_casbin_object_count(db) <= 0:\n        # 创建CasbinObject\n        cos = [\n            CasbinObject(name='用户管理:', object_key='User', description='User表--用户相关权限', user=user, ),\n            CasbinObject(name='角色管理:', object_key='Role', description='Role--角色相关权限', user=user, ),\n            CasbinObject(name='资源管理:', object_key='CasbinObject', description='CasbinObject--资源相关权限', user=user, ),\n            CasbinObject(name='动作管理:', object_key='CasbinAction', description='CasbinAction表--动作相关权限', user=user, ),\n        ]\n        add_casbin_objects(db, cos)\n\n    if get_casbin_rule_count(db) <= 0:\n        logger.info(\"设置用户组权限\")\n        set_user_role(db)\n        logger.info(\"设置超级管理员\")\n        role_superadmin = get_role_by_id(db, 1)  # 超级管理员组\n        create_casbin_rule_g(db, CasbinRule(ptype='g', v0=user.username, v1=role_superadmin.role_key))\n        logger.info(\"生成一些普通用户。\")\n        create_temp_users(db)\n\n\ndef set_user_role(db: Session):\n    \"\"\"\n    设置超级管理员组和普通用户组权限\n    :param db:\n    :return:\n    \"\"\"\n    role_superadmin = get_role_by_id(db, 1)  # 超级管理员组\n    cas = get_casbin_actions(db)  # 所有动作\n    cos = get_casbin_objects(db)  # 所有资源\n    crs = []\n    for co in cos:\n        for ca in cas:\n            crs.append(CasbinRule(ptype='p', v0=role_superadmin.role_key, v1=co.object_key, v2=ca.action_key))\n    # 为超级管理员增加所有policy\n    create_casbin_rules(db, crs)\n\n    role_user = get_role_by_id(db, 3)  # 普通用户\n    cos = get_casbin_objects(db)  # 所有资源\n    cas1 = ['read', 'show']  # 只读权限\n    crs1 = []\n    for co in cos:\n        for ca in cas1:\n            crs1.append(CasbinRule(ptype='p', v0=role_user.role_key, v1=co.object_key, v2=ca))\n    # 为普通用户组增加所有policy\n    create_casbin_rules(db, crs1)\n\n\ndef create_temp_users(db: Session):\n    \"\"\"\n    添加测试用户，并添加普通用户组权限\n    :param db:\n    :return:\n    \"\"\"\n    # 添加一些用户\n    hashed_password = get_password_hash('123456')\n    role_user = get_role_by_id(db, 3)  # 普通用户组\n    if get_users_count(db) <= 1:\n        for i in range(58):\n            sex = str(random.randint(0, 1))\n            is_active = False\n            if random.randint(0, 1): is_active = True\n            k = str(i)\n            u = User(username='mini' + k, hashed_password=hashed_password, email='admin' + k + '@example.com',\n                     sex=sex, is_active=is_active, remark='临时测试用户')\n            user = add_user(db, u)\n            create_casbin_rule_g(db, CasbinRule(ptype='g', v0=user.username, v1=role_user.role_key))\n\n\ndef create_user(db: Session, username: str, password: str, sex: str, email: str):\n    \"\"\"\n    创建一个新用户\n    :param db:\n    :param username:\n    :param password:\n    :param sex:\n    :param email:\n    :return:\n    \"\"\"\n    role_user = get_role_by_id(db, 3)  # 普通用户组\n    hashed_password = get_password_hash(password)\n    user = User()\n    user.username = username\n    user.hashed_password = hashed_password\n    user.email = email\n    user.sex = sex\n    user = add_user(db, user)\n    create_casbin_rule_g(db, CasbinRule(ptype='g', v0=user.username, v1=role_user.role_key))  # 添加普通用户权限\n    return True\n\n\ndef add_user(db: Session, user: User):\n    \"\"\"\n    :param db:\n    :param user:\n    :return:\n    \"\"\"\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\n\n\ndef get_user_by_id(db: Session, id: int):\n    return db.query(User).filter(User.id == id).first()\n\n\ndef get_user_by_username(db: Session, username: str):\n    return db.query(User).filter_by(username=username).first()\n\n\ndef active_change(db: Session, user_id):\n    \"\"\"\n    修改用户锁定\n    :param db:\n    :param id:\n    :return:\n    \"\"\"\n    user = get_user_by_id(db, user_id)\n    if user:\n        user.is_active = not user.is_active\n        db.commit()\n        return True\n    else:\n        return False\n\n\ndef change_user_password(db: Session, old_password: str, new_password: str, user_id: int):\n    \"\"\"\n    description: 输入旧密码校验,成功后,修改新密码.\n    return {*}\n    \"\"\"\n    user = get_user_by_id(db, user_id)\n    if verify_password(old_password, user.hashed_password):\n        user.hashed_password = get_password_hash(new_password)\n        db.commit()\n        return True\n    else:\n        return False\n\n\ndef get_users(db: Session, offset: int, limit: int, keyword: str):\n    return db.query(User).order_by(-User.id).filter(User.username.like(\"%\" + keyword + \"%\")).offset(offset).limit(limit).all()\n\n\ndef get_users_count_by_keyword(db: Session, keyword: str):\n    return db.query(User).filter(User.username.like(\"%\" + keyword + \"%\")).count()\n\n\ndef get_users_count(db: Session):\n    \"\"\"\n    return 当前系统的用户数量\n    :param db:\n    :return:\n    \"\"\"\n    return db.query(User).count()\n\n\ndef delete_user_by_id(db: Session, user_id: int):\n    try:\n        user = db.query(User).filter_by(id=user_id).first()\n        crs = get_casbin_rules_by_username(db, user.username)\n        for cr in crs:\n            db.delete(cr)\n        db.delete(user)\n        db.commit()\n        return True\n    except Exception as e:\n        return False\n\n\ndef change_user_role(db: Session, user_id: int, role_keys: list[str]):\n    \"\"\"\n    改变用户所属的用户组\n    :param db:\n    :param user_id:\n    :param role_key:\n    :return:\n    \"\"\"\n\n    user = db.query(User).filter_by(id=user_id).first()\n    crs = db.query(CasbinRule).filter_by(ptype='g', v0=user.username).all()\n    if len(crs) > 0:\n        delete_p_casbin_rules(db, crs)  # 删除该用胡所拥有的用户组role\n    new_crs = []\n    for role_key in role_keys:\n        new_crs.append(CasbinRule(ptype='g', v0=user.username, v1=role_key))\n    # print(new_crs)\n    try:\n        create_casbin_rules(db, new_crs)\n        return True\n    except:\n        return False\n\n\n# Role\n\ndef get_roles(db: Session):\n    return db.query(Role).all()\n\n\ndef create_role(db: Session, role: Role):\n    db.add(role)\n    try:\n        db.commit()\n        return role\n    except:\n        return False\n\n\ndef get_role_count(db: Session):\n    return db.query(Role).count()\n\n\ndef get_role_by_id(db: Session, role_id: int):\n    \"\"\"\n    description: 根据role_id返回一个role\n    return role\n    \"\"\"\n    return db.query(Role).filter_by(id=role_id).first()\n\n\ndef get_role_by_name(db: Session, name: str):\n    return db.query(Role).filter_by(name=name).first()\n\n\ndef get_role_by_role_key(db: Session, role_key: str):\n    return db.query(Role).filter_by(role_key=role_key).first()\n\n\ndef update_role_by_id(db: Session, old_role_id, new_role):\n    \"\"\"\n    更新role,需要更新casein_rule里的数据\n    :param db:\n    :param old_role_id:\n    :param new_role:\n    :return:\n    \"\"\"\n    role = get_role_by_id(db, old_role_id)\n    old_role_key = role.role_key\n    if role:\n        role.name = new_role.name\n        role.role_key = new_role.role_key\n        role.description = new_role.description\n        db.commit()\n\n        # 更新相关的casbin_rule关联用户组的role_key\n        crs = _get_casbin_rules_by_ptype_g_v1(db, old_role_key)\n        for cr in crs:\n            cr.v1 = new_role.role_key\n        db.commit()\n\n        # 更新相关的casbin_rule关联资源动作的role_key\n        crs = _get_casbin_rules_by_ptype_p_v0(db, old_role_key)\n        for cr in crs:\n            cr.v0 = new_role.role_key\n        db.commit()\n        return True\n    else:\n        return False\n\n\ndef delete_role_by_id(db: Session, role_id):\n    \"\"\"\n    description: 删除role,以及相关的casbin_rule\n\n    return {bool}\n    \"\"\"\n    role = get_role_by_id(db, role_id)\n    if role:\n        # 删除casbin_rule里的用户组\n        crs = _get_casbin_rules_by_ptype_g_v1(db, role.role_key)\n        for cr in crs:\n            db.delete(cr)\n        db.commit()\n        # 删除casein_rule里的相关rule\n        crs = _get_casbin_rules_by_ptype_p_v0(db, role.role_key)\n        for cr in crs:\n            db.delete(cr)\n        db.commit()\n        db.delete(role)\n        db.commit()\n        return True\n    else:\n        return False\n\n\ndef change_role_casbinrules(db: Session, role_key: str, crs: list[CasbinRule]):\n    \"\"\"\n    修改role角色所拥有的权限，先删除role在casbinrule里原有的所有数据，然后添加前端发来的所有新数据。\n    crs是一个list,包括一组需要添加到casbinrule的规则。\n    :param db:\n    :param role_key:\n    :param crs:\n    :return: bool\n    \"\"\"\n    try:\n        delete_casbin_rules(db, role_key)\n        create_casbin_rules(db, crs)\n        return True\n    except:\n        return False\n\n\n# CasbinAction 动作\n\ndef get_casbin_action_count(db: Session):\n    return db.query(CasbinAction).count()\n\n\ndef create_casbin_action(db: Session, casbinaction: CasbinAction):\n    try:\n        db.add(casbinaction)\n        db.commit()\n        return True\n    except:\n        return False\n\n\ndef add_casbin_actions(db: Session, casbinactions):\n    for c in casbinactions:\n        db.add(c)\n    db.commit()\n\n\ndef get_casbin_action_by_id(db: Session, id: int):\n    return db.query(CasbinAction).filter_by(id=id).first()\n\n\ndef update_casbin_action_by_id(db: Session, old_id: int, name: str, action_key: str, description: str):\n    \"\"\"\n    修改casbin_action\n    :param db:\n    :param old_id:\n    :param name:\n    :param action_key:\n    :param description:\n    :return:\n    \"\"\"\n    ca = get_casbin_action_by_id(db, old_id)\n    temp_key = ca.action_key\n    if ca:\n        ca.name = name\n        ca.action_key = action_key  # 如果action_key,应当更新CasbinRule里的数据\n        ca.description = description\n        db.commit()\n        if temp_key != action_key:\n            crs = get_casbin_rules_by_act_key(db, temp_key)\n            for cr in crs:\n                cr.v2 = action_key\n            db.commit()\n        return ca\n    else:\n        return False\n\n\ndef delete_casbin_action_by_id(db: Session, ac_id: int):\n    \"\"\"\n    删除casbin_action，同时删除casbinrule中存在的动作rule\n    :param db: db\n    :param ac_id: int\n    :return: bool\n    \"\"\"\n    ac = get_casbin_action_by_id(db, ac_id)\n    ac_key = ac.action_key\n    if ac:\n        db.delete(ac)\n        crs = get_casbin_rules_by_act_key(db, ac_key)\n        for cr in crs:\n            db.delete(cr)\n        db.commit()\n        return True\n    else:\n        return False\n\n\ndef get_casbin_actions(db: Session, ):\n    return db.query(CasbinAction).all()\n\n\n# CasbinObject 资源\n\n\ndef get_casbin_object_count(db: Session):\n    return db.query(CasbinObject).count()\n\n\ndef create_casbin_object(db: Session, casbinobject: CasbinObject):\n    try:\n        db.add(casbinobject)\n        db.commit()\n        return True\n    except:\n        return False\n\n\ndef add_casbin_objects(db: Session, casbinobjects):\n    for co in casbinobjects:\n        db.add(co)\n    db.commit()\n\n\ndef get_casbin_objects(db: Session):\n    return db.query(CasbinObject).all()\n\n\ndef get_casbin_object_by_id(db: Session, id: int):\n    return db.query(CasbinObject).filter_by(id=id).first()\n\n\ndef update_casbin_object(db: Session, old_id, name, obj_key, description):\n    \"\"\"\n    更新casein_object\n    :param db:\n    :param old_id:\n    :param name:\n    :param obj_key:\n    :param description:\n    :return:\n    \"\"\"\n    co = get_casbin_object_by_id(db, old_id)\n    if co:\n        temp_key = co.object_key\n        co.name = name\n        co.object_key = obj_key\n        co.description = description\n        db.commit()\n        if temp_key != obj_key:\n            cos = get_casbin_rules_by_obj_key(db, temp_key)\n            for co in cos:\n                co.v1 = obj_key\n            db.commit()\n        return True\n    else:\n        return False\n\n\ndef delete_casbin_object_by_id(db: Session, ac_id: int):\n    \"\"\"\n    删除casbin_action，同时删除casbinrule中存在的动作\n    :param db: db\n    :param ac_id: int\n    :return: bool\n    \"\"\"\n    obj = get_casbin_object_by_id(db, ac_id)\n    obj_key = obj.object_key\n    if obj:\n        db.delete(obj)\n        crs = get_casbin_rules_by_obj_key(db, obj_key)\n        for cr in crs:\n            db.delete(cr)\n        db.commit()\n        return True\n    else:\n        return False\n\n\n# CasbinRule 权限验证核心\n\ndef delete_casbin_rules(db, role_key):\n    \"\"\"\n    批量删除casbinrules，成功返回条数，若返回0则表示没有存在的数据。\n    :param db:\n    :param role_key:\n    :return:\n    \"\"\"\n    crs = _get_casbin_rules_by_ptype_p_v0(db, role_key)\n    if len(crs) > 0:\n        for cr in crs:\n            db.delete(cr)\n        db.commit()\n        return len(crs)\n    else:\n        return 0\n\n\ndef get_casbin_rules_by_obj_key(db: Session, obj_key):\n    return db.query(CasbinRule).filter_by(v1=obj_key).all()\n\n\ndef get_casbin_rules_by_act_key(db: Session, act_key: str):\n    \"\"\"\n    根据act_key返回一组CasbinRules\n    :param db:\n    :param act_key:\n    :return: crs\n    \"\"\"\n    return db.query(CasbinRule).filter_by(v2=act_key).all()\n\n\ndef filter_casbin_rule_by_role_key(db: Session, role_key):\n    '''\n    description: \n    根据role_key返回此角色role的权限数据,修改角色的权限是会重新添加数据\n    return {list}\n    '''\n    return db.query(CasbinRule).filter_by(ptype=\"p\", v0=role_key).all()\n\n\ndef filter_casbin_rule_g(db: Session, casbinrule):\n    '''\n    description: 查询表中是否存在相同的角色role设置\n    return {*}\n    '''\n    return db.query(CasbinRule).filter_by(ptype=casbinrule.ptype, v0=casbinrule.v0, v1=casbinrule.v1).all()\n\n\ndef filter_casbin_rule(db: Session, casbinrule):\n    '''\n    description: 查询是否存在相同的policy\n    return {*}\n    '''\n    return db.query(CasbinRule).filter_by(ptype=casbinrule.ptype, v0=casbinrule.v0, v1=casbinrule.v1,\n                                          v2=casbinrule.v2).first()\n\n\ndef create_casbin_rules(db: Session, crs):\n    \"\"\"\n    因为前端添加policy都是多条,所以接口只暴露批量添加.\n    添加policy到数据表中,如果有相同的policy,则不再继续添加.\n    return\n    :param db:\n    :param crs:\n    :return: {表中存在的相同数据的条目}\n    \"\"\"\n    k = 0\n    for cr in crs:\n        if filter_casbin_rule(db, cr):\n            k += 1\n        else:\n            _add_casbin_rule(db, cr)\n    return k\n\n\ndef create_casbin_rule_g(db: Session, cr_g):\n    \"\"\"\n    设置用户的权限组\n    :param db:\n    :param cr_g: 一个casbinrule ptype=\"g\"\n    :return: 存在返回1 不存在则增加数据并返回0,并添加该用户到权限组\n    \"\"\"\n    k = filter_casbin_rule_g(db, cr_g)\n    if k:\n        return k\n    else:\n        _add_casbin_rule(db, cr_g)\n        return 0\n\n\ndef get_casbin_rule_count(db: Session):\n    return db.query(CasbinRule).count()\n\n\ndef get_users_by_casbinrule_role_key(db: Session, role_key):\n    '''\n    description: 根据role.key返回当前组的用户\n    return {*} 当前角色组的所有成员\n    '''\n    crs = db.query(CasbinRule).filter_by(ptype='g', v1=role_key).all()\n    users = []\n    for cr in crs:\n        user = get_user_by_username(db, cr.v0)\n        users.append(user)\n    return crs\n\n\ndef get_casbin_rules_by_role_key(db: Session, role_key):\n    '''\n    description: \n    return {*} 该权限组所包括的所有权限casbinrule\n    '''\n    return db.query(CasbinRule).filter_by(ptype=\"p\", v0=role_key).all()\n\n\ndef delete_p_casbin_rules(db: Session, roles):\n    '''\n    description: 删除该权限组的所有casbinrule\n    return {*}\n    '''\n    for r in roles:\n        db.delete(r)\n    db.commit()\n\n\ndef get_casbin_rules_by_username(db: Session, username: str):\n    '''\n    description: 根据用户名,返回其role角色组的数据\n\n    param {Session} db\n\n    param {*} username str \n    \n    return {*} crs\n    '''\n    return db.query(CasbinRule).filter_by(ptype='g', v0=username).all()\n\n\ndef _get_casbin_rules_by_ptype_g_v1(db: Session, role_key: str):\n    '''\n    description: 返回被设置的该角色的所有管理员数据,用来更新或删除这些数据.\n\n    param {Session} db\n\n    param {*} role_key 根绝role_key进行搜索\n    \n    return {*} crs\n    '''\n    return db.query(CasbinRule).filter_by(ptype=\"g\", v1=role_key).all()\n\n\ndef _get_casbin_rules_by_ptype_p_v0(db: Session, role_key: str):\n    '''\n    description: 返回该角色的所有资源动作设置数据,用来更新或删除这些数据.\n    param {Session} db\n    param {*} role_key 根据role_key进行搜索\n    return {*} crs\n    '''\n    return db.query(CasbinRule).filter_by(ptype='p', v0=role_key).all()\n\n\ndef _add_casbin_rule(db: Session, casbinrule):\n    '''\n    description: 增加一条casbinrule\n    return {*}\n    '''\n    db.add(casbinrule)\n    db.commit()\n\n\ndef _get_casbin_rules(db: Session):\n    return db.query(CasbinRule).all()\n"}
{"type": "source_file", "path": "back/models.py", "content": "'''\nAuthor: J.sky bosichong@qq.com\nDate: 2022-11-21 14:41:49\nLastEditors: J.sky bosichong@qq.com\nLastEditTime: 2022-11-26 11:20:42\nFilePath: /MiniAdmin/back/models.py\npython交流学习群号:217840699\nmodel,sub, obj, act 表示经典三元组: 访问实体 (Subject)，访问资源 (Object) 和访问方法 (Action)。\n'''\n\nfrom datetime import datetime\nfrom database import Base\nfrom sqlalchemy import String, Column, Integer, DateTime, ForeignKey, Boolean\nfrom sqlalchemy.orm import relationship\n\n\nclass User(Base):\n    __tablename__ = 'user'\n    # 若有多个类指向同一张表，那么在后边的类需要把 extend_existing设为True，表示在已有列基础上进行扩展\n    # 或者换句话说，sqlalchemy 允许类是表的字集，如下：\n    __table_args__ = {'extend_existing': True}\n\n    id = Column(Integer, primary_key=True, autoincrement=True, comment='用户ID')\n    username = Column(String(32), nullable=False, unique=True, comment='用户昵称')\n    hashed_password = Column(String(128), nullable=False, comment='用户密码')\n    sex = Column(String(1), nullable=False, default='1', comment='用户性别')\n    email = Column(String(128), nullable=False, unique=True, comment='用户邮箱')\n    is_active = Column(Boolean, default=False)\n    avatar = Column(String(128), comment='用户头像')\n    remark = Column(String(128), comment='备注')\n    create_time = Column(DateTime, nullable=False, default=datetime.now, comment='创建时间')\n    update_time = Column(DateTime, nullable=False, default=datetime.now, onupdate=datetime.now, comment='更新时间')\n\n    roles = relationship('Role', uselist=True, back_populates='user')\n    cos = relationship('CasbinObject', uselist=True, back_populates='user')\n    cas = relationship('CasbinAction', uselist=True, back_populates='user')\n\n\nclass Role(Base):\n    __tablename__ = 'role'\n    __table_args__ = {'extend_existing': True}\n\n    id = Column(Integer, primary_key=True, autoincrement=True, comment='角色id')\n    name = Column(String(32), nullable=False, unique=True, comment='角色名称')\n    role_key = Column(String(128), nullable=False, unique=True, comment='角色标识')\n    description = Column(String(128), nullable=False, comment='角色描述')\n    create_time = Column(DateTime, nullable=False, default=datetime.now, comment='创建时间')\n    update_time = Column(DateTime, nullable=False, default=datetime.now, onupdate=datetime.now, comment='更新时间')\n    user_id = Column(Integer, ForeignKey('user.id'), nullable=False, comment='创建者')\n    user = relationship('User', back_populates='roles')\n\n\nclass CasbinObject(Base):\n    __tablename__ = 'casbin_object'\n    __table_args__ = {'extend_existing': True}\n\n    id = Column(Integer, primary_key=True, autoincrement=True, comment='ID')\n    name = Column(String(128), nullable=False, unique=True, comment='资源名称')\n    object_key = Column(String(128), nullable=False, unique=True, comment='资源标识')\n    description = Column(String(128), nullable=True, comment='资源描述')\n    create_time = Column(DateTime, nullable=False, default=datetime.now, comment='创建时间')\n    update_time = Column(DateTime, nullable=False, default=datetime.now, onupdate=datetime.now, comment='更新时间')\n    user_id = Column(Integer, ForeignKey('user.id'), nullable=False, comment='创建者')\n    user = relationship('User', back_populates='cos')\n\n\nclass CasbinAction(Base):\n    __tablename__ = 'casbin_action'\n    __table_args__ = {'extend_existing': True}\n\n    id = Column(Integer, primary_key=True, autoincrement=True, comment='ID')\n    name = Column(String(128), nullable=False, unique=True, comment='动作名称')\n    action_key = Column(String(128), nullable=False, unique=True, comment='动作标识')\n    description = Column(String(128), nullable=True, comment='动作描述')\n    create_time = Column(DateTime, nullable=False, default=datetime.now, comment='创建时间')\n    update_time = Column(DateTime, nullable=False, default=datetime.now, onupdate=datetime.now, comment='更新时间')\n\n    user_id = Column(Integer, ForeignKey('user.id'), nullable=False, comment='创建者')\n    user = relationship('User', back_populates='cas')\n\n\nclass CasbinRule(Base):\n    __tablename__ = \"casbin_rule\"\n    __table_args__ = {'extend_existing': True}\n\n    id = Column(Integer, primary_key=True)\n    ptype = Column(String(255))\n    v0 = Column(String(255))\n    v1 = Column(String(255))\n    v2 = Column(String(255))\n    v3 = Column(String(255))\n    v4 = Column(String(255))\n    v5 = Column(String(255))\n"}
{"type": "source_file", "path": "back/schemas.py", "content": "# -*- coding: UTF-8 -*-\n\"\"\"\n@Author   : J.sky\n@Mail     : bosichong@qq.com\n@Site     : https://github.com/bosichong\n@QQ交流群  : python交流学习群号:217840699\n@file      :schemas.py\n@time     :2022/11/29\n\n\"\"\"\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(BaseModel):\n    username: Union[str, None] = None\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    username: str\n    password: str\n    sex: str\n\n\nclass User(UserBase):\n    id: int\n    username: str\n    sex: str\n    email: str\n    is_active: bool\n    avatar: Union[str, None] = None\n    remark: Union[str, None] = None\n\n    class Config:\n        orm_mode = True\n\n\nclass UserUpdate(BaseModel):\n    user_id: int\n    username: str\n    password: Union[str, None] = ''\n    sex: str\n    email: str\n    avatar: Union[str, None] = None\n    remark: Union[str, None] = None\n\n\nclass Users(BaseModel):\n    users: list[User]\n    count: int\n\n\nclass Role(BaseModel):\n    name: str\n    role_key: str\n    description: str\n    user_id: str\n\n\nclass EditRole(BaseModel):\n    old_role_id: int\n    name: str\n    role_key: str\n    description: str\n\n\nclass createCasbinObject(BaseModel):\n    name: str\n    object_key: str\n    description: str\n    user_id: int\n\n\nclass EditCasbinObject(BaseModel):\n    old_co_id: int\n    name: str\n    object_key: str\n    description: str\n\n\nclass createCasbinAction(BaseModel):\n    name: str\n    action_key: str\n    description: str\n    user_id: int\n\n\nclass EditCasbinAction(BaseModel):\n    old_ca_id: int\n    name: str\n    action_key: str\n    description: str\n\n\nclass ChangeRole(BaseModel):\n    role_id: int\n    checkeds: list\n\n\nclass ChangeUserRole(BaseModel):\n    user_id: int\n    names: list[str]\n\n\nclass Casbin_rule(BaseModel):\n    obj: str\n    act: str\n\n"}
{"type": "source_file", "path": "back/utils.py", "content": "'''\nAuthor: J.sky bosichong@qq.com\nDate: 2022-11-22 09:03:48\nLastEditors: J.sky bosichong@qq.com\nLastEditTime: 2022-11-27 10:06:04\nFilePath: /MiniAdmin/back/utils.py\n工具类,密码、验证、权限验证等\npython交流学习群号:217840699\n'''\n\nimport os\nimport sys\nfrom functools import wraps\n\nfrom passlib.context import CryptContext\nfrom pydantic import BaseSettings\nfrom fastapi import HTTPException, status\nfrom jose import JWTError, jwt\nfrom fastapi.security import OAuth2PasswordBearer\nfrom loguru import logger\nfrom database import BASE_DIR, get_casbin_e, get_db\nfrom models import User\n\nLOG_LEVEL = \"DEBUG\"\nlogger.remove()  # 删去import logger之后自动产生的handler，不删除的话会出现重复输出的现象\nlogger.add(os.path.join(BASE_DIR, \"logs/logger.log\"), level=LOG_LEVEL)\nhandler_id = logger.add(sys.stderr, level=LOG_LEVEL)\n\n# 执行生成token的地址\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/v1/token\")\n\n\nclass AppTokenConfig(BaseSettings):\n    \"\"\"\n    在终端通过以下命令生成一个新的密匙:\n    openssl rand -hex 32\n    加密密钥 这个很重要千万不能泄露了，而且一定自己生成并替换。\n    \"\"\"\n    SECRET_KEY = \"ededcbe81f2e015697780d536196c0baa6ea26021ad7070867e40b18a51ff8da\"\n    ALGORITHM = \"HS256\"\n    ACCESS_TOKEN_EXPIRE_MINUTES = 30  # token失效时间\n\n\n# 创建一个token的配置项。\nAPP_TOKEN_CONFIG = AppTokenConfig()\n\n# 密码散列 pwd_context.hash(password)\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n\ndef verify_password(plain_password, hashed_password):\n    \"\"\"\n    description: 校验密码\n    return {*} bool\n    \"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_password_hash(password):\n    \"\"\"\n    description: hash密码\n    return {*} hashed_password\n    \"\"\"\n    return pwd_context.hash(password)\n\n\ndef verify_enforce(token: str, rule):\n    \"\"\"\n    casbin权限验证\n    :param token:token\n    :param rule: object ，action\n    :return:\n    \"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"您的帐户已锁定！\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    e = get_casbin_e()  # 每次都要调用，获取最新的权限规则。\n    sub = get_username_by_token(token)  # token中获取用户名\n    # print(sub,rule.obj,rule.act)\n    if not verify_isActive(sub):\n        return e.enforce(sub, rule.obj, rule.act)\n    else:\n        raise credentials_exception\n\n\ndef verify_isActive(username: str):\n    \"\"\"\n    判断用户是否锁定\n    :param username:\n    :return:\n    \"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"当前账户不存在或已被删除！\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    user = next(get_db()).query(User).filter_by(username=username).first()\n    if user:\n        return user.is_active\n    else:\n        raise credentials_exception\n\n\ndef verify_e(e, sub, obj, act):\n    return e.enforce(sub, obj, act)\n\n\ndef get_username_by_token(token):\n    \"\"\"\n    从token中取出username\n    :param token:\n    :return:\n    \"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        # print('获取用户名'+token)\n        payload = jwt.decode(token, APP_TOKEN_CONFIG.SECRET_KEY, algorithms=[APP_TOKEN_CONFIG.ALGORITHM])\n        username: str = payload.get(\"sub\")  # 从 token中获取用户名\n        return username\n    except JWTError:\n        raise credentials_exception\n\n\nimport copy\n\n\ndef update_array(original_array, parameters):\n    '''\n    拼装前端权限管理展示数据\n    :param original_array:\n    :param parameters:\n    :return:\n    '''\n    result = copy.deepcopy(original_array)\n\n    for parameter in parameters:\n        # print(parameter)\n        if len(parameter) <= 0:\n            break\n        for original in result:\n            if parameter[0] == original[0]:\n                result[result.index(original)] = parameter\n                break\n    for original in result:\n        if original not in parameters:\n            result[result.index(original)] = []\n\n    return result\n\n\nif __name__ == '__main__':\n    original_array = [['用户管理:', '增', '删', '改', '查', '显'],\n                      ['角色管理:', '增', '删', '改', '查', '显'],\n                      ['资源管理:', '增', '删', '改', '查', '显'],\n                      ['动作管理:', '增', '删', '改', '查', '显']]\n    parameters = [['用户管理:', '查', '显'], ['动作管理:', '查', '显']]\n\n    result = update_array(original_array, parameters)\n    print(result)\n    print(original_array)\n    print(parameters)\n"}
