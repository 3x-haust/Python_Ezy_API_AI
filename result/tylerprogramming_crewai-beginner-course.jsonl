{"repo_info": {"repo_name": "crewai-beginner-course", "repo_owner": "tylerprogramming", "repo_url": "https://github.com/tylerprogramming/crewai-beginner-course"}}
{"type": "source_file", "path": "CalculatorTool.py", "content": "from langchain_community.tools import tool\n\n\n@tool(\"Calculate\")\ndef calculate(equation):\n    \"\"\" Useful for solving math equations \"\"\"\n\n    return eval(equation)"}
{"type": "source_file", "path": "main - ollama - localai.py", "content": "import os\nfrom crewai import Agent, Task, Crew\nfrom langchain_openai import ChatOpenAI\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-proj-1111\"\n\nllm = ChatOpenAI(\n    model=\"phi3:3.8b\",\n    base_url=\"http://localhost:11434/v1\"\n)\n\ninfo_agent = Agent(\n    role=\"Information Agent\",\n    goal=\"Give compelling information about a certain topic\",\n    backstory=\"\"\"\n        You love to know information.  People love and hate you for it.  You win most of the\n        quizzes at your local pub.\n    \"\"\",\n    llm=llm\n)\n\ntask1 = Task(\n    description=\"Tell me all about the box jellyfish.\",\n    expected_output=\"Give me a quick summary and then also give me 7 bullet points describing it.\",\n    agent=info_agent\n)\n\ncrew = Crew(\n    agents=[info_agent],\n    tasks=[task1],\n    verbose=2\n)\n\nresult = crew.kickoff()\n\nprint(\"############\")\nprint(result)\n\n"}
{"type": "source_file", "path": "rag_pdf/tasks.py", "content": "from crewai import Task\nfrom textwrap import dedent\n\n\n# This is an example of how to define custom tasks.\n# You can define as many tasks as you want.\n# You can also define custom agents in agents.py\nclass CustomTasks:\n    def __tip_section(self):\n        return \"If you do your BEST WORK, I'll give you a $10,000 commission!\"\n\n    def pdf_task(self, agent, var1):\n        return Task(\n            description=dedent(\n                f\"\"\"\n            Tell me precisely what I need to know from the RAG tool.\n            Use this as what I want to lookup: {var1}\n            \n            {self.__tip_section()}\n    \n            Make sure to be as accurate as possible. \n        \"\"\"\n            ),\n            expected_output=\"Full analysis.\",\n            agent=agent,\n        )\n\n    def writer_task(self, agent):\n        return Task(\n            description=dedent(\n                f\"\"\"\n            Take the input from task 1 and write a compelling narrative about it.\n                                       \n            {self.__tip_section()}\n        \"\"\"\n            ),\n            expected_output=\"Give me the title, then brief summary, then bullet points, and a TL;DR.\",\n            agent=agent,\n        )\n"}
{"type": "source_file", "path": "rag_pdf/main.py", "content": "import os\nfrom textwrap import dedent\n\nfrom crewai import Crew\nfrom decouple import config\n\nfrom agents import CustomAgents\nfrom tasks import CustomTasks\n\nos.environ[\"OPENAI_API_KEY\"] = config(\"OPENAI_API_KEY\")\n\nclass CustomCrew:\n    def __init__(self, var1):\n        self.var1 = var1\n\n    def run(self):\n        # Define your custom agents and tasks in agents.py and tasks.py\n        agents = CustomAgents()\n        tasks = CustomTasks()\n\n        # Define your custom agents and tasks here\n        pdf_agent = agents.pdf_agent()\n        writer_agent = agents.writer_agent()\n\n        # Custom tasks include agent name and variables as input\n        task1 = tasks.pdf_task(\n            pdf_agent,\n            self.var1\n        )\n\n        task2 = tasks.writer_task(\n            writer_agent,\n        )\n\n        # Define your custom crew here\n        crew = Crew(\n            agents=[pdf_agent, writer_agent],\n            tasks=[task1, task2],\n            verbose=True,\n        )\n\n        result = crew.kickoff()\n        return result\n\n\n# This is the main function that you will use to run your custom crew.\nif __name__ == \"__main__\":\n    print(\"## Welcome to Crew AI Template\")\n    print(\"-------------------------------\")\n    var1 = input(dedent(\"\"\"Enter variable 1: \"\"\"))\n\n    custom_crew = CustomCrew(var1)\n    result = custom_crew.run()\n    print(\"\\n\\n########################\")\n    print(\"## Here is you custom crew run result:\")\n    print(\"########################\\n\")\n    print(result)\n"}
{"type": "source_file", "path": "tools-example.py", "content": "import os\nfrom crewai import Agent, Task, Crew, Process\nfrom dotenv import load_dotenv\nfrom CalculatorTool import calculate\n\nload_dotenv()\n\nos.environ[\"OPENAI_API_KEY\"] = os.getenv(\"OPENAI_API_KEY\")\nos.environ[\"OPENAI_MODEL_NAME\"] = os.getenv(\"OPENAI_MODEL_NAME\")\n\nprint(\"## Welcome to the Math Whiz\")\nmath_input = input(\"What is your math equation: \")\n\nmath_agent = Agent(\n    role=\"Math Magician\",\n    goal=\"You are able to evaluate any math expression\",\n    backstory=\"YOU ARE A MATH WHIZ.\",\n    verbose=True,\n    tools=[calculate]\n)\n\nwriter = Agent(\n    role=\"Writer\",\n    goal=\"Craft compelling explanations based from results of math equations.\",\n    backstory=\"\"\"You are a renowned Content Strategist, known for your insightful and engaging articles.  \n    You transform complex concepts into compelling narratives.\n    \"\"\",\n    verbose=True\n)\n\ntask1 = Task(\n    description=f\"{math_input}\",\n    expected_output=\"Give full details in bullet points.\",\n    agent=math_agent\n)\n\ntask2 = Task(\n    description=\"\"\"using the insights provided, explain in great detail how the equation and result \n    were formed.\"\"\",\n    expected_output=\"\"\"Explain in great detail and save in markdown.  Do no add the triple tick marks at the \n                    beginning or end of the file.  Also don't say what type it is in the first line.\"\"\",\n    output_file=\"markdown/math.md\",\n    agent=writer\n)\n\ncrew = Crew(\n    agents=[math_agent, writer],\n    tasks=[task1, task2],\n    process=Process.sequential,\n    verbose=2\n)\n\nresult = crew.kickoff()\n\nprint(result)\n\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "rag_pdf/agents.py", "content": "from crewai import Agent\nfrom textwrap import dedent\nfrom langchain_openai import ChatOpenAI\nfrom crewai_tools import PDFSearchTool\n\n\nclass CustomAgents:\n    def __init__(self):\n        self.OpenAIGPT35 = ChatOpenAI(model_name=\"gpt-3.5-turbo\", temperature=0.7)\n        self.OpenAIGPT4 = ChatOpenAI(model_name=\"gpt-4\", temperature=0.7)\n\n    def pdf_agent(self):\n\n        pdf_tool = PDFSearchTool(\"gpt-4-analysis.pdf\")\n\n        return Agent(\n            role=\"Senior PDF Analyst\",\n            backstory=dedent(f\"\"\"You can find anything in a pdf.  The people need you.\"\"\"),\n            goal=dedent(f\"\"\"Uncover any information from pdf files exceptionally well.\"\"\"),\n            tools=[pdf_tool],\n            verbose=True,\n            llm=self.OpenAIGPT4,\n        )\n\n    def writer_agent(self):\n        return Agent(\n            role=\"Writer\",\n            backstory=dedent(f\"\"\"All your life you have loved writing summaries.\"\"\"),\n            goal=dedent(f\"\"\"Take the information from the pdf agent and summarize it nicely.\"\"\"),\n            verbose=True,\n            llm=self.OpenAIGPT35,\n        )\n"}
{"type": "source_file", "path": "main.py", "content": "import os\nfrom crewai import Agent, Task, Crew\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-proj-1111\"\nos.environ[\"OPENAI_MODEL_NAME\"] = \"gpt-4\"\n\ninfo_agent = Agent(\n    role=\"Information Agent\",\n    goal=\"Give compelling information about a certain topic\",\n    backstory=\"\"\"\n        You love to know information.  People love and hate you for it.  You win most of the\n        quizzes at your local pub.\n    \"\"\"\n)\n\ntask1 = Task(\n    description=\"Tell me all about the blue-ringed octopus.\",\n    expected_output=\"Give me a quick summary and then also give me 7 bullet points describing it.\",\n    agent=info_agent\n)\n\ncrew = Crew(\n    agents=[info_agent],\n    tasks=[task1],\n    verbose=2\n)\n\nresult = crew.kickoff()\n\nprint(\"############\")\nprint(result)\n\n"}
