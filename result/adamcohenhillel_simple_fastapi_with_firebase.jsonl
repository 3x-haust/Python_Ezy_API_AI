{"repo_info": {"repo_name": "simple_fastapi_with_firebase", "repo_owner": "adamcohenhillel", "repo_url": "https://github.com/adamcohenhillel/simple_fastapi_with_firebase"}}
{"type": "source_file", "path": "api/__init__.py", "content": ""}
{"type": "source_file", "path": "api/dependencies.py", "content": "\"\"\"Template App\n\"\"\"\nimport logging\n\nfrom fastapi import HTTPException\nfrom starlette.requests import Request\n\nfrom firebase_admin import auth\n\n\ndef get_firebase_user(request: Request):\n    \"\"\"Get the user details from Firebase, based on TokenID in the request\n\n    :param request: The HTTP request\n    \"\"\"\n    id_token = request.headers.get('Authorization')\n    if not id_token:\n        raise HTTPException(status_code=400, detail='TokenID must be provided')\n\n    try:\n        claims = auth.verify_id_token(id_token)\n        return claims\n    except Exception as e:\n        logging.exception(e)\n        raise HTTPException(status_code=401, detail='Unauthorized')\n"}
{"type": "source_file", "path": "api/app.py", "content": "\"\"\"Template App\n\"\"\"\nfrom fastapi import FastAPI\nfrom fastapi.responses import UJSONResponse\nfrom fastapi.routing import APIRouter\n\nfrom api.routes.simple import simple_router\nfrom api.lifetime import register_shutdown_event, register_startup_event\nfrom api.exception_handlers import register_exception_handlers\n\n\ndef get_app() -> FastAPI:\n    \"\"\"Get API app\n    \"\"\"\n    app = FastAPI(\n        title='Template App',\n        description='This is Template',\n        docs_url='/api/docs',\n        redoc_url='/api/redoc',\n        openapi_url='/api/openapi.json',\n        default_response_class=UJSONResponse,\n    )\n\n    # Adds startup and shutdown events.\n    register_startup_event(app)\n    register_shutdown_event(app)\n    register_exception_handlers(app)\n\n    api_router = APIRouter()\n    api_router.include_router(simple_router, prefix='/simple_router', tags=['users'])\n\n    app.include_router(router=api_router, prefix='/api')\n\n    return app\n"}
{"type": "source_file", "path": "run_api.py", "content": "\"\"\"Simple FastAPI template\n\"\"\"\nfrom api.app import get_app\nimport uvicorn\n\n\nif __name__ == '__main__':\n    app = get_app()\n    uvicorn.run(app, host='0.0.0.0', port=8000)\n"}
{"type": "source_file", "path": "api/routes/__init__.py", "content": ""}
{"type": "source_file", "path": "api/exception_handlers.py", "content": "\"\"\"Template App\n\"\"\"\nimport logging\n\nfrom sqlalchemy.exc import IntegrityError\nfrom fastapi import FastAPI, status, Request\nfrom fastapi.responses import JSONResponse\n\n\nasync def sqlalchemy_integrity_error_handler(_: Request, exception: IntegrityError) -> JSONResponse:\n    \"\"\"High level exception handler for all exceptions\n    \"\"\"\n    logging.exception(exception)\n    return JSONResponse(\n        status_code=status.HTTP_409_CONFLICT,\n        content={'message': 'Resource Already Exists'}\n    )\n\n\nasync def default_error_handler(_: Request, exception: Exception) -> JSONResponse:\n    \"\"\"High level exception handler for all exceptions\n    \"\"\"\n    logging.exception(exception)\n    return JSONResponse(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        content={'message': 'Unhandled Internal Server Error'}\n    )\n\n\ndef register_exception_handlers(app: FastAPI) -> None:\n    \"\"\"Add exception handlers to FastAPI app\n    \"\"\"\n    app.add_exception_handler(IntegrityError, sqlalchemy_integrity_error_handler)\n    app.add_exception_handler(Exception, default_error_handler)\n"}
{"type": "source_file", "path": "api/routes/simple.py", "content": "\"\"\"Template App\n\"\"\"\nfrom fastapi import APIRouter, Depends\n\nfrom api.dependencies import get_firebase_user\n\n\nsimple_router = APIRouter()\n\n\n@simple_router.get('/firebase_user')\nasync def firebase_user(\n    user = Depends(get_firebase_user)\n):\n    \"\"\"Test endpoint that depends on authenticated firebase\n    \"\"\"\n    return user\n"}
{"type": "source_file", "path": "api/lifetime.py", "content": "\"\"\"Template App\n\"\"\"\nfrom typing import Awaitable, Callable\n\nfrom fastapi import FastAPI\nimport firebase_admin\n# from firebase_admin import credentials\n\n\ndef register_startup_event(app: FastAPI) -> Callable[[], Awaitable[None]]:\n    \"\"\"Actions to run on app startup.\n\n    This function uses fastAPI app to store data\n    inthe state, such as db_engine.\n\n    :param app: the fastAPI app.\n    :return: function that actually performs actions.\n    \"\"\"\n\n    @app.on_event('startup')\n    async def _startup() -> None:\n        # cred = credentials.Certificate(\"/path/to/cred/file\")\n        firebase_admin.initialize_app()\n    return _startup\n\n\ndef register_shutdown_event(app: FastAPI) -> Callable[[], Awaitable[None]]:\n    \"\"\"Actions to run on app's shutdown.\n\n    :param app: fastAPI app.\n    :return: function that actually performs actions.\n    \"\"\"\n\n    @app.on_event(\"shutdown\")\n    async def _shutdown() -> None:\n        pass\n\n    return _shutdown\n"}
