{"repo_info": {"repo_name": "fastapi-bigger-application", "repo_owner": "skatesham", "repo_url": "https://github.com/skatesham/fastapi-bigger-application"}}
{"type": "test_file", "path": "app/test/test_api/__init__.py", "content": ""}
{"type": "test_file", "path": "app/test/test_api/test_buyers.py", "content": "from fastapi.testclient import TestClient\n\nfrom ..base_insertion import insert_into_buyers\nfrom ..database_test import configure_test_database, clear_database\nfrom ..templates.buyer_tempĺates import buyer_json, buyer_not_found_error\nfrom ...main import app\n\nclient = TestClient(app)\n\nbuyers_route = \"/api/v1/buyers\"\n\n\ndef setup_module(module):\n    configure_test_database(app)\n\n\ndef setup_function(module):\n    clear_database()\n\n\ndef test_create_buyer(buyer_json):\n    ''' Create a buyer with success '''\n    response = client.post(buyers_route + \"/\", json=buyer_json)\n    assert response.status_code == 201\n    assert response.json() == buyer_json\n\n\ndef test_read_buyer(buyer_json):\n    ''' Read a buyer with success '''\n    insert_into_buyers(buyer_json)\n    request_url = buyers_route + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == buyer_json\n\n\ndef test_read_buyers(buyer_json):\n    ''' Read all buyers paginated with success '''\n    insert_into_buyers(buyer_json)\n    request_url = buyers_route + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == [buyer_json]\n\n\ndef test_delete_buyer(buyer_json):\n    ''' Delete a buyer with success '''\n    insert_into_buyers(buyer_json)\n    request_url = buyers_route + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 200\n    assert response.json() == True\n\n\ndef test_read_buyer_not_found(buyer_not_found_error):\n    ''' Read a buyer when not found '''\n    request_url = buyers_route + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 404\n    assert response.json() == buyer_not_found_error\n\n\ndef test_read_buyers_not_found():\n    ''' Read all buyers paginated when not found '''\n    request_url = buyers_route + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == []\n\n\ndef test_delete_buyer_not_found(buyer_not_found_error):\n    ''' Delete a buyer when not exists '''\n    request_url = buyers_route + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 404\n    assert response.json() == buyer_not_found_error\n"}
{"type": "test_file", "path": "app/test/test_api/test_cars.py", "content": "from fastapi.testclient import TestClient\n\nfrom ..base_insertion import insert_into_cars\nfrom ..database_test import configure_test_database, clear_database\nfrom ..templates.car_tempĺates import car_json, car_not_found_error\nfrom ...main import app\n\nCAR_ROUTE = \"/api/v1/cars\"\n\nclient = TestClient(app)\n\n\ndef setup_module(module):\n    configure_test_database(app)\n\n\ndef setup_function(module):\n    clear_database()\n\n\ndef test_create_car(car_json):\n    ''' Create a car with success '''\n    response = client.post(CAR_ROUTE + \"/\", json=car_json)\n    assert response.status_code == 201\n    assert response.json() == car_json\n\n\ndef test_read_car(car_json):\n    ''' Read a car with success '''\n    insert_into_cars(car_json)\n\n    request_url = CAR_ROUTE + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == car_json\n\n\ndef test_read_cars(car_json):\n    ''' Read all cars paginated with success '''\n    insert_into_cars(car_json)\n\n    request_url = CAR_ROUTE + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == [car_json]\n\n\ndef test_delete_car(car_json):\n    ''' Delete a car with success '''\n    insert_into_cars(car_json)\n\n    request_url = CAR_ROUTE + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 200\n    assert response.json() == True\n\n\ndef test_read_car_not_found(car_not_found_error):\n    ''' Read a car when not found '''\n    request_url = CAR_ROUTE + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 404\n    assert response.json() == car_not_found_error\n\n\ndef test_read_cars_not_found():\n    ''' Read all cars paginated when not found '''\n    request_url = CAR_ROUTE + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == []\n\n\ndef test_delete_car_not_found(car_not_found_error):\n    ''' Delete a car when not exists '''\n    request_url = CAR_ROUTE + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 404\n    assert response.json() == car_not_found_error\n"}
{"type": "test_file", "path": "app/test/test_api/test_sales.py", "content": "from fastapi.testclient import TestClient\n\nfrom ..base_insertion import insert_into_sales, insert_into_cars, insert_into_stocks, insert_into_sellers, \\\n    insert_into_buyers, read_stock_by_id\nfrom ..database_test import configure_test_database, clear_database\nfrom ..templates.buyer_tempĺates import buyer_json, buyer_not_found_error\nfrom ..templates.car_tempĺates import car_json, car_not_found_error\nfrom ..templates.sale_tempĺates import sale_request_json, sale_response_json, sale_not_found_error, \\\n    sale_all_not_found_error\nfrom ..templates.seller_tempĺates import seller_json, seller_not_found_error\nfrom ..templates.stock_tempĺates import stock_request_json, stock_not_found_error, stock_out_of_stock, \\\n    stock_request_json_out_of_stock\nfrom ...main import app\n\nclient = TestClient(app)\n\nsales_route = \"/api/v1/sales\"\n\n\ndef setup_module(module):\n    configure_test_database(app)\n\n\ndef setup_function(module):\n    clear_database()\n\n\ndef test_create_sale(car_json, stock_request_json, seller_json, buyer_json, sale_request_json, sale_response_json):\n    ''' Create a sale with success '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    insert_into_buyers(buyer_json)\n    insert_into_sellers(seller_json)\n\n    response = client.post(sales_route + \"/\", json=sale_request_json)\n    assert response.status_code == 201\n    sale_response_json[\"created_at\"] = response.json()[\"created_at\"]\n    assert response.json() == sale_response_json\n    db_stock = read_stock_by_id(stock_request_json[\"id\"])\n    assert (stock_request_json[\"quantity\"] - 1) == db_stock[\"quantity\"]\n\n\ndef test_read_sale(car_json, stock_request_json, seller_json, buyer_json, sale_request_json, sale_response_json):\n    ''' Read a sale with success '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    insert_into_buyers(buyer_json)\n    insert_into_sellers(seller_json)\n    insert_into_sales(sale_request_json)\n    request_url = sales_route + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    sale_response_json[\"created_at\"] = response.json()[\"created_at\"]\n    assert response.json() == sale_response_json\n\n\ndef test_read_sales(car_json, stock_request_json, seller_json, buyer_json, sale_request_json, sale_response_json):\n    ''' Read all sales paginated with success '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    insert_into_buyers(buyer_json)\n    insert_into_sellers(seller_json)\n    insert_into_sales(sale_request_json)\n    request_url = sales_route + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    sale_response_json[\"created_at\"] = response.json()[0][\"created_at\"]\n    assert response.json() == [sale_response_json]\n\n\ndef test_delete_sale(car_json, stock_request_json, seller_json, buyer_json, sale_request_json):\n    ''' Delete a sale with success '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    insert_into_buyers(buyer_json)\n    insert_into_sellers(seller_json)\n    insert_into_sales(sale_request_json)\n    request_url = sales_route + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 200\n    assert response.json() == True\n\n\ndef test_read_sale_not_found(sale_not_found_error):\n    ''' Read a sale when not found '''\n    request_url = sales_route + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 404\n    assert response.json() == sale_not_found_error\n\n\ndef test_read_sales_not_found():\n    ''' Read all sales paginated when not found '''\n    request_url = sales_route + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == []\n\n\ndef test_delete_sale_not_found(sale_not_found_error):\n    ''' Delete a sale when not exists '''\n    request_url = sales_route + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 404\n    assert response.json() == sale_not_found_error\n\n\ndef test_create_sale_car_not_found(stock_request_json, seller_json, buyer_json, sale_request_json, car_not_found_error):\n    ''' Create a sale when car not found  '''\n    insert_into_stocks(stock_request_json)\n    insert_into_buyers(buyer_json)\n    insert_into_sellers(seller_json)\n\n    response = client.post(sales_route + \"/\", json=sale_request_json)\n    assert response.status_code == 404\n    assert response.json() == car_not_found_error\n\n\ndef test_create_sale_buyer_not_found(car_json, stock_request_json, seller_json, sale_request_json,\n                                     buyer_not_found_error):\n    ''' Create a sale when buyer not found  '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    insert_into_sellers(seller_json)\n\n    response = client.post(sales_route + \"/\", json=sale_request_json)\n    assert response.status_code == 404\n    assert response.json() == buyer_not_found_error\n\n\ndef test_create_sale_seller_not_found(car_json, stock_request_json, buyer_json, sale_request_json,\n                                      seller_not_found_error):\n    ''' Create a sale when seller not found '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    insert_into_buyers(buyer_json)\n\n    response = client.post(sales_route + \"/\", json=sale_request_json)\n    assert response.status_code == 404\n    assert response.json() == seller_not_found_error\n\n\ndef test_create_sale_stock_not_found(car_json, seller_json, buyer_json, sale_request_json, stock_not_found_error):\n    ''' Create a sale when stock not found '''\n    insert_into_cars(car_json)\n    insert_into_buyers(buyer_json)\n    insert_into_sellers(seller_json)\n\n    response = client.post(sales_route + \"/\", json=sale_request_json)\n    assert response.status_code == 404\n    assert response.json() == stock_not_found_error\n\n\ndef test_create_sale_out_of_stock(car_json, seller_json, buyer_json, stock_request_json_out_of_stock, sale_request_json,\n                                  stock_out_of_stock):\n    ''' Create a sale when stock has no quantity available  '''\n    insert_into_cars(car_json)\n    insert_into_buyers(buyer_json)\n    insert_into_sellers(seller_json)\n    insert_into_stocks(stock_request_json_out_of_stock)\n\n    response = client.post(sales_route + \"/\", json=sale_request_json)\n    assert response.status_code == 422\n    assert response.json() == stock_out_of_stock\n\n\ndef test_create_sale_all_not_found(sale_request_json, sale_all_not_found_error):\n    ''' Create a sale when stock has no quantity available  '''\n    response = client.post(sales_route + \"/\", json=sale_request_json)\n    assert response.status_code == 404\n    assert response.json() == sale_all_not_found_error\n"}
{"type": "test_file", "path": "app/test/test_api/test_sellers.py", "content": "from fastapi.testclient import TestClient\n\nfrom ..base_insertion import insert_into_sellers\nfrom ..database_test import configure_test_database, clear_database\nfrom ..templates.seller_tempĺates import seller_json, seller_not_found_error\nfrom ...main import app\n\nclient = TestClient(app)\n\nsellers_route = \"/api/v1/sellers\"\n\n\ndef setup_module(module):\n    configure_test_database(app)\n\n\ndef setup_function(module):\n    clear_database()\n\n\ndef test_create_seller(seller_json):\n    ''' Create a seller with success '''\n    response = client.post(sellers_route + \"/\", json=seller_json)\n    assert response.status_code == 201\n    assert response.json() == seller_json\n\n\ndef test_read_seller(seller_json):\n    ''' Read a seller with success '''\n    insert_into_sellers(seller_json)\n    request_url = sellers_route + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == seller_json\n\n\ndef test_read_seller_by_cpf(seller_json):\n    ''' Read a seller by cpf with success '''\n    insert_into_sellers(seller_json)\n    request_url = sellers_route + \"/cpf/69285717640\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == seller_json\n\n\ndef test_read_sellers(seller_json):\n    ''' Read all sellers paginated with success '''\n    insert_into_sellers(seller_json)\n    request_url = sellers_route + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == [seller_json]\n\n\ndef test_delete_seller(seller_json):\n    ''' Delete a seller with success '''\n    insert_into_sellers(seller_json)\n    request_url = sellers_route + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 200\n    assert response.json() == True\n\n\ndef test_read_seller_not_found(seller_not_found_error):\n    ''' Read a seller when not found '''\n    request_url = sellers_route + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 404\n    assert response.json() == seller_not_found_error\n\n\ndef test_read_seller_by_cpf(seller_not_found_error):\n    ''' Read a seller by cpf when not found '''\n    request_url = sellers_route + \"/cpf/69285717640\"\n    response = client.get(request_url)\n    assert response.status_code == 404\n    assert response.json() == seller_not_found_error\n\n\ndef test_read_sellers_not_found():\n    ''' Read all sellers paginated when not found '''\n    request_url = sellers_route + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == []\n\n\ndef test_delete_seller_not_found(seller_not_found_error):\n    ''' Delete a seller when not exists '''\n    request_url = sellers_route + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 404\n    assert response.json() == seller_not_found_error\n"}
{"type": "test_file", "path": "app/test/test_api/test_stocks.py", "content": "from fastapi.testclient import TestClient\n\nfrom ..base_insertion import insert_into_stocks, insert_into_cars\nfrom ..database_test import configure_test_database, clear_database\nfrom ..templates.car_tempĺates import car_json, car_not_found_error\nfrom ..templates.stock_tempĺates import stock_request_json, stock_response_json, stock_not_found_error, \\\n    stock_already_exist\nfrom ...main import app\n\nclient = TestClient(app)\n\nstocks_route = \"/api/v1/stocks\"\n\n\ndef setup_module(module):\n    configure_test_database(app)\n\n\ndef setup_function(module):\n    clear_database()\n\n\ndef test_create_stock(car_json, stock_request_json, stock_response_json):\n    ''' Create a stock with success '''\n    insert_into_cars(car_json)\n    response = client.post(stocks_route + \"/\", json=stock_request_json)\n    assert response.status_code == 201\n    assert response.json() == stock_response_json\n\n\ndef test_read_stock(car_json, stock_request_json, stock_response_json):\n    ''' Read a stock with success '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    request_url = stocks_route + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == stock_response_json\n\n\ndef test_read_stock_by_car(car_json, stock_request_json, stock_response_json):\n    ''' Read a stock with success '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    request_url = stocks_route + \"/cars/1\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == stock_response_json\n\n\ndef test_read_stocks(car_json, stock_request_json, stock_response_json):\n    ''' Read all stocks paginated with success '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    request_url = stocks_route + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == [stock_response_json]\n\n\ndef test_delete_stock(car_json, stock_request_json):\n    ''' Delete a stock with success '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    request_url = stocks_route + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 200\n    assert response.json() == True\n\n\ndef test_create_stock_car_not_found(stock_request_json, stock_response_json, car_not_found_error):\n    ''' Create a stock with success '''\n    response = client.post(stocks_route + \"/\", json=stock_request_json)\n    assert response.status_code == 404\n    assert response.json() == car_not_found_error\n\n\ndef test_create_stock_unique_car_uk_error(car_json, stock_request_json, stock_already_exist):\n    ''' Create a stock with success '''\n    insert_into_cars(car_json)\n    insert_into_stocks(stock_request_json)\n    response = client.post(stocks_route + \"/\", json=stock_request_json)\n    assert response.status_code == 422\n    assert response.json() == stock_already_exist\n\n\ndef test_read_stock_not_found(stock_not_found_error):\n    ''' Read a stock when not found '''\n    request_url = stocks_route + \"/1\"\n    response = client.get(request_url)\n    assert response.status_code == 404\n    assert response.json() == stock_not_found_error\n\n\ndef test_read_stock_by_car(car_json, stock_request_json, stock_response_json, stock_not_found_error):\n    ''' Read a stock with success '''\n    request_url = stocks_route + \"/cars/1\"\n    response = client.get(request_url)\n    assert response.status_code == 404\n    assert response.json() == stock_not_found_error\n\n\ndef test_read_stocks_not_found():\n    ''' Read all stocks paginated when not found '''\n    request_url = stocks_route + \"?skip=0&limit=100\"\n    response = client.get(request_url)\n    assert response.status_code == 200\n    assert response.json() == []\n\n\ndef test_delete_stock_not_found(stock_not_found_error):\n    ''' Delete a stock when not exists '''\n    request_url = stocks_route + \"/1\"\n    response = client.delete(request_url)\n    assert response.status_code == 404\n    assert response.json() == stock_not_found_error\n"}
{"type": "test_file", "path": "app/test/test_jwt.py", "content": "from datetime import datetime, timedelta\nfrom typing import Optional\n\nimport jwt\n\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\n\nALGORITHM = \"HS256\"\n\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\ndef decode(token):\n    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n    username: str = payload.get(\"sub\")\n    return username\n\n\ndef test_create_token():\n    user = {\"sub\": \"sham\"}\n    token = create_access_token(user)\n    assert decode(token) == \"sham\"\n"}
{"type": "source_file", "path": "app/main.py", "content": "from fastapi import Depends, FastAPI, Request, Response\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom starlette.exceptions import HTTPException\n\nfrom .src.config import API_PREFIX, ALLOWED_HOSTS\nfrom .src.database import engine, SessionLocal, Base\nfrom .src.dependencies import get_token_header\nfrom .src.internal import admin\nfrom .src.routers.api import router as router_api\nfrom .src.routers.handlers.http_error import http_error_handler\n\n\n###\n# Main application file\n###\n\ndef get_application() -> FastAPI:\n    ''' Configure, start and return the application '''\n\n    ## Start FastApi App \n    application = FastAPI()\n\n    ## Generate database tables\n    Base.metadata.create_all(bind=engine)\n\n    ## Mapping api routes\n    application.include_router(router_api, prefix=API_PREFIX)\n\n    ## Add exception handlers\n    application.add_exception_handler(HTTPException, http_error_handler)\n\n    ## Allow cors\n    application.add_middleware(\n        CORSMiddleware,\n        allow_origins=ALLOWED_HOSTS or [\"*\"],\n        allow_credentials=True,\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n    )\n\n    ## Example of admin route\n    application.include_router(\n        admin.router,\n        prefix=\"/admin\",\n        tags=[\"admin\"],\n        dependencies=[Depends(get_token_header)],\n        responses={418: {\"description\": \"I'm a teapot\"}},\n    )\n\n    return application\n\n\napp = get_application()\n\n\n@app.middleware(\"http\")\nasync def db_session_middleware(request: Request, call_next):\n    '''\n    The middleware we'll add (just a function) will create\n    a new SQLAlchemy SessionLocal for each request, add it to\n    the request and then close it once the request is finished.\n    '''\n    response = Response(\"Internal server error\", status_code=500)\n    try:\n        request.state.db = SessionLocal()\n        response = await call_next(request)\n    finally:\n        request.state.db.close()\n    return response\n"}
{"type": "source_file", "path": "app/resources/strings.py", "content": "###\n# Centralize response messages\n###\n\n# Errors does not exist\nCAR_DOES_NOT_EXIST_ERROR = \"car does not exist\"\nSTOCK_DOES_NOT_EXIST_ERROR = \"stock does not exist\"\nBUYER_DOES_NOT_EXIST_ERROR = \"buyer does not exist\"\nSELLER_DOES_NOT_EXIST_ERROR = \"seller does not exist\"\nSALES_DOES_NOT_EXIST_ERROR = \"sale does not exist\"\nUSER_DOES_NOT_EXIST_ERROR = \"user does not exist\"\n\n# Errors already exists\nSTOCK_ALREADY_EXISTS_ERROR = \"stock already exist\"\n\n# Errors Out of Stock\nSTOCK_OUT_OF_STOCK_ERROR = \"out of stock\"\n"}
{"type": "source_file", "path": "app/resources/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/dependencies.py", "content": "import jwt\nfrom fastapi import Header, HTTPException\n\nfrom .database import SessionLocal\n\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\n\nALGORITHM = \"HS256\"\n\n\ndef decode(token):\n    striped_token = token.replace(\"Bearer \", \"\")\n    return jwt.decode(token, \"secret\", algorithm=\"HS256\")\n\n\ndef encode():\n    return jwt.encode({\"some\": \"payload\"}, \"secret\", algorithm=\"HS256\")\n\n\ndef get_db():\n    ''' Method for configure database '''\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\nasync def get_token_header(x_token: str = Header(...)):\n    ''' Exemplo of header validation dependency '''\n    payload = decode(x_token)\n    username: str = payload.get(\"email\")\n    if username == None:\n        raise HTTPException(status_code=403, detail=\"Unauthorized\")\n\n\nasync def get_query_token(token: str):\n    ''' Exemplo of header validation dependency '''\n    if token != \"jessica\":\n        raise HTTPException(status_code=400, detail=\"No Jessica token provided\")\n"}
{"type": "source_file", "path": "app/src/domain/buyer/models.py", "content": "from sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom ...database import Base\n\n\nclass Buyer(Base):\n    __tablename__ = \"buyers\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String)\n    phone = Column(String)\n    address_cep = Column(String)\n    address_public_place = Column(String)\n    address_city = Column(String)\n    address_district = Column(String)\n    address_state = Column(String)\n\n    sale = relationship(\"Sale\", back_populates=\"buyer\")\n"}
{"type": "source_file", "path": "app/src/config.py", "content": "from typing import List\n\nfrom starlette.config import Config\nfrom starlette.datastructures import CommaSeparatedStrings\n\n###\n# Properties configurations\n###\n\nAPI_PREFIX = \"/api\"\n\nJWT_TOKEN_PREFIX = \"Authorization\"\n\nconfig = Config(\".env\")\n\nROUTE_PREFIX_V1 = \"/v1\"\n\nALLOWED_HOSTS: List[str] = config(\n    \"ALLOWED_HOSTS\",\n    cast=CommaSeparatedStrings,\n    default=\"\",\n)\n"}
{"type": "source_file", "path": "app/src/domain/buyer/schemas.py", "content": "from pydantic import BaseModel\n\n\nclass Address(BaseModel):\n    cep: str\n    public_place: str\n    city: str\n    district: str\n    state: str\n\n\nclass BuyerBase(BaseModel):\n    id: int\n\n\nclass BuyerCreate(BaseModel):\n    name: str\n    address: Address\n    phone: str\n\n\nclass BuyerSimpleResponse(BaseModel):\n    id: int\n    name: str\n    phone: str\n    address_cep: str\n    address_public_place: str\n    address_city: str\n    address_district: str\n    address_state: str\n\n\nclass Buyer(BuyerBase):\n    name: str\n    phone: str\n    address: Address\n\n    class Config:\n        orm_mode = True\n"}
{"type": "source_file", "path": "app/src/domain/buyer/service.py", "content": "from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef create_buyer(db: Session, buyer: schemas.BuyerCreate):\n    buyer_dict = buyer.dict()\n    address_dict = buyer_dict[\"address\"]\n\n    # FIXME: Less code could be use with something like:\n    # FIXME: db_buyer = models.Buyer(**db_buyer.model_dump(exclude={'XXX', 'YYY'}))\n    db_buyer = models.Buyer(\n        name=buyer_dict[\"name\"],\n        phone=buyer_dict[\"phone\"],\n        address_cep=address_dict[\"cep\"],\n        address_public_place=address_dict[\"public_place\"],\n        address_city=address_dict[\"city\"],\n        address_district=address_dict[\"district\"],\n        address_state=address_dict[\"state\"],\n    )\n\n    db.add(db_buyer)\n    db.commit()\n    db.refresh(db_buyer)\n    return db_buyer\n\n\ndef get_buyer(db: Session, buyer_id: int):\n    return db.query(models.Buyer).filter(models.Buyer.id == buyer_id).first()\n\n\ndef get_buyers(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Buyer).offset(skip).limit(limit).all()\n\n\ndef remove_buyer(db: Session, db_buyer: models.Buyer):\n    db.delete(db_buyer)\n    db.commit()\n    return True\n"}
{"type": "source_file", "path": "app/src/domain/car/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/domain/car/models.py", "content": "from sqlalchemy import Column, Integer, String, UniqueConstraint\nfrom sqlalchemy.orm import relationship\n\nfrom ...database import Base\n\n\nclass Car(Base):\n    __tablename__ = \"cars\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    year = Column(Integer, index=True)\n    brand = Column(String, index=True)\n\n    stock = relationship(\"Stock\", back_populates=\"car\")\n    sale = relationship(\"Sale\", back_populates=\"car\")\n    UniqueConstraint('year', 'name', 'brand', name='cars_year_name_brand_uk_idx1')\n"}
{"type": "source_file", "path": "app/src/domain/car/repository.py", "content": "from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef create_car(db: Session, car: schemas.CarCreate):\n    db_car = models.Car(**car.dict())\n    db.add(db_car)\n    db.commit()\n    db.refresh(db_car)\n    return db_car\n\n\ndef get_car(db: Session, car_id: int):\n    return db.query(models.Car).filter(models.Car.id == car_id).first()\n\n\ndef get_cars(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Car).offset(skip).limit(limit).all()\n\n\ndef remove_car(db: Session, db_car: models.Car):\n    db.delete(db_car)\n    db.commit()\n    return True\n"}
{"type": "source_file", "path": "app/src/domain/car/schemas.py", "content": "from pydantic import BaseModel\n\n\nclass CarBase(BaseModel):\n    id: int\n\n\nclass CarCreate(BaseModel):\n    name: str\n    year: int\n    brand: str\n\n\nclass Car(CarBase):\n    name: str\n    year: int\n    brand: str\n\n    class Config:\n        orm_mode = True\n"}
{"type": "source_file", "path": "app/src/domain/car/service.py", "content": "from fastapi import HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom . import repository, schemas\nfrom ....resources.strings import CAR_DOES_NOT_EXIST_ERROR\n\n\ndef create_car(db: Session, car: schemas.CarCreate):\n    return repository.create_car(db, car);\n\n\ndef get_car(db: Session, car_id: int):\n    db_car = repository.get_car(db, car_id=car_id)\n    if db_car is None:\n        raise HTTPException(status_code=404, detail=CAR_DOES_NOT_EXIST_ERROR)\n    return repository.get_car(db, car_id);\n\n\ndef get_cars(db: Session, skip: int = 0, limit: int = 100):\n    return repository.get_cars(db, skip, limit);\n\n\ndef remove_car(db: Session, car_id: int):\n    db_car = get_car(db, car_id=car_id)\n    if db_car is None:\n        raise HTTPException(status_code=404, detail=CAR_DOES_NOT_EXIST_ERROR)\n    return repository.remove_car(db, db_car)\n"}
{"type": "source_file", "path": "app/src/domain/sale/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/domain/sale/schemas.py", "content": "from datetime import datetime\n\nfrom pydantic import BaseModel\n\nfrom ..buyer.schemas import Buyer\nfrom ..car.schemas import Car\nfrom ..seller.schemas import Seller\n\n\nclass SaleBase(BaseModel):\n    id: int\n\n\nclass SaleCreate(BaseModel):\n    car_id: int\n    seller_id: int\n    buyer_id: int\n\n\nclass SaleCreateResponse(SaleCreate):\n    id: int\n\n\nclass Sale(SaleBase):\n    car: Car\n    buyer: Buyer\n    seller: Seller\n    created_at: datetime\n\n    class Config:\n        orm_mode = True\n"}
{"type": "source_file", "path": "app/src/domain/sale/service.py", "content": "from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef create_sale(db: Session, sale: schemas.SaleCreate):\n    db_sale = models.Sale(**sale.dict())\n    db.add(db_sale)\n    db.commit()\n    db.refresh(db_sale)\n    return db_sale\n\n\ndef get_sale(db: Session, sale_id: int):\n    return db.query(models.Sale).filter(models.Sale.id == sale_id).first()\n\n\ndef get_sales(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Sale).offset(skip).limit(limit).all()\n\n\ndef remove_sale(db: Session, db_sale: models.Sale):\n    db.delete(db_sale)\n    db.commit()\n    return True\n"}
{"type": "source_file", "path": "app/src/domain/seller/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/domain/seller/service.py", "content": "from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef create_seller(db: Session, seller: schemas.SellerCreate):\n    db_seller = models.Seller(**seller.dict())\n    db.add(db_seller)\n    db.commit()\n    db.refresh(db_seller)\n    return db_seller\n\n\ndef get_seller(db: Session, seller_id: int):\n    return db.query(models.Seller).filter(models.Seller.id == seller_id).first()\n\n\ndef get_sellers(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Seller).offset(skip).limit(limit).all()\n\n\ndef remove_seller(db: Session, db_seller: models.Seller):\n    db.delete(db_seller)\n    db.commit()\n    return True\n\n\ndef get_by_cpf(db: Session, seller_cpf: str):\n    return db.query(models.Seller).filter(models.Seller.cpf == seller_cpf).first()\n"}
{"type": "source_file", "path": "app/src/domain/buyer/__init__.py", "content": ""}
{"type": "source_file", "path": "app/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/domain/seller/models.py", "content": "from sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom ...database import Base\n\n\nclass Seller(Base):\n    __tablename__ = \"sellers\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String)\n    cpf = Column(String, index=True)\n    phone = Column(String)\n\n    sale = relationship(\"Sale\", back_populates=\"seller\")\n"}
{"type": "source_file", "path": "app/src/database.py", "content": "import os\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\n###\n# Database Configuration\n###\n\nSQLALCHEMY_DATABASE_URL = \"postgresql://skatesham:skatesham-github@localhost/skatesham\"\n\nengine = create_engine(\n    os.getenv(\"DB_URL\", SQLALCHEMY_DATABASE_URL)\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n"}
{"type": "source_file", "path": "app/src/domain/sale/models.py", "content": "from datetime import datetime\n\nfrom sqlalchemy import Column, ForeignKey, Integer, DateTime\nfrom sqlalchemy.orm import relationship\n\nfrom ...database import Base\n\n\nclass Sale(Base):\n    __tablename__ = \"sales\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    car_id = Column(Integer, ForeignKey(\"cars.id\"))\n    buyer_id = Column(Integer, ForeignKey(\"buyers.id\"))\n    seller_id = Column(Integer, ForeignKey(\"sellers.id\"))\n    created_at = Column(DateTime, default=datetime.utcnow)\n\n    car = relationship(\"Car\", back_populates=\"sale\")\n    buyer = relationship(\"Buyer\", back_populates=\"sale\")\n    seller = relationship(\"Seller\", back_populates=\"sale\")\n"}
{"type": "source_file", "path": "app/src/domain/seller/schemas.py", "content": "from pydantic import BaseModel\n\n\nclass SellerBase(BaseModel):\n    id: int\n\n\nclass SellerCreate(BaseModel):\n    name: str\n    cpf: str\n    phone: str\n\n\nclass Seller(SellerBase):\n    name: str\n    cpf: str\n    phone: str\n\n    class Config:\n        orm_mode = True\n"}
{"type": "source_file", "path": "app/src/routers/converter/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/domain/stock/models.py", "content": "from sqlalchemy import Column, ForeignKey, Integer\nfrom sqlalchemy.orm import relationship\n\nfrom ...database import Base\n\n\nclass Stock(Base):\n    __tablename__ = \"stocks\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    quantity = Column(Integer)\n    car_id = Column(Integer, ForeignKey(\"cars.id\"), unique=True)\n\n    car = relationship(\"Car\", back_populates=\"stock\")\n\n    def hasStock(self, quantity):\n        return self.quantity >= quantity\n\n    def reduce_quantity(self, quantity):\n        self.quantity -= quantity\n"}
{"type": "source_file", "path": "app/src/domain/user/models.py", "content": "from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\n\nfrom ...database import Base\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n\n\nclass Item(Base):\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n"}
{"type": "source_file", "path": "app/src/internal/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/routers/cars.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\n\nfrom ..dependencies import get_db\nfrom ..domain.car import service, schemas\n\nrouter = APIRouter(\n    prefix=\"/cars\",\n    tags=[\"cars\"],\n    dependencies=[],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\n@router.post(\"/\", response_model=schemas.Car, status_code=201)\ndef create_car(car: schemas.CarCreate, db: Session = Depends(get_db)):\n    return service.create_car(db=db, car=car)\n\n\n@router.get(\"/{car_id}\", response_model=schemas.Car)\ndef read_car(car_id: int, db: Session = Depends(get_db)):\n    return service.get_car(db, car_id=car_id)\n\n\n@router.get(\"/\", response_model=List[schemas.Car])\ndef read_cars(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    cars = service.get_cars(db, skip=skip, limit=limit)\n    return cars\n\n\n@router.delete(\"/{car_id}\", response_model=bool)\ndef delete_car(car_id: int, db: Session = Depends(get_db)):\n    return service.remove_car(db, car_id=car_id)\n"}
{"type": "source_file", "path": "app/src/domain/user/schemas.py", "content": "from typing import List, Optional\n\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    title: str\n    description: Optional[str] = None\n\n\nclass ItemCreate(ItemBase):\n    pass\n\n\nclass Item(ItemBase):\n    id: int\n    owner_id: int\n\n    class Config:\n        orm_mode = True\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n    items: List[Item] = []\n\n    class Config:\n        orm_mode = True\n"}
{"type": "source_file", "path": "app/src/routers/converter/sale_converter.py", "content": "from typing import List\n\nfrom . import buyer_converter\nfrom . import car_converter\nfrom . import seller_converter\nfrom ...domain.sale import schemas, models\n\n\ndef convert(db_sale: models.Sale):\n    ''' Customized convertion to response template '''\n    return schemas.Sale(\n        id=db_sale.id,\n        car=car_converter.convert(db_sale.car),\n        seller=seller_converter.convert(db_sale.seller),\n        buyer=buyer_converter.convert(db_sale.buyer),\n        created_at=db_sale.created_at\n    )\n\n\ndef convert_many(db_sales: List):\n    ''' Convert list customized '''\n    return [convert(db_sale) for db_sale in db_sales]\n"}
{"type": "source_file", "path": "app/src/domain/stock/schemas.py", "content": "from pydantic import BaseModel\n\nfrom ..car.schemas import Car\n\n\nclass StockBase(BaseModel):\n    id: int\n\n\nclass StockCreate(BaseModel):\n    car_id: int\n    quantity: int\n\n\nclass Stock(StockBase):\n    car: Car\n    quantity: int\n\n    class Config:\n        orm_mode = True\n"}
{"type": "source_file", "path": "app/src/routers/auth.py", "content": "from datetime import datetime, timedelta\nfrom typing import Optional\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom ..dependencies import get_db\nfrom ..domain.user import service, schemas\n\nSECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\n\nALGORITHM = \"HS256\"\n\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    data[\"hashed_password\"] = \"\"\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\nrouter = APIRouter(tags=[\"auth\"])\n\n\n@router.post(\"/login/\", response_model=dict)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = service.get_user_by_email(db, email=user.email)\n    if db_user and user.password == db_user.hashed_password:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return {\"Authorization\": \"Bearer \" + create_access_token(user.dict())}\n"}
{"type": "source_file", "path": "app/src/domain/stock/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/domain/user/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/routers/items.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends\nfrom sqlalchemy.orm import Session\n\nfrom ..dependencies import get_token_header, get_db\nfrom ..domain.user import service, schemas\n\nrouter = APIRouter(\n    prefix=\"/items\",\n    tags=[\"items\"],\n    dependencies=[Depends(get_token_header)],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\n@router.get(\"/items/\", response_model=List[schemas.Item])\ndef read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    items = service.get_items(db, skip=skip, limit=limit)\n    return items\n"}
{"type": "source_file", "path": "app/src/routers/buyers.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom .converter.buyer_converter import convert, convert_many\nfrom ..dependencies import get_db\nfrom ..domain.buyer import service, schemas\nfrom ...resources.strings import BUYER_DOES_NOT_EXIST_ERROR\n\nrouter = APIRouter(\n    prefix=\"/buyers\",\n    tags=[\"buyers\"],\n    dependencies=[],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\n@router.post(\"/\", response_model=schemas.Buyer, status_code=201)\ndef create_buyer(buyer: schemas.BuyerCreate, db: Session = Depends(get_db)):\n    # FIXME: This conversion is an Error... Fast API can convert it automatically.\n    return convert(service.create_buyer(db=db, buyer=buyer))\n\n\n@router.get(\"/{buyer_id}\", response_model=schemas.Buyer)\ndef read_buyer(buyer_id: int, db: Session = Depends(get_db)):\n    db_buyer = service.get_buyer(db, buyer_id=buyer_id)\n    if db_buyer is None:\n        raise HTTPException(status_code=404, detail=BUYER_DOES_NOT_EXIST_ERROR)\n    return convert(db_buyer)\n\n\n@router.get(\"/\", response_model=List[schemas.Buyer])\ndef read_buyers(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    buyers = service.get_buyers(db, skip=skip, limit=limit)\n    return convert_many(buyers)\n\n\n@router.delete(\"/{buyer_id}\", response_model=bool)\ndef delete_buyer(buyer_id: int, db: Session = Depends(get_db)):\n    db_buyer = service.get_buyer(db, buyer_id=buyer_id)\n    if db_buyer is None:\n        raise HTTPException(status_code=404, detail=BUYER_DOES_NOT_EXIST_ERROR)\n    return service.remove_buyer(db, db_buyer=db_buyer)\n"}
{"type": "source_file", "path": "app/src/routers/handlers/http_error.py", "content": "from fastapi import HTTPException\nfrom starlette.requests import Request\nfrom starlette.responses import JSONResponse\n\n\n###\n# Exception Handlers for filter exception error and personalize messages\n###\n\nasync def http_error_handler(_: Request, exc: HTTPException) -> JSONResponse:\n    ''' Personalize response when HTTPException '''\n    return JSONResponse({\"errors\": [exc.detail]}, status_code=exc.status_code)\n"}
{"type": "source_file", "path": "app/src/domain/user/service.py", "content": "from sqlalchemy.orm import Session\n\nfrom . import models, schemas\n\n\ndef get_user(db: Session, user_id: int):\n    return db.query(models.User).filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\n\ndef get_users(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.User).offset(skip).limit(limit).all()\n\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n\ndef get_items(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Item).offset(skip).limit(limit).all()\n\n\ndef create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n    db_item = models.Item(**item.dict(), owner_id=user_id)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n"}
{"type": "source_file", "path": "app/src/internal/admin.py", "content": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.post(\"/\")\nasync def update_admin():\n    ''' Example route '''\n    return {\"message\": \"Admin getting schwifty\"}\n"}
{"type": "source_file", "path": "app/src/routers/converter/buyer_converter.py", "content": "from typing import List\n\nfrom ...domain.buyer import schemas, models\n\n\ndef convert(db_buyer: models.Buyer):\n    ''' Customized convertion to response template '''\n    return schemas.Buyer(\n        id=db_buyer.id,\n        name=db_buyer.name,\n        phone=db_buyer.phone,\n        address=schemas.Address(\n            cep=db_buyer.address_cep,\n            public_place=db_buyer.address_public_place,\n            city=db_buyer.address_city,\n            district=db_buyer.address_district,\n            state=db_buyer.address_state,\n        )\n    )\n\n\ndef convert_many(db_buyers: List):\n    ''' Convert list customized '''\n    return [convert(db_buyer) for db_buyer in db_buyers]\n"}
{"type": "source_file", "path": "app/src/routers/api.py", "content": "from fastapi import APIRouter\n\nfrom . import items, users, cars, stocks, sellers, buyers, sales, auth\nfrom ..config import ROUTE_PREFIX_V1\n\nrouter = APIRouter()\n\n\ndef include_api_routes():\n    ''' Include to router all api rest routes with version prefix '''\n    router.include_router(auth.router)\n    router.include_router(users.router, prefix=ROUTE_PREFIX_V1)\n    router.include_router(items.router, prefix=ROUTE_PREFIX_V1)\n    router.include_router(cars.router, prefix=ROUTE_PREFIX_V1)\n    router.include_router(stocks.router, prefix=ROUTE_PREFIX_V1)\n    router.include_router(sellers.router, prefix=ROUTE_PREFIX_V1)\n    router.include_router(buyers.router, prefix=ROUTE_PREFIX_V1)\n    router.include_router(sales.router, prefix=ROUTE_PREFIX_V1)\n\n\ninclude_api_routes()\n"}
{"type": "source_file", "path": "app/src/routers/converter/car_converter.py", "content": "from typing import List\n\nfrom ...domain.car import schemas, models\n\n\ndef convert(db_car: models.Car):\n    ''' Customized convertion to response template '''\n    return schemas.Car(\n        id=db_car.id,\n        name=db_car.name,\n        year=db_car.year,\n        brand=db_car.brand\n    )\n\n\ndef convert_many(db_cars: List):\n    ''' Convert list customized '''\n    return [convert(db_car) for db_car in db_cars]\n"}
{"type": "source_file", "path": "app/src/routers/converter/seller_converter.py", "content": "from typing import List\n\nfrom ...domain.seller import schemas, models\n\n\ndef convert(db_seller: models.Seller):\n    ''' Customized convertion to response template '''\n    return schemas.Seller(\n        id=db_seller.id,\n        name=db_seller.name,\n        cpf=db_seller.cpf,\n        phone=db_seller.phone)\n\n\ndef convert_many(db_sellers: List):\n    ''' Convert list customized '''\n    return [convert(db_seller) for db_seller in db_sellers]\n"}
{"type": "source_file", "path": "app/src/routers/sales.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom .converter import sale_converter\nfrom ..dependencies import get_db\nfrom ..domain.buyer import service as buyer_service\nfrom ..domain.car import repository as car_repository\nfrom ..domain.sale import service, schemas\nfrom ..domain.seller import service as seller_service\nfrom ..domain.stock import service as stock_service\nfrom ...resources.strings import BUYER_DOES_NOT_EXIST_ERROR\nfrom ...resources.strings import CAR_DOES_NOT_EXIST_ERROR\nfrom ...resources.strings import SALES_DOES_NOT_EXIST_ERROR\nfrom ...resources.strings import SELLER_DOES_NOT_EXIST_ERROR\nfrom ...resources.strings import STOCK_DOES_NOT_EXIST_ERROR\n\nrouter = APIRouter(\n    prefix=\"/sales\",\n    tags=[\"sales\"],\n    dependencies=[],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\n@router.post(\"/\", response_model=schemas.Sale, status_code=201)\ndef create_sale(sale: schemas.SaleCreate, db: Session = Depends(get_db)):\n    errors = []\n\n    if car_repository.get_car(db, car_id=sale.car_id) is None:\n        errors.append(CAR_DOES_NOT_EXIST_ERROR)\n    if buyer_service.get_buyer(db, buyer_id=sale.buyer_id) is None:\n        errors.append(BUYER_DOES_NOT_EXIST_ERROR)\n    if seller_service.get_seller(db, seller_id=sale.seller_id) is None:\n        errors.append(SELLER_DOES_NOT_EXIST_ERROR)\n    if stock_service.get_stock_by_car(db, car_id=sale.car_id) is None:\n        errors.append(STOCK_DOES_NOT_EXIST_ERROR)\n    if len(errors) > 0:\n        raise HTTPException(status_code=404, detail=\", \".join(errors))\n\n    stock_service.buy_car_from_stock(db, car_id=sale.car_id, quantity=1)\n    db_sale = service.create_sale(db=db, sale=sale)\n    return sale_converter.convert(db_sale)\n\n\n@router.get(\"/{sale_id}\", response_model=schemas.Sale)\ndef read_sale(sale_id: int, db: Session = Depends(get_db)):\n    db_sale = service.get_sale(db, sale_id=sale_id)\n    if db_sale is None:\n        raise HTTPException(status_code=404, detail=SALES_DOES_NOT_EXIST_ERROR)\n    return sale_converter.convert(db_sale)\n\n\n@router.get(\"/\", response_model=List[schemas.Sale])\ndef read_sales(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    sales = service.get_sales(db, skip=skip, limit=limit)\n    return sale_converter.convert_many(sales)\n\n\n@router.delete(\"/{sale_id}\", response_model=bool)\ndef delete_sale(sale_id: int, db: Session = Depends(get_db)):\n    db_sale = service.get_sale(db, sale_id=sale_id)\n    if db_sale is None:\n        raise HTTPException(status_code=404, detail=SALES_DOES_NOT_EXIST_ERROR)\n    return service.remove_sale(db, db_sale=db_sale)\n"}
{"type": "source_file", "path": "app/src/domain/stock/service.py", "content": "from fastapi import HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom . import models, schemas\nfrom ....resources.strings import STOCK_OUT_OF_STOCK_ERROR\n\n\ndef create_stock(db: Session, stock: schemas.StockCreate):\n    db_stock = models.Stock(**stock.dict())\n    db.add(db_stock)\n    db.commit()\n    db.refresh(db_stock)\n    return db_stock\n\n\ndef get_stock(db: Session, stock_id: int):\n    return db.query(models.Stock).filter(models.Stock.id == stock_id).first()\n\n\ndef get_stock_by_car(db: Session, car_id: int):\n    return db.query(models.Stock).filter(models.Stock.car_id == car_id).first()\n\n\ndef buy_car_from_stock(db: Session, car_id: int, quantity: int):\n    db_stock = get_stock_by_car(db, car_id=car_id)\n    if not db_stock.hasStock(quantity):\n        raise HTTPException(status_code=422, detail=STOCK_OUT_OF_STOCK_ERROR)\n    db_stock.reduce_quantity(quantity)\n    db.commit()\n    db.refresh(db_stock)\n    return db_stock\n\n\ndef get_stocks(db: Session, skip: int = 0, limit: int = 100):\n    return db.query(models.Stock).offset(skip).limit(limit).all()\n\n\ndef remove_stock(db: Session, db_stock: models.Stock):\n    db.delete(db_stock)\n    db.commit()\n    return True\n"}
{"type": "source_file", "path": "app/src/routers/__init__.py", "content": ""}
{"type": "source_file", "path": "app/src/routers/stocks.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom ..dependencies import get_db\nfrom ..domain.car import service as car_service\nfrom ..domain.stock import service, schemas\nfrom ...resources.strings import CAR_DOES_NOT_EXIST_ERROR\nfrom ...resources.strings import STOCK_ALREADY_EXISTS_ERROR\nfrom ...resources.strings import STOCK_DOES_NOT_EXIST_ERROR\n\nrouter = APIRouter(\n    prefix=\"/stocks\",\n    tags=[\"stocks\"],\n    dependencies=[],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\n@router.post(\"/\", response_model=schemas.Stock, status_code=201)\ndef create_stock(stock: schemas.StockCreate, db: Session = Depends(get_db)):\n    if car_service.get_car(db, car_id=stock.car_id) is None:\n        raise HTTPException(status_code=404, detail=CAR_DOES_NOT_EXIST_ERROR)\n    if service.get_stock_by_car(db, car_id=stock.car_id):\n        raise HTTPException(status_code=422, detail=STOCK_ALREADY_EXISTS_ERROR)\n    return service.create_stock(db=db, stock=stock)\n\n\n@router.get(\"/{stock_id}\", response_model=schemas.Stock)\ndef read_stock(stock_id: int, db: Session = Depends(get_db)):\n    db_stock = service.get_stock(db, stock_id=stock_id)\n    if db_stock is None:\n        raise HTTPException(status_code=404, detail=STOCK_DOES_NOT_EXIST_ERROR)\n    return service.get_stock(db, stock_id=stock_id)\n\n\n@router.get(\"/cars/{car_id}\", response_model=schemas.Stock)\ndef read_stock_by_car(car_id: int, db: Session = Depends(get_db)):\n    db_stock = service.get_stock_by_car(db, car_id=car_id)\n    if db_stock is None:\n        raise HTTPException(status_code=404, detail=STOCK_DOES_NOT_EXIST_ERROR)\n    return service.get_stock_by_car(db, car_id=car_id)\n\n\n@router.get(\"/\", response_model=List[schemas.Stock])\ndef read_stocks(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    return service.get_stocks(db, skip=skip, limit=limit)\n\n\n@router.delete(\"/{stock_id}\", response_model=bool)\ndef delete_stock(stock_id: int, db: Session = Depends(get_db)):\n    db_stock = service.get_stock(db, stock_id=stock_id)\n    if db_stock is None:\n        raise HTTPException(status_code=404, detail=STOCK_DOES_NOT_EXIST_ERROR)\n    return service.remove_stock(db, db_stock=db_stock)\n"}
{"type": "source_file", "path": "app/src/routers/sellers.py", "content": "from typing import List\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\n\nfrom ..dependencies import get_db\nfrom ..domain.seller import service, schemas\nfrom ...resources.strings import SELLER_DOES_NOT_EXIST_ERROR\n\nrouter = APIRouter(\n    prefix=\"/sellers\",\n    tags=[\"sellers\"],\n    dependencies=[],\n    responses={404: {\"description\": \"Not found\"}},\n)\n\n\n@router.post(\"/\", response_model=schemas.Seller, status_code=201)\ndef create_seller(seller: schemas.SellerCreate, db: Session = Depends(get_db)):\n    return service.create_seller(db=db, seller=seller)\n\n\n@router.get(\"/{seller_id}\", response_model=schemas.Seller)\ndef read_seller(seller_id: int, db: Session = Depends(get_db)):\n    db_seller = service.get_seller(db, seller_id=seller_id)\n    if db_seller is None:\n        raise HTTPException(status_code=404, detail=SELLER_DOES_NOT_EXIST_ERROR)\n    return db_seller\n\n\n@router.get(\"/cpf/{seller_cpf}\", response_model=schemas.Seller)\ndef read_seller_by_cpf(seller_cpf: str, db: Session = Depends(get_db)):\n    db_seller = service.get_by_cpf(db, seller_cpf=seller_cpf)\n    if db_seller is None:\n        raise HTTPException(status_code=404, detail=SELLER_DOES_NOT_EXIST_ERROR)\n    return db_seller\n\n\n@router.get(\"/\", response_model=List[schemas.Seller])\ndef read_sellers(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n    sellers = service.get_sellers(db, skip=skip, limit=limit)\n    return sellers\n\n\n@router.delete(\"/{seller_id}\", response_model=bool)\ndef delete_seller(seller_id: int, db: Session = Depends(get_db)):\n    db_seller = service.get_seller(db, seller_id=seller_id)\n    if db_seller is None:\n        raise HTTPException(status_code=404, detail=SELLER_DOES_NOT_EXIST_ERROR)\n    return service.remove_seller(db, db_seller=db_seller)\n"}
