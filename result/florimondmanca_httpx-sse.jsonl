{"repo_info": {"repo_name": "httpx-sse", "repo_owner": "florimondmanca", "repo_url": "https://github.com/florimondmanca/httpx-sse"}}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/test_event_source.py", "content": "from typing import AsyncIterator, Iterator\n\nimport httpx\nimport pytest\n\nfrom httpx_sse import EventSource\n\n# NOTE: the 'whatwg_example*' test cases are inspired by:\n# https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation  # noqa: E501\n\n\ndef test_iter_sse_whatwg_example1() -> None:\n    class Body(httpx.SyncByteStream):\n        def __iter__(self) -> Iterator[bytes]:\n            yield b\"data: YH00\\n\"\n            yield b\"data: +2\\n\"\n            yield b\"data: 10\\n\"\n            yield b\"\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=Body(),\n    )\n\n    events = list(EventSource(response).iter_sse())\n    assert len(events) == 1\n\n    assert events[0].event == \"message\"\n    assert events[0].data == \"YH00\\n+2\\n10\"\n    assert events[0].id == \"\"\n    assert events[0].retry is None\n\n\ndef test_iter_sse_whatwg_example2() -> None:\n    class Body(httpx.SyncByteStream):\n        def __iter__(self) -> Iterator[bytes]:\n            yield b\": test stream\\n\"\n            yield b\"\\n\"\n            yield b\"data: first event\\n\"\n            yield b\"id: 1\\n\"\n            yield b\"\\n\"\n            yield b\"data: second event\\n\"\n            yield b\"id\\n\"\n            yield b\"\\n\"\n            yield b\"data:  third event\\n\"\n            yield b\"\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=Body(),\n    )\n\n    events = list(EventSource(response).iter_sse())\n    assert len(events) == 3\n\n    assert events[0].event == \"message\"\n    assert events[0].data == \"first event\"\n    assert events[0].id == \"1\"\n    assert events[0].retry is None\n\n    assert events[1].event == \"message\"\n    assert events[1].data == \"second event\"\n    assert events[1].id == \"\"\n    assert events[1].retry is None\n\n    assert events[2].event == \"message\"\n    assert events[2].data == \" third event\"\n    assert events[2].id == \"\"\n    assert events[2].retry is None\n\n\ndef test_iter_sse_whatwg_example3() -> None:\n    class Body(httpx.SyncByteStream):\n        def __iter__(self) -> Iterator[bytes]:\n            yield b\"data\\n\"\n            yield b\"\\n\"\n            yield b\"data\\n\"\n            yield b\"data\\n\"\n            yield b\"\\n\"\n            yield b\"data:\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=Body(),\n    )\n\n    events = list(EventSource(response).iter_sse())\n    assert len(events) == 2\n\n    assert events[0].event == \"message\"\n    assert events[0].data == \"\"\n    assert events[0].id == \"\"\n    assert events[0].retry is None\n\n    assert events[1].event == \"message\"\n    assert events[1].data == \"\\n\"\n    assert events[1].id == \"\"\n    assert events[1].retry is None\n\n\ndef test_iter_sse_whatwg_example4() -> None:\n    class Body(httpx.SyncByteStream):\n        def __iter__(self) -> Iterator[bytes]:\n            yield b\"data:test\\n\"\n            yield b\"\\n\"\n            yield b\"data: test\\n\"\n            yield b\"\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=Body(),\n    )\n\n    events = list(EventSource(response).iter_sse())\n    assert len(events) == 2\n\n    assert events[0].event == \"message\"\n    assert events[0].data == \"test\"\n    assert events[0].id == \"\"\n    assert events[0].retry is None\n\n    assert events[1].event == \"message\"\n    assert events[1].data == \"test\"\n    assert events[1].id == \"\"\n    assert events[1].retry is None\n\n\ndef test_iter_sse_event() -> None:\n    class Body(httpx.SyncByteStream):\n        def __iter__(self) -> Iterator[bytes]:\n            yield b\"event: logline\\n\"\n            yield b\"data: New user connected\\n\"\n            yield b\"\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=Body(),\n    )\n\n    events = list(EventSource(response).iter_sse())\n    assert len(events) == 1\n\n    assert events[0].event == \"logline\"\n    assert events[0].data == \"New user connected\"\n    assert events[0].id == \"\"\n    assert events[0].retry is None\n\n\ndef test_iter_sse_id_null() -> None:\n    class Body(httpx.SyncByteStream):\n        def __iter__(self) -> Iterator[bytes]:\n            yield b\"data: test\\n\"\n            yield b\"id: 123\\0\\n\"\n            yield b\"\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=Body(),\n    )\n\n    events = list(EventSource(response).iter_sse())\n    assert len(events) == 1\n\n    assert events[0].event == \"message\"\n    assert events[0].data == \"test\"\n    assert events[0].id == \"\"\n    assert events[0].retry is None\n\n\ndef test_iter_sse_id_retry() -> None:\n    class Body(httpx.SyncByteStream):\n        def __iter__(self) -> Iterator[bytes]:\n            yield b\"retry: 10000\\n\"\n            yield b\"\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=Body(),\n    )\n\n    events = list(EventSource(response).iter_sse())\n    assert len(events) == 1\n\n    assert events[0].event == \"message\"\n    assert events[0].data == \"\"\n    assert events[0].id == \"\"\n    assert events[0].retry == 10000\n\n\ndef test_iter_sse_id_retry_invalid() -> None:\n    class Body(httpx.SyncByteStream):\n        def __iter__(self) -> Iterator[bytes]:\n            yield b\"retry: 1667a\\n\"\n            yield b\"\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=Body(),\n    )\n\n    events = list(EventSource(response).iter_sse())\n    assert len(events) == 0\n\n\ndef test_iter_sse_unknown_field() -> None:\n    class Body(httpx.SyncByteStream):\n        def __iter__(self) -> Iterator[bytes]:\n            yield b\"something: ignore\\n\"\n            yield b\"\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=Body(),\n    )\n\n    events = list(EventSource(response).iter_sse())\n    assert len(events) == 0\n\n\n@pytest.mark.asyncio\nasync def test_aiter_sse() -> None:\n    class AsyncBody(httpx.AsyncByteStream):\n        async def __aiter__(self) -> AsyncIterator[bytes]:\n            yield b\"data: YH00\\n\"\n            yield b\"data: +2\\n\"\n            yield b\"data: 10\\n\"\n            yield b\"\\n\"\n\n    response = httpx.Response(\n        200,\n        headers={\"content-type\": \"text/event-stream\"},\n        stream=AsyncBody(),\n    )\n\n    events = [sse async for sse in EventSource(response).aiter_sse()]\n    assert len(events) == 1\n\n    assert events[0].event == \"message\"\n    assert events[0].data == \"YH00\\n+2\\n10\"\n    assert events[0].id == \"\"\n    assert events[0].retry is None\n"}
{"type": "test_file", "path": "tests/test_asgi.py", "content": "from typing import AsyncIterator\n\nimport httpx\nimport pytest\nimport pytest_asyncio\nfrom sse_starlette.sse import EventSourceResponse\nfrom starlette.applications import Starlette\nfrom starlette.requests import Request\nfrom starlette.responses import Response\nfrom starlette.routing import Route\nfrom starlette.types import ASGIApp\n\nfrom httpx_sse import aconnect_sse\n\n\n@pytest.fixture\ndef app() -> ASGIApp:\n    async def auth_events(request: Request) -> Response:\n        async def events() -> AsyncIterator[dict]:\n            yield {\n                \"event\": \"login\",\n                \"data\": '{\"user_id\": \"4135\"}',\n            }\n\n        return EventSourceResponse(events())\n\n    return Starlette(routes=[Route(\"/sse/auth/\", endpoint=auth_events)])\n\n\n@pytest_asyncio.fixture\nasync def client(app: ASGIApp) -> AsyncIterator[httpx.AsyncClient]:\n    async with httpx.AsyncClient(transport=httpx.ASGITransport(app)) as client:  # type: ignore[arg-type]\n        yield client\n\n\n@pytest.mark.asyncio\nasync def test_asgi_test(client: httpx.AsyncClient) -> None:\n    async with aconnect_sse(\n        client, \"GET\", \"http://testserver/sse/auth/\"\n    ) as event_source:\n        events = [sse async for sse in event_source.aiter_sse()]\n        (sse,) = events\n        assert sse.event == \"login\"\n        assert sse.json() == {\"user_id\": \"4135\"}\n"}
{"type": "test_file", "path": "tests/test_api.py", "content": "import httpx\nimport pytest\n\nfrom httpx_sse import SSEError, aconnect_sse, connect_sse\n\n\n@pytest.mark.parametrize(\n    \"content_type\",\n    [\n        pytest.param(\"text/event-stream\", id=\"exact\"),\n        pytest.param(\n            \"application/json, text/event-stream; charset=utf-8\", id=\"contains\"\n        ),\n    ],\n)\ndef test_connect_sse(content_type: str) -> None:\n    def handler(request: httpx.Request) -> httpx.Response:\n        if request.url.path == \"/\":\n            return httpx.Response(200, text=\"Hello, world!\")\n        else:\n            assert request.url.path == \"/sse\"\n            text = \"data: test\\n\\n\"\n            return httpx.Response(\n                200, headers={\"content-type\": content_type}, text=text\n            )\n\n    with httpx.Client(transport=httpx.MockTransport(handler)) as client:\n        response = client.request(\"GET\", \"http://testserver\")\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"text/plain; charset=utf-8\"\n\n        with connect_sse(client, \"GET\", \"http+sse://testserver/sse\") as event_source:\n            assert event_source.response.request.headers[\"cache-control\"] == \"no-store\"\n\n\ndef test_connect_sse_non_event_stream_received() -> None:\n    def handler(request: httpx.Request) -> httpx.Response:\n        assert request.url.path == \"/\"\n        return httpx.Response(200, text=\"Hello, world!\")\n\n    with httpx.Client(transport=httpx.MockTransport(handler)) as client:\n        with pytest.raises(SSEError, match=\"text/event-stream\"):\n            with connect_sse(client, \"GET\", \"http://testserver\") as event_source:\n                for _ in event_source.iter_sse():\n                    pass  # pragma: no cover\n\n\n@pytest.mark.asyncio\nasync def test_aconnect_sse() -> None:\n    def handler(request: httpx.Request) -> httpx.Response:\n        if request.url.path == \"/\":\n            return httpx.Response(200, text=\"Hello, world!\")\n        else:\n            assert request.url.path == \"/sse\"\n            text = \"data: test\\n\\n\"\n            return httpx.Response(\n                200, headers={\"content-type\": \"text/event-stream\"}, text=text\n            )\n\n    async with httpx.AsyncClient(transport=httpx.MockTransport(handler)) as client:\n        response = await client.request(\"GET\", \"http://testserver\")\n        assert response.status_code == 200\n        assert response.headers[\"content-type\"] == \"text/plain; charset=utf-8\"\n\n        async with aconnect_sse(\n            client, \"GET\", \"http+sse://testserver/sse\"\n        ) as event_source:\n            assert event_source.response.request.headers[\"cache-control\"] == \"no-store\"\n"}
{"type": "test_file", "path": "tests/test_models.py", "content": "import json\n\nimport pytest\n\nfrom httpx_sse import ServerSentEvent\n\n\ndef test_sse_default() -> None:\n    sse = ServerSentEvent()\n\n    assert sse.event == \"message\"\n    assert sse.data == \"\"\n    assert sse.id == \"\"\n    assert sse.retry is None\n\n\ndef test_sse_json() -> None:\n    sse = ServerSentEvent()\n\n    with pytest.raises(json.JSONDecodeError):\n        sse.json()\n\n    sse = ServerSentEvent(data='{\"key\": \"value\"}')\n    assert sse.json() == {\"key\": \"value\"}\n\n    sse = ServerSentEvent(data='[\"item1\", \"item2\"]')\n    assert sse.json() == [\"item1\", \"item2\"]\n\n\ndef test_sse_repr() -> None:\n    sse = ServerSentEvent()\n    assert repr(sse) == \"ServerSentEvent(event='message')\"\n\n    sse = ServerSentEvent(data=\"data\", retry=3, id=\"id\", event=\"event\")\n    assert repr(sse) == \"ServerSentEvent(event='event', data='data', id='id', retry=3)\"\n"}
{"type": "test_file", "path": "tests/test_exceptions.py", "content": "import httpx\n\nfrom httpx_sse import SSEError\n\n\ndef test_sse_error() -> None:\n    assert issubclass(SSEError, httpx.TransportError)\n"}
{"type": "source_file", "path": "src/httpx_sse/__init__.py", "content": "from ._api import EventSource, aconnect_sse, connect_sse\nfrom ._exceptions import SSEError\nfrom ._models import ServerSentEvent\n\n__version__ = \"0.4.0\"\n\n__all__ = [\n    \"__version__\",\n    \"EventSource\",\n    \"connect_sse\",\n    \"aconnect_sse\",\n    \"ServerSentEvent\",\n    \"SSEError\",\n]\n"}
{"type": "source_file", "path": "src/httpx_sse/_decoders.py", "content": "from typing import List, Optional\n\nfrom ._models import ServerSentEvent\n\n\nclass SSEDecoder:\n    def __init__(self) -> None:\n        self._event = \"\"\n        self._data: List[str] = []\n        self._last_event_id = \"\"\n        self._retry: Optional[int] = None\n\n    def decode(self, line: str) -> Optional[ServerSentEvent]:\n        # See: https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation  # noqa: E501\n\n        if not line:\n            if (\n                not self._event\n                and not self._data\n                and not self._last_event_id\n                and self._retry is None\n            ):\n                return None\n\n            sse = ServerSentEvent(\n                event=self._event,\n                data=\"\\n\".join(self._data),\n                id=self._last_event_id,\n                retry=self._retry,\n            )\n\n            # NOTE: as per the SSE spec, do not reset last_event_id.\n            self._event = \"\"\n            self._data = []\n            self._retry = None\n\n            return sse\n\n        if line.startswith(\":\"):\n            return None\n\n        fieldname, _, value = line.partition(\":\")\n\n        if value.startswith(\" \"):\n            value = value[1:]\n\n        if fieldname == \"event\":\n            self._event = value\n        elif fieldname == \"data\":\n            self._data.append(value)\n        elif fieldname == \"id\":\n            if \"\\0\" in value:\n                pass\n            else:\n                self._last_event_id = value\n        elif fieldname == \"retry\":\n            try:\n                self._retry = int(value)\n            except (TypeError, ValueError):\n                pass\n        else:\n            pass  # Field is ignored.\n\n        return None\n"}
{"type": "source_file", "path": "setup.py", "content": "from setuptools import setup\n\nsetup()  # Editable installs.\n"}
{"type": "source_file", "path": "src/httpx_sse/_api.py", "content": "from contextlib import asynccontextmanager, contextmanager\nfrom typing import Any, AsyncIterator, Iterator\n\nimport httpx\n\nfrom ._decoders import SSEDecoder\nfrom ._exceptions import SSEError\nfrom ._models import ServerSentEvent\n\n\nclass EventSource:\n    def __init__(self, response: httpx.Response) -> None:\n        self._response = response\n\n    def _check_content_type(self) -> None:\n        content_type = self._response.headers.get(\"content-type\", \"\").partition(\";\")[0]\n        if \"text/event-stream\" not in content_type:\n            raise SSEError(\n                \"Expected response header Content-Type to contain 'text/event-stream', \"\n                f\"got {content_type!r}\"\n            )\n\n    @property\n    def response(self) -> httpx.Response:\n        return self._response\n\n    def iter_sse(self) -> Iterator[ServerSentEvent]:\n        self._check_content_type()\n        decoder = SSEDecoder()\n        for line in self._response.iter_lines():\n            line = line.rstrip(\"\\n\")\n            sse = decoder.decode(line)\n            if sse is not None:\n                yield sse\n\n    async def aiter_sse(self) -> AsyncIterator[ServerSentEvent]:\n        self._check_content_type()\n        decoder = SSEDecoder()\n        async for line in self._response.aiter_lines():\n            line = line.rstrip(\"\\n\")\n            sse = decoder.decode(line)\n            if sse is not None:\n                yield sse\n\n\n@contextmanager\ndef connect_sse(\n    client: httpx.Client, method: str, url: str, **kwargs: Any\n) -> Iterator[EventSource]:\n    headers = kwargs.pop(\"headers\", {})\n    headers[\"Accept\"] = \"text/event-stream\"\n    headers[\"Cache-Control\"] = \"no-store\"\n\n    with client.stream(method, url, headers=headers, **kwargs) as response:\n        yield EventSource(response)\n\n\n@asynccontextmanager\nasync def aconnect_sse(\n    client: httpx.AsyncClient,\n    method: str,\n    url: str,\n    **kwargs: Any,\n) -> AsyncIterator[EventSource]:\n    headers = kwargs.pop(\"headers\", {})\n    headers[\"Accept\"] = \"text/event-stream\"\n    headers[\"Cache-Control\"] = \"no-store\"\n\n    async with client.stream(method, url, headers=headers, **kwargs) as response:\n        yield EventSource(response)\n"}
{"type": "source_file", "path": "src/httpx_sse/_exceptions.py", "content": "import httpx\n\n\nclass SSEError(httpx.TransportError):\n    pass\n"}
{"type": "source_file", "path": "src/httpx_sse/_models.py", "content": "import json\nfrom typing import Any, Optional\n\n\nclass ServerSentEvent:\n    def __init__(\n        self,\n        event: Optional[str] = None,\n        data: Optional[str] = None,\n        id: Optional[str] = None,\n        retry: Optional[int] = None,\n    ) -> None:\n        if not event:\n            event = \"message\"\n\n        if data is None:\n            data = \"\"\n\n        if id is None:\n            id = \"\"\n\n        self._event = event\n        self._data = data\n        self._id = id\n        self._retry = retry\n\n    @property\n    def event(self) -> str:\n        return self._event\n\n    @property\n    def data(self) -> str:\n        return self._data\n\n    @property\n    def id(self) -> str:\n        return self._id\n\n    @property\n    def retry(self) -> Optional[int]:\n        return self._retry\n\n    def json(self) -> Any:\n        return json.loads(self.data)\n\n    def __repr__(self) -> str:\n        pieces = [f\"event={self.event!r}\"]\n        if self.data != \"\":\n            pieces.append(f\"data={self.data!r}\")\n        if self.id != \"\":\n            pieces.append(f\"id={self.id!r}\")\n        if self.retry is not None:\n            pieces.append(f\"retry={self.retry!r}\")\n        return f\"ServerSentEvent({', '.join(pieces)})\"\n"}
