{"repo_info": {"repo_name": "Apollo", "repo_owner": "Yezz123-Archive", "repo_url": "https://github.com/Yezz123-Archive/Apollo"}}
{"type": "source_file", "path": "api/crud.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom models import models\nfrom schemas import schemas\nimport bcrypt\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nfrom datetime import datetime\nimport base64\n\n\n# Get user by username function\n\n\ndef get_user_by_username(db: Session, username: str):\n    return db.query(models.UserInfo).filter(models.UserInfo.username == username).first()\n\n# User registration function\n\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    hashed_password = bcrypt.hashpw(\n        user.password.encode('utf-8'), bcrypt.gensalt())\n    db_user = models.UserInfo(username=user.username,\n                              password=hashed_password, fullname=user.fullname)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\n# Login Function\n\n\ndef get_Login(db: Session, username: str, password: str):\n    db_user = db.query(models.UserInfo).filter(\n        models.UserInfo.username == username).first()\n    print(username, password)\n    passw = bcrypt.checkpw(password.encode('utf-8'), db_user.password)\n    return passw\n\n# Get item by id function\n\n\ndef get_item_by_id(db: Session, id: int):\n    return db.query(models.ItemInfo).filter(models.ItemInfo.id == id).first()\n\n# Add items to DB function\n\n\ndef add_table(db: Session, item: schemas.ItemInfo):\n    db_item = models.ItemInfo(itemname=item.itemname, itemprice=item.itemprice)\n    db.add(db_item)\n    db.commit()\n    db.refresh(db_item)\n    return db_item\n\n# Delete item from DB by id function\n\n\ndef delete_item_by_id(db: Session, id: int):\n    delitem = db.query(models.ItemInfo).filter(\n        models.ItemInfo.id == id).first()\n    if delitem is None:\n        return\n    db.delete(delitem)\n    db.commit()\n    return delitem\n\n# Add to cart function\n\n\ndef add_to_cart(db: Session, username: str, items: models.CartInfo):\n    user = db.query(models.UserInfo).filter(\n        models.UserInfo.username == username).first()\n    db_cart = models.CartInfo(\n        ownername=user.id, itemname=items.itemname, itemprice=items.itemprice)\n    db.add(db_cart)\n    db.commit()\n    db.refresh(db_cart)\n    return db_cart\n\n# Delete item in the cart by id\n\n\ndef delete_cart_item_by_id(db: Session, id: int):\n    delitem = db.query(models.CartInfo).filter(\n        models.CartInfo.id == id).first()\n    if delitem is None:\n        return\n    db.delete(delitem)\n    db.commit()\n    return delitem\n\n# money processing function(Not Complete Yet)\n\n\ndef payment(db: Session, phone_number: int, total: int):\n    consumer_key = 'consumer_key'\n    consumer_secret = 'consumer_secret'\n    api_URL = 'https://api-m.sandbox.paypal.com/v1/payments'\n\n    req = requests.get(api_URL, auth=HTTPBasicAuth(\n        consumer_key, consumer_secret))\n    money_access_token = json.loads(req.text)\n    validated_money_access_token = money_access_token['access_token']\n\n    time = datetime.now().strftime('%Y%m%d%H%M%S')\n    Business_code = 'short_code'  # replace with the business short code\n    passkey = \"pass_key\"\n    data_to_encode = Business_code + passkey + time\n    online_password = base64.b64encode(data_to_encode.encode())\n    decode_password = online_password.decode('utf-8')\n\n    access_token = validated_money_access_token\n    api_url = \"https://api-m.sandbox.paypal.com/v1/payments/payment?count=10&start_index=0&sort_by=create_time&sort_order=desc\"\n    headers = {\"Authorization\": \"Bearer %s\" % access_token}\n    request = {\n        \"BusinessShortCode\": Business_code,\n        \"Password\": decode_password,\n        \"Timestamp\": time,\n        \"TransactionType\": \"CustomerPayBillOnline\",\n        \"Amount\": total,\n        \"PhoneNumber\": phone_number,\n        \"CallBackURL\": \"https://127.0.0.1:8000/callback\",  # Money Callback\n        \"AccountReference\": \"User Payment\",\n        \"TransactionDesc\": \"Testing stk push\"\n    }\n    response = requests.post(api_url, json=request, headers=headers)\n    return response.text\n"}
{"type": "source_file", "path": "api/__init__.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom models import models\nfrom schemas import schemas\nimport bcrypt\nimport requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nfrom datetime import datetime\nimport base64"}
{"type": "source_file", "path": "core/items/delete_item.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database\n\n# import locale files\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n\nrouter = APIRouter(\n    tags=[\"Items\"],\n    prefix=\"/item\"\n)\nget_db = database.get_db\n\n# delete item by id API\n\n\n@router.delete(\"/del_item/{id}\", response_model=schemas.ItemAInfo)\ndef del_user(id, db: Session = Depends(get_db)):\n    db_item = crud.delete_item_by_id(db, id=id)\n    if db_item:\n        raise HTTPException(status_code=200, detail=\"Item found to delete\")\n    else:\n        raise HTTPException(status_code=400, detail=\"Item Not found to delete\")\n    return\n"}
{"type": "source_file", "path": "core/cart/__init__.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n"}
{"type": "source_file", "path": "core/items/get_item.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database\n\n# import locale files\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n\nrouter = APIRouter(\n    tags=[\"Items\"],\n    prefix=\"/item\"\n)\nget_db = database.get_db\n\n# get item by id API\n\n\n@router.get(\"/get_item/{id}\", response_model=schemas.ItemAInfo)\ndef get_item(id, db: Session = Depends(get_db)):\n    db_item = crud.get_item_by_id(db, id=id)\n    if db_item is None:\n        raise HTTPException(status_code=400, detail=\"No item found\")\n    return db_item\n"}
{"type": "source_file", "path": "core/items/__init__.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database"}
{"type": "source_file", "path": "core/cart/add_to_cart.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database\n\n# import locale files\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n\n# Create the Payment Router\nrouter = APIRouter(\n    tags=[\"Payment\"],\n    prefix=\"/cart\"\n)\nget_db = database.get_db\n\n# add to cart by username and the items to be added API\n@router.post(\"/add_to_cart/{username}\", response_model=schemas.CartOwnerInfo)\ndef add_item(username, items: schemas.CartInfo, db: Session = Depends(get_db)):\n    db_cart = crud.add_to_cart(db=db, username=username, items=items)\n    if db_cart:\n        raise HTTPException(status_code=200, detail=\"Registered to The Cart\")\n    return {\"Cart\": \"Item Not Registered to the Cart!\"}\n"}
{"type": "source_file", "path": "core/cart/delete_cart_item.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database\n\n# import locale files\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n\n# Create the Payment Router\nrouter = APIRouter(\n    tags=[\"Payment\"],\n    prefix=\"/cart\"\n)\nget_db = database.get_db\n\n# delete items in the cart by id API\n@router.delete(\"/delete_cart_item/{id}\", response_model=schemas.CartItemAInfo)\ndef del_user(id, db: Session = Depends(get_db)):\n    db_item = crud.delete_cart_item_by_id(db, id=id)\n    if db_item:\n        raise HTTPException(status_code=200, detail=\"Item deleted\")\n    else:\n        raise HTTPException(status_code=400, detail=\"Item Not found!\")\n    return\n"}
{"type": "source_file", "path": "core/users/__init__.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database"}
{"type": "source_file", "path": "core/users/login.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database\n\n# import locale files\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n\nrouter = APIRouter(\n    tags=[\"Users\"],\n    prefix=\"/user\"\n)\nget_db = database.get_db\n\n\n# login API\n\n\n@router.post(\"/login\")\ndef login_user(user: schemas.UserLogin, db: Session = Depends(get_db)):\n    db_user = crud.get_Login(\n        db, username=user.username, password=user.password)\n    if db_user == False:\n        raise HTTPException(status_code=400, detail=\"Wrong username or password\")\n    return {\"message\": \"User found\"}\n"}
{"type": "source_file", "path": "core/cart/payment.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database\n\n# import locale files\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n\n# Create the Payment Router\nrouter = APIRouter(\n    tags=[\"Payment\"],\n    prefix=\"/cart\"\n)\nget_db = database.get_db\n\n# payment API\n@router.post(\"/payment\")\ndef add_item(userphone: schemas.UserPayment, db: Session = Depends(get_db)):\n    user_payment = crud.payment(\n        db=db, phone_number=userphone.phonenumber, total=userphone.total)\n    if user_payment:\n        raise HTTPException(status_code=200, detail=\"payment Started\")\n    return\n\n# Callback API\n@router.post(\"/callback\")\ndef money_callback(db: Session = Depends(get_db)):\n    return {'success': \"Payment was made successfully\"}\n"}
{"type": "source_file", "path": "core/items/add_item.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database\n\n# import locale files\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n\nrouter = APIRouter(\n    tags=[\"Items\"],\n    prefix=\"/item\"\n)\nget_db = database.get_db\n\n\n# add items to DB API\n\n\n@router.post(\"/add_item\", response_model=schemas.ItemInfo)\ndef add_item(item: schemas.ItemInfo, db: Session = Depends(get_db)):\n    db_item = crud.add_table(db=db, item=item)\n    if db_item:\n        raise HTTPException(status_code=200, detail=\"item registered\")\n    return {\"Item\": \"Not Foundfound\"}\n"}
{"type": "source_file", "path": "data/database.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nSQLALCHEMY_DATABASE_URL = 'sqlite:///apollo.db'\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={\n                       \"check_same_thread\": False})\n\nSessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)\nBase = declarative_base()\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n"}
{"type": "source_file", "path": "core/users/get_user.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends\nfrom data import database\n\n# import locale files\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n\nrouter = APIRouter(\n    tags=[\"Users\"],\n    prefix=\"/user\"\n)\nget_db = database.get_db\n\n# get user by username API\n\n\n@router.get(\"/get_user/{username}\", response_model=schemas.UserInfo)\ndef get_user(username, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_username(db, username=username)\n    return db_user\n"}
{"type": "source_file", "path": "core/users/register.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom data import database\n\n# import locale files\nfrom schemas import schemas\nfrom api import crud\nfrom data.database import get_db\n\nrouter = APIRouter(\n    tags=[\"Users\"],\n    prefix=\"/user\"\n)\nget_db = database.get_db\n\n# register API\n\n\n@router.post(\"/register\", response_model=schemas.UserInfo)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    db_user = crud.get_user_by_username(db, username=user.username)\n    if db_user:\n        raise HTTPException(\n            status_code=400, detail=\"Username already registered\")\n    return crud.create_user(db=db, user=user)\n"}
{"type": "source_file", "path": "models/__init__.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy import Column, Integer, String\nfrom data.database import Base"}
{"type": "source_file", "path": "main.py", "content": "#!/usr/bin/python3\n\nfrom fastapi import FastAPI, Request\nfrom starlette.responses import HTMLResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.templating import Jinja2Templates\n\n# import locale files\nfrom models import models\nfrom data.database import engine\n\n# import router files\nfrom core.cart import add_to_cart, delete_cart_item, payment\nfrom core.items import add_item, delete_item, get_item\nfrom core.users import login, register, get_user\n\n# Create the database tables\nmodels.Base.metadata.create_all(bind=engine)\n\n# Create the instance\napp = FastAPI(\n    title=\"Apollo - Auth\",\n    description=\"A basic Application with multiple functionality\",\n    version=\"1.0.0\",\n)\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\ntemplates = Jinja2Templates(directory=\"templates\")\n\n# includes all users routes\napp.include_router(login.router)\napp.include_router(register.router)\napp.include_router(get_user.router)\n\n# includes all items routes\napp.include_router(add_item.router)\napp.include_router(get_item.router)\napp.include_router(delete_item.router)\n\n# includes all cart\napp.include_router(add_to_cart.router)\napp.include_router(payment.router)\napp.include_router(delete_cart_item.router)\n\n# By default FastAPI return the response using JSONResponse,\n# but we will Custom our Response using the HTMLResponse\n@app.get(\"/\", response_class=HTMLResponse)\nasync def index(request: Request):\n    return templates.TemplateResponse(\"index.html\", {\"request\": request})\n"}
{"type": "source_file", "path": "data/__init__.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker"}
{"type": "source_file", "path": "models/models.py", "content": "#!/usr/bin/python3\nfrom sqlalchemy import Column, Integer, String\nfrom data.database import Base\n\n# User Database Model\n\n\nclass UserInfo(Base):\n    __tablename__ = \"user_info\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String, unique=True)\n    password = Column(String)\n    fullname = Column(String, unique=True)\n\n# Items Database Model\n\n\nclass ItemInfo(Base):\n    __tablename__ = \"item_info\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    itemname = Column(String, unique=True)\n    itemprice = Column(Integer)\n\n\n# Cart Database Model\n\n\nclass CartInfo(Base):\n    __tablename__ = \"cart_info\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    ownername = Column(Integer, unique=True)\n    itemname = Column(String, unique=True)\n    itemprice = Column(Integer)\n"}
{"type": "source_file", "path": "schemas/schemas.py", "content": "#!/usr/bin/python3\nfrom pydantic import BaseModel\n\n# base schema for user data\n\n\nclass UserInfoBase(BaseModel):\n    username: str\n    fullname: str\n\n# schema for user creation(registration)\n\n\nclass UserCreate(UserInfoBase):\n    password: str\n\n# inherits from user data schema\n\n\nclass UserInfo(UserInfoBase):\n    id: int\n\n    class Config:\n        orm_mode = True\n\n# base schema for user login\n\n\nclass UserLogin(BaseModel):\n    username: str\n    password: str\n\n# base schema for items\n\n\nclass ItemInfo(BaseModel):\n    itemname: str\n    itemprice: int\n\n# inherits from item data schema used for getting item by id\n\n\nclass ItemAInfo(ItemInfo):\n    id: int\n\n    class Config:\n        orm_mode = True\n\n# base schema for relating a cart to it's user\n\n\nclass CartOwnerInfo(BaseModel):\n    username: str\n\n# base schema for adding items to cart\n\n\nclass CartInfo(BaseModel):\n    itemname: str\n    itemprice: int\n\n# base schema for getting items in the cart by id\n\n\nclass CartItemAInfo(CartInfo):\n    id: int\n\n    class Config:\n        orm_mode = True\n\n# base schema for the payment api\n\n\nclass UserPayment(BaseModel):\n    phonenumber: int\n    total: int\n"}
{"type": "source_file", "path": "schemas/__init__.py", "content": "#!/usr/bin/python3\nfrom pydantic import BaseModel"}
