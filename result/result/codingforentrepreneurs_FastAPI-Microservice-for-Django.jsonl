{"repo_info": {"repo_name": "FastAPI-Microservice-for-Django", "repo_owner": "codingforentrepreneurs", "repo_url": "https://github.com/codingforentrepreneurs/FastAPI-Microservice-for-Django"}}
{"type": "test_file", "path": "app/test_endpoints.py", "content": "import shutil\nimport time\nimport io\nfrom fastapi.testclient import TestClient\nfrom app.main import app, BASE_DIR, UPLOAD_DIR, get_settings\n\nfrom PIL import Image, ImageChops\n\nclient = TestClient(app)\n\ndef test_get_home():\n    response = client.get(\"/\") # requests.get(\"\") # python requests\n    assert response.text != \"<h1>Hello world</h1>\"\n    assert response.status_code == 200\n    assert  \"text/html\" in response.headers['content-type']\n\n\n\ndef test_invalid_file_upload_error():\n    response = client.post(\"/\") # requests.post(\"\") # python requests\n    assert response.status_code == 422\n    assert  \"application/json\" in response.headers['content-type']\n\ndef test_prediction_upload_missing_headers():\n    img_saved_path = BASE_DIR / \"images\"\n    settings = get_settings()\n    for path in img_saved_path.glob(\"*\"):\n        try:\n            img = Image.open(path)\n        except:\n            img = None\n        response = client.post(\"/\",\n            files={\"file\": open(path, 'rb')}\n        )\n        assert response.status_code == 401\n\n\ndef test_prediction_upload():\n    img_saved_path = BASE_DIR / \"images\"\n    settings = get_settings()\n    for path in img_saved_path.glob(\"*\"):\n        try:\n            img = Image.open(path)\n        except:\n            img = None\n        response = client.post(\"/\",\n            files={\"file\": open(path, 'rb')},\n            headers={\"Authorization\": f\"JWT {settings.app_auth_token}\"}\n        )\n        if img is None:\n            assert response.status_code == 400\n        else:\n            # Returning a valid image\n            assert response.status_code == 200\n            data = response.json()\n            assert len(data.keys()) == 2\n\n\ndef test_echo_upload():\n    img_saved_path = BASE_DIR / \"images\"\n    for path in img_saved_path.glob(\"*\"):\n        try:\n            img = Image.open(path)\n        except:\n            img = None\n        response = client.post(\"/img-echo/\", files={\"file\": open(path, 'rb')})\n        if img is None:\n            assert response.status_code == 400\n        else:\n            # Returning a valid image\n            assert response.status_code == 200\n            r_stream = io.BytesIO(response.content)\n            echo_img = Image.open(r_stream)\n            difference = ImageChops.difference(echo_img, img).getbbox()\n            assert difference is None\n    # time.sleep(3)\n    shutil.rmtree(UPLOAD_DIR)\n"}
{"type": "test_file", "path": "app/test_production.py", "content": "import shutil\nimport time\nimport io\nfrom fastapi.testclient import TestClient\nfrom app.main import BASE_DIR, UPLOAD_DIR, get_settings\n\nfrom PIL import Image, ImageChops\nimport requests\n\nENDPOINT=\"https://fastapi-docker-l3j59.ondigitalocean.app/\"\n\ndef test_get_home():\n    response = requests.get(ENDPOINT)\n    assert response.text != \"<h1>Hello world</h1>\"\n    assert response.status_code == 200\n    assert  \"text/html\" in response.headers['content-type']\n\n\ndef test_invalid_file_upload_error():\n    response = requests.post(ENDPOINT)\n    assert response.status_code == 422\n    assert  \"application/json\" in response.headers['content-type']\n\ndef test_prediction_upload_missing_headers():\n    img_saved_path = BASE_DIR / \"images\"\n    settings = get_settings()\n    for path in img_saved_path.glob(\"*\"):\n        try:\n            img = Image.open(path)\n        except:\n            img = None\n        response = requests.post(ENDPOINT,\n            files={\"file\": open(path, 'rb')}\n        )\n        assert response.status_code == 401\n\n\ndef test_prediction_upload():\n    img_saved_path = BASE_DIR / \"images\"\n    settings = get_settings()\n    for path in img_saved_path.glob(\"*\"):\n        try:\n            img = Image.open(path)\n        except:\n            img = None\n        response = requests.post(ENDPOINT,\n            files={\"file\": open(path, 'rb')},\n            headers={\"Authorization\": f\"JWT {settings.app_auth_token_prod}\"}\n        )\n        if img is None:\n            assert response.status_code == 400\n        else:\n            # Returning a valid image\n            assert response.status_code == 200\n            data = response.json()\n            assert len(data.keys()) == 2"}
{"type": "source_file", "path": "app/main.py", "content": "import pathlib\nimport os\nimport io\nimport uuid\nfrom functools import lru_cache\nfrom fastapi import(\n    FastAPI,\n    Header,\n    HTTPException,\n    Depends,\n    Request,\n    File,\n    UploadFile\n    )\nimport pytesseract\nfrom fastapi.responses import HTMLResponse, FileResponse\nfrom fastapi.templating import Jinja2Templates\nfrom pydantic import BaseSettings\nfrom PIL import Image\n\nclass Settings(BaseSettings):\n    app_auth_token: str\n    debug: bool = False\n    echo_active: bool = False\n    app_auth_token_prod: str = None\n    skip_auth: bool = False\n\n    class Config:\n        env_file = \".env\"\n\n@lru_cache\ndef get_settings():\n    return Settings()\n\nsettings = get_settings()\nDEBUG=settings.debug\n\nBASE_DIR = pathlib.Path(__file__).parent\nUPLOAD_DIR = BASE_DIR / \"uploads\"\n\n\napp = FastAPI()\ntemplates = Jinja2Templates(directory=str(BASE_DIR / \"templates\"))\n\n\n@app.get(\"/\", response_class=HTMLResponse) # http GET -> JSON\ndef home_view(request: Request, settings:Settings = Depends(get_settings)):\n    return templates.TemplateResponse(\"home.html\", {\"request\": request, \"abc\": 123})\n\n\ndef verify_auth(authorization = Header(None), settings:Settings = Depends(get_settings)):\n    \"\"\"\n    Authorization: Bearer <token>\n    {\"authorization\": \"Bearer <token>\"}\n    \"\"\"\n    if settings.debug and settings.skip_auth:\n        return\n    if authorization is None:\n        raise HTTPException(detail=\"Invalid endpoint\", status_code=401)\n    label, token = authorization.split()\n    if token != settings.app_auth_token:\n        raise HTTPException(detail=\"Invalid endpoint\", status_code=401)\n\n\n@app.post(\"/\") # http POST\nasync def prediction_view(file:UploadFile = File(...), authorization = Header(None), settings:Settings = Depends(get_settings)):\n    verify_auth(authorization, settings)\n    bytes_str = io.BytesIO(await file.read())\n    try:\n        img = Image.open(bytes_str)\n    except:\n        raise HTTPException(detail=\"Invalid image\", status_code=400)\n    preds = pytesseract.image_to_string(img)\n    predictions = [x for x in preds.split(\"\\n\")]\n    return {\"results\": predictions, \"original\": preds}\n\n\n@app.post(\"/img-echo/\", response_class=FileResponse) # http POST\nasync def img_echo_view(file:UploadFile = File(...), settings:Settings = Depends(get_settings)):\n    if not settings.echo_active:\n        raise HTTPException(detail=\"Invalid endpoint\", status_code=400)\n    UPLOAD_DIR.mkdir(exist_ok=True)\n    bytes_str = io.BytesIO(await file.read())\n    try:\n        img = Image.open(bytes_str)\n    except:\n        raise HTTPException(detail=\"Invalid image\", status_code=400)\n    fname = pathlib.Path(file.filename)\n    fext = fname.suffix # .jpg, .txt\n    dest = UPLOAD_DIR / f\"{uuid.uuid1()}{fext}\"\n    img.save(dest)\n    return dest\n"}
{"type": "source_file", "path": "app/ocr.py", "content": "import pathlib\nimport pytesseract\nfrom PIL import Image\n\nBASE_DIR = pathlib.Path(__file__).parent\nIMG_DIR = BASE_DIR / \"images\"\nimg_path = IMG_DIR / \"ingredients-1.png\"\n\nimg = Image.open(img_path)\n\npreds = pytesseract.image_to_string(img)\npredictions = [x for x in preds.split(\"\\n\")]\n# model.predict(img)\n\nprint(predictions)"}
{"type": "source_file", "path": "app/__init__.py", "content": ""}
