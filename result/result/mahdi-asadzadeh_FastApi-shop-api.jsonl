{"repo_info": {"repo_name": "FastApi-shop-api", "repo_owner": "mahdi-asadzadeh", "repo_url": "https://github.com/mahdi-asadzadeh/FastApi-shop-api"}}
{"type": "source_file", "path": "__init__.py", "content": ""}
{"type": "source_file", "path": "accounts/authentication.py", "content": "import jwt\n\nfrom fastapi.security import OAuth2PasswordBearer\nfrom fastapi import HTTPException, Depends, status\nfrom . import models\nfrom .utils import Hash\nimport settings\n\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl='token')\n\n\ndef authenticate_user(email: str, password: str):\n    user = models.User.filter(models.User.email == email).first()\n    if user.is_active == False:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail='User is not active.')\n    if not user:\n        return False \n\n    if not Hash.verify(password, user.hashed_password):\n        return False\n    return user \n\n\ndef get_current_user(token: str = Depends(oauth2_scheme)):\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET, algorithms=['HS256'])\n        user = models.User.filter(models.User.id == payload.get('id')).first()\n    except:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED, \n            detail='Invalid email or password'\n        )\n\n    return user\n\n\ndef get_current_user_admin(token: str = Depends(oauth2_scheme)):\n    try:\n        payload = jwt.decode(token, settings.JWT_SECRET, algorithms=['HS256'])\n        user = models.User.filter(models.User.id == payload.get('id')).first()\n        if user.is_admin == False:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED, \n                detail='Protected'\n            )\n\n    except:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED, \n            detail='Invalid email or password'\n        )\n\n    return user\n"}
{"type": "source_file", "path": "accounts/utils.py", "content": "\nimport os\nimport redis\nimport binascii\n\nfrom passlib.context import CryptContext\nfrom fastapi_mail import FastMail, MessageSchema\nfrom fastapi import BackgroundTasks\n\n\npwd_cxt = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\n\nclass Hash():\n    def bcrypt(password: str):\n        return pwd_cxt.hash(password)\n\n    def verify(plain_password, hashed_password):\n        return pwd_cxt.verify(plain_password, hashed_password)\n\n\nredis = redis.Redis.from_url('redis://')\n\n\ndef _generate_code():\n\treturn binascii.hexlify(os.urandom(20)).decode('utf-8')\n\n\ndef send_email(email, token, background_tasks):\n    message = MessageSchema(\n        subject=\"Activate Account\",\n        recipients=[email,],\n        body=''.join(token),\n        )\n    from main import conf\n    fm = FastMail(conf)\n    background_tasks.add_task(fm.send_message, message)\n\n\ndef token_add_to_redis(id, mode):\n    token = _generate_code()\n    name = f'{id}_{mode.lower()}'\n    redis.set(name=name, value=token, ex=14400)\n    return token\n\n\ndef token_delete_to_redis(id, mode):\n    name = f'{id}_{mode.lower()}'\n    redis.delete(name)\n\n\ndef get_from_redis(id, mode):\n    name = f'{id}_{mode.lower()}'\n    return redis.get(name=name)\n\n\ndef send_register_email(id,  email, background_tasks):\n    token_delete_to_redis(id, 'register')\n    token = token_add_to_redis(id=id, mode='register'),\n    send_email(email=email, token=token, background_tasks=background_tasks)\n\n\n# def send_reset_password_email(id, email, username, first_name, last_name):\n#     token_delete_to_redis(id, 'reset_password')\n#     ctxt = {\n#         'email': email,\n#         'username': username,\n#         'first_name': first_name,\n#         'last_name': last_name,\n#         'token': token_add_to_redis(id, 'reset_password'),\n#         'btn_name': 'Reset password . Click Me !'\n#     }\n#     send_multi_format_email('signup_email', ctxt, target_email=email)\n\n\n# def send_change_email(id, email, username, first_name, last_name):\n#     token_delete_to_redis(id, 'change_email')\n#     ctxt = {\n#         'email': email,\n#         'username': username,\n#         'first_name': first_name,\n#         'last_name': last_name,\n#         'token': token_add_to_redis(id, 'change_email'),\n#         'btn_name': 'Change email . Click Me !'\n#     }\n#     send_multi_format_email('signup_email', ctxt, target_email=email)\n"}
{"type": "source_file", "path": "accounts/models.py", "content": "import peewee\nfrom database import db\n\n\nclass User(peewee.Model):\n    email = peewee.CharField(unique=True, index=True)\n    hashed_password = peewee.CharField()\n    is_active = peewee.BooleanField(default=False)\n    is_admin = peewee.BooleanField(default=False)\n\n    class Meta:\n        database = db\n"}
{"type": "source_file", "path": "accounts/schemas.py", "content": "from typing import Any, List\n\nimport peewee\nfrom pydantic import BaseModel\nfrom pydantic.networks import EmailStr\nfrom pydantic.utils import GetterDict\n\n\nclass PeeweeGetterDict(GetterDict):\n    def get(self, key: Any, default: Any = None):\n        res = getattr(self._obj, key, default)\n        if isinstance(res, peewee.ModelSelect):\n            return list(res)\n        return res\n\n\n\nclass UserBase(BaseModel):\n    email: str\n\n\nclass UserCreate(UserBase):\n    password: str\n\n\nclass User(UserBase):\n    id: int\n    is_active: bool\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n\n\nclass EmailSchema(BaseModel):\n    email: List[EmailStr]\n\n\nclass Activate(BaseModel):\n    email: EmailStr\n    token: str\n\n\nclass ChangePassword(BaseModel):\n    old_password: str\n    new_password: str\n"}
{"type": "source_file", "path": "admin/accounts/routers.py", "content": "from fastapi import APIRouter, Depends, status\nfrom accounts import cruds, models, schemas\nfrom accounts.authentication import get_current_user_admin\nfrom starlette.responses import JSONResponse\nfrom database import get_db\nfrom typing import List\n\n\nrouter = APIRouter(\n    tags=['Admin Accounts'], \n    prefix='/admin/accounts',\n    dependencies=[Depends(get_current_user_admin)],\n)\n\n\n@router.get(\"/users/\", response_model=List[schemas.User], dependencies=[Depends(get_db)])\nasync def read_users(skip: int = 0, limit: int = 100):\n    users = cruds.get_users(skip=skip, limit=limit)\n    return users\n\n\n@router.delete('/user/{user_id}')\nasync def delete_user(user_id: int):\n    user = models.User.filter(models.User.id == user_id).first()\n    if user:\n        user.delete_instance()\n        return JSONResponse(status_code=status.HTTP_204_NO_CONTENT, content={\"message\": \"User delete.\"})\n    return JSONResponse(status_code=status.HTTP_404_NOT_FOUND, content={\"message\": \"User not found.\"})\n"}
{"type": "source_file", "path": "admin/accounts/__init__.py", "content": ""}
{"type": "source_file", "path": "accounts/cruds.py", "content": "from . import models, schemas\nfrom .utils import Hash\n\n\ndef get_user(user_id: int):\n    return models.User.filter(models.User.id == user_id).first()\n\n\ndef get_user_by_email(email: str):\n    return models.User.filter(models.User.email == email).first()\n\n\ndef get_users(skip: int = 0, limit: int = 100):\n    return list(models.User.select().offset(skip).limit(limit))\n\n\ndef create_user(user: schemas.UserCreate):\n    hashed_password = Hash.bcrypt(user.password)\n    db_user = models.User(email=user.email, hashed_password=hashed_password, is_active=False, is_admin=False)\n    db_user.save()\n    return db_user\n"}
{"type": "source_file", "path": "accounts/routers.py", "content": "from fastapi import APIRouter, HTTPException, Depends, status, BackgroundTasks\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom starlette.responses import JSONResponse\nfrom typing import List\nfrom database import get_db\nfrom .authentication import authenticate_user, get_current_user\nfrom .utils import Hash, send_register_email, get_from_redis, token_delete_to_redis\nfrom . import models\nfrom . import schemas\nfrom . import cruds\nimport jwt\nimport settings\n\n\nrouter = APIRouter(\n    tags=['Accounts'], \n    prefix='/accounts'\n)\n\n\n@router.post('/token', dependencies=[Depends(get_db)])\nasync def generate_token(form_data: OAuth2PasswordRequestForm = Depends()):\n    user = authenticate_user(form_data.username, form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED, \n            detail='Invalid email or password'\n        )\n    user = {\n        'id': user.id,\n        'email': user.email,\n        'is_active': user.is_active,\n        'is_admin': user.is_admin\n    }\n    token = jwt.encode(user, settings.JWT_SECRET)\n    return {'access_token' : token, 'token_type' : 'bearer'}\n\n\n@router.get('/user/me', response_model=schemas.User, dependencies=[Depends(get_db)])\nasync def detail_user(user: schemas.User = Depends(get_current_user)):\n    return user\n\n\n@router.post(\"/user/\", response_model=schemas.User, dependencies=[Depends(get_db)])\nasync def register(background_tasks: BackgroundTasks, user: schemas.UserCreate):\n    db_user = cruds.get_user_by_email(email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered.\")\n    user = cruds.create_user(user=user)\n    send_register_email(\n        id=user.id,\n        email=user.email,\n        background_tasks=background_tasks\n    )\n    return user\n\n\n@router.post(\"/user/activate\", dependencies=[Depends(get_db)])\nasync def activate(data: schemas.Activate):\n    user = cruds.get_user_by_email(email=data.email)\n    if not user:\n        return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content={\"message\": \"Wrong/Expired Token!.\"})\n        \n    token_from_redis = get_from_redis(user.id, 'register')\n    if not token_from_redis:\n        content = {'message': 'Wrong/Expired Token!.'}\n        return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content=content)\n\n    if data.token != token_from_redis.decode('UTF-8'):\n        content = {'message': 'Wrong/Expired Token!.'}\n        return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content=content)\n\n    user.is_active = True\n    user.save()\n    token_delete_to_redis(user.id, 'register')\n    content = {'message': 'Active account.'}\n    return JSONResponse(status_code=status.HTTP_200_OK, content=content)\n\n\n@router.post('/user/change_password', dependencies=[Depends(get_db)])\nasync def change_password(data: schemas.ChangePassword, user: schemas.User = Depends(get_current_user)):\n    if Hash.verify(data.old_password, user.hashed_password):\n        user.hashed_password = Hash.bcrypt(data.new_password)\n        user.save()\n        return JSONResponse(status_code=status.HTTP_200_OK, content={\"message\": \"User change password.\"})\n    return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content={\"message\": \"Old password is incorrect.\"})\n"}
{"type": "source_file", "path": "carts/routers.py", "content": "from accounts.authentication import get_current_user\nfrom starlette.responses import JSONResponse\nfrom fastapi import APIRouter, Depends, status\nfrom database import get_db\nfrom . import schemas\nfrom .cart import Cart\nfrom decimal import Decimal\nfrom products.cruds import get_product\nfrom accounts.schemas import User\n\n\nrouter = APIRouter(\n    tags=['Carts'],\n    prefix='/carts'\n)\n\n\n@router.post('/add', dependencies=[Depends(get_db)])\nasync def add_to_cart(add_to_cart: schemas.AddToCart, user: User = Depends(get_current_user)):\n    product = get_product(add_to_cart.product_id)\n    Cart.add_to_cart(\n        user_id = user.id,\n        product_id = product.id,\n        product_image = str(product.image),\n        product_price = str(Decimal(product.price) * add_to_cart.quantity),\n        product_quantity = add_to_cart.quantity,\n\t)\n    content = {'message': 'Add to cart.'}\n    return JSONResponse(status_code=status.HTTP_200_OK, content=content)\n\n\n@router.get('/list', response_model=schemas.Carts)\nasync def carts(user: User = Depends(get_current_user)):\n    total_price = 0\n    items = Cart.carts(user.id)\n    for item in items:\n        total_price += float(item['product_price'])\n\n    return {'total_price': total_price, 'items': items}\n\n\n@router.delete('/clear')\nasync def clear_cart(user: User = Depends(get_current_user)):\n    Cart.delete_all_carts(user.id)\n    content = {'message': 'Clear carts.'}\n    return JSONResponse(status_code=status.HTTP_204_NO_CONTENT, content=content)\n\n\n@router.delete('/delete-item-cart/{row_id}')\nasync def delete_item_cart(row_id: str, user: User = Depends(get_current_user)):\n    Cart.delete_cart(user.id, row_id)\n    content = {'message': 'Delete item cart.'}\n    return JSONResponse(status_code=status.HTTP_204_NO_CONTENT, content=content)\n"}
{"type": "source_file", "path": "carts/__init__.py", "content": ""}
{"type": "source_file", "path": "database.py", "content": "from contextvars import ContextVar\nfrom fastapi import Depends\nimport peewee\n\n\nDATABASE_NAME = \"test.db\"\n\n\ndb_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\ndb_state = ContextVar(\"db_state\", default=db_state_default.copy())\n\n\nclass PeeweeConnectionState(peewee._ConnectionState):\n    def __init__(self, **kwargs):\n        super().__setattr__(\"_state\", db_state)\n        super().__init__(**kwargs)\n\n    def __setattr__(self, name, value):\n        self._state.get()[name] = value\n\n    def __getattr__(self, name):\n        return self._state.get()[name]\n\n\n\ndb = peewee.SqliteDatabase(DATABASE_NAME, check_same_thread=False)\n\n\ndb._state = PeeweeConnectionState()\n\n\nasync def reset_db_state():\n    db._state._state.set(db_state_default.copy())\n    db._state.reset()\n\n\ndef get_db(db_state=Depends(reset_db_state)):\n    try:\n        db.connect()\n        yield\n    finally:\n        if not db.is_closed():\n            db.close()\n"}
{"type": "source_file", "path": "order/__init__.py", "content": ""}
{"type": "source_file", "path": "order/cruds.py", "content": ""}
{"type": "source_file", "path": "carts/schemas.py", "content": "import peewee\nfrom pydantic import BaseModel\nfrom pydantic.utils import GetterDict\nfrom typing import Any, List\n\n\nclass PeeweeGetterDict(GetterDict):\n    def get(self, key: Any, default: Any = None):\n        res = getattr(self._obj, key, default)\n        if isinstance(res, peewee.ModelSelect):\n            return list(res)\n        return res\n\n\nclass AddToCart(BaseModel):\n    product_id: int\n    quantity: int\n\n\nclass CartItems(BaseModel):\n    user_id: str\n    product_id: str\n    product_image: str\n    product_price: str\n    product_quantity: str\n    row_id: str\n\n\nclass Carts(BaseModel):\n    total_price: float\n    items: List[CartItems] = []\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n        "}
{"type": "source_file", "path": "admin/products/__init__.py", "content": ""}
{"type": "source_file", "path": "order/models.py", "content": "from operator import imod\nimport peewee\nfrom products.models import Product\nfrom accounts.models import User\nfrom database import db\nimport datetime\n\n\nclass Order(peewee.Model):\n    user = peewee.ForeignKeyField(User, on_delete='CASCADE')\n    price = peewee.DecimalField(max_digits=10, decimal_places=2)\n    paid = peewee.BooleanField(default=False)\n    create = peewee.DateTimeField(default=datetime.datetime.now())\n    address = peewee.TextField()\n    authority = peewee.CharField(null=True, max_length=100)\n\n    class Meta:\n        database = db\n\n\nclass OrderItem(peewee.Model):\n    order = peewee.ForeignKeyField(Order, on_delete='CASCADE')\n    product = peewee.ForeignKeyField(Product, on_delete='CASCADE')\n\n    class Meta:\n        database = db\n"}
{"type": "source_file", "path": "main.py", "content": "from typing import List\nfrom decouple import config\nfrom fastapi_mail import ConnectionConfig\nfrom fastapi import FastAPI\n\nfrom carts.routers import router as carts_router\n\nfrom order.models import Order, OrderItem\nfrom order.routers import router as orders_routers\n\nfrom accounts.models import User\nfrom accounts.routers import router as users_routers\n\nfrom products.models import Product, Gallery\nfrom products.routers import router as products_routers\n\nfrom admin.products.routers import router as admin_products_routers\nfrom admin.accounts.routers import router as admin_accounts_routers\n\nfrom database import db_state_default\nimport database\n\n\ndatabase.db.connect()\ndatabase.db.create_tables([User, Product, Gallery, Order, OrderItem])\ndatabase.db.close()\n\n\napp = FastAPI()\n\n\nconf = ConnectionConfig(\n   MAIL_USERNAME=config('MAIL_USERNAME'),\n   MAIL_PASSWORD=config('MAIL_PASSWORD'),\n   MAIL_FROM=config('MAIL_FROM'),\n   MAIL_PORT=587,\n   MAIL_SERVER=\"smtp.gmail.com\",\n   MAIL_TLS=True,\n   MAIL_SSL=False\n)\n\n\napp.include_router(carts_router)\napp.include_router(users_routers)\napp.include_router(products_routers)\napp.include_router(orders_routers)\napp.include_router(admin_products_routers)\napp.include_router(admin_accounts_routers)\n"}
{"type": "source_file", "path": "carts/cart.py", "content": "from products.models import Product\nimport redis\nimport uuid\nimport settings\n\n\nredis = redis.Redis(host='localhost', port=6379, db=1)\n\n\nclass Cart:\n    _EXPIRED_TIME = settings.EXPIRED_TIME\n\n    @classmethod\n    def add_to_cart(cls, **kwargs):\n        user_id = kwargs['user_id']\n        # check if cart already exists\n        for user_carts in redis.scan_iter(f\"carts:{user_id}:*\"):\n            data = {index.decode('utf-8'):value.decode('utf-8') for index,value in redis.hgetall(user_carts).items()}\n            if int(data['user_id']) == user_id and int(data['product_id']) == kwargs['product_id']:\n                return 'Item already in cart'\n            print(data)\n        kwargs['row_id'] = uuid.uuid4().hex\n        key = f\"carts:{user_id}:{kwargs['row_id']}\"\n        # store cart to redis\n        [redis.hset(key,index,value) for index,value in kwargs.items()]\n        # set expired shopping cart\n        redis.expire(key,cls._EXPIRED_TIME)\n        result = {key.decode('utf-8'):value.decode('utf-8') for key,value in redis.hgetall(key).items()}\n        return result\n\n    @classmethod\n    def carts(cls, user_id):\n        result = []\n        for user_carts in redis.scan_iter(f\"carts:{user_id}:*\"):\n            data = {index.decode('utf-8'):value.decode('utf-8') for index,value in redis.hgetall(user_carts).items()}\n            result.append(data)\n        return result\n\n    @classmethod        \n    def delete_cart(cls, user_id, rowId):\n        # if return 1 is true and return 0 is false it's mean data doesn't exists\n        return redis.delete(f\"carts:{user_id}:{rowId}\")\n\n    @classmethod\n    def delete_all_carts(cls, user_id):\n        [redis.delete(x) for x in redis.scan_iter(f\"carts:{user_id}:*\")]"}
{"type": "source_file", "path": "admin/products/routers.py", "content": "from typing import List, Optional\nfrom fastapi import APIRouter, Depends, status, File, UploadFile, Form\nfrom accounts.authentication import get_current_user_admin\nfrom pydantic.types import NonNegativeFloat\nfrom starlette.responses import JSONResponse\nfrom werkzeug.utils import secure_filename\nfrom products import schemas\nfrom products import cruds\nfrom database import get_db\nimport uuid, shutil\n\n\nrouter = APIRouter(\n    tags=['Admin Products'],\n    prefix='/admin/products',\n    dependencies=[Depends(get_current_user_admin)],\n)\n\n\n@router.post('/create', response_model=schemas.ProductDetail, dependencies=[Depends(get_db)])\ndef create(   \n    title: str = Form(...),\n    body: str = Form(...),\n    image: str = Form(...),\n    price: float = Form(...), \n    galleries: List[UploadFile] = File(...)):\n  \n    return cruds.create_product(\n        title,\n        body,\n        image,\n        price,\n        galleries\n    )\n\n\n@router.get('/list', response_model=List[schemas.ProductList], dependencies=[Depends(get_db)])\ndef list(skip: int = 0, limit: int = 100):\n    return cruds.get_products(skip=skip, limit=limit)\n\n\n@router.delete('/delete/{product_id}')\ndef delete(product_id: int):\n    cruds.delete_product(product_id=product_id)\n    return JSONResponse(status_code=status.HTTP_204_NO_CONTENT, content={\"message\": \"User delete.\"})\n\n\n@router.put('/update/{product_id}', response_model=schemas.ProductDetail, dependencies=[Depends(get_db)])\nasync def update(\n    product_id: int, \n    title: Optional[str] = None,\n    body: Optional[str] = None,\n    price: Optional[float] = None, \n    image: UploadFile = File(None)\n    ):\n    if image:\n        filename = f'media/products/{uuid.uuid1()}_{secure_filename(image.filename)}'\n        with open(f'{filename}', 'wb') as buffer:\n            shutil.copyfileobj(image.file, buffer)\n    product = cruds.get_product(product_id)\n    product.title = title or product.title\n    product.price = price or product.price\n    product.body = body or product.body\n    product.image = filename or product.image\n    product.save()\n    return product\n\n\n@router.get('/detail/{product_id}', response_model=schemas.ProductDetail, dependencies=[Depends(get_db)])\nasync def product(product_id: int):\n    return cruds.get_product(product_id)\n"}
{"type": "source_file", "path": "products/cruds.py", "content": "import shutil\nfrom fastapi import HTTPException, status\nfrom werkzeug.utils import secure_filename\nfrom products import schemas\nfrom . import models\nimport uuid\n\ndef get_products(skip: int = 0, limit: int = 100):\n    return list(models.Product.select().offset(skip).limit(limit))\n\n\ndef create_product( \n        title,\n        body,\n        image,\n        price,\n        galleries\n        ):\n    db_product = models.Product(\n        title=title,\n        body=body,\n        image=image,\n        price=price\n    )\n    db_product.save()\n    for image in galleries:\n        upload_image_product(image, db_product.id)\n    return db_product\n\n\ndef upload_image_product(image, product_id):\n    filename = f'media/product_galleries/{uuid.uuid1()}_{secure_filename(image.filename)}'\n    with open(f'{filename}', 'wb') as buffer:\n        shutil.copyfileobj(image.file, buffer)\n    models.Gallery(product=product_id, image=filename).save()\n\n\ndef delete_product(product_id: int):\n    product = models.Product.filter(models.Product.id == product_id).first()\n    if not product:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Product not found.')\n    product.delete_instance()\n    return 'Done.'\n\n\ndef get_product(product_id: int):\n    product = models.Product.filter(models.Product.id == product_id).first()\n    if not product:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Product not found.')\n    return product\n"}
{"type": "source_file", "path": "settings.py", "content": "from decouple import config\n\n\nJWT_SECRET =  config('JWT_SECRET') \nEXPIRED_TIME = 900  # 15 minute\n"}
{"type": "source_file", "path": "products/models.py", "content": "import peewee\nfrom database import db\n\n\nclass Product(peewee.Model):\n    title = peewee.CharField(max_length=50)\n    body = peewee.TextField()\n    image = peewee.CharField(max_length=100, unique=True)\n    price = peewee.DecimalField(max_digits=10, decimal_places=2)\n\n    class Meta:\n        database = db\n\n\nclass Gallery(peewee.Model):\n    product = peewee.ForeignKeyField(Product, on_delete='CASCADE', backref='galleries')\n    image = peewee.CharField(max_length=100, unique=True)\n    \n    class Meta:\n        database = db\n"}
{"type": "source_file", "path": "products/routers.py", "content": "from typing import List\nfrom fastapi import APIRouter, Depends\nfrom database import get_db\nfrom . import schemas\nfrom . import cruds\n\n\nrouter = APIRouter(\n    tags=['Products'],\n    prefix='/products'\n)\n\n\n\n@router.get('/list', response_model=List[schemas.ProductList], dependencies=[Depends(get_db)])\nasync def products(skip: int = 0, limit: int = 100):\n    return cruds.get_products(skip=skip, limit=limit)\n\n\n@router.get('/detail/{product_id}', response_model=schemas.ProductDetail, dependencies=[Depends(get_db)])\nasync def product(product_id: int):\n    return cruds.get_product(product_id)\n"}
{"type": "source_file", "path": "products/schemas.py", "content": "import peewee\nfrom pydantic import BaseModel\nfrom pydantic.utils import GetterDict\nfrom typing import Any, List\n\n\nclass PeeweeGetterDict(GetterDict):\n    def get(self, key: Any, default: Any = None):\n        res = getattr(self._obj, key, default)\n        if isinstance(res, peewee.ModelSelect):\n            return list(res)\n        return res\n\n\nclass GalleryBase(BaseModel):\n    image: str\n\n\nclass Gallery(GalleryBase):\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n\n\nclass ProductBase(BaseModel):\n    title: str\n    body: str\n    image: str\n    price: float\n\n\nclass ProductCreate(ProductBase):\n    pass\n\n\nclass ProductUpdata(BaseModel):\n    title: str\n    body: str\n    price: float\n\n\nclass ProductList(ProductBase):\n    id: int\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n\n\nclass ProductDetail(ProductBase):\n    id: int\n    galleries: List[Gallery] = []\n\n    class Config:\n        orm_mode = True\n        getter_dict = PeeweeGetterDict\n"}
{"type": "source_file", "path": "order/routers.py", "content": "from fastapi import APIRouter, Depends, status\nfrom starlette.responses import JSONResponse\nfrom accounts.authentication import get_current_user\nfrom .models import Order, OrderItem\nfrom products.models import Product\nfrom accounts.schemas import User\nfrom database import get_db\nfrom carts.cart import Cart\n\n\nrouter = APIRouter(\n    tags=['Orders'],\n    prefix='/orders'\n)\n\n\n@router.get('/list', dependencies=[Depends(get_db)])\nasync def list_order(user: User = Depends(get_current_user)):\n    orders = Order.filter(Order.user == user)\n    return orders\n\n\n@router.post('/create', dependencies=[Depends(get_db)])\nasync def create_order(address: str, user: User = Depends(get_current_user)):\n    carts = Cart.carts(user.id)\n    if carts == []:\n        content = {'error': 'carts are empty.'}\n        return JSONResponse(status_code=status.HTTP_400_BAD_REQUEST, content=content)\n\n    total_price = 0\n    for cart in carts:\n        total_price += float(cart['product_price'])\n    order = Order.objects.create(\n        user=user,\n        price=total_price,\n        paid=False,\n        address=address,\n        )\n    for cart in carts:\n        OrderItem.objects.create(\n            product=cart['product_id'],\n            order=order.id,\n        )\n    Cart.delete_all_carts(user.id)\n    content = {'massage': 'create order.'}\n    return JSONResponse(status_code=status.HTTP_201_CREATED, content=content)\n"}
{"type": "source_file", "path": "products/__init__.py", "content": ""}
