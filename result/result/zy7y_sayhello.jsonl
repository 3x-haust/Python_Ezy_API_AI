{"repo_info": {"repo_name": "sayhello", "repo_owner": "zy7y", "repo_url": "https://github.com/zy7y/sayhello"}}
{"type": "test_file", "path": "test_api.py", "content": "# 测试API\nimport operator\n\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import text\n\nfrom main import app, session\n\nclient = TestClient(app)\n\n\ndef test_index():\n    response = client.get(\"/index\")\n    assert response.status_code == 200\n    assert response.json() == {\"msg\": \"欢迎来到SayHello!\"}\n\n\n@pytest.mark.parametrize(\"skip, limit\", [[1, 2], [1, 10], [-1, 5]])\ndef test_get_message(skip, limit):\n    response = client.get(\"/message\", params={\"skip\": skip, \"limit\": limit})\n    assert response.status_code == 200\n    sql = \"select * from message order by create_at desc limit :skip,:limit\"\n    data = session.execute(text(sql), {\"skip\": skip, \"limit\": limit}).fetchall()\n    assert response.json()['data'][0][\"id\"] == data[0][\"id\"]\n\n\n@pytest.mark.parametrize(\"data\", [{\"name\": \"七七\", \"body\": \"回踩!\"}])\ndef test_add_message(data):\n    response = client.post(\"/message\", json=data)\n    assert response.status_code == 200\n    sql = \"select * from message where name = :name\"\n    result = session.execute(text(sql), {\"name\": data[\"name\"]}).fetchall()\n    assert result is not None\n"}
{"type": "source_file", "path": "main.py", "content": "from fastapi import FastAPI\nfrom sqlalchemy import func\nfrom starlette.middleware.cors import CORSMiddleware\n\nfrom schemas import *\nfrom db import session\nimport models\n\napp = FastAPI(title=\"SayHello(留言板)\",\n              description=\"\"\"\n              翻自 《Flask Web开发实战_入门、进阶与原理解析（李辉著 ）》 中的实战项目SayHello\n              原版Github: https://github.com/greyli/sayhello\n              \"\"\"\n              )\n\n# 设置跨域\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\",],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n@app.get(\"/index\", name=\"欢迎首页\")\nasync def index():\n    return {\"msg\": \"欢迎来到SayHello!\"}\n\n\n@app.post(\"/message\", name=\"添加留言\", response_model=Response200)\nasync def add_message(message: MessageCreate):\n    message_obj = models.Message(\n        name=message.name,\n        body=message.body\n    )\n    session.add(message_obj)\n    session.commit()\n    session.refresh(message_obj)\n    return Response200(data=message_obj)\n\n\n@app.get(\"/message\", name=\"分页获取留言列表\", response_model=ResponseList200)\nasync def get_messages(limit: int = 5, page: int = 1):\n    # 统计条数\n    total = session.query(func.count(models.Message.id)).scalar()\n    skip = (page - 1) * limit   # 计算当前页的起始数\n    # 倒序显示\n    data = session.query(models.Message).order_by(models.Message.create_at.desc()).offset(skip).limit(limit).all()\n    return ResponseList200(total=total, data=data)\n"}
{"type": "source_file", "path": "schemas.py", "content": "from datetime import datetime\n\nfrom fastapi import Body\nfrom pydantic import BaseModel\n\nfrom typing import List\n\n\nclass MessageBase(BaseModel):\n    name: str = Body(..., min_length=2, max_length=8)\n    body: str = Body(..., min_length=1, max_length=200)\n\n\nclass MessageCreate(MessageBase):\n    pass\n\n\nclass Message(MessageBase):\n    id: int = None\n    create_at: datetime\n\n    class Config:\n        orm_mode = True\n\n\nclass Response200(BaseModel):\n    code: int = 200\n    msg: str = \"操作成功\"\n    data: Message = None\n\n\nclass ResponseList200(Response200):\n    total: int\n    data: List[Message]\n\n\nclass Response400(Response200):\n    code: int = 400\n    msg: str = \"无数据返回\"\n"}
{"type": "source_file", "path": "db.py", "content": "from sqlalchemy import create_engine\n\nfrom sqlalchemy.orm import sessionmaker\n\nengine = create_engine(\"sqlite:///database.db\", connect_args={\"check_same_thread\": False})\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nsession = SessionLocal()\n"}
{"type": "source_file", "path": "models.py", "content": "from datetime import datetime\n\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, String, DateTime, Integer\n\n# 得到默认Base基类\nBase = declarative_base()\n\n\nclass Message(Base):\n    __tablename__ = \"message\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(60), comment=\"昵称\", nullable=False)\n    body = Column(String(200), comment=\"内容\", nullable=False)\n    create_at = Column(DateTime, default=datetime.now, comment=\"创建时间\")\n"}
