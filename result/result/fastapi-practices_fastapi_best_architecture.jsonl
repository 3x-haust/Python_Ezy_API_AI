{"repo_info": {"repo_name": "fastapi_best_architecture", "repo_owner": "fastapi-practices", "repo_url": "https://github.com/fastapi-practices/fastapi_best_architecture"}}
{"type": "test_file", "path": "backend/app/admin/tests/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"}
{"type": "test_file", "path": "backend/app/admin/tests/utils/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"}
{"type": "test_file", "path": "backend/app/admin/tests/api_v1/test_auth.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom starlette.testclient import TestClient\n\n\ndef test_logout(client: TestClient, token_headers: dict[str, str]) -> None:\n    response = client.post('/auth/logout', headers=token_headers)\n    assert response.status_code == 200\n    assert response.json()['code'] == 200\n"}
{"type": "test_file", "path": "backend/app/admin/tests/utils/db.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom backend.database.db import create_async_engine_and_session, create_database_url\n\nTEST_SQLALCHEMY_DATABASE_URL = create_database_url(unittest=True)\n\n_, async_test_db_session = create_async_engine_and_session(TEST_SQLALCHEMY_DATABASE_URL)\n\n\nasync def override_get_db():\n    \"\"\"session 生成器\"\"\"\n    async with async_test_db_session() as session:\n        yield session\n"}
{"type": "test_file", "path": "backend/app/admin/tests/api_v1/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"}
{"type": "test_file", "path": "backend/app/admin/tests/conftest.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Generator\n\nimport pytest\n\nfrom starlette.testclient import TestClient\n\nfrom backend.app.admin.tests.utils.db import override_get_db\nfrom backend.core.conf import settings\nfrom backend.database.db import get_db\nfrom backend.main import app\n\n# 重载数据库\napp.dependency_overrides[get_db] = override_get_db\n\n\n# Test data\nPYTEST_USERNAME = 'admin'\nPYTEST_PASSWORD = '123456'\nPYTEST_BASE_URL = f'http://testserver{settings.FASTAPI_API_V1_PATH}'\n\n\n@pytest.fixture(scope='module')\ndef client() -> Generator:\n    with TestClient(app, base_url=PYTEST_BASE_URL) as c:\n        yield c\n\n\n@pytest.fixture(scope='module')\ndef token_headers(client: TestClient) -> dict[str, str]:\n    params = {\n        'username': PYTEST_USERNAME,\n        'password': PYTEST_PASSWORD,\n    }\n    response = client.post('/auth/login/swagger', params=params)\n    response.raise_for_status()\n    token_type = response.json()['token_type']\n    access_token = response.json()['access_token']\n    headers = {'Authorization': f'{token_type} {access_token}'}\n    return headers\n"}
{"type": "source_file", "path": "backend/app/admin/model/dict_type.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import String\nfrom sqlalchemy.dialects.mysql import LONGTEXT\nfrom sqlalchemy.dialects.postgresql import TEXT\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom backend.common.model import Base, id_key\n\n\nclass DictType(Base):\n    \"\"\"字典类型\"\"\"\n\n    __tablename__ = 'sys_dict_type'\n\n    id: Mapped[id_key] = mapped_column(init=False)\n    name: Mapped[str] = mapped_column(String(32), unique=True, comment='字典类型名称')\n    code: Mapped[str] = mapped_column(String(32), unique=True, comment='字典类型编码')\n    status: Mapped[int] = mapped_column(default=1, comment='状态（0停用 1正常）')\n    remark: Mapped[str | None] = mapped_column(\n        LONGTEXT().with_variant(TEXT, 'postgresql'), default=None, comment='备注'\n    )\n\n    # 字典类型一对多\n    datas: Mapped[list['DictData']] = relationship(init=False, back_populates='type')  # noqa: F821\n"}
{"type": "source_file", "path": "backend/alembic/env.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# ruff: noqa: F403, F401, I001, RUF100\nimport asyncio\nimport os\nimport sys\nfrom logging.config import fileConfig\n\nfrom alembic import context\nfrom sqlalchemy import pool\nfrom sqlalchemy.engine import Connection\nfrom sqlalchemy.ext.asyncio import async_engine_from_config\n\nsys.path.append('../')\n\nfrom backend.common.model import MappedBase\nfrom backend.core import path_conf\nfrom backend.database.db import SQLALCHEMY_DATABASE_URL\nfrom backend.plugin.tools import get_plugin_models\n\n# import your new model here\nfrom backend.app.admin.model import *  # noqa: F401\nfrom backend.app.generator.model import *  # noqa: F401\n\n# import plugin model\nfor cls in get_plugin_models():\n    class_name = cls.__name__\n    if class_name in globals():\n        print(f'\\nWarning: Class \"{class_name}\" already exists in global namespace.')\n    else:\n        globals()[class_name] = cls\n\nif not os.path.exists(path_conf.ALEMBIC_VERSION_DIR):\n    os.makedirs(path_conf.ALEMBIC_VERSION_DIR)\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nalembic_config = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif alembic_config.config_file_name is not None:\n    fileConfig(alembic_config.config_file_name)\n\n# model's MetaData object\n# for 'autogenerate' support\ntarget_metadata = MappedBase.metadata\n\n# other values from the config, defined by the needs of env.py,\nalembic_config.set_main_option('sqlalchemy.url', SQLALCHEMY_DATABASE_URL.render_as_string(hide_password=False))\n\n\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = alembic_config.get_main_option('sqlalchemy.url')\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={'paramstyle': 'named'},\n        compare_type=True,\n        compare_server_default=True,\n        transaction_per_migration=True,\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef do_run_migrations(connection: Connection) -> None:\n    # 当迁移无变化时，不生成迁移记录\n    def process_revision_directives(context, revision, directives):\n        if alembic_config.cmd_opts.autogenerate:\n            script = directives[0]\n            if script.upgrade_ops.is_empty():\n                directives[:] = []\n                print('\\nNo changes in model detected')\n\n    context.configure(\n        connection=connection,\n        target_metadata=target_metadata,\n        compare_type=True,\n        compare_server_default=True,\n        transaction_per_migration=True,\n        process_revision_directives=process_revision_directives,\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\nasync def run_async_migrations() -> None:\n    \"\"\"In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n\n    connectable = async_engine_from_config(\n        alembic_config.get_section(alembic_config.config_ini_section, {}),\n        prefix='sqlalchemy.',\n        poolclass=pool.NullPool,\n    )\n\n    async with connectable.connect() as connection:\n        await connection.run_sync(do_run_migrations)\n\n    await connectable.dispose()\n\n\ndef run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n\n    asyncio.run(run_async_migrations())\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/auth/captcha.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fast_captcha import img_captcha\nfrom fastapi import APIRouter, Depends, Request\nfrom fastapi_limiter.depends import RateLimiter\nfrom starlette.concurrency import run_in_threadpool\n\nfrom backend.app.admin.conf import admin_settings\nfrom backend.app.admin.schema.captcha import GetCaptchaDetail\nfrom backend.common.response.response_schema import ResponseSchemaModel, response_base\nfrom backend.database.redis import redis_client\n\nrouter = APIRouter()\n\n\n@router.get(\n    '',\n    summary='获取登录验证码',\n    dependencies=[Depends(RateLimiter(times=5, seconds=10))],\n)\nasync def get_captcha(request: Request) -> ResponseSchemaModel[GetCaptchaDetail]:\n    \"\"\"\n    此接口可能存在性能损耗，尽管是异步接口，但是验证码生成是IO密集型任务，使用线程池尽量减少性能损耗\n    \"\"\"\n    img_type: str = 'base64'\n    img, code = await run_in_threadpool(img_captcha, img_byte=img_type)\n    ip = request.state.ip\n    await redis_client.set(\n        f'{admin_settings.CAPTCHA_LOGIN_REDIS_PREFIX}:{ip}',\n        code,\n        ex=admin_settings.CAPTCHA_LOGIN_EXPIRE_SECONDS,\n    )\n    data = GetCaptchaDetail(image_type=img_type, image=img)\n    return response_base.success(data=data)\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/log/login_log.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom backend.app.admin.schema.login_log import GetLoginLogDetail\nfrom backend.app.admin.service.login_log_service import login_log_service\nfrom backend.common.pagination import DependsPagination, PageData, paging_data\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.database.db import CurrentSession\n\nrouter = APIRouter()\n\n\n@router.get(\n    '',\n    summary='（模糊条件）分页获取登录日志',\n    dependencies=[\n        DependsJwtAuth,\n        DependsPagination,\n    ],\n)\nasync def get_pagination_login_logs(\n    db: CurrentSession,\n    username: Annotated[str | None, Query()] = None,\n    status: Annotated[int | None, Query()] = None,\n    ip: Annotated[str | None, Query()] = None,\n) -> ResponseSchemaModel[PageData[GetLoginLogDetail]]:\n    log_select = await login_log_service.get_select(username=username, status=status, ip=ip)\n    page_data = await paging_data(db, log_select)\n    return response_base.success(data=page_data)\n\n\n@router.delete(\n    '',\n    summary='（批量）删除登录日志',\n    dependencies=[\n        Depends(RequestPermission('log:login:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_login_log(pk: Annotated[list[int], Query(...)]) -> ResponseModel:\n    count = await login_log_service.delete(pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    '/all',\n    summary='清空登录日志',\n    dependencies=[\n        Depends(RequestPermission('log:login:empty')),\n        DependsRBAC,\n    ],\n)\nasync def delete_all_login_logs() -> ResponseModel:\n    count = await login_log_service.delete_all()\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/api/router.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter\n\nfrom backend.app.admin.api.v1.auth import router as auth_router\nfrom backend.app.admin.api.v1.log import router as log_router\nfrom backend.app.admin.api.v1.monitor import router as monitor_router\nfrom backend.app.admin.api.v1.oauth2 import router as oauth2_router\nfrom backend.app.admin.api.v1.sys import router as sys_router\nfrom backend.core.conf import settings\n\nv1 = APIRouter(prefix=settings.FASTAPI_API_V1_PATH)\n\nv1.include_router(auth_router)\nv1.include_router(oauth2_router)\nv1.include_router(sys_router)\nv1.include_router(log_router)\nv1.include_router(monitor_router)\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/monitor/redis.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter, Depends\n\nfrom backend.common.response.response_schema import ResponseModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.utils.redis_info import redis_info\n\nrouter = APIRouter()\n\n\n@router.get(\n    '',\n    summary='redis 监控',\n    dependencies=[\n        Depends(RequestPermission('sys:monitor:redis')),\n        DependsJwtAuth,\n    ],\n)\nasync def get_redis_info() -> ResponseModel:\n    data = {'info': await redis_info.get_info(), 'stats': await redis_info.get_stats()}\n    return response_base.success(data=data)\n"}
{"type": "source_file", "path": "backend/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/monitor/server.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter, Depends\nfrom starlette.concurrency import run_in_threadpool\n\nfrom backend.common.response.response_schema import ResponseModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.utils.server_info import server_info\n\nrouter = APIRouter()\n\n\n@router.get(\n    '',\n    summary='server 监控',\n    dependencies=[\n        Depends(RequestPermission('sys:monitor:server')),\n        DependsJwtAuth,\n    ],\n)\nasync def get_server_info() -> ResponseModel:\n    data = {\n        # 扔到线程池，避免阻塞\n        'cpu': await run_in_threadpool(server_info.get_cpu_info),\n        'mem': await run_in_threadpool(server_info.get_mem_info),\n        'sys': await run_in_threadpool(server_info.get_sys_info),\n        'disk': await run_in_threadpool(server_info.get_disk_info),\n        'service': await run_in_threadpool(server_info.get_service_info),\n    }\n    return response_base.success(data=data)\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/upload.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, File, UploadFile\n\nfrom backend.common.dataclasses import UploadUrl\nfrom backend.common.enums import FileType\nfrom backend.common.response.response_schema import ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.utils.file_ops import file_verify, upload_file\n\nrouter = APIRouter()\n\n\n@router.post('/image', summary='上传图片', dependencies=[DependsJwtAuth])\nasync def upload_image(file: Annotated[UploadFile, File()]) -> ResponseSchemaModel[UploadUrl]:\n    file_verify(file, FileType.image)\n    filename = await upload_file(file)\n    return response_base.success(data={'url': f'/static/upload/{filename}'})\n\n\n@router.post('/video', summary='上传视频', dependencies=[DependsJwtAuth])\nasync def upload_video(file: Annotated[UploadFile, File()]) -> ResponseSchemaModel[UploadUrl]:\n    file_verify(file, FileType.video)\n    filename = await upload_file(file)\n    return response_base.success(data={'url': f'/static/upload/{filename}'})\n"}
{"type": "source_file", "path": "backend/app/admin/api/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/monitor/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter\n\nfrom backend.app.admin.api.v1.monitor.redis import router as redis_router\nfrom backend.app.admin.api.v1.monitor.server import router as server_router\n\nrouter = APIRouter(prefix='/monitors')\n\nrouter.include_router(redis_router, prefix='/redis', tags=['redis监控'])\nrouter.include_router(server_router, prefix='/server', tags=['服务器监控'])\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/token.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport json\n\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, Path, Query, Request\n\nfrom backend.app.admin.schema.token import GetTokenDetail, KickOutToken\nfrom backend.common.enums import StatusType\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth, jwt_decode, superuser_verify\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.core.conf import settings\nfrom backend.database.redis import redis_client\n\nrouter = APIRouter()\n\n\n@router.get('', summary='获取令牌列表', dependencies=[DependsJwtAuth])\nasync def get_tokens(username: Annotated[str | None, Query()] = None) -> ResponseSchemaModel[list[GetTokenDetail]]:\n    token_keys = await redis_client.keys(f'{settings.TOKEN_REDIS_PREFIX}:*')\n    token_online = await redis_client.smembers(settings.TOKEN_ONLINE_REDIS_PREFIX)\n    data = []\n    for key in token_keys:\n        token = await redis_client.get(key)\n        token_payload = jwt_decode(token)\n        session_uuid = token_payload.session_uuid\n        token_detail = GetTokenDetail(\n            id=token_payload.id,\n            session_uuid=session_uuid,\n            username='未知',\n            nickname='未知',\n            ip='未知',\n            os='未知',\n            browser='未知',\n            device='未知',\n            status=StatusType.disable if session_uuid not in token_online else StatusType.enable,\n            last_login_time='未知',\n            expire_time=token_payload.expire_time,\n        )\n        extra_info = await redis_client.get(f'{settings.TOKEN_EXTRA_INFO_REDIS_PREFIX}:{session_uuid}')\n        if extra_info:\n\n            def append_token_detail():\n                data.append(\n                    token_detail.model_copy(\n                        update={\n                            'username': extra_info.get('username'),\n                            'nickname': extra_info.get('nickname'),\n                            'ip': extra_info.get('ip'),\n                            'os': extra_info.get('os'),\n                            'browser': extra_info.get('browser'),\n                            'device': extra_info.get('device'),\n                            'last_login_time': extra_info.get('last_login_time'),\n                        }\n                    )\n                )\n\n            extra_info = json.loads(extra_info)\n            if extra_info.get('login_type') != 'swagger':\n                if username:\n                    if username == extra_info.get('username'):\n                        append_token_detail()\n                else:\n                    append_token_detail()\n        else:\n            data.append(token_detail)\n    return response_base.success(data=data)\n\n\n@router.delete(\n    '/{pk}',\n    summary='踢下线',\n    dependencies=[\n        Depends(RequestPermission('sys:token:kick')),\n        DependsRBAC,\n    ],\n)\nasync def kick_out(request: Request, pk: Annotated[int, Path(...)], session_uuid: KickOutToken) -> ResponseModel:\n    superuser_verify(request)\n    await redis_client.delete(f'{settings.TOKEN_REDIS_PREFIX}:{pk}:{session_uuid}')\n    return response_base.success()\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/oauth2/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter\n\nfrom backend.app.admin.api.v1.oauth2.github import router as github_router\nfrom backend.app.admin.api.v1.oauth2.linux_do import router as linux_do_router\n\nrouter = APIRouter(prefix='/oauth2')\n\nrouter.include_router(github_router, prefix='/github', tags=['GitHub OAuth2'])\nrouter.include_router(linux_do_router, prefix='/linux-do', tags=['LinuxDo OAuth2'])\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_dept.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Sequence\n\nfrom sqlalchemy import select\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import selectinload\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import Dept, User\nfrom backend.app.admin.schema.dept import CreateDeptParam, UpdateDeptParam\n\n\nclass CRUDDept(CRUDPlus[Dept]):\n    async def get(self, db: AsyncSession, dept_id: int) -> Dept | None:\n        \"\"\"\n        获取部门\n\n        :param db:\n        :param dept_id:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, id=dept_id, del_flag=0)\n\n    async def get_by_name(self, db: AsyncSession, name: str) -> Dept | None:\n        \"\"\"\n        通过 name 获取 API\n\n        :param db:\n        :param name:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, name=name, del_flag=0)\n\n    async def get_all(\n        self, db: AsyncSession, name: str = None, leader: str = None, phone: str = None, status: int = None\n    ) -> Sequence[Dept]:\n        \"\"\"\n        获取所有部门\n\n        :param db:\n        :param name:\n        :param leader:\n        :param phone:\n        :param status:\n        :return:\n        \"\"\"\n        filters = {'del_flag__eq': 0}\n        if name is not None:\n            filters.update(name__like=f'%{name}%')\n        if leader is not None:\n            filters.update(leader__like=f'%{leader}%')\n        if phone is not None:\n            filters.update(phone__startswith=phone)\n        if status is not None:\n            filters.update(status=status)\n        return await self.select_models_order(db, sort_columns='sort', **filters)\n\n    async def create(self, db: AsyncSession, obj_in: CreateDeptParam) -> None:\n        \"\"\"\n        创建部门\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in)\n\n    async def update(self, db: AsyncSession, dept_id: int, obj_in: UpdateDeptParam) -> int:\n        \"\"\"\n        更新部门\n\n        :param db:\n        :param dept_id:\n        :param obj_in:\n        :return:\n        \"\"\"\n        return await self.update_model(db, dept_id, obj_in)\n\n    async def delete(self, db: AsyncSession, dept_id: int) -> int:\n        \"\"\"\n        删除部门\n\n        :param db:\n        :param dept_id:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(db, id=dept_id, logical_deletion=True, deleted_flag_column='del_flag')\n\n    async def get_with_relation(self, db: AsyncSession, dept_id: int) -> list[User]:\n        \"\"\"\n        获取关联\n\n        :param db:\n        :param dept_id:\n        :return:\n        \"\"\"\n        stmt = select(self.model).options(selectinload(self.model.users)).where(self.model.id == dept_id)\n        result = await db.execute(stmt)\n        user_relation = result.scalars().first()\n        return user_relation.users\n\n    async def get_children(self, db: AsyncSession, dept_id: int) -> list[Dept]:\n        \"\"\"\n        获取子部门\n\n        :param db:\n        :param dept_id:\n        :return:\n        \"\"\"\n        stmt = select(self.model).options(selectinload(self.model.children)).where(self.model.id == dept_id)\n        result = await db.execute(stmt)\n        dept = result.scalars().first()\n        return dept.children\n\n\ndept_dao: CRUDDept = CRUDDept(Dept)\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/dict_data.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, Path, Query\n\nfrom backend.app.admin.schema.dict_data import (\n    CreateDictDataParam,\n    GetDictDataDetail,\n    GetDictDataWithRelation,\n    UpdateDictDataParam,\n)\nfrom backend.app.admin.service.dict_data_service import dict_data_service\nfrom backend.common.pagination import DependsPagination, PageData, paging_data\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.database.db import CurrentSession\n\nrouter = APIRouter()\n\n\n@router.get('/{pk}', summary='获取字典详情', dependencies=[DependsJwtAuth])\nasync def get_dict_data(pk: Annotated[int, Path(...)]) -> ResponseSchemaModel[GetDictDataWithRelation]:\n    data = await dict_data_service.get(pk=pk)\n    return response_base.success(data=data)\n\n\n@router.get(\n    '',\n    summary='（模糊条件）分页获取所有字典',\n    dependencies=[\n        DependsJwtAuth,\n        DependsPagination,\n    ],\n)\nasync def get_pagination_dict_datas(\n    db: CurrentSession,\n    label: Annotated[str | None, Query()] = None,\n    value: Annotated[str | None, Query()] = None,\n    status: Annotated[int | None, Query()] = None,\n) -> ResponseSchemaModel[PageData[GetDictDataDetail]]:\n    dict_data_select = await dict_data_service.get_select(label=label, value=value, status=status)\n    page_data = await paging_data(db, dict_data_select)\n    return response_base.success(data=page_data)\n\n\n@router.post(\n    '',\n    summary='创建字典',\n    dependencies=[\n        Depends(RequestPermission('sys:dict:data:add')),\n        DependsRBAC,\n    ],\n)\nasync def create_dict_data(obj: CreateDictDataParam) -> ResponseModel:\n    await dict_data_service.create(obj=obj)\n    return response_base.success()\n\n\n@router.put(\n    '/{pk}',\n    summary='更新字典',\n    dependencies=[\n        Depends(RequestPermission('sys:dict:data:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_dict_data(pk: Annotated[int, Path(...)], obj: UpdateDictDataParam) -> ResponseModel:\n    count = await dict_data_service.update(pk=pk, obj=obj)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    '',\n    summary='（批量）删除字典',\n    dependencies=[\n        Depends(RequestPermission('sys:dict:data:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_dict_data(pk: Annotated[list[int], Query(...)]) -> ResponseModel:\n    count = await dict_data_service.delete(pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/oauth2/linux_do.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter, BackgroundTasks, Depends, Request, Response\nfrom fastapi_limiter.depends import RateLimiter\nfrom fastapi_oauth20 import FastAPIOAuth20, LinuxDoOAuth20\nfrom starlette.responses import RedirectResponse\n\nfrom backend.app.admin.conf import admin_settings\nfrom backend.app.admin.service.oauth2_service import oauth2_service\nfrom backend.common.enums import UserSocialType\nfrom backend.common.response.response_schema import ResponseSchemaModel, response_base\n\nrouter = APIRouter()\n\n_linux_do_client = LinuxDoOAuth20(\n    admin_settings.OAUTH2_LINUX_DO_CLIENT_ID,\n    admin_settings.OAUTH2_LINUX_DO_CLIENT_SECRET,\n)\n_linux_do_oauth2 = FastAPIOAuth20(_linux_do_client, admin_settings.OAUTH2_LINUX_DO_REDIRECT_URI)\n\n\n@router.get('', summary='获取 Linux Do 授权链接')\nasync def linux_do_auth2() -> ResponseSchemaModel[str]:\n    auth_url = await _linux_do_client.get_authorization_url(redirect_uri=admin_settings.OAUTH2_LINUX_DO_REDIRECT_URI)\n    return response_base.success(data=auth_url)\n\n\n@router.get(\n    '/callback',\n    summary='Linux Do 授权自动重定向',\n    description='Linux Do 授权后，自动重定向到当前地址并获取用户信息，通过用户信息自动创建系统用户',\n    dependencies=[Depends(RateLimiter(times=5, minutes=1))],\n)\nasync def linux_do_login(\n    request: Request,\n    response: Response,\n    background_tasks: BackgroundTasks,\n    oauth2: FastAPIOAuth20 = Depends(_linux_do_oauth2),\n):\n    token, _state = oauth2\n    access_token = token['access_token']\n    user = await _linux_do_client.get_userinfo(access_token)\n    data = await oauth2_service.create_with_login(\n        request=request,\n        response=response,\n        background_tasks=background_tasks,\n        user=user,\n        social=UserSocialType.linuxdo,\n    )\n    return RedirectResponse(url=f'{admin_settings.OAUTH2_FRONTEND_REDIRECT_URI}?access_token={data.access_token}')\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/oauth2/github.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter, BackgroundTasks, Depends, Request, Response\nfrom fastapi_limiter.depends import RateLimiter\nfrom fastapi_oauth20 import FastAPIOAuth20, GitHubOAuth20\nfrom starlette.responses import RedirectResponse\n\nfrom backend.app.admin.conf import admin_settings\nfrom backend.app.admin.service.oauth2_service import oauth2_service\nfrom backend.common.enums import UserSocialType\nfrom backend.common.response.response_schema import ResponseSchemaModel, response_base\n\nrouter = APIRouter()\n\n_github_client = GitHubOAuth20(admin_settings.OAUTH2_GITHUB_CLIENT_ID, admin_settings.OAUTH2_GITHUB_CLIENT_SECRET)\n_github_oauth2 = FastAPIOAuth20(_github_client, admin_settings.OAUTH2_GITHUB_REDIRECT_URI)\n\n\n@router.get('', summary='获取 Github 授权链接')\nasync def github_auth2() -> ResponseSchemaModel[str]:\n    auth_url = await _github_client.get_authorization_url(redirect_uri=admin_settings.OAUTH2_GITHUB_REDIRECT_URI)\n    return response_base.success(data=auth_url)\n\n\n@router.get(\n    '/callback',\n    summary='Github 授权自动重定向',\n    description='Github 授权后，自动重定向到当前地址并获取用户信息，通过用户信息自动创建系统用户',\n    dependencies=[Depends(RateLimiter(times=5, minutes=1))],\n)\nasync def github_login(\n    request: Request,\n    response: Response,\n    background_tasks: BackgroundTasks,\n    oauth2: FastAPIOAuth20 = Depends(_github_oauth2),\n):\n    token, _state = oauth2\n    access_token = token['access_token']\n    user = await _github_client.get_userinfo(access_token)\n    data = await oauth2_service.create_with_login(\n        request=request,\n        response=response,\n        background_tasks=background_tasks,\n        user=user,\n        social=UserSocialType.github,\n    )\n    return RedirectResponse(url=f'{admin_settings.OAUTH2_FRONTEND_REDIRECT_URI}?access_token={data.access_token}')\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/menu.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated, Any\n\nfrom fastapi import APIRouter, Depends, Path, Query, Request\n\nfrom backend.app.admin.schema.menu import CreateMenuParam, GetMenuDetail, UpdateMenuParam\nfrom backend.app.admin.service.menu_service import menu_service\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\n\nrouter = APIRouter()\n\n\n@router.get('/sidebar', summary='获取用户菜单展示树', dependencies=[DependsJwtAuth])\nasync def get_user_sidebar_tree(request: Request) -> ResponseSchemaModel[list[dict[str, Any]]]:\n    menu = await menu_service.get_user_menu_tree(request=request)\n    return response_base.success(data=menu)\n\n\n@router.get('/{pk}', summary='获取菜单详情', dependencies=[DependsJwtAuth])\nasync def get_menu(pk: Annotated[int, Path(...)]) -> ResponseSchemaModel[GetMenuDetail]:\n    data = await menu_service.get(pk=pk)\n    return response_base.success(data=data)\n\n\n@router.get('', summary='获取所有菜单展示树', dependencies=[DependsJwtAuth])\nasync def get_all_menus(\n    title: Annotated[str | None, Query()] = None, status: Annotated[int | None, Query()] = None\n) -> ResponseSchemaModel[list[dict[str, Any]]]:\n    menu = await menu_service.get_menu_tree(title=title, status=status)\n    return response_base.success(data=menu)\n\n\n@router.post(\n    '',\n    summary='创建菜单',\n    dependencies=[\n        Depends(RequestPermission('sys:menu:add')),\n        DependsRBAC,\n    ],\n)\nasync def create_menu(obj: CreateMenuParam) -> ResponseModel:\n    await menu_service.create(obj=obj)\n    return response_base.success()\n\n\n@router.put(\n    '/{pk}',\n    summary='更新菜单',\n    dependencies=[\n        Depends(RequestPermission('sys:menu:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_menu(pk: Annotated[int, Path(...)], obj: UpdateMenuParam) -> ResponseModel:\n    count = await menu_service.update(pk=pk, obj=obj)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    '/{pk}',\n    summary='删除菜单',\n    dependencies=[\n        Depends(RequestPermission('sys:menu:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_menu(request: Request, pk: Annotated[int, Path(...)]) -> ResponseModel:\n    count = await menu_service.delete(request=request, pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_menu.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Sequence\n\nfrom sqlalchemy import and_, asc, select\nfrom sqlalchemy.orm import selectinload\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import Menu\nfrom backend.app.admin.schema.menu import CreateMenuParam, UpdateMenuParam\n\n\nclass CRUDMenu(CRUDPlus[Menu]):\n    async def get(self, db, menu_id: int) -> Menu | None:\n        \"\"\"\n        获取菜单\n\n        :param db:\n        :param menu_id:\n        :return:\n        \"\"\"\n        return await self.select_model(db, menu_id)\n\n    async def get_by_title(self, db, title: str) -> Menu | None:\n        \"\"\"\n        通过 title 获取菜单\n\n        :param db:\n        :param title:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, title=title, menu_type__ne=2)\n\n    async def get_all(self, db, title: str | None = None, status: int | None = None) -> Sequence[Menu]:\n        \"\"\"\n        获取所有菜单\n\n        :param db:\n        :param title:\n        :param status:\n        :return:\n        \"\"\"\n        filters = {}\n        if title is not None:\n            filters.update(title=f'%{title}%')\n        if status is not None:\n            filters.update(status=status)\n        return await self.select_models_order(db, 'sort', **filters)\n\n    async def get_role_menus(self, db, superuser: bool, menu_ids: list[int]) -> Sequence[Menu]:\n        \"\"\"\n        获取角色菜单\n\n        :param db:\n        :param superuser:\n        :param menu_ids:\n        :return:\n        \"\"\"\n        stmt = select(self.model).order_by(asc(self.model.sort))\n        where_list = [self.model.menu_type.in_([0, 1])]\n        if not superuser:\n            where_list.append(self.model.id.in_(menu_ids))\n        stmt = stmt.where(and_(*where_list))\n        menu = await db.execute(stmt)\n        return menu.scalars().all()\n\n    async def create(self, db, obj_in: CreateMenuParam) -> None:\n        \"\"\"\n        创建菜单\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in)\n\n    async def update(self, db, menu_id: int, obj_in: UpdateMenuParam) -> int:\n        \"\"\"\n        更新菜单\n\n        :param db:\n        :param menu_id:\n        :param obj_in:\n        :return:\n        \"\"\"\n        return await self.update_model(db, menu_id, obj_in)\n\n    async def delete(self, db, menu_id: int) -> int:\n        \"\"\"\n        删除菜单\n\n        :param db:\n        :param menu_id:\n        :return:\n        \"\"\"\n        return await self.delete_model(db, menu_id)\n\n    async def get_children(self, db, menu_id: int) -> list[Menu]:\n        \"\"\"\n        获取子菜单\n\n        :param db:\n        :param menu_id:\n        :return:\n        \"\"\"\n        stmt = select(self.model).options(selectinload(self.model.children)).where(self.model.id == menu_id)\n        result = await db.execute(stmt)\n        menu = result.scalars().first()\n        return menu.children\n\n\nmenu_dao: CRUDMenu = CRUDMenu(Menu)\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/auth/auth.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, Request, Response\nfrom fastapi.security import HTTPBasicCredentials\nfrom fastapi_limiter.depends import RateLimiter\nfrom starlette.background import BackgroundTasks\n\nfrom backend.app.admin.schema.token import GetLoginToken, GetNewToken, GetSwaggerToken\nfrom backend.app.admin.schema.user import AuthLoginParam\nfrom backend.app.admin.service.auth_service import auth_service\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\n\nrouter = APIRouter()\n\n\n@router.post('/login/swagger', summary='swagger 调试专用', description='用于快捷获取 token 进行 swagger 认证')\nasync def swagger_login(obj: Annotated[HTTPBasicCredentials, Depends()]) -> GetSwaggerToken:\n    token, user = await auth_service.swagger_login(obj=obj)\n    return GetSwaggerToken(access_token=token, user=user)  # type: ignore\n\n\n@router.post(\n    '/login',\n    summary='用户登录',\n    description='json 格式登录, 仅支持在第三方api工具调试, 例如: postman',\n    dependencies=[Depends(RateLimiter(times=5, minutes=1))],\n)\nasync def user_login(\n    request: Request, response: Response, obj: AuthLoginParam, background_tasks: BackgroundTasks\n) -> ResponseSchemaModel[GetLoginToken]:\n    data = await auth_service.login(request=request, response=response, obj=obj, background_tasks=background_tasks)\n    return response_base.success(data=data)\n\n\n@router.post('/token/new', summary='创建新 token')\nasync def create_new_token(request: Request, response: Response) -> ResponseSchemaModel[GetNewToken]:\n    data = await auth_service.new_token(request=request)\n    return response_base.success(data=data)\n\n\n@router.post('/logout', summary='用户登出', dependencies=[DependsJwtAuth])\nasync def user_logout(request: Request, response: Response) -> ResponseModel:\n    await auth_service.logout(request=request, response=response)\n    return response_base.success()\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_config.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Sequence\n\nfrom sqlalchemy import Select\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.conf import admin_settings\nfrom backend.app.admin.model import Config\nfrom backend.app.admin.schema.config import CreateConfigParam, UpdateConfigParam\n\n\nclass CRUDConfig(CRUDPlus[Config]):\n    async def get(self, db: AsyncSession, pk: int) -> Config | None:\n        \"\"\"\n        获取系统参数配置\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, id=pk, type__not_in=admin_settings.CONFIG_BUILT_IN_TYPES)\n\n    async def get_by_type(self, db: AsyncSession, type: str) -> Sequence[Config]:\n        \"\"\"\n        通过 type 获取内置系统配置\n\n        :param db:\n        :param type:\n        :return:\n        \"\"\"\n        return await self.select_models(db, type=type)\n\n    async def get_by_key_and_type(self, db: AsyncSession, key: str, type: str) -> Config | None:\n        \"\"\"\n        通过 name 和 type 获取内置系统配置\n\n        :param db:\n        :param key:\n        :param type:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, key=key, type=type)\n\n    async def get_by_key(self, db: AsyncSession, key: str) -> Config | None:\n        \"\"\"\n        通过 key 获取系统配置参数\n\n        :param db:\n        :param key:\n        :param built_in:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, key=key)\n\n    async def get_list(self, name: str = None, type: str = None) -> Select:\n        \"\"\"\n        获取系统参数配置列表\n\n        :param name:\n        :param type:\n        :return:\n        \"\"\"\n        filters = {'type__not_in': admin_settings.CONFIG_BUILT_IN_TYPES}\n        if name is not None:\n            filters.update(name__like=f'%{name}%')\n        if type is not None:\n            filters.update(type__like=f'%{type}%')\n        return await self.select_order('created_time', 'desc', **filters)\n\n    async def create(self, db: AsyncSession, obj_in: CreateConfigParam) -> None:\n        \"\"\"\n        创建 Config\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in)\n\n    async def update(self, db: AsyncSession, pk: int, obj_in: UpdateConfigParam) -> int:\n        \"\"\"\n        更新 Config\n\n        :param db:\n        :param pk:\n        :param obj_in:\n        :return:\n        \"\"\"\n        return await self.update_model(db, pk, obj_in)\n\n    async def delete(self, db: AsyncSession, pk: list[int]) -> int:\n        \"\"\"\n        删除 Config\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(\n            db, allow_multiple=True, id__in=pk, type__not_in=admin_settings.CONFIG_BUILT_IN_TYPES\n        )\n\n\nconfig_dao: CRUDConfig = CRUDConfig(Config)\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/auth/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter\n\nfrom backend.app.admin.api.v1.auth.auth import router as auth_router\nfrom backend.app.admin.api.v1.auth.captcha import router as captcha_router\n\nrouter = APIRouter(prefix='/auth')\n\nrouter.include_router(auth_router, tags=['授权'])\nrouter.include_router(captcha_router, prefix='/captcha', tags=['验证码'])\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter\n\nfrom backend.app.admin.api.v1.sys.config import router as config_router\nfrom backend.app.admin.api.v1.sys.data_rule import router as data_rule_router\nfrom backend.app.admin.api.v1.sys.dept import router as dept_router\nfrom backend.app.admin.api.v1.sys.dict_data import router as dict_data_router\nfrom backend.app.admin.api.v1.sys.dict_type import router as dict_type_router\nfrom backend.app.admin.api.v1.sys.menu import router as menu_router\nfrom backend.app.admin.api.v1.sys.plugin import router as plugin_router\nfrom backend.app.admin.api.v1.sys.role import router as role_router\nfrom backend.app.admin.api.v1.sys.token import router as token_router\nfrom backend.app.admin.api.v1.sys.upload import router as upload_router\nfrom backend.app.admin.api.v1.sys.user import router as user_router\n\nrouter = APIRouter(prefix='/sys')\n\nrouter.include_router(config_router, prefix='/configs', tags=['系统配置'])\nrouter.include_router(dept_router, prefix='/depts', tags=['系统部门'])\nrouter.include_router(dict_data_router, prefix='/dict-datas', tags=['系统字典数据'])\nrouter.include_router(dict_type_router, prefix='/dict-types', tags=['系统字典类型'])\nrouter.include_router(menu_router, prefix='/menus', tags=['系统菜单'])\nrouter.include_router(role_router, prefix='/roles', tags=['系统角色'])\nrouter.include_router(user_router, prefix='/users', tags=['系统用户'])\nrouter.include_router(data_rule_router, prefix='/data-rules', tags=['系统数据权限规则'])\nrouter.include_router(token_router, prefix='/tokens', tags=['系统令牌'])\nrouter.include_router(upload_router, prefix='/upload', tags=['系统上传'])\nrouter.include_router(plugin_router, prefix='/plugin', tags=['系统插件'])\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/user.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, Path, Query, Request\n\nfrom backend.app.admin.schema.user import (\n    AddUserParam,\n    AvatarParam,\n    GetCurrentUserInfoWithRelationDetail,\n    GetUserInfoWithRelationDetail,\n    RegisterUserParam,\n    ResetPasswordParam,\n    UpdateUserParam,\n    UpdateUserRoleParam,\n)\nfrom backend.app.admin.service.user_service import user_service\nfrom backend.common.pagination import DependsPagination, PageData, paging_data\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.database.db import CurrentSession\n\nrouter = APIRouter()\n\n\n@router.post('/register', summary='注册用户')\nasync def register_user(obj: RegisterUserParam) -> ResponseModel:\n    await user_service.register(obj=obj)\n    return response_base.success()\n\n\n@router.post('/add', summary='添加用户', dependencies=[DependsRBAC])\nasync def add_user(request: Request, obj: AddUserParam) -> ResponseSchemaModel[GetUserInfoWithRelationDetail]:\n    await user_service.add(request=request, obj=obj)\n    data = await user_service.get_userinfo(username=obj.username)\n    return response_base.success(data=data)\n\n\n@router.post('/password/reset', summary='密码重置', dependencies=[DependsJwtAuth])\nasync def password_reset(request: Request, obj: ResetPasswordParam) -> ResponseModel:\n    count = await user_service.pwd_reset(request=request, obj=obj)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.get('/me', summary='获取当前用户信息', dependencies=[DependsJwtAuth], response_model_exclude={'password'})\nasync def get_current_user(request: Request) -> ResponseSchemaModel[GetCurrentUserInfoWithRelationDetail]:\n    data = request.user.model_dump()\n    return response_base.success(data=data)\n\n\n@router.get('/{username}', summary='查看用户信息', dependencies=[DependsJwtAuth])\nasync def get_user(username: Annotated[str, Path(...)]) -> ResponseSchemaModel[GetUserInfoWithRelationDetail]:\n    data = await user_service.get_userinfo(username=username)\n    return response_base.success(data=data)\n\n\n@router.put('/{username}', summary='更新用户信息', dependencies=[DependsJwtAuth])\nasync def update_user(request: Request, username: Annotated[str, Path(...)], obj: UpdateUserParam) -> ResponseModel:\n    count = await user_service.update(request=request, username=username, obj=obj)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.put(\n    '/{username}/role',\n    summary='更新用户角色',\n    dependencies=[\n        Depends(RequestPermission('sys:user:role:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_user_role(\n    request: Request, username: Annotated[str, Path(...)], obj: UpdateUserRoleParam\n) -> ResponseModel:\n    await user_service.update_roles(request=request, username=username, obj=obj)\n    return response_base.success()\n\n\n@router.put('/{username}/avatar', summary='更新头像', dependencies=[DependsJwtAuth])\nasync def update_avatar(request: Request, username: Annotated[str, Path(...)], avatar: AvatarParam) -> ResponseModel:\n    count = await user_service.update_avatar(request=request, username=username, avatar=avatar)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.get(\n    '',\n    summary='（模糊条件）分页获取所有用户',\n    dependencies=[\n        DependsJwtAuth,\n        DependsPagination,\n    ],\n)\nasync def get_pagination_users(\n    db: CurrentSession,\n    dept: Annotated[int | None, Query()] = None,\n    username: Annotated[str | None, Query()] = None,\n    phone: Annotated[str | None, Query()] = None,\n    status: Annotated[int | None, Query()] = None,\n) -> ResponseSchemaModel[PageData[GetUserInfoWithRelationDetail]]:\n    user_select = await user_service.get_select(dept=dept, username=username, phone=phone, status=status)\n    page_data = await paging_data(db, user_select)\n    return response_base.success(data=page_data)\n\n\n@router.put('/{pk}/super', summary='修改用户超级权限', dependencies=[DependsRBAC])\nasync def super_set(request: Request, pk: Annotated[int, Path(...)]) -> ResponseModel:\n    count = await user_service.update_permission(request=request, pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.put('/{pk}/staff', summary='修改用户后台登录权限', dependencies=[DependsRBAC])\nasync def staff_set(request: Request, pk: Annotated[int, Path(...)]) -> ResponseModel:\n    count = await user_service.update_staff(request=request, pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.put('/{pk}/status', summary='修改用户状态', dependencies=[DependsRBAC])\nasync def status_set(request: Request, pk: Annotated[int, Path(...)]) -> ResponseModel:\n    count = await user_service.update_status(request=request, pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.put('/{pk}/multi', summary='修改用户多点登录状态', dependencies=[DependsRBAC])\nasync def multi_set(request: Request, pk: Annotated[int, Path(...)]) -> ResponseModel:\n    count = await user_service.update_multi_login(request=request, pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    path='/{username}',\n    summary='用户注销',\n    description='用户注销 != 用户登出，注销之后用户将从数据库删除',\n    dependencies=[\n        Depends(RequestPermission('sys:user:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_user(username: Annotated[str, Path(...)]) -> ResponseModel:\n    count = await user_service.delete(username=username)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/log/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom fastapi import APIRouter\n\nfrom backend.app.admin.api.v1.log.login_log import router as login_log\nfrom backend.app.admin.api.v1.log.opera_log import router as opera_log\n\nrouter = APIRouter(prefix='/logs')\n\nrouter.include_router(login_log, prefix='/login', tags=['登录日志'])\nrouter.include_router(opera_log, prefix='/opera', tags=['操作日志'])\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/data_rule.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, Path, Query, Request\n\nfrom backend.app.admin.schema.data_rule import CreateDataRuleParam, GetDataRuleDetail, UpdateDataRuleParam\nfrom backend.app.admin.service.data_rule_service import data_rule_service\nfrom backend.common.pagination import DependsPagination, PageData, paging_data\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.database.db import CurrentSession\n\nrouter = APIRouter()\n\n\n@router.get('/models', summary='获取支持过滤的数据库模型', dependencies=[DependsJwtAuth])\nasync def get_data_rule_models() -> ResponseSchemaModel[list[str]]:\n    models = await data_rule_service.get_models()\n    return response_base.success(data=models)\n\n\n@router.get('/model/{model}/columns', summary='获取支持过滤的数据库模型列', dependencies=[DependsJwtAuth])\nasync def get_data_rule_model_columns(model: Annotated[str, Path()]) -> ResponseSchemaModel[list[str]]:\n    models = await data_rule_service.get_columns(model=model)\n    return response_base.success(data=models)\n\n\n@router.get('/all', summary='获取所有数据规则', dependencies=[DependsJwtAuth])\nasync def get_all_data_rule() -> ResponseSchemaModel[list[GetDataRuleDetail]]:\n    data = await data_rule_service.get_all()\n    return response_base.success(data=data)\n\n\n@router.get('/{pk}', summary='获取数据权限规则详情', dependencies=[DependsJwtAuth])\nasync def get_data_rule(pk: Annotated[int, Path(...)]) -> ResponseSchemaModel[GetDataRuleDetail]:\n    data = await data_rule_service.get(pk=pk)\n    return response_base.success(data=data)\n\n\n@router.get(\n    '',\n    summary='（模糊条件）分页获取所有数据权限规则',\n    dependencies=[\n        DependsJwtAuth,\n        DependsPagination,\n    ],\n)\nasync def get_pagination_data_rule(\n    db: CurrentSession, name: Annotated[str | None, Query()] = None\n) -> ResponseSchemaModel[PageData[GetDataRuleDetail]]:\n    data_rule_select = await data_rule_service.get_select(name=name)\n    page_data = await paging_data(db, data_rule_select)\n    return response_base.success(data=page_data)\n\n\n@router.post(\n    '',\n    summary='创建数据权限规则',\n    dependencies=[\n        Depends(RequestPermission('data:rule:add')),\n        DependsRBAC,\n    ],\n)\nasync def create_data_rule(obj: CreateDataRuleParam) -> ResponseModel:\n    await data_rule_service.create(obj=obj)\n    return response_base.success()\n\n\n@router.put(\n    '/{pk}',\n    summary='更新数据权限规则',\n    dependencies=[\n        Depends(RequestPermission('data:rule:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_data_rule(pk: Annotated[int, Path(...)], obj: UpdateDataRuleParam) -> ResponseModel:\n    count = await data_rule_service.update(pk=pk, obj=obj)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    '',\n    summary='（批量）删除数据权限规则',\n    dependencies=[\n        Depends(RequestPermission('data:rule:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_data_rule(request: Request, pk: Annotated[list[int], Query(...)]) -> ResponseModel:\n    count = await data_rule_service.delete(request=request, pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/conf.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom functools import lru_cache\n\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\nfrom backend.core.path_conf import BasePath\n\n\nclass AdminSettings(BaseSettings):\n    \"\"\"Admin Settings\"\"\"\n\n    model_config = SettingsConfigDict(env_file=f'{BasePath}/.env', env_file_encoding='utf-8', extra='ignore')\n\n    # OAuth2：https://github.com/fastapi-practices/fastapi_oauth20\n    # GitHub\n    OAUTH2_GITHUB_CLIENT_ID: str\n    OAUTH2_GITHUB_CLIENT_SECRET: str\n    OAUTH2_GITHUB_REDIRECT_URI: str = 'http://127.0.0.1:8000/api/v1/oauth2/github/callback'\n\n    # Linux Do\n    OAUTH2_LINUX_DO_CLIENT_ID: str\n    OAUTH2_LINUX_DO_CLIENT_SECRET: str\n    OAUTH2_LINUX_DO_REDIRECT_URI: str = 'http://127.0.0.1:8000/api/v1/oauth2/linux-do/callback'\n\n    # Front-end redirect address\n    OAUTH2_FRONTEND_REDIRECT_URI: str = 'http://localhost:5173/oauth2/callback'\n\n    # Captcha\n    CAPTCHA_LOGIN_REDIS_PREFIX: str = 'fba:login:captcha'\n    CAPTCHA_LOGIN_EXPIRE_SECONDS: int = 60 * 5  # 过期时间，单位：秒\n\n    # Config\n    CONFIG_BUILT_IN_TYPES: list = ['website', 'protocol', 'policy']\n\n\n@lru_cache\ndef get_admin_settings() -> AdminSettings:\n    \"\"\"获取 admin 配置\"\"\"\n    return AdminSettings()\n\n\nadmin_settings = get_admin_settings()\n"}
{"type": "source_file", "path": "backend/app/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_dict_type.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import Select\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import DictType\nfrom backend.app.admin.schema.dict_type import CreateDictTypeParam, UpdateDictTypeParam\n\n\nclass CRUDDictType(CRUDPlus[DictType]):\n    async def get(self, db: AsyncSession, pk: int) -> DictType | None:\n        \"\"\"\n        获取字典类型\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.select_model(db, pk)\n\n    async def get_list(self, *, name: str = None, code: str = None, status: int = None) -> Select:\n        \"\"\"\n        获取所有字典类型\n\n        :param name:\n        :param code:\n        :param status:\n        :return:\n        \"\"\"\n        filters = {}\n        if name is not None:\n            filters.update(name__like=f'%{name}%')\n        if code is not None:\n            filters.update(code__like=f'%{code}%')\n        if status is not None:\n            filters.update(status=status)\n        return await self.select_order('created_time', 'desc', **filters)\n\n    async def get_by_code(self, db: AsyncSession, code: str) -> DictType | None:\n        \"\"\"\n        通过 code 获取字典类型\n\n        :param db:\n        :param code:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, code=code)\n\n    async def create(self, db: AsyncSession, obj_in: CreateDictTypeParam) -> None:\n        \"\"\"\n        创建字典类型\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in)\n\n    async def update(self, db: AsyncSession, pk: int, obj_in: UpdateDictTypeParam) -> int:\n        \"\"\"\n        更新字典类型\n\n        :param db:\n        :param pk:\n        :param obj_in:\n        :return:\n        \"\"\"\n        return await self.update_model(db, pk, obj_in)\n\n    async def delete(self, db: AsyncSession, pk: list[int]) -> int:\n        \"\"\"\n        删除字典类型\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(db, allow_multiple=True, id__in=pk)\n\n\ndict_type_dao: CRUDDictType = CRUDDictType(DictType)\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_role.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Sequence\n\nfrom sqlalchemy import Select, desc, select\nfrom sqlalchemy.orm import noload, selectinload\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import DataRule, Menu, Role, User\nfrom backend.app.admin.schema.role import (\n    CreateRoleParam,\n    UpdateRoleMenuParam,\n    UpdateRoleParam,\n    UpdateRoleRuleParam,\n)\n\n\nclass CRUDRole(CRUDPlus[Role]):\n    async def get(self, db, role_id: int) -> Role | None:\n        \"\"\"\n        获取角色\n\n        :param db:\n        :param role_id:\n        :return:\n        \"\"\"\n        return await self.select_model(db, role_id)\n\n    async def get_with_relation(self, db, role_id: int) -> Role | None:\n        \"\"\"\n        获取角色和菜单\n\n        :param db:\n        :param role_id:\n        :return:\n        \"\"\"\n        stmt = (\n            select(self.model)\n            .options(selectinload(self.model.menus), selectinload(self.model.rules))\n            .where(self.model.id == role_id)\n        )\n        role = await db.execute(stmt)\n        return role.scalars().first()\n\n    async def get_all(self, db) -> Sequence[Role]:\n        \"\"\"\n        获取所有角色\n\n        :param db:\n        :return:\n        \"\"\"\n        return await self.select_models(db)\n\n    async def get_by_user(self, db, user_id: int) -> Sequence[Role]:\n        \"\"\"\n        获取用户所有角色\n\n        :param db:\n        :param user_id:\n        :return:\n        \"\"\"\n        stmt = select(self.model).join(self.model.users).where(User.id == user_id)\n        roles = await db.execute(stmt)\n        return roles.scalars().all()\n\n    async def get_list(self, name: str = None, status: int = None) -> Select:\n        \"\"\"\n        获取角色列表\n\n        :param name:\n        :param status:\n        :return:\n        \"\"\"\n        stmt = (\n            select(self.model)\n            .options(noload(self.model.users), noload(self.model.menus), noload(self.model.rules))\n            .order_by(desc(self.model.created_time))\n        )\n        where_list = []\n        if name:\n            where_list.append(self.model.name.like(f'%{name}%'))\n        if status is not None:\n            where_list.append(self.model.status == status)\n        if where_list:\n            stmt = stmt.where(*where_list)\n        return stmt\n\n    async def get_by_name(self, db, name: str) -> Role | None:\n        \"\"\"\n        通过 name 获取角色\n\n        :param db:\n        :param name:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, name=name)\n\n    async def create(self, db, obj_in: CreateRoleParam) -> None:\n        \"\"\"\n        创建角色\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in)\n\n    async def update(self, db, role_id: int, obj_in: UpdateRoleParam) -> int:\n        \"\"\"\n        更新角色\n\n        :param db:\n        :param role_id:\n        :param obj_in:\n        :return:\n        \"\"\"\n        return await self.update_model(db, role_id, obj_in)\n\n    async def update_menus(self, db, role_id: int, menu_ids: UpdateRoleMenuParam) -> int:\n        \"\"\"\n        更新角色菜单\n\n        :param db:\n        :param role_id:\n        :param menu_ids:\n        :return:\n        \"\"\"\n        current_role = await self.get_with_relation(db, role_id)\n        # 更新菜单\n        stmt = select(Menu).where(Menu.id.in_(menu_ids.menus))\n        menus = await db.execute(stmt)\n        current_role.menus = menus.scalars().all()\n        return len(current_role.menus)\n\n    async def update_rules(self, db, role_id: int, rule_ids: UpdateRoleRuleParam) -> int:\n        \"\"\"\n        更新角色数据权限\n\n        :param db:\n        :param role_id:\n        :param rule_ids:\n        :return:\n        \"\"\"\n        current_role = await self.get_with_relation(db, role_id)\n        # 更新数据权限\n        stmt = select(DataRule).where(DataRule.id.in_(rule_ids.rules))\n        rules = await db.execute(stmt)\n        current_role.rules = rules.scalars().all()\n        return len(current_role.rules)\n\n    async def delete(self, db, role_id: list[int]) -> int:\n        \"\"\"\n        删除角色\n\n        :param db:\n        :param role_id:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(db, allow_multiple=True, id__in=role_id)\n\n\nrole_dao: CRUDRole = CRUDRole(Role)\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/dept.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated, Any\n\nfrom fastapi import APIRouter, Depends, Path, Query, Request\n\nfrom backend.app.admin.schema.dept import CreateDeptParam, GetDeptDetail, UpdateDeptParam\nfrom backend.app.admin.service.dept_service import dept_service\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\n\nrouter = APIRouter()\n\n\n@router.get('/{pk}', summary='获取部门详情', dependencies=[DependsJwtAuth])\nasync def get_dept(pk: Annotated[int, Path(...)]) -> ResponseSchemaModel[GetDeptDetail]:\n    data = await dept_service.get(pk=pk)\n    return response_base.success(data=data)\n\n\n@router.get('', summary='获取所有部门展示树', dependencies=[DependsJwtAuth])\nasync def get_all_depts_tree(\n    name: Annotated[str | None, Query()] = None,\n    leader: Annotated[str | None, Query()] = None,\n    phone: Annotated[str | None, Query()] = None,\n    status: Annotated[int | None, Query()] = None,\n) -> ResponseSchemaModel[list[dict[str, Any]]]:\n    dept = await dept_service.get_dept_tree(name=name, leader=leader, phone=phone, status=status)\n    return response_base.success(data=dept)\n\n\n@router.post(\n    '',\n    summary='创建部门',\n    dependencies=[\n        Depends(RequestPermission('sys:dept:add')),\n        DependsRBAC,\n    ],\n)\nasync def create_dept(obj: CreateDeptParam) -> ResponseModel:\n    await dept_service.create(obj=obj)\n    return response_base.success()\n\n\n@router.put(\n    '/{pk}',\n    summary='更新部门',\n    dependencies=[\n        Depends(RequestPermission('sys:dept:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_dept(pk: Annotated[int, Path(...)], obj: UpdateDeptParam) -> ResponseModel:\n    count = await dept_service.update(pk=pk, obj=obj)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    '/{pk}',\n    summary='删除部门',\n    dependencies=[\n        Depends(RequestPermission('sys:dept:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_dept(request: Request, pk: Annotated[int, Path(...)]) -> ResponseModel:\n    count = await dept_service.delete(request=request, pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_dict_data.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import Select, and_, desc, select\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import noload, selectinload\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import DictData\nfrom backend.app.admin.schema.dict_data import CreateDictDataParam, UpdateDictDataParam\n\n\nclass CRUDDictData(CRUDPlus[DictData]):\n    async def get(self, db: AsyncSession, pk: int) -> DictData | None:\n        \"\"\"\n        获取字典数据\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.select_model(db, pk)\n\n    async def get_list(self, label: str = None, value: str = None, status: int = None) -> Select:\n        \"\"\"\n        获取所有字典数据\n\n        :param label:\n        :param value:\n        :param status:\n        :return:\n        \"\"\"\n        stmt = select(self.model).options(noload(self.model.type)).order_by(desc(self.model.sort))\n        where_list = []\n        if label is not None:\n            where_list.append(self.model.label.like(f'%{label}%'))\n        if value is not None:\n            where_list.append(self.model.value.like(f'%{value}%'))\n        if status is not None:\n            where_list.append(self.model.status == status)\n        if where_list:\n            stmt = stmt.where(and_(*where_list))\n        return stmt\n\n    async def get_by_label(self, db: AsyncSession, label: str) -> DictData | None:\n        \"\"\"\n        通过 label 获取字典数据\n\n        :param db:\n        :param label:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, label=label)\n\n    async def create(self, db: AsyncSession, obj_in: CreateDictDataParam) -> None:\n        \"\"\"\n        创建数据字典\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in)\n\n    async def update(self, db: AsyncSession, pk: int, obj_in: UpdateDictDataParam) -> int:\n        \"\"\"\n        更新数据字典\n\n        :param db:\n        :param pk:\n        :param obj_in:\n        :return:\n        \"\"\"\n        return await self.update_model(db, pk, obj_in)\n\n    async def delete(self, db: AsyncSession, pk: list[int]) -> int:\n        \"\"\"\n        删除字典数据\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(db, allow_multiple=True, id__in=pk)\n\n    async def get_with_relation(self, db: AsyncSession, pk: int) -> DictData | None:\n        \"\"\"\n        获取字典数据和类型\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        stmt = select(self.model).options(selectinload(self.model.type)).where(self.model.id == pk)\n        dict_data = await db.execute(stmt)\n        return dict_data.scalars().first()\n\n\ndict_data_dao: CRUDDictData = CRUDDictData(DictData)\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/role.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated, Any\n\nfrom fastapi import APIRouter, Depends, Path, Query, Request\n\nfrom backend.app.admin.schema.role import (\n    CreateRoleParam,\n    GetRoleDetail,\n    GetRoleWithRelationDetail,\n    UpdateRoleMenuParam,\n    UpdateRoleParam,\n    UpdateRoleRuleParam,\n)\nfrom backend.app.admin.service.data_rule_service import data_rule_service\nfrom backend.app.admin.service.menu_service import menu_service\nfrom backend.app.admin.service.role_service import role_service\nfrom backend.common.pagination import DependsPagination, PageData, paging_data\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.database.db import CurrentSession\n\nrouter = APIRouter()\n\n\n@router.get('/all', summary='获取所有角色', dependencies=[DependsJwtAuth])\nasync def get_all_roles() -> ResponseSchemaModel[list[GetRoleDetail]]:\n    data = await role_service.get_all()\n    return response_base.success(data=data)\n\n\n@router.get('/{pk}/all', summary='获取用户所有角色', dependencies=[DependsJwtAuth])\nasync def get_user_all_roles(pk: Annotated[int, Path(...)]) -> ResponseSchemaModel[list[GetRoleDetail]]:\n    data = await role_service.get_by_user(pk=pk)\n    return response_base.success(data=data)\n\n\n@router.get('/{pk}/menus', summary='获取角色所有菜单', dependencies=[DependsJwtAuth])\nasync def get_role_all_menus(pk: Annotated[int, Path(...)]) -> ResponseSchemaModel[list[dict[str, Any]]]:\n    menu = await menu_service.get_role_menu_tree(pk=pk)\n    return response_base.success(data=menu)\n\n\n@router.get('/{pk}/rules', summary='获取角色所有数据规则', dependencies=[DependsJwtAuth])\nasync def get_role_all_rules(pk: Annotated[int, Path(...)]) -> ResponseSchemaModel[list[int]]:\n    rule = await data_rule_service.get_role_rules(pk=pk)\n    return response_base.success(data=rule)\n\n\n@router.get('/{pk}', summary='获取角色详情', dependencies=[DependsJwtAuth])\nasync def get_role(pk: Annotated[int, Path(...)]) -> ResponseSchemaModel[GetRoleWithRelationDetail]:\n    data = await role_service.get(pk=pk)\n    return response_base.success(data=data)\n\n\n@router.get(\n    '',\n    summary='（模糊条件）分页获取所有角色',\n    dependencies=[\n        DependsJwtAuth,\n        DependsPagination,\n    ],\n)\nasync def get_pagination_roles(\n    db: CurrentSession,\n    name: Annotated[str | None, Query()] = None,\n    status: Annotated[int | None, Query()] = None,\n) -> ResponseSchemaModel[PageData[GetRoleDetail]]:\n    role_select = await role_service.get_select(name=name, status=status)\n    page_data = await paging_data(db, role_select)\n    return response_base.success(data=page_data)\n\n\n@router.post(\n    '',\n    summary='创建角色',\n    dependencies=[\n        Depends(RequestPermission('sys:role:add')),\n        DependsRBAC,\n    ],\n)\nasync def create_role(obj: CreateRoleParam) -> ResponseModel:\n    await role_service.create(obj=obj)\n    return response_base.success()\n\n\n@router.put(\n    '/{pk}',\n    summary='更新角色',\n    dependencies=[\n        Depends(RequestPermission('sys:role:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_role(pk: Annotated[int, Path(...)], obj: UpdateRoleParam) -> ResponseModel:\n    count = await role_service.update(pk=pk, obj=obj)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.put(\n    '/{pk}/menu',\n    summary='更新角色菜单',\n    dependencies=[\n        Depends(RequestPermission('sys:role:menu:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_role_menus(\n    request: Request, pk: Annotated[int, Path(...)], menu_ids: UpdateRoleMenuParam\n) -> ResponseModel:\n    count = await role_service.update_role_menu(request=request, pk=pk, menu_ids=menu_ids)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.put(\n    '/{pk}/rule',\n    summary='更新角色数据权限规则',\n    dependencies=[\n        Depends(RequestPermission('sys:role:rule:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_role_rules(\n    request: Request, pk: Annotated[int, Path(...)], rule_ids: UpdateRoleRuleParam\n) -> ResponseModel:\n    count = await role_service.update_role_rule(request=request, pk=pk, rule_ids=rule_ids)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    '',\n    summary='（批量）删除角色',\n    dependencies=[\n        Depends(RequestPermission('sys:role:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_role(request: Request, pk: Annotated[list[int], Query(...)]) -> ResponseModel:\n    count = await role_service.delete(request=request, pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/log/opera_log.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, Query\n\nfrom backend.app.admin.schema.opera_log import GetOperaLogDetail\nfrom backend.app.admin.service.opera_log_service import opera_log_service\nfrom backend.common.pagination import DependsPagination, PageData, paging_data\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.database.db import CurrentSession\n\nrouter = APIRouter()\n\n\n@router.get(\n    '',\n    summary='（模糊条件）分页获取操作日志',\n    dependencies=[\n        DependsJwtAuth,\n        DependsPagination,\n    ],\n)\nasync def get_pagination_opera_logs(\n    db: CurrentSession,\n    username: Annotated[str | None, Query()] = None,\n    status: Annotated[int | None, Query()] = None,\n    ip: Annotated[str | None, Query()] = None,\n) -> ResponseSchemaModel[PageData[GetOperaLogDetail]]:\n    log_select = await opera_log_service.get_select(username=username, status=status, ip=ip)\n    page_data = await paging_data(db, log_select)\n    return response_base.success(data=page_data)\n\n\n@router.delete(\n    '',\n    summary='（批量）删除操作日志',\n    dependencies=[\n        Depends(RequestPermission('log:opera:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_opera_log(pk: Annotated[list[int], Query(...)]) -> ResponseModel:\n    count = await opera_log_service.delete(pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    '/all',\n    summary='清空操作日志',\n    dependencies=[\n        Depends(RequestPermission('log:opera:empty')),\n        DependsRBAC,\n    ],\n)\nasync def delete_all_opera_logs() -> ResponseModel:\n    count = await opera_log_service.delete_all()\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_login_log.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import Select\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import LoginLog\nfrom backend.app.admin.schema.login_log import CreateLoginLogParam\n\n\nclass CRUDLoginLog(CRUDPlus[LoginLog]):\n    async def get_list(self, username: str | None = None, status: int | None = None, ip: str | None = None) -> Select:\n        \"\"\"\n        获取登录日志列表\n\n        :param username:\n        :param status:\n        :param ip:\n        :return:\n        \"\"\"\n        filters = {}\n        if username is not None:\n            filters.update(username__like=f'%{username}%')\n        if status is not None:\n            filters.update(status=status)\n        if ip is not None:\n            filters.update(ip__like=f'%{ip}%')\n        return await self.select_order('created_time', 'desc', **filters)\n\n    async def create(self, db: AsyncSession, obj_in: CreateLoginLogParam) -> None:\n        \"\"\"\n        创建登录日志\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in, commit=True)\n\n    async def delete(self, db: AsyncSession, pk: list[int]) -> int:\n        \"\"\"\n        删除登录日志\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(db, allow_multiple=True, id__in=pk)\n\n    async def delete_all(self, db: AsyncSession) -> int:\n        \"\"\"\n        删除所有登录日志\n\n        :param db:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(db, allow_multiple=True)\n\n\nlogin_log_dao: CRUDLoginLog = CRUDLoginLog(LoginLog)\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/config.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, Path, Query\n\nfrom backend.app.admin.schema.config import (\n    CreateConfigParam,\n    GetConfigDetail,\n    SaveBuiltInConfigParam,\n    UpdateConfigParam,\n)\nfrom backend.app.admin.service.config_service import config_service\nfrom backend.common.pagination import DependsPagination, PageData, paging_data\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.database.db import CurrentSession\n\nrouter = APIRouter()\n\n\n@router.get('/website', summary='获取网站配置信息', dependencies=[DependsJwtAuth])\nasync def get_website_config() -> ResponseSchemaModel[list[GetConfigDetail]]:\n    config = await config_service.get_built_in_config('website')\n    return response_base.success(data=config)\n\n\n@router.post(\n    '/website',\n    summary='保存网站配置信息',\n    dependencies=[\n        Depends(RequestPermission('sys:config:website:add')),\n        DependsRBAC,\n    ],\n)\nasync def save_website_config(objs: list[SaveBuiltInConfigParam]) -> ResponseModel:\n    await config_service.save_built_in_config(objs, 'website')\n    return response_base.success()\n\n\n@router.get('/protocol', summary='获取用户协议', dependencies=[DependsJwtAuth])\nasync def get_protocol_config() -> ResponseSchemaModel[list[GetConfigDetail]]:\n    config = await config_service.get_built_in_config('protocol')\n    return response_base.success(data=config)\n\n\n@router.post(\n    '/protocol',\n    summary='保存用户协议',\n    dependencies=[\n        Depends(RequestPermission('sys:config:protocol:add')),\n        DependsRBAC,\n    ],\n)\nasync def save_protocol_config(objs: list[SaveBuiltInConfigParam]) -> ResponseModel:\n    await config_service.save_built_in_config(objs, 'protocol')\n    return response_base.success()\n\n\n@router.get('/policy', summary='获取用户政策', dependencies=[DependsJwtAuth])\nasync def get_policy_config() -> ResponseSchemaModel[list[GetConfigDetail]]:\n    config = await config_service.get_built_in_config('policy')\n    return response_base.success(data=config)\n\n\n@router.post(\n    '/policy',\n    summary='保存用户政策',\n    dependencies=[\n        Depends(RequestPermission('sys:config:policy:add')),\n        DependsRBAC,\n    ],\n)\nasync def save_policy_config(objs: list[SaveBuiltInConfigParam]) -> ResponseModel:\n    await config_service.save_built_in_config(objs, 'policy')\n    return response_base.success()\n\n\n@router.get('/{pk}', summary='获取系统参数配置详情', dependencies=[DependsJwtAuth])\nasync def get_config(pk: Annotated[int, Path(...)]) -> ResponseSchemaModel[GetConfigDetail]:\n    config = await config_service.get(pk)\n    return response_base.success(data=config)\n\n\n@router.get(\n    '',\n    summary='（模糊条件）分页获取所有系统参数配置',\n    dependencies=[\n        DependsJwtAuth,\n        DependsPagination,\n    ],\n)\nasync def get_pagination_config(\n    db: CurrentSession,\n    name: Annotated[str | None, Query()] = None,\n    type: Annotated[str | None, Query()] = None,\n) -> ResponseSchemaModel[PageData[GetConfigDetail]]:\n    config_select = await config_service.get_select(name=name, type=type)\n    page_data = await paging_data(db, config_select)\n    return response_base.success(data=page_data)\n\n\n@router.post(\n    '',\n    summary='创建系统参数配置',\n    dependencies=[\n        Depends(RequestPermission('sys:config:add')),\n        DependsRBAC,\n    ],\n)\nasync def create_config(obj: CreateConfigParam) -> ResponseModel:\n    await config_service.create(obj=obj)\n    return response_base.success()\n\n\n@router.put(\n    '/{pk}',\n    summary='更新系统参数配置',\n    dependencies=[\n        Depends(RequestPermission('sys:config:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_config(pk: Annotated[int, Path(...)], obj: UpdateConfigParam) -> ResponseModel:\n    count = await config_service.update(pk=pk, obj=obj)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    '',\n    summary='（批量）删除系统参数配置',\n    dependencies=[\n        Depends(RequestPermission('sys:config:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_config(pk: Annotated[list[int], Query(...)]) -> ResponseModel:\n    count = await config_service.delete(pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_opera_log.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import Select\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import OperaLog\nfrom backend.app.admin.schema.opera_log import CreateOperaLogParam\n\n\nclass CRUDOperaLogDao(CRUDPlus[OperaLog]):\n    async def get_list(self, username: str | None = None, status: int | None = None, ip: str | None = None) -> Select:\n        \"\"\"\n        获取操作日志列表\n\n        :param username:\n        :param status:\n        :param ip:\n        :return:\n        \"\"\"\n        filters = {}\n        if username is not None:\n            filters.update(username=f'%{username}%')\n        if status is not None:\n            filters.update(status=status)\n        if ip is not None:\n            filters.update(ip=f'%{ip}%')\n        return await self.select_order('created_time', 'desc', **filters)\n\n    async def create(self, db: AsyncSession, obj_in: CreateOperaLogParam) -> None:\n        \"\"\"\n        创建操作日志\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in)\n\n    async def delete(self, db: AsyncSession, pk: list[int]) -> int:\n        \"\"\"\n        删除操作日志\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(db, allow_multiple=True, id__in=pk)\n\n    async def delete_all(self, db: AsyncSession) -> int:\n        \"\"\"\n        删除所有操作日志\n\n        :param db:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(db, allow_multiple=True)\n\n\nopera_log_dao: CRUDOperaLogDao = CRUDOperaLogDao(OperaLog)\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_data_rule.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Sequence\n\nfrom sqlalchemy import Select, desc, select\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import noload\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import DataRule\nfrom backend.app.admin.schema.data_rule import CreateDataRuleParam, UpdateDataRuleParam\n\n\nclass CRUDDataRule(CRUDPlus[DataRule]):\n    async def get(self, db: AsyncSession, pk: int) -> DataRule | None:\n        \"\"\"\n        获取数据权限规则\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.select_model(db, pk)\n\n    async def get_list(self, name: str = None) -> Select:\n        \"\"\"\n        获取数据权限规则列表\n\n        :return:\n        \"\"\"\n        stmt = select(self.model).options(noload(self.model.roles)).order_by(desc(self.model.created_time))\n        where_list = []\n        if name is not None:\n            where_list.append(self.model.name.like(f'%{name}%'))\n        if where_list:\n            stmt = stmt.where(*where_list)\n        return stmt\n\n    async def get_by_name(self, db: AsyncSession, name: str):\n        \"\"\"\n        通过 name 获取数据权限规则\n\n        :param db:\n        :param name:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, name=name)\n\n    async def get_all(self, db: AsyncSession) -> Sequence[DataRule]:\n        \"\"\"\n        获取所有数据权限规则\n\n        :param db:\n        :return:\n        \"\"\"\n        return await self.select_models(db)\n\n    async def create(self, db: AsyncSession, obj_in: CreateDataRuleParam) -> None:\n        \"\"\"\n        创建数据权限规则\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in)\n\n    async def update(self, db: AsyncSession, pk: int, obj_in: UpdateDataRuleParam) -> int:\n        \"\"\"\n        更新数据权限规则\n\n        :param db:\n        :param pk:\n        :param obj_in:\n        :return:\n        \"\"\"\n        return await self.update_model(db, pk, obj_in)\n\n    async def delete(self, db: AsyncSession, pk: list[int]) -> int:\n        \"\"\"\n        删除数据权限规则\n\n        :param db:\n        :param pk:\n        :return:\n        \"\"\"\n        return await self.delete_model_by_column(db, allow_multiple=True, id__in=pk)\n\n\ndata_rule_dao: CRUDDataRule = CRUDDataRule(DataRule)\n"}
{"type": "source_file", "path": "backend/app/admin/crud/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/dict_type.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, Path, Query\n\nfrom backend.app.admin.schema.dict_type import CreateDictTypeParam, GetDictTypeDetail, UpdateDictTypeParam\nfrom backend.app.admin.service.dict_type_service import dict_type_service\nfrom backend.common.pagination import DependsPagination, PageData, paging_data\nfrom backend.common.response.response_schema import ResponseModel, ResponseSchemaModel, response_base\nfrom backend.common.security.jwt import DependsJwtAuth\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.database.db import CurrentSession\n\nrouter = APIRouter()\n\n\n@router.get(\n    '',\n    summary='（模糊条件）分页获取所有字典类型',\n    dependencies=[\n        DependsJwtAuth,\n        DependsPagination,\n    ],\n)\nasync def get_pagination_dict_types(\n    db: CurrentSession,\n    name: Annotated[str | None, Query()] = None,\n    code: Annotated[str | None, Query()] = None,\n    status: Annotated[int | None, Query()] = None,\n) -> ResponseSchemaModel[PageData[GetDictTypeDetail]]:\n    dict_type_select = await dict_type_service.get_select(name=name, code=code, status=status)\n    page_data = await paging_data(db, dict_type_select)\n    return response_base.success(data=page_data)\n\n\n@router.post(\n    '',\n    summary='创建字典类型',\n    dependencies=[\n        Depends(RequestPermission('sys:dict:type:add')),\n        DependsRBAC,\n    ],\n)\nasync def create_dict_type(obj: CreateDictTypeParam) -> ResponseModel:\n    await dict_type_service.create(obj=obj)\n    return response_base.success()\n\n\n@router.put(\n    '/{pk}',\n    summary='更新字典类型',\n    dependencies=[\n        Depends(RequestPermission('sys:dict:type:edit')),\n        DependsRBAC,\n    ],\n)\nasync def update_dict_type(pk: Annotated[int, Path(...)], obj: UpdateDictTypeParam) -> ResponseModel:\n    count = await dict_type_service.update(pk=pk, obj=obj)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n\n\n@router.delete(\n    '',\n    summary='（批量）删除字典类型',\n    dependencies=[\n        Depends(RequestPermission('sys:dict:type:del')),\n        DependsRBAC,\n    ],\n)\nasync def delete_dict_type(pk: Annotated[list[int], Query(...)]) -> ResponseModel:\n    count = await dict_type_service.delete(pk=pk)\n    if count > 0:\n        return response_base.success()\n    return response_base.fail()\n"}
{"type": "source_file", "path": "backend/app/admin/api/v1/sys/plugin.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport io\nimport os.path\nimport zipfile\n\nfrom typing import Annotated\n\nfrom fastapi import APIRouter, Depends, File, UploadFile\nfrom fastapi.params import Query\nfrom starlette.responses import StreamingResponse\n\nfrom backend.common.exception import errors\nfrom backend.common.response.response_schema import ResponseModel, response_base\nfrom backend.common.security.permission import RequestPermission\nfrom backend.common.security.rbac import DependsRBAC\nfrom backend.core.path_conf import PLUGIN_DIR\nfrom backend.plugin.tools import install_requirements_async\n\nrouter = APIRouter()\n\n\n@router.post(\n    '/install',\n    summary='安装插件',\n    description='需使用插件 zip 压缩包进行安装',\n    dependencies=[\n        Depends(RequestPermission('sys:plugin:install')),\n        DependsRBAC,\n    ],\n)\nasync def install_plugin(file: Annotated[UploadFile, File()]) -> ResponseModel:\n    contents = await file.read()\n    file_bytes = io.BytesIO(contents)\n    if not zipfile.is_zipfile(file_bytes):\n        raise errors.ForbiddenError(msg='插件压缩包格式非法')\n    with zipfile.ZipFile(file_bytes) as zf:\n        # 校验压缩包\n        plugin_dir_in_zip = f'{file.filename[:-4]}/backend/plugin/'\n        members_in_plugin_dir = [name for name in zf.namelist() if name.startswith(plugin_dir_in_zip)]\n        if not members_in_plugin_dir:\n            raise errors.ForbiddenError(msg='插件压缩包内容非法')\n        plugin_name = members_in_plugin_dir[1].replace(plugin_dir_in_zip, '').replace('/', '')\n        if (\n            len(members_in_plugin_dir) <= 3\n            or f'{plugin_dir_in_zip}{plugin_name}/plugin.toml' not in members_in_plugin_dir\n            or f'{plugin_dir_in_zip}{plugin_name}/README.md' not in members_in_plugin_dir\n        ):\n            raise errors.ForbiddenError(msg='插件压缩包内缺少必要文件')\n\n        # 插件是否可安装\n        full_plugin_path = os.path.join(PLUGIN_DIR, plugin_name)\n        if os.path.exists(full_plugin_path):\n            raise errors.ForbiddenError(msg='此插件已安装')\n        os.makedirs(full_plugin_path)\n\n        # 解压安装\n        members = []\n        for member in zf.infolist():\n            if member.filename.startswith(plugin_dir_in_zip):\n                member.filename = member.filename.replace(plugin_dir_in_zip, '')\n                if not member.filename:\n                    continue\n                members.append(member)\n        zf.extractall(PLUGIN_DIR, members)\n        if os.path.exists(os.path.join(full_plugin_path, 'requirements.txt')):\n            await install_requirements_async()\n\n    return response_base.success()\n\n\n@router.post(\n    '/zip',\n    summary='打包插件',\n    dependencies=[\n        Depends(RequestPermission('sys:plugin:zip')),\n        DependsRBAC,\n    ],\n)\nasync def build_plugin_zip(plugin: Annotated[str, Query()]):\n    plugin_dir = os.path.join(PLUGIN_DIR, plugin)\n    if not os.path.exists(plugin_dir):\n        raise errors.ForbiddenError(msg='插件不存在')\n    bio = io.BytesIO()\n    with zipfile.ZipFile(bio, 'w') as zf:\n        for root, dirs, files in os.walk(plugin_dir):\n            dirs[:] = [d for d in dirs if d != '__pycache__']\n            for file in files:\n                file_path = os.path.join(root, file)\n                arcname = os.path.relpath(file_path, start=plugin_dir)\n                zf.write(file_path, arcname)\n    bio.seek(0)\n    return StreamingResponse(\n        bio,\n        media_type='application/x-zip-compressed',\n        headers={'Content-Disposition': f'attachment; filename={plugin}.zip'},\n    )\n"}
{"type": "source_file", "path": "backend/app/admin/model/dict_data.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import ForeignKey, String\nfrom sqlalchemy.dialects.mysql import LONGTEXT\nfrom sqlalchemy.dialects.postgresql import TEXT\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom backend.common.model import Base, id_key\n\n\nclass DictData(Base):\n    \"\"\"字典数据\"\"\"\n\n    __tablename__ = 'sys_dict_data'\n\n    id: Mapped[id_key] = mapped_column(init=False)\n    label: Mapped[str] = mapped_column(String(32), unique=True, comment='字典标签')\n    value: Mapped[str] = mapped_column(String(32), unique=True, comment='字典值')\n    sort: Mapped[int] = mapped_column(default=0, comment='排序')\n    status: Mapped[int] = mapped_column(default=1, comment='状态（0停用 1正常）')\n    remark: Mapped[str | None] = mapped_column(\n        LONGTEXT().with_variant(TEXT, 'postgresql'), default=None, comment='备注'\n    )\n\n    # 字典类型一对多\n    type_id: Mapped[int] = mapped_column(\n        ForeignKey('sys_dict_type.id', ondelete='CASCADE'), default=0, comment='字典类型关联ID'\n    )\n    type: Mapped['DictType'] = relationship(init=False, back_populates='datas')  # noqa: F821\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_user.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport bcrypt\n\nfrom sqlalchemy import and_, desc, select\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy.orm import noload, selectinload\nfrom sqlalchemy.sql import Select\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import Dept, Role, User\nfrom backend.app.admin.schema.user import (\n    AddUserParam,\n    AvatarParam,\n    RegisterUserParam,\n    UpdateUserParam,\n    UpdateUserRoleParam,\n)\nfrom backend.common.security.jwt import get_hash_password\nfrom backend.utils.timezone import timezone\n\n\nclass CRUDUser(CRUDPlus[User]):\n    async def get(self, db: AsyncSession, user_id: int) -> User | None:\n        \"\"\"\n        获取用户\n\n        :param db:\n        :param user_id:\n        :return:\n        \"\"\"\n        return await self.select_model(db, user_id)\n\n    async def get_by_username(self, db: AsyncSession, username: str) -> User | None:\n        \"\"\"\n        通过 username 获取用户\n\n        :param db:\n        :param username:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, username=username)\n\n    async def get_by_nickname(self, db: AsyncSession, nickname: str) -> User | None:\n        \"\"\"\n        通过 nickname 获取用户\n\n        :param db:\n        :param nickname:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, nickname=nickname)\n\n    async def update_login_time(self, db: AsyncSession, username: str) -> int:\n        \"\"\"\n        更新用户登录时间\n\n        :param db:\n        :param username:\n        :return:\n        \"\"\"\n        return await self.update_model_by_column(db, {'last_login_time': timezone.now()}, username=username)\n\n    async def create(self, db: AsyncSession, obj: RegisterUserParam, *, social: bool = False) -> None:\n        \"\"\"\n        创建用户\n\n        :param db:\n        :param obj:\n        :param social: 社交用户，适配 oauth 2.0\n        :return:\n        \"\"\"\n        if not social:\n            salt = bcrypt.gensalt()\n            obj.password = get_hash_password(obj.password, salt)\n            dict_obj = obj.model_dump()\n            dict_obj.update({'is_staff': True, 'salt': salt})\n        else:\n            dict_obj = obj.model_dump()\n            dict_obj.update({'is_staff': True, 'salt': None})\n        new_user = self.model(**dict_obj)\n        db.add(new_user)\n\n    async def add(self, db: AsyncSession, obj: AddUserParam) -> None:\n        \"\"\"\n        后台添加用户\n\n        :param db:\n        :param obj:\n        :return:\n        \"\"\"\n        salt = bcrypt.gensalt()\n        obj.password = get_hash_password(obj.password, salt)\n        dict_obj = obj.model_dump(exclude={'roles'})\n        dict_obj.update({'salt': salt})\n        new_user = self.model(**dict_obj)\n        role_list = []\n        for role_id in obj.roles:\n            role_list.append(await db.get(Role, role_id))\n        new_user.roles.extend(role_list)\n        db.add(new_user)\n\n    async def update_userinfo(self, db: AsyncSession, input_user: int, obj: UpdateUserParam) -> int:\n        \"\"\"\n        更新用户信息\n\n        :param db:\n        :param input_user:\n        :param obj:\n        :return:\n        \"\"\"\n        return await self.update_model(db, input_user, obj)\n\n    @staticmethod\n    async def update_role(db: AsyncSession, input_user: User, obj: UpdateUserRoleParam) -> None:\n        \"\"\"\n        更新用户角色\n\n        :param db:\n        :param input_user:\n        :param obj:\n        :return:\n        \"\"\"\n        # 删除用户所有角色\n        for i in list(input_user.roles):\n            input_user.roles.remove(i)\n        # 添加用户角色\n        role_list = []\n        for role_id in obj.roles:\n            role_list.append(await db.get(Role, role_id))\n        input_user.roles.extend(role_list)\n\n    async def update_avatar(self, db: AsyncSession, input_user: int, avatar: AvatarParam) -> int:\n        \"\"\"\n        更新用户头像\n\n        :param db:\n        :param input_user:\n        :param avatar:\n        :return:\n        \"\"\"\n        return await self.update_model(db, input_user, {'avatar': avatar.url})\n\n    async def delete(self, db: AsyncSession, user_id: int) -> int:\n        \"\"\"\n        删除用户\n\n        :param db:\n        :param user_id:\n        :return:\n        \"\"\"\n        return await self.delete_model(db, user_id)\n\n    async def check_email(self, db: AsyncSession, email: str) -> User | None:\n        \"\"\"\n        检查邮箱是否存在\n\n        :param db:\n        :param email:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, email=email)\n\n    async def reset_password(self, db: AsyncSession, pk: int, new_pwd: str) -> int:\n        \"\"\"\n        重置用户密码\n\n        :param db:\n        :param pk:\n        :param new_pwd:\n        :return:\n        \"\"\"\n        return await self.update_model(db, pk, {'password': new_pwd})\n\n    async def get_list(self, dept: int = None, username: str = None, phone: str = None, status: int = None) -> Select:\n        \"\"\"\n        获取用户列表\n\n        :param dept:\n        :param username:\n        :param phone:\n        :param status:\n        :return:\n        \"\"\"\n        stmt = (\n            select(self.model)\n            .options(\n                selectinload(self.model.dept).options(noload(Dept.parent), noload(Dept.children), noload(Dept.users)),\n                noload(self.model.socials),\n                selectinload(self.model.roles).options(noload(Role.users), noload(Role.menus), noload(Role.rules)),\n            )\n            .order_by(desc(self.model.join_time))\n        )\n        where_list = []\n        if dept:\n            where_list.append(self.model.dept_id == dept)\n        if username:\n            where_list.append(self.model.username.like(f'%{username}%'))\n        if phone:\n            where_list.append(self.model.phone.like(f'%{phone}%'))\n        if status is not None:\n            where_list.append(self.model.status == status)\n        if where_list:\n            stmt = stmt.where(and_(*where_list))\n        return stmt\n\n    async def get_super(self, db: AsyncSession, user_id: int) -> bool:\n        \"\"\"\n        获取用户超级管理员状态\n\n        :param db:\n        :param user_id:\n        :return:\n        \"\"\"\n        user = await self.get(db, user_id)\n        return user.is_superuser\n\n    async def get_staff(self, db: AsyncSession, user_id: int) -> bool:\n        \"\"\"\n        获取用户后台登录状态\n\n        :param db:\n        :param user_id:\n        :return:\n        \"\"\"\n        user = await self.get(db, user_id)\n        return user.is_staff\n\n    async def get_status(self, db: AsyncSession, user_id: int) -> int:\n        \"\"\"\n        获取用户状态\n\n        :param db:\n        :param user_id:\n        :return:\n        \"\"\"\n        user = await self.get(db, user_id)\n        return user.status\n\n    async def get_multi_login(self, db: AsyncSession, user_id: int) -> bool:\n        \"\"\"\n        获取用户多点登录状态\n\n        :param db:\n        :param user_id:\n        :return:\n        \"\"\"\n        user = await self.get(db, user_id)\n        return user.is_multi_login\n\n    async def set_super(self, db: AsyncSession, user_id: int, _super: bool) -> int:\n        \"\"\"\n        设置用户超级管理员\n\n        :param db:\n        :param user_id:\n        :param _super:\n        :return:\n        \"\"\"\n        return await self.update_model(db, user_id, {'is_superuser': _super})\n\n    async def set_staff(self, db: AsyncSession, user_id: int, staff: bool) -> int:\n        \"\"\"\n        设置用户后台登录\n\n        :param db:\n        :param user_id:\n        :param staff:\n        :return:\n        \"\"\"\n        return await self.update_model(db, user_id, {'is_staff': staff})\n\n    async def set_status(self, db: AsyncSession, user_id: int, status: bool) -> int:\n        \"\"\"\n        设置用户状态\n\n        :param db:\n        :param user_id:\n        :param status:\n        :return:\n        \"\"\"\n        return await self.update_model(db, user_id, {'status': status})\n\n    async def set_multi_login(self, db: AsyncSession, user_id: int, multi_login: bool) -> int:\n        \"\"\"\n        设置用户多点登录\n\n        :param db:\n        :param user_id:\n        :param multi_login:\n        :return:\n        \"\"\"\n        return await self.update_model(db, user_id, {'is_multi_login': multi_login})\n\n    async def get_with_relation(self, db: AsyncSession, *, user_id: int = None, username: str = None) -> User | None:\n        \"\"\"\n        获取用户和（部门，角色，菜单，规则）\n\n        :param db:\n        :param user_id:\n        :param username:\n        :return:\n        \"\"\"\n        stmt = select(self.model).options(\n            selectinload(self.model.dept),\n            selectinload(self.model.roles).options(\n                selectinload(Role.menus),\n                selectinload(Role.rules),\n            ),\n        )\n        filters = []\n        if user_id:\n            filters.append(self.model.id == user_id)\n        if username:\n            filters.append(self.model.username == username)\n        user = await db.execute(stmt.where(*filters))\n        return user.scalars().first()\n\n\nuser_dao: CRUDUser = CRUDUser(User)\n"}
{"type": "source_file", "path": "backend/app/admin/model/__init__.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom backend.app.admin.model.config import Config\nfrom backend.app.admin.model.data_rule import DataRule\nfrom backend.app.admin.model.dept import Dept\nfrom backend.app.admin.model.dict_data import DictData\nfrom backend.app.admin.model.dict_type import DictType\nfrom backend.app.admin.model.login_log import LoginLog\nfrom backend.app.admin.model.menu import Menu\nfrom backend.app.admin.model.opera_log import OperaLog\nfrom backend.app.admin.model.role import Role\nfrom backend.app.admin.model.user import User\nfrom backend.app.admin.model.user_social import UserSocial\n"}
{"type": "source_file", "path": "backend/app/admin/model/config.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import Boolean, String\nfrom sqlalchemy.dialects.mysql import LONGTEXT\nfrom sqlalchemy.dialects.postgresql import INTEGER, TEXT\nfrom sqlalchemy.orm import Mapped, mapped_column\n\nfrom backend.common.model import Base, id_key\n\n\nclass Config(Base):\n    \"\"\"系统配置表\"\"\"\n\n    __tablename__ = 'sys_config'\n\n    id: Mapped[id_key] = mapped_column(init=False)\n    name: Mapped[str] = mapped_column(String(20), comment='名称')\n    type: Mapped[str | None] = mapped_column(String(20), server_default=None, comment='类型')\n    key: Mapped[str] = mapped_column(String(50), unique=True, comment='键名')\n    value: Mapped[str] = mapped_column(LONGTEXT().with_variant(TEXT, 'postgresql'), comment='键值')\n    is_frontend: Mapped[bool] = mapped_column(\n        Boolean().with_variant(INTEGER, 'postgresql'), default=False, comment='是否前端'\n    )\n    remark: Mapped[str | None] = mapped_column(\n        LONGTEXT().with_variant(TEXT, 'postgresql'), default=None, comment='备注'\n    )\n"}
{"type": "source_file", "path": "backend/app/admin/crud/crud_user_social.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy_crud_plus import CRUDPlus\n\nfrom backend.app.admin.model import UserSocial\nfrom backend.app.admin.schema.user_social import CreateUserSocialParam\nfrom backend.common.enums import UserSocialType\n\n\nclass CRUDOUserSocial(CRUDPlus[UserSocial]):\n    async def get(self, db: AsyncSession, pk: int, source: UserSocialType) -> UserSocial | None:\n        \"\"\"\n        获取用户社交账号绑定\n\n        :param db:\n        :param pk:\n        :param source:\n        :return:\n        \"\"\"\n        return await self.select_model_by_column(db, user_id=pk, source=source)\n\n    async def create(self, db: AsyncSession, obj_in: CreateUserSocialParam) -> None:\n        \"\"\"\n        创建用户社交账号绑定\n\n        :param db:\n        :param obj_in:\n        :return:\n        \"\"\"\n        await self.create_model(db, obj_in)\n\n    async def delete(self, db: AsyncSession, social_id: int) -> int:\n        \"\"\"\n        删除用户社交账号绑定\n\n        :param db:\n        :param social_id:\n        :return:\n        \"\"\"\n        return await self.delete_model(db, social_id)\n\n\nuser_social_dao: CRUDOUserSocial = CRUDOUserSocial(UserSocial)\n"}
{"type": "source_file", "path": "backend/app/admin/model/dept.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom typing import Union\n\nfrom sqlalchemy import Boolean, ForeignKey, String\nfrom sqlalchemy.dialects.postgresql import INTEGER\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom backend.common.model import Base, id_key\n\n\nclass Dept(Base):\n    \"\"\"部门表\"\"\"\n\n    __tablename__ = 'sys_dept'\n\n    id: Mapped[id_key] = mapped_column(init=False)\n    name: Mapped[str] = mapped_column(String(50), comment='部门名称')\n    sort: Mapped[int] = mapped_column(default=0, comment='排序')\n    leader: Mapped[str | None] = mapped_column(String(20), default=None, comment='负责人')\n    phone: Mapped[str | None] = mapped_column(String(11), default=None, comment='手机')\n    email: Mapped[str | None] = mapped_column(String(50), default=None, comment='邮箱')\n    status: Mapped[int] = mapped_column(default=1, comment='部门状态(0停用 1正常)')\n    del_flag: Mapped[bool] = mapped_column(\n        Boolean().with_variant(INTEGER, 'postgresql'), default=False, comment='删除标志（0删除 1存在）'\n    )\n\n    # 父级部门一对多\n    parent_id: Mapped[int | None] = mapped_column(\n        ForeignKey('sys_dept.id', ondelete='SET NULL'), default=None, index=True, comment='父部门ID'\n    )\n    parent: Mapped[Union['Dept', None]] = relationship(init=False, back_populates='children', remote_side=[id])\n    children: Mapped[list['Dept'] | None] = relationship(init=False, back_populates='parent')\n\n    # 部门用户一对多\n    users: Mapped[list['User']] = relationship(init=False, back_populates='dept')  # noqa: F821\n"}
{"type": "source_file", "path": "backend/app/admin/model/data_rule.py", "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom sqlalchemy import String\nfrom sqlalchemy.orm import Mapped, mapped_column, relationship\n\nfrom backend.app.admin.model.m2m import sys_role_data_rule\nfrom backend.common.model import Base, id_key\n\n\nclass DataRule(Base):\n    \"\"\"数据权限规则表\"\"\"\n\n    __tablename__ = 'sys_data_rule'\n\n    id: Mapped[id_key] = mapped_column(init=False)\n    name: Mapped[str] = mapped_column(String(255), unique=True, comment='规则名称')\n    model: Mapped[str] = mapped_column(String(50), comment='SQLA 模型类')\n    column: Mapped[str] = mapped_column(String(20), comment='数据库字段')\n    operator: Mapped[int] = mapped_column(comment='运算符（0：and、1：or）')\n    expression: Mapped[int] = mapped_column(\n        comment='表达式（0：==、1：!=、2：>、3：>=、4：<、5：<=、6：in、7：not_in）'\n    )\n    value: Mapped[str] = mapped_column(String(255), comment='规则值')\n\n    # 角色规则多对多\n    roles: Mapped[list['Role']] = relationship(init=False, secondary=sys_role_data_rule, back_populates='rules')  # noqa: F821\n"}
