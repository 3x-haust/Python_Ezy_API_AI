{"repo_info": {"repo_name": "pymongo-fastapi-crud", "repo_owner": "mongodb-developer", "repo_url": "https://github.com/mongodb-developer/pymongo-fastapi-crud"}}
{"type": "test_file", "path": "test_books_crud.py", "content": "from fastapi import FastAPI\nfrom fastapi.testclient import TestClient\nfrom dotenv import dotenv_values\nfrom pymongo import MongoClient\nfrom routes import router as book_router\n\napp = FastAPI()\nconfig = dotenv_values(\".env\")\napp.include_router(book_router, tags=[\"books\"], prefix=\"/book\")\n\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    app.mongodb_client = MongoClient(config[\"ATLAS_URI\"])\n    app.database = app.mongodb_client[config[\"DB_NAME\"] + \"test\"]\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n    app.mongodb_client.close()\n    app.database.drop_collection(\"books\")\n\ndef test_create_book():\n    with TestClient(app) as client:\n        response = client.post(\"/book/\", json={\"title\": \"Don Quixote\", \"author\": \"Miguel de Cervantes\", \"synopsis\": \"...\"})\n        assert response.status_code == 201\n\n        body = response.json()\n        assert body.get(\"title\") == \"Don Quixote\"\n        assert body.get(\"author\") == \"Miguel de Cervantes\"\n        assert body.get(\"synopsis\") == \"...\"\n        assert \"_id\" in body\n\n\ndef test_create_book_missing_title():\n    with TestClient(app) as client:\n        response = client.post(\"/book/\", json={\"author\": \"Miguel de Cervantes\", \"synopsis\": \"...\"})\n        assert response.status_code == 422\n\n\ndef test_create_book_missing_author():\n    with TestClient(app) as client:\n        response = client.post(\"/book/\", json={\"title\": \"Don Quixote\", \"synopsis\": \"...\"})\n        assert response.status_code == 422\n\n\ndef test_create_book_missing_synopsis():\n    with TestClient(app) as client:\n        response = client.post(\"/book/\", json={\"title\": \"Don Quixote\", \"author\": \"Miguel de Cervantes\"})\n        assert response.status_code == 422\n\n\ndef test_get_book():\n    with TestClient(app) as client:\n        new_book = client.post(\"/book/\", json={\"title\": \"Don Quixote\", \"author\": \"Miguel de Cervantes\", \"synopsis\": \"...\"}).json()\n\n        get_book_response = client.get(\"/book/\" + new_book.get(\"_id\"))\n        assert get_book_response.status_code == 200\n        assert get_book_response.json() == new_book\n\n\ndef test_get_book_unexisting():\n    with TestClient(app) as client:\n        get_book_response = client.get(\"/book/unexisting_id\")\n        assert get_book_response.status_code == 404\n\n\ndef test_update_book():\n    with TestClient(app) as client:\n        new_book = client.post(\"/book/\", json={\"title\": \"Don Quixote\", \"author\": \"Miguel de Cervantes\", \"synopsis\": \"...\"}).json()\n\n        response = client.put(\"/book/\" + new_book.get(\"_id\"), json={\"title\": \"Don Quixote 1\"})\n        assert response.status_code == 200\n        assert response.json().get(\"title\") == \"Don Quixote 1\"\n\n\ndef test_update_book_unexisting():\n    with TestClient(app) as client:\n        update_book_response = client.put(\"/book/unexisting_id\", json={\"title\": \"Don Quixote 1\"})\n        assert update_book_response.status_code == 404\n\n\ndef test_delete_book():\n    with TestClient(app) as client:\n        new_book = client.post(\"/book/\", json={\"title\": \"Don Quixote\", \"author\": \"Miguel de Cervantes\", \"synopsis\": \"...\"}).json()\n\n        delete_book_response = client.delete(\"/book/\" + new_book.get(\"_id\"))\n        assert delete_book_response.status_code == 204\n\n\ndef test_delete_book_unexisting():\n    with TestClient(app) as client:\n        delete_book_response = client.delete(\"/book/unexisting_id\")\n        assert delete_book_response.status_code == 404\n\n"}
{"type": "source_file", "path": "routes.py", "content": "from fastapi import APIRouter, Body, Request, Response, HTTPException, status\nfrom fastapi.encoders import jsonable_encoder\nfrom typing import List\n\nfrom models import Book, BookUpdate\n\nrouter = APIRouter()\n\n@router.post(\"/\", response_description=\"Create a new book\", status_code=status.HTTP_201_CREATED, response_model=Book)\ndef create_book(request: Request, book: Book = Body(...)):\n    book = jsonable_encoder(book)\n    new_book = request.app.database[\"books\"].insert_one(book)\n    created_book = request.app.database[\"books\"].find_one(\n        {\"_id\": new_book.inserted_id}\n    )\n\n    return created_book\n\n\n@router.get(\"/\", response_description=\"List all books\", response_model=List[Book])\ndef list_books(request: Request):\n    books = list(request.app.database[\"books\"].find(limit=100))\n    return books\n\n\n@router.get(\"/{id}\", response_description=\"Get a single book by id\", response_model=Book)\ndef find_book(id: str, request: Request):\n    if (book := request.app.database[\"books\"].find_one({\"_id\": id})) is not None:\n        return book\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Book with ID {id} not found\")\n\n\n@router.put(\"/{id}\", response_description=\"Update a book\", response_model=Book)\ndef update_book(id: str, request: Request, book: BookUpdate = Body(...)):\n    book = {k: v for k, v in book.dict().items() if v is not None}\n\n    if len(book) >= 1:\n        update_result = request.app.database[\"books\"].update_one(\n            {\"_id\": id}, {\"$set\": book}\n        )\n\n        if update_result.modified_count == 0:\n            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Book with ID {id} not found\")\n\n    if (\n        existing_book := request.app.database[\"books\"].find_one({\"_id\": id})\n    ) is not None:\n        return existing_book\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Book with ID {id} not found\")\n\n\n@router.delete(\"/{id}\", response_description=\"Delete a book\")\ndef delete_book(id: str, request: Request, response: Response):\n    delete_result = request.app.database[\"books\"].delete_one({\"_id\": id})\n\n    if delete_result.deleted_count == 1:\n        response.status_code = status.HTTP_204_NO_CONTENT\n        return response\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Book with ID {id} not found\")\n"}
{"type": "source_file", "path": "models.py", "content": "import uuid\nfrom typing import Optional\nfrom pydantic import BaseModel, Field\n\nclass Book(BaseModel):\n    id: str = Field(default_factory=uuid.uuid4, alias=\"_id\")\n    title: str = Field(...)\n    author: str = Field(...)\n    synopsis: str = Field(...)\n\n    class Config:\n        allow_population_by_field_name = True\n        schema_extra = {\n            \"example\": {\n                \"_id\": \"066de609-b04a-4b30-b46c-32537c7f1f6e\",\n                \"title\": \"Don Quixote\",\n                \"author\": \"Miguel de Cervantes\",\n                \"synopsis\": \"...\"\n            }\n        }\n\n\nclass BookUpdate(BaseModel):\n    title: Optional[str]\n    author: Optional[str]\n    synopsis: Optional[str]\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"title\": \"Don Quixote\",\n                \"author\": \"Miguel de Cervantes\",\n                \"synopsis\": \"Don Quixote is a Spanish novel by Miguel de Cervantes...\"\n            }\n        }\n"}
{"type": "source_file", "path": "main.py", "content": "from fastapi import FastAPI\nfrom dotenv import dotenv_values\nfrom pymongo import MongoClient\nfrom routes import router as book_router\n\nconfig = dotenv_values(\".env\")\n\napp = FastAPI()\n\n@app.on_event(\"startup\")\ndef startup_db_client():\n    app.mongodb_client = MongoClient(config[\"ATLAS_URI\"])\n    app.database = app.mongodb_client[config[\"DB_NAME\"]]\n\n@app.on_event(\"shutdown\")\ndef shutdown_db_client():\n    app.mongodb_client.close()\n\napp.include_router(book_router, tags=[\"books\"], prefix=\"/book\")\n\n"}
