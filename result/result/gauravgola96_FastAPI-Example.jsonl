{"repo_info": {"repo_name": "FastAPI-Example", "repo_owner": "gauravgola96", "repo_url": "https://github.com/gauravgola96/FastAPI-Example"}}
{"type": "source_file", "path": "api.py", "content": "import os\nfrom dotenv import load_dotenv\nfrom fastapi.applications import FastAPI\nfrom fastapi.datastructures import UploadFile\nfrom fastapi.exceptions import HTTPException\nfrom fastapi.param_functions import File, Body\nfrom s3_events.s3_utils import S3_SERVICE\nfrom utils.utils import *\nfrom dotenv import load_dotenv\nimport datetime\n\n\nload_dotenv()\nproject_name = \"FastAPI\"\n\n\nAWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\nAWS_REGION = os.environ.get(\"AWS_REGION\")\nS3_Bucket = os.environ.get(\"S3_Bucket\")\nS3_Key = os.environ.get(\"S3_Key\")\n\napp = FastAPI(title=\"FastAPI\")\n\n# Object of S3_SERVICE Class\ns3_client = S3_SERVICE(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION)\n\n\n@app.get(\"/ping\", status_code=200, description=\"***** Liveliness Check *****\")\nasync def ping():\n    return {\"ping\": \"pong\"}\n\n\n@app.post(\"/upload\", status_code=200, description=\"***** Upload png asset to S3 *****\")\nasync def upload(fileobject: UploadFile = File(...)):\n    filename = fileobject.filename\n    current_time = datetime.datetime.now()\n    split_file_name = os.path.splitext(filename)   #split the file name into two different path (string + extention)\n    file_name_unique = str(current_time.timestamp()).replace('.','')  #for realtime application you must have genertae unique name for the file\n    file_extension = split_file_name[1]  #file extention\n    data = fileobject.file._file  # Converting tempfile.SpooledTemporaryFile to io.BytesIO\n    uploads3 = await s3_client.upload_fileobj(bucket=S3_Bucket, key=S3_Key + file_name_unique+  file_extension, fileobject=data)\n    if uploads3:\n        s3_url = f\"https://{S3_Bucket}.s3.{AWS_REGION}.amazonaws.com/{S3_Key}{file_name_unique +  file_extension}\"\n        return {\"status\": \"success\", \"image_url\": s3_url}  #response added \n    else:\n        raise HTTPException(status_code=400, detail=\"Failed to upload in S3\")\n"}
{"type": "source_file", "path": "models/models.py", "content": "# Response Model\nfrom fastapi.datastructures import UploadFile\nfrom fastapi.param_functions import Body\nfrom fastapi.params import File\nfrom pydantic.main import BaseModel\nfrom typing import List\n\n\nclass AssestRequestOne(BaseModel):\n    _id: str\n    image_url: str\n    updated_at: str\n    created_at: str\n\n\nclass AssestRequestModel(BaseModel):\n    data: List[AssestRequestOne] = []\n\n\nclass AssetUploadModel(BaseModel):\n    fileobject: UploadFile = File(...)\n    filename: str = Body(default=None)\n\n\n"}
{"type": "source_file", "path": "models/__init__.py", "content": ""}
{"type": "source_file", "path": "run_server.py", "content": "import uvicorn\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"api:app\", host=\"0.0.0.0\", port=5050, reload=True)\n"}
{"type": "source_file", "path": "s3_events/__init__.py", "content": ""}
{"type": "source_file", "path": "s3_events/s3_utils.py", "content": "import aiobotocore\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n'''\nFor Asynchronous Events\n'''\nclass S3_SERVICE(object):\n\n    def __init__(self, aws_access_key_id, aws_secret_access_key, region, *args, **kwargs):\n        self.aws_access_key_id = aws_access_key_id\n        self.aws_secret_access_key = aws_secret_access_key\n        self.region = region\n\n    async def upload_fileobj(self, fileobject, bucket, key):\n        session = aiobotocore.get_session()\n        async with session.create_client('s3', region_name=self.region,\n                                         aws_secret_access_key=self.aws_secret_access_key,\n                                         aws_access_key_id=self.aws_access_key_id) as client:\n            file_upload_response = await client.put_object(ACL=\"public-read\", Bucket=bucket, Key=key, Body=fileobject)\n\n            if file_upload_response[\"ResponseMetadata\"][\"HTTPStatusCode\"] == 200:\n                logger.info(f\"File uploaded path : https://{bucket}.s3.{self.region}.amazonaws.com/{key}\")\n                return True\n        return False\n"}
{"type": "source_file", "path": "utils/__init__.py", "content": ""}
{"type": "source_file", "path": "s3_events/s3_events.py", "content": "import boto3\nimport logging\nfrom botocore.exceptions import ClientError\n\n'''\nFor Synchronous Events\n'''\nclass S3Events(object):\n\n    def __init__(self, aws_access_key_id, aws_secret_access_key):\n\n        self.aws_access_key_id = aws_access_key_id\n        self.aws_secret_access_key = aws_secret_access_key\n        self.session = boto3.Session(\n            aws_access_key_id=self.aws_access_key_id,\n            aws_secret_access_key=self.aws_secret_access_key,\n        )\n        self.s3 = self.session.resource('s3')\n\n    def upload_fileobj(self, file_name=None, bucket=None, key=None):\n\n        \"\"\"Upload a file to an S3 bucket\n        :param key:\n        :param file_name: File to upload\n        :param bucket: Bucket to upload to\n        :return: True if file was uploaded, else False\n        \"\"\"\n\n        # If S3 object_name was not specified, use file_name\n        if (key is None) or (bucket is None):\n            logging.info(\"key and bucket cannot be None\")\n            return False\n\n        # Upload the file\n        s3_client = boto3.client('s3')\n        try:\n            response = s3_client.upload_fileobj(file_name, bucket, key, ExtraArgs={'ACL': 'public-read'})\n        except ClientError as e:\n            logging.info(\"INFO: Failed to upload image\")\n            logging.error(e)\n            return False\n\n        logging.info(\"File object uploaded to https://s3.amazonaws.com/{}{}\".format( bucket, key))\n        return True\n"}
{"type": "source_file", "path": "utils/utils.py", "content": "import logging\nfrom uuid import uuid4\n\nlogger = logging.getLogger(__name__)\n\n\ndef generate_png_string():\n    logger.info(\"Generating random string .png\")\n    return uuid4().hex[:6].upper().replace('0', 'X').replace('O', 'Y') + \".png\"\n\n"}
