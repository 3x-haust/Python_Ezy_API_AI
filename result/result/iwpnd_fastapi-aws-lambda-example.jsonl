{"repo_info": {"repo_name": "fastapi-aws-lambda-example", "repo_owner": "iwpnd", "repo_url": "https://github.com/iwpnd/fastapi-aws-lambda-example"}}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/test_ping.py", "content": "from starlette.testclient import TestClient\nfrom example_app.main import app\n\nclient = TestClient(app)\n\n\ndef test_ping():\n    response = client.get(\"/ping\")\n    assert response.status_code == 200\n"}
{"type": "test_file", "path": "tests/test_example_endpoint.py", "content": "from starlette.testclient import TestClient\nfrom example_app.main import app\nfrom example_app.core.config import API_V1_STR\nimport json\n\nclient = TestClient(app)\n\n\ndef is_json(myjson):\n    try:\n        json_object = json.loads(myjson)\n    except ValueError as e:\n        return False\n    return True\n\n\ndef test_example_endpoint_availability():\n    response = client.get(API_V1_STR + \"/example\")\n    assert response.status_code == 200\n\n\ndef test_example_route_valid_json():\n    response = client.get(API_V1_STR + \"/example\")\n    assert is_json(response.content)\n\n\ndef test_example_endpoint_post():\n    payload = {\"a\": 4, \"b\": 6}\n    response = client.post(API_V1_STR + \"/example\", json=payload)\n    assert response.status_code == 200\n    assert all([k in response.json() for k in [\"a\", \"b\", \"result\"]])\n    assert response.json()[\"result\"] == 24\n"}
{"type": "source_file", "path": "example_app/api/__init__.py", "content": ""}
{"type": "source_file", "path": "example_app/__init__.py", "content": ""}
{"type": "source_file", "path": "example_app/api/api_v1/api.py", "content": "from fastapi import APIRouter\n\nfrom .endpoints.example import router as example_router\n\n\nrouter = APIRouter()\nrouter.include_router(example_router)\n"}
{"type": "source_file", "path": "example_app/core/__init__.py", "content": ""}
{"type": "source_file", "path": "example_app/core/config.py", "content": "from starlette.datastructures import CommaSeparatedStrings\nimport os\n\nALLOWED_HOSTS = CommaSeparatedStrings(os.getenv(\"ALLOWED_HOSTS\", \"\"))\nAPI_V1_STR = \"/api/v1\"\nPROJECT_NAME = \"FastAPI-AWS-Lambda-Example-API\"\n"}
{"type": "source_file", "path": "example_app/api/api_v1/endpoints/__init__.py", "content": ""}
{"type": "source_file", "path": "example_app/api/api_v1/__init__.py", "content": ""}
{"type": "source_file", "path": "example_app/api/api_v1/endpoints/example.py", "content": "from fastapi import APIRouter\n\nfrom example_app.core.models.output import OutputExample\nfrom example_app.core.models.input import InputExample\n\nrouter = APIRouter()\n\n\n@router.get(\"/example\", tags=[\"example get\"])\ndef example_get():\n    \"\"\"\n    Say hej!\n\n    This will greet you properly\n\n    And this path operation will:\n    * return \"hej!\"\n    \"\"\"\n    return {\"msg\": \"Hej!\"}\n\n\n@router.post(\"/example\", response_model=OutputExample, tags=[\"example post\"])\ndef example_endpoint(inputs: InputExample):\n    \"\"\"\n    Multiply two values\n\n    This will multiply two inputs.\n\n    And this path operation will:\n    * return a*b\n    \"\"\"\n    return {\"a\": inputs.a, \"b\": inputs.b, \"result\": inputs.a * inputs.b}\n"}
{"type": "source_file", "path": "example_app/core/models/input.py", "content": "from pydantic import BaseModel, Field\n\n\nclass InputExample(BaseModel):\n    a: int = Field(..., title=\"Input value a\")\n    b: int = Field(..., title=\"Input value b\")\n"}
{"type": "source_file", "path": "example_app/core/models/output.py", "content": "from pydantic import BaseModel, Field\n\n\nclass OutputExample(BaseModel):\n    a: int = Field(..., title=\"Input value a\")\n    b: int = Field(..., title=\"Input value b\")\n    result: int = Field(..., title=\"Result of a * b\")\n"}
{"type": "source_file", "path": "setup.py", "content": "from setuptools import setup\n\npackages = []\nwith open(\"requirements.txt\", \"r\") as f:\n    requirements = f.read().splitlines()\n\n\nsetup(\n    name=\"example_app\",\n    version=\"0.1.0\",\n    description=\"example api to be deployed to aws lambda\",\n    url=\"http://github.com/iwpnd/fastapi-aws-lambda-example\",\n    author=\"probably you\",\n    author_email=\"probably@you.pw\",\n    license=\"MIT\",\n    include_package_data=True,\n    install_requires=requirements,\n    packages=packages,\n    zip_safe=False,\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"Intended Audience :: Developers\",\n    ],\n)\n"}
{"type": "source_file", "path": "example_app/main.py", "content": "from fastapi import FastAPI\nfrom mangum import Mangum\n\nfrom example_app.api.api_v1.api import router as api_router\nfrom example_app.core.config import API_V1_STR, PROJECT_NAME\n\napp = FastAPI(\n    title=PROJECT_NAME,\n    # if not custom domain\n    # openapi_prefix=\"/prod\"\n)\n\n\napp.include_router(api_router, prefix=API_V1_STR)\n\n\n@app.get(\"/ping\")\ndef pong():\n    \"\"\"\n    Sanity check.\n\n    This will let the user know that the service is operational.\n\n    And this path operation will:\n    * show a lifesign\n\n    \"\"\"\n    return {\"ping\": \"pong!\"}\n\n\nhandler = Mangum(app, enable_lifespan=False)\n"}
