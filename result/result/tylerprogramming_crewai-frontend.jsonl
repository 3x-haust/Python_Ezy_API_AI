{"repo_info": {"repo_name": "crewai-frontend", "repo_owner": "tylerprogramming", "repo_url": "https://github.com/tylerprogramming/crewai-frontend"}}
{"type": "source_file", "path": "app.py", "content": "from fastapi import FastAPI, HTTPException, Body, File, Form, UploadFile\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import JSONResponse\nimport socket\nimport json\nfrom typing import List, Dict, Any\nimport uvicorn\nimport tempfile\nimport os\nfrom docling.document_converter import DocumentConverter\nfrom file_crew.src.file_crew.main import run\n\ndef get_local_ip() -> str:\n    \"\"\"\n    Get the local IP address of the machine.\n    \n    Returns:\n        str: The local IP address, or '127.0.0.1' if it can't be determined.\n    \"\"\"\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect(('8.8.8.8', 80))\n        ip = s.getsockname()[0]\n        s.close()\n        return ip\n    except Exception:\n        return '127.0.0.1'\n\napp = FastAPI(\n    title=\"CrewAI API\",\n    description=\"API for processing documents with Docling and CrewAI\",\n    version=\"1.0.0\"\n)\n\n# Configure CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n@app.post(\"/file-handler\", response_model=Dict[str, Any])\nasync def file_handler_endpoint(\n    file: UploadFile = File(...)\n):\n    \"\"\"\n    Process a PDF file using Docling and CrewAI.\n    \n    Args:\n        file (UploadFile): The PDF file to process\n        \n    Returns:\n        Dict[str, Any]: The processed results including markdown content and CrewAI analysis\n        \n    Raises:\n        HTTPException: If there's an error processing the file\n    \"\"\"\n    temp_file_path = None\n    \n    try:\n        print(f\"Received file: {file.filename} (type: {file.content_type}, size: {file.size})\")\n        \n        # Validate file type\n        if not file.content_type.startswith('application/pdf'):\n            raise HTTPException(\n                status_code=400, \n                detail=f\"Invalid file type: {file.content_type}. Please upload a PDF file.\"\n            )\n        \n        # Create a temporary file to save the uploaded PDF\n        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_file:\n            # Write the uploaded file content to the temporary file\n            content = await file.read()\n            temp_file.write(content)\n            temp_file_path = temp_file.name\n        \n        # Process the file\n        try:\n            # Initialize the DocumentConverter\n            converter = DocumentConverter()\n            \n            # Convert the PDF document\n            docling_result = converter.convert(temp_file_path)\n            \n            # Get the parsed content in markdown format\n            markdown_content = docling_result.document.export_to_markdown()\n            \n            # Process with CrewAI\n            crew_result = run(markdown_content)\n            \n            # Return the results\n            return {\n                \"filename\": file.filename,\n                \"markdown\": markdown_content,\n                \"result\": crew_result.model_dump()\n            }\n        \n        finally:\n            # Always clean up the temporary file\n            if temp_file_path and os.path.exists(temp_file_path):\n                os.unlink(temp_file_path)\n            \n    except HTTPException as e:\n        # Re-raise HTTP exceptions\n        raise e\n    except json.JSONDecodeError as e:\n        print(f\"JSON decode error: {str(e)}\")\n        raise HTTPException(status_code=400, detail=f\"Invalid JSON payload: {str(e)}\")\n    except Exception as e:\n        print(f\"Error in file_handler: {str(e)}\")\n        import traceback\n        traceback.print_exc()\n        raise HTTPException(status_code=500, detail=str(e))\n\n@app.get(\"/\")\nasync def root():\n    \"\"\"Root endpoint that returns basic API information.\"\"\"\n    return {\n        \"message\": \"Welcome to the CrewAI Document Processing API\",\n        \"endpoints\": {\n            \"/file-handler\": \"POST endpoint for processing PDF files\"\n        }\n    }\n\nif __name__ == \"__main__\":\n    host_ip = get_local_ip()\n    print(f\"Starting server at http://{host_ip}:5010\")\n    uvicorn.run(\"app:app\", host=host_ip, port=5010, reload=True)\n"}
{"type": "source_file", "path": "file_crew/src/file_crew/__init__.py", "content": ""}
{"type": "source_file", "path": "file_crew/src/file_crew/tools/custom_tool.py", "content": "from crewai.tools import BaseTool\nfrom typing import Type\nfrom pydantic import BaseModel, Field\n\n\nclass MyCustomToolInput(BaseModel):\n    \"\"\"Input schema for MyCustomTool.\"\"\"\n    argument: str = Field(..., description=\"Description of the argument.\")\n\nclass MyCustomTool(BaseTool):\n    name: str = \"Name of my tool\"\n    description: str = (\n        \"Clear description for what this tool is useful for, your agent will need this information to use it.\"\n    )\n    args_schema: Type[BaseModel] = MyCustomToolInput\n\n    def _run(self, argument: str) -> str:\n        # Implementation goes here\n        return \"this is an example of a tool output, ignore it and move along.\"\n"}
{"type": "source_file", "path": "file_crew/src/file_crew/tools/__init__.py", "content": ""}
{"type": "source_file", "path": "file_crew/src/file_crew/main.py", "content": "#!/usr/bin/env python\nimport sys\nimport warnings\n\nfrom datetime import datetime\n\nfrom .crew import FileCrew\n\nwarnings.filterwarnings(\"ignore\", category=SyntaxWarning, module=\"pysbd\")\n\n# This main file is intended to be a way for you to run your\n# crew locally, so refrain from adding unnecessary logic into this file.\n# Replace with inputs you want to test with, it will automatically\n# interpolate any tasks and agents information\n\ndef run(file_text):\n    \"\"\"\n    Run the crew.\n    \"\"\"\n    inputs = {\n        'file_text': file_text,\n    }\n    \n    try:\n        result = FileCrew().crew().kickoff(inputs=inputs)\n        return result.pydantic\n    except Exception as e:\n        raise Exception(f\"An error occurred while running the crew: {e}\")\n\n\ndef train():\n    \"\"\"\n    Train the crew for a given number of iterations.\n    \"\"\"\n    inputs = {\n        \"topic\": \"AI LLMs\"\n    }\n    try:\n        FileCrew().crew().train(n_iterations=int(sys.argv[1]), filename=sys.argv[2], inputs=inputs)\n\n    except Exception as e:\n        raise Exception(f\"An error occurred while training the crew: {e}\")\n\ndef replay():\n    \"\"\"\n    Replay the crew execution from a specific task.\n    \"\"\"\n    try:\n        FileCrew().crew().replay(task_id=sys.argv[1])\n\n    except Exception as e:\n        raise Exception(f\"An error occurred while replaying the crew: {e}\")\n\ndef test():\n    \"\"\"\n    Test the crew execution and returns the results.\n    \"\"\"\n    inputs = {\n        \"topic\": \"AI LLMs\",\n        \"current_year\": str(datetime.now().year)\n    }\n    try:\n        FileCrew().crew().test(n_iterations=int(sys.argv[1]), openai_model_name=sys.argv[2], inputs=inputs)\n\n    except Exception as e:\n        raise Exception(f\"An error occurred while testing the crew: {e}\")\n"}
{"type": "source_file", "path": "file_crew/src/file_crew/crew.py", "content": "from crewai import Agent, Crew, Process, Task, LLM\nfrom crewai.project import CrewBase, agent, crew, task\nfrom dotenv import load_dotenv\nimport os\nfrom pydantic import BaseModel\nfrom typing import List\n\nload_dotenv()\n\ngoogle_flash_llm = LLM(\n\tmodel=\"gemini/gemini-2.0-flash\",\n\tapi_key=os.getenv(\"GOOGLE_API_KEY\"),\n)\n\nclass ResearchOutput(BaseModel):\n    summary: str\n    key_points: List[str]\n    quick_summary: str\n    extended_summary: str\n    actionable_insights: List[str]\n    source_document_list: List[str]\n    potential_biases_and_limitations: str\n\n@CrewBase\nclass FileCrew():\n\n\tagents_config = 'config/agents.yaml'\n\ttasks_config = 'config/tasks.yaml'\n\n\t@agent\n\tdef researcher(self) -> Agent:\n\t\treturn Agent(\n\t\t\tconfig=self.agents_config['researcher'],\n\t\t\tverbose=True,\n\t\t\tllm=google_flash_llm\n\t\t)\n\n\t@task\n\tdef research_task(self) -> Task:\n\t\treturn Task(\n\t\t\tconfig=self.tasks_config['research_task'],\n\t\t\toutput_pydantic=ResearchOutput\n\t\t)\n\n\t@crew\n\tdef crew(self) -> Crew:\n\t\t\"\"\"Creates the FileCrew crew\"\"\"\n\n\t\treturn Crew(\n\t\t\tagents=self.agents,\n\t\t\ttasks=self.tasks,\n\t\t\tprocess=Process.sequential,\n\t\t\tverbose=True,\n\t\t)\n"}
