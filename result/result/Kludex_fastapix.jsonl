{"repo_info": {"repo_name": "fastapix", "repo_owner": "Kludex", "repo_url": "https://github.com/Kludex/fastapix"}}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/test_analyzers.py", "content": "import pytest\n\nfrom fastapix.inference.analyzers import ApplicationAnalyzer, SettingsAnalyzer\n\n\n@pytest.mark.parametrize(  # type: ignore[misc]\n    \"content, expected\",\n    [\n        (\"class Settings(BaseSettings):\", True),\n        (\"class Potato(Settings):\", False),\n    ],\n)\ndef test_settings_analyzer(content: str, expected: bool) -> None:\n    analyzer = SettingsAnalyzer()\n    assert analyzer.match(content) == expected\n\n\n@pytest.mark.parametrize(  # type: ignore[misc]\n    \"content, expected\",\n    [\n        (\"app = FastAPI()\", True),\n        (\"return FastAPI(\", True),\n        (\"def potato() -> FastAPI:\", False),\n    ],\n)\ndef test_application_analyzer(content: str, expected: bool) -> None:\n    analyzer = ApplicationAnalyzer()\n    assert analyzer.match(content) == expected\n"}
{"type": "test_file", "path": "tests/commands/test_middlewares.py", "content": "import textwrap\nfrom pathlib import Path\n\nfrom typer.testing import CliRunner\n\nfrom fastapix.main import app\n\n\ndef test_middlewares_command(tmp_path: Path) -> None:\n    content = textwrap.dedent(\n        \"\"\"\n        from fastapi import FastAPI\n        from fastapi.middleware.cors import CORSMiddleware\n\n        app = FastAPI()\n        app.add_middleware(\n            CORSMiddleware,\n            allow_origins=[\"*\"],\n            allow_credentials=True,\n            allow_methods=[\"*\"],\n            allow_headers=[\"*\"],\n        )\n        \"\"\"\n    )\n    runner = CliRunner()\n    with runner.isolated_filesystem(temp_dir=tmp_path) as td:\n        file = Path(td) / \"main.py\"\n        file.write_text(content)\n        result = runner.invoke(app, [\"middlewares\"])\n        assert result.exit_code == 0, result.stdout\n        expected = textwrap.dedent(\n            \"\"\"\n┏━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━┓\n┃ middleware     ┃ parameter         ┃ value ┃\n┡━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━┩\n│ CORSMiddleware │ allow_origins     │ ['*'] │\n│                │ allow_credentials │ True  │\n│                │ allow_methods     │ ['*'] │\n│                │ allow_headers     │ ['*'] │\n└────────────────┴───────────────────┴───────┘\n \"\"\"\n        )\n        assert expected in result.stdout, result.stdout\n"}
{"type": "test_file", "path": "tests/commands/test_env.py", "content": "import textwrap\nfrom pathlib import Path\n\nfrom typer.testing import CliRunner\n\nfrom fastapix.main import app\n\n\ndef test_env_command(tmp_path: Path) -> None:\n    content = textwrap.dedent(\n        \"\"\"\n        from pydantic import BaseSettings\n\n        class Settings(BaseSettings):\n            foo: str = \"bar\"\n            bar: int\n        \"\"\"\n    )\n    runner = CliRunner()\n    with runner.isolated_filesystem(temp_dir=tmp_path) as td:\n        file = Path(td) / \"settings.py\"\n        file.write_text(content)\n        output = Path(td) / \"output.md\"\n        result = runner.invoke(app, [\"env\", \"--output\", str(output)])\n        assert result.exit_code == 0, result.stdout\n        with output.open(\"r\") as f:\n            content = f.read()\n            expected = (\n                \"| Name | Description |  Type   | Default | Required |\",\n                \"| ---- | ----------- | :-----: | :-----: | :------: |\",\n                \"| foo  | -           | string  |   bar   |    ❌    |\",\n                \"| bar  | -           | integer |    -    |    ✅    |\",\n            )\n            assert all(line in content for line in expected)\n"}
{"type": "test_file", "path": "tests/commands/test_routes.py", "content": "import textwrap\nfrom pathlib import Path\n\nfrom typer.testing import CliRunner\n\nfrom fastapix.main import app\n\n\ndef test_routes_command(tmp_path: Path) -> None:\n    content = textwrap.dedent(\n        \"\"\"\n        from fastapi import FastAPI\n\n        app = FastAPI()\n\n        @app.get(\"/\")\n        def index():\n            return {\"message\": \"Hello World!\"}\n        \"\"\"\n    )\n    runner = CliRunner()\n    with runner.isolated_filesystem(temp_dir=tmp_path) as td:\n        file = Path(td) / \"main.py\"\n        file.write_text(content)\n        result = runner.invoke(app, [\"routes\"])\n        assert result.exit_code == 0, result.stdout\n        expected = textwrap.dedent(\n            \"\"\"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃ name                ┃ path                  ┃ methods         ┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ index               │ /                     │ ['GET']         │\n│ swagger_ui_html     │ /docs                 │ ['GET', 'HEAD'] │\n│ swagger_ui_redirect │ /docs/oauth2-redirect │ ['GET', 'HEAD'] │\n│ openapi             │ /openapi.json         │ ['GET', 'HEAD'] │\n│ redoc_html          │ /redoc                │ ['GET', 'HEAD'] │\n└─────────────────────┴───────────────────────┴─────────────────┘\n \"\"\"\n        )\n        assert expected in result.stdout\n"}
{"type": "test_file", "path": "tests/commands/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/test_version.py", "content": "from typer.testing import CliRunner\n\nfrom fastapix.main import app\n\nrunner = CliRunner()\n\n\ndef test_version() -> None:\n    result = runner.invoke(app, [\"--version\"])\n    assert result.exit_code == 0\n    assert \"FastAPI X\" in result.stdout\n"}
{"type": "source_file", "path": "fastapix/__init__.py", "content": ""}
{"type": "source_file", "path": "fastapix/commands/__init__.py", "content": ""}
{"type": "source_file", "path": "fastapix/commands/environment.py", "content": "\"\"\"\nCommand that prints out the environment variables that are used.\n\"\"\"\nimport io\nimport json\nfrom inspect import getmembers, isclass\nfrom pathlib import Path\nfrom typing import Type\n\nimport libcst as cst\nimport libcst.matchers as m\nimport typer\nfrom pydantic import BaseSettings\nfrom pytablewriter.style import Style\nfrom pytablewriter.writer import MarkdownTableWriter\n\nfrom fastapix.context import Context\nfrom fastapix.loader import import_from_filename\n\napp = typer.Typer(name=\"env\", help=\"Print out the environment variables used.\")\n\n\n# TODO: Add template option.\n# TODO: Use rich if output is stdout.\n@app.callback(invoke_without_command=True)  # type: ignore[misc]\ndef main(\n    ctx: Context,\n    output: Path = typer.Option(Path(\"/dev/stdout\"), help=\"Output filename.\"),\n) -> None:\n    \"\"\"Print out the environment variables used.\"\"\"\n    if ctx.obj.structure.settings is None:  # pragma: no cover\n        ctx.obj.console.print(\"No settings found.\")\n        raise typer.Exit(2)\n\n    module = import_from_filename(ctx.obj.structure.settings.filename)\n\n    for name, value in getmembers(module):\n        if isclass(value) and issubclass(value, BaseSettings) and value != BaseSettings:\n            show_environment(settings_class=value, output=output)\n\n\ndef show_environment(settings_class: Type[BaseSettings], output: Path) -> None:\n    table = []\n\n    schema_json = json.loads(settings_class.schema_json())\n    properties = schema_json[\"properties\"]\n    required = schema_json.get(\"required\", [])\n\n    for key, value in properties.items():\n        required_column = \"✅\" if key in required else \"❌\"\n        table.append(\n            [\n                key,\n                value.get(\"description\", \"-\"),\n                value[\"type\"],\n                str(value.get(\"default\", \"-\")),\n                required_column,\n            ]\n        )\n\n    writer = MarkdownTableWriter(\n        headers=[\"Name\", \"Description\", \"Type\", \"Default\", \"Required\"],\n        value_matrix=table,\n        margin=1,\n    )\n    writer.set_style(2, Style(align=\"center\"))\n    writer.set_style(3, Style(align=\"center\"))\n    writer.set_style(4, Style(align=\"center\"))\n    writer.stream = io.StringIO()\n    writer.write_table()\n\n    with output.open(\"w\") as fp:\n        fp.write(writer.stream.getvalue())\n\n\n# TODO: Use CST instead of loading the module.\nclass BaseSettingsVisitor(cst.CSTVisitor):  # type: ignore[misc]  # pragma: no cover\n    def __init__(self) -> None:\n        self.inside_settings = False\n\n    def visit_ClassDef(self, node: cst.ClassDef) -> None:\n        for base in node.bases:\n            if m.matches(base, m.Arg(value=m.Name(\"BaseSettings\"))):\n                self.inside_settings = True\n\n    def leave_ClassDef(self, original_node: cst.ClassDef) -> None:\n        self.inside_settings = False\n"}
{"type": "source_file", "path": "fastapix/__main__.py", "content": "from fastapix.main import app  # pragma: no cover\n\nif __name__ == \"__main__\":  # pragma: no cover\n    app()\n"}
{"type": "source_file", "path": "fastapix/commands/routes.py", "content": "from inspect import getmembers\nfrom typing import Union\n\nimport typer\nfrom fastapi import FastAPI\nfrom rich.table import Table\n\nfrom fastapix.context import Context\nfrom fastapix.loader import import_from_filename\n\napp = typer.Typer(name=\"routes\", help=\"List FastAPI routes.\")\n\n\n@app.callback(invoke_without_command=True)  # type: ignore[misc]\ndef routes(ctx: Context) -> None:\n    if ctx.obj.structure.app is None:  # pragma: no cover\n        ctx.obj.console.print(\"No app found.\")\n        raise typer.Exit(2)\n\n    module = import_from_filename(ctx.obj.structure.app.filename)\n    app: Union[FastAPI, None] = None\n    # TODO: Support factory functions.\n    for name, value in getmembers(module):\n        if isinstance(value, FastAPI):\n            app = value\n\n    # TODO: PR welcome to add test.\n    if app is None:  # pragma: no cover\n        raise RuntimeError(\"Could not find FastAPI instance.\")\n\n    headers = (\"name\", \"path\", \"methods\")\n    routes: list[tuple[str, str, str]] = []\n    for route in app.routes:\n        name = str(getattr(route, \"name\"))\n        path = str(getattr(route, \"path\"))\n        methods = sorted(getattr(route, \"methods\", None) or {})\n        routes.append((name, path, str(methods)))\n    routes.sort(key=lambda x: x[1])\n    table = Table(show_header=True, header_style=\"bold magenta\")\n    for column in headers:\n        table.add_column(column)\n    for route in routes:\n        table.add_row(*route)\n    ctx.obj.console.print(table)\n"}
{"type": "source_file", "path": "fastapix/inference/__init__.py", "content": "from fastapix.inference.main import infer_project_structure as infer_project_structure\n"}
{"type": "source_file", "path": "fastapix/commands/middlewares.py", "content": "from inspect import getmembers\nfrom typing import Union\n\nimport typer\nfrom fastapi import FastAPI\nfrom rich.table import Table\n\nfrom fastapix.context import Context\nfrom fastapix.loader import import_from_filename\n\napp = typer.Typer(name=\"middlewares\", help=\"List FastAPI middlewares.\")\n\n\n@app.callback(invoke_without_command=True)  # type: ignore[misc]\ndef middlewares(ctx: Context) -> None:\n    if ctx.obj.structure.app is None:  # pragma: no cover\n        ctx.obj.console.print(\"No app found.\")\n        raise typer.Exit(2)\n\n    module = import_from_filename(ctx.obj.structure.app.filename)\n    app: Union[FastAPI, None] = None\n    # TODO: Support factory functions.\n    for name, value in getmembers(module):\n        if isinstance(value, FastAPI):\n            app = value\n\n    # TODO: PR welcome to add test.\n    if app is None:  # pragma: no cover\n        raise RuntimeError(\"Could not find FastAPI instance.\")\n\n    headers = (\"middleware\", \"parameter\", \"value\")\n    middlewares = [\n        (\n            middleware.cls.__name__,\n            \"\\n\".join(str(key) for key in middleware.options.keys()),\n            \"\\n\".join(str(value) for value in middleware.options.values()),\n        )\n        for middleware in app.user_middleware\n    ]\n    for middleware in app.user_middleware:\n        print(middleware.cls, middleware.options)\n    table = Table(show_header=True, header_style=\"bold magenta\")\n    for column in headers:\n        table.add_column(column)\n    for middleware in middlewares:\n        table.add_row(*middleware)\n    ctx.obj.console.print(table)\n"}
{"type": "source_file", "path": "fastapix/context.py", "content": "from dataclasses import dataclass\nfrom typing import Union\n\nfrom rich.console import Console\nfrom typer import Context as _Context\n\n\n@dataclass\nclass Component:\n    filename: str\n    content: str\n\n\n@dataclass\nclass ProjectStructure:\n    settings: Union[Component, None]\n    app: Union[Component, None]\n\n\n@dataclass\nclass ContextObject:\n    console: Console\n    structure: ProjectStructure\n\n\nclass Context(_Context):  # type: ignore[misc]\n    obj: ContextObject\n"}
{"type": "source_file", "path": "fastapix/inference/analyzers.py", "content": "import re\n\n\nclass Analyzer:\n    def match(self, content: str) -> bool:\n        raise NotImplementedError  # pragma: no cover\n\n\nclass SettingsAnalyzer(Analyzer):\n    def match(self, content: str) -> bool:\n        if re.search(r\"class .+\\(BaseSettings\\):\", content):\n            return True\n        return False\n\n\nclass ApplicationAnalyzer(Analyzer):\n    def match(self, content: str) -> bool:\n        \"\"\"Check if the content contains a FastAPI instance.\n\n        This is a very naive implementation, and it's expected to fail.\n        \"\"\"\n        regex = \"|\".join([r\"=\\s*FastAPI\\(\\)\", r\"return FastAPI\\(\"])\n        if re.search(regex, content):\n            return True\n        return False\n"}
{"type": "source_file", "path": "fastapix/loader.py", "content": "import importlib.util\nimport sys\nfrom types import ModuleType\n\n\ndef import_from_filename(filename: str) -> ModuleType:\n    \"\"\"Import a module from a filename.\"\"\"\n    spec = importlib.util.spec_from_file_location(\"-\", filename)\n    if spec is None or spec.loader is None:\n        raise RuntimeError(\"Could not load settings file.\")  # pragma: no cover\n\n    module = importlib.util.module_from_spec(spec)\n    sys.modules[\"module\"] = module\n    spec.loader.exec_module(module)\n\n    return module\n"}
{"type": "source_file", "path": "fastapix/inference/main.py", "content": "import glob\nimport os\nfrom typing import Union\n\nfrom rich.console import Console\n\nfrom fastapix.context import Component, ProjectStructure\nfrom fastapix.inference.analyzers import ApplicationAnalyzer, SettingsAnalyzer\n\n# TODO: Limit the number of files. If surpass the threshold, ask for manual input.\n\n\ndef infer_project_structure(console: Console) -> ProjectStructure:\n    python_pattern = os.getcwd() + \"/**/*.py\"\n\n    settings_analyzer = SettingsAnalyzer()\n    settings: Union[Component, None] = None\n\n    app_analyzer = ApplicationAnalyzer()\n    app: Union[Component, None] = None\n\n    filenames = iter(glob.glob(python_pattern, recursive=True))\n    filename = next(filenames, None)\n    while filename and (app is None or settings is None):\n        with open(filename, \"r\") as f:\n            content = f.read()\n            if settings_analyzer.match(content):  # pragma: no cover\n                settings = Component(filename=filename, content=content)\n            if app_analyzer.match(content):  # pragma: no cover\n                app = Component(filename=filename, content=content)\n        filename = next(filenames, None)\n\n    return ProjectStructure(settings=settings, app=app)\n"}
{"type": "source_file", "path": "fastapix/main.py", "content": "import platform\nfrom pathlib import Path\n\nimport typer\nfrom appdirs import user_cache_dir\nfrom rich.console import Console\n\nfrom fastapix.commands.environment import app as env_app\nfrom fastapix.commands.middlewares import app as middlewares_app\nfrom fastapix.commands.routes import app as routes_app\nfrom fastapix.context import Context, ContextObject\nfrom fastapix.inference import infer_project_structure\n\n__version__ = \"0.1.0\"\n\n\napp = typer.Typer(name=\"FastAPI X\", help=\"Manage your FastAPI project.\")\napp.add_typer(env_app)\napp.add_typer(routes_app)\napp.add_typer(middlewares_app)\n\n\ndef version_callback(value: bool) -> None:\n    if value:\n        typer.echo(\n            \"Running FastAPI X {} with {} {} on {}.\".format(\n                __version__,\n                platform.python_implementation(),\n                platform.python_version(),\n                platform.system(),\n            )\n        )\n        raise typer.Exit(0)\n\n\n@app.callback()  # type: ignore[misc]\ndef main(\n    ctx: Context,\n    version: bool = typer.Option(\n        None,\n        \"--version\",\n        callback=version_callback,\n        is_eager=True,\n        help=\"Show version and exit.\",\n    ),\n) -> None:\n    console = Console()\n\n    cache_dir = Path(user_cache_dir(\"fastapix\"))\n    cache_dir.mkdir(exist_ok=True)\n\n    # TODO: Create an entry per project. Each entry that represents a file should have\n    # a hash.\n\n    project_structure = infer_project_structure(console)\n    ctx.obj = ContextObject(console=console, structure=project_structure)\n"}
{"type": "source_file", "path": "setup.py", "content": "import sys\n\nfrom setuptools import setup\n\nsys.stderr.write(\n    \"\"\"\n===============================\nUnsupported installation method\n===============================\nfastapix no longer supports installation with `python setup.py install`.\nPlease use `python -m pip install .` instead.\n\"\"\"\n)\nsys.exit(1)\n\n\n# The below code will never execute, however GitHub is particularly\n# picky about where it finds Python packaging metadata.\n# See: https://github.com/github/feedback/discussions/6456\n#\n# To be removed once GitHub catches up.\n\nsetup(\n    name=\"fastapix\",\n    install_requires=[],\n)\n"}
