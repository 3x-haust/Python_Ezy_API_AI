{"repo_info": {"repo_name": "FastAPI-The-Complete-Course", "repo_owner": "codingwithroby", "repo_url": "https://github.com/codingwithroby/FastAPI-The-Complete-Course"}}
{"type": "test_file", "path": "Project 4/TodoApp/test/test_admin.py", "content": "from .utils import *\nfrom ..routers.admin import get_db, get_current_user\nfrom fastapi import status\nfrom ..models import Todos\n\napp.dependency_overrides[get_db] = override_get_db\napp.dependency_overrides[get_current_user] = override_get_current_user\n\ndef test_admin_read_all_authenticated(test_todo):\n    response = client.get(\"/admin/todo\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [{'complete': False, 'title': 'Learn to code!',\n                                'description': 'Need to learn everyday!', 'id': 1,\n                                'priority': 5, 'owner_id': 1}]\n\n\ndef test_admin_delete_todo(test_todo):\n    response = client.delete(\"/admin/todo/1\")\n    assert response.status_code == 204\n\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 1).first()\n    assert model is None\n\n\ndef test_admin_delete_todo_not_found():\n    response = client.delete(\"/admin/todo/9999\")\n    assert response.status_code == 404\n    assert response.json() == {'detail': 'Todo not found.'}\n\n\n\n\n\n\n\n\n\n\n"}
{"type": "test_file", "path": "Project 4/TodoApp/test/test_auth.py", "content": "from .utils import *\nfrom ..routers.auth import get_db, authenticate_user, create_access_token, SECRET_KEY, ALGORITHM, get_current_user\nfrom jose import jwt\nfrom datetime import timedelta\nimport pytest\nfrom fastapi import HTTPException\n\napp.dependency_overrides[get_db] = override_get_db\n\ndef test_authenticate_user(test_user):\n    db = TestingSessionLocal()\n\n    authenticated_user = authenticate_user(test_user.username, 'testpassword', db)\n    assert authenticated_user is not None\n    assert authenticated_user.username == test_user.username\n\n    non_existent_user = authenticate_user('WrongUserName', 'testpassword', db)\n    assert non_existent_user is False\n\n    wrong_password_user = authenticate_user(test_user.username, 'wrongpassword', db)\n    assert wrong_password_user is False\n\n\ndef test_create_access_token():\n    username = 'testuser'\n    user_id = 1\n    role = 'user'\n    expires_delta = timedelta(days=1)\n\n    token = create_access_token(username, user_id, role, expires_delta)\n\n    decoded_token = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM],\n                               options={'verify_signature': False})\n\n    assert decoded_token['sub'] == username\n    assert decoded_token['id'] == user_id\n    assert decoded_token['role'] == role\n\n\n@pytest.mark.asyncio\nasync def test_get_current_user_valid_token():\n    encode = {'sub': 'testuser', 'id': 1, 'role': 'admin'}\n    token = jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)\n\n    user = await get_current_user(token=token)\n    assert user == {'username': 'testuser', 'id': 1, 'user_role': 'admin'}\n\n\n@pytest.mark.asyncio\nasync def test_get_current_user_missing_payload():\n    encode = {'role': 'user'}\n    token = jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)\n\n    with pytest.raises(HTTPException) as excinfo:\n        await get_current_user(token=token)\n\n    assert excinfo.value.status_code == 401\n    assert excinfo.value.detail == 'Could not validate user.'\n\n\n\n\n\n\n\n"}
{"type": "test_file", "path": "Project 4/TodoApp/test/test_main.py", "content": "from fastapi.testclient import TestClient\nfrom ..main import app\nfrom fastapi import status\n\nclient = TestClient(app)\n\n\ndef test_return_health_check():\n    response = client.get(\"/healthy\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == {'status': 'Healthy'}\n\n\n"}
{"type": "test_file", "path": "Project 5/TodoApp/test/test_admin.py", "content": "from .utils import *\nfrom ..routers.admin import get_db, get_current_user\nfrom fastapi import status\nfrom ..models import Todos\n\napp.dependency_overrides[get_db] = override_get_db\napp.dependency_overrides[get_current_user] = override_get_current_user\n\ndef test_admin_read_all_authenticated(test_todo):\n    response = client.get(\"/admin/todo\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [{'complete': False, 'title': 'Learn to code!',\n                                'description': 'Need to learn everyday!', 'id': 1,\n                                'priority': 5, 'owner_id': 1}]\n\n\ndef test_admin_delete_todo(test_todo):\n    response = client.delete(\"/admin/todo/1\")\n    assert response.status_code == 204\n\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 1).first()\n    assert model is None\n\n\ndef test_admin_delete_todo_not_found():\n    response = client.delete(\"/admin/todo/9999\")\n    assert response.status_code == 404\n    assert response.json() == {'detail': 'Todo not found.'}\n\n\n\n\n\n\n\n\n\n\n"}
{"type": "test_file", "path": "Project 5/TodoApp/test/test_auth.py", "content": "from .utils import *\nfrom ..routers.auth import get_db, authenticate_user, create_access_token, SECRET_KEY, ALGORITHM, get_current_user\nfrom jose import jwt\nfrom datetime import timedelta\nimport pytest\nfrom fastapi import HTTPException\n\napp.dependency_overrides[get_db] = override_get_db\n\ndef test_authenticate_user(test_user):\n    db = TestingSessionLocal()\n\n    authenticated_user = authenticate_user(test_user.username, 'testpassword', db)\n    assert authenticated_user is not None\n    assert authenticated_user.username == test_user.username\n\n    non_existent_user = authenticate_user('WrongUserName', 'testpassword', db)\n    assert non_existent_user is False\n\n    wrong_password_user = authenticate_user(test_user.username, 'wrongpassword', db)\n    assert wrong_password_user is False\n\n\ndef test_create_access_token():\n    username = 'testuser'\n    user_id = 1\n    role = 'user'\n    expires_delta = timedelta(days=1)\n\n    token = create_access_token(username, user_id, role, expires_delta)\n\n    decoded_token = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM],\n                               options={'verify_signature': False})\n\n    assert decoded_token['sub'] == username\n    assert decoded_token['id'] == user_id\n    assert decoded_token['role'] == role\n\n\n@pytest.mark.asyncio\nasync def test_get_current_user_valid_token():\n    encode = {'sub': 'testuser', 'id': 1, 'role': 'admin'}\n    token = jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)\n\n    user = await get_current_user(token=token)\n    assert user == {'username': 'testuser', 'id': 1, 'user_role': 'admin'}\n\n\n@pytest.mark.asyncio\nasync def test_get_current_user_missing_payload():\n    encode = {'role': 'user'}\n    token = jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)\n\n    with pytest.raises(HTTPException) as excinfo:\n        await get_current_user(token=token)\n\n    assert excinfo.value.status_code == 401\n    assert excinfo.value.detail == 'Could not validate user.'\n\n\n\n\n\n\n\n"}
{"type": "test_file", "path": "Project 5/TodoApp/test/test_example.py", "content": "import pytest\n\n\ndef test_equal_or_not_equal():\n    assert 3 == 3\n    assert 3 != 1\n\n\ndef test_is_instance():\n    assert isinstance('this is a string', str)\n    assert not isinstance('10', int)\n\n\ndef test_boolean():\n    validated = True\n    assert validated is True\n    assert ('hello' == 'world') is False\n\n\ndef test_type():\n    assert type('Hello' is str)\n    assert type('World' is not int)\n\n\ndef test_greater_and_less_than():\n    assert 7 > 3\n    assert 4 < 10\n\n\ndef test_list():\n    num_list = [1, 2, 3, 4, 5]\n    any_list = [False, False]\n    assert 1 in num_list\n    assert 7 not in num_list\n    assert all(num_list)\n    assert not any(any_list)\n\n\nclass Student:\n    def __init__(self, first_name: str, last_name: str, major: str, years: int):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.major = major\n        self.years = years\n\n\n@pytest.fixture\ndef default_employee():\n    return Student('John', 'Doe', 'Computer Science', 3)\n\n\ndef test_person_initialization(default_employee):\n    assert default_employee.first_name == 'John', 'First name should be John'\n    assert default_employee.last_name == 'Doe', 'Last name should be Doe'\n    assert default_employee.major == 'Computer Science'\n    assert default_employee.years == 3\n\n\n\n\n\n"}
{"type": "test_file", "path": "Project 5/TodoApp/test/test_main.py", "content": "from fastapi.testclient import TestClient\nfrom ..main import app\nfrom fastapi import status\n\nclient = TestClient(app)\n\n\ndef test_return_health_check():\n    response = client.get(\"/healthy\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == {'status': 'Healthy'}\n\n\n"}
{"type": "test_file", "path": "Project 5/TodoApp/test/test_todos.py", "content": "from ..routers.todos import get_db, get_current_user\nfrom fastapi import status\nfrom ..models import Todos\nfrom .utils import *\n\napp.dependency_overrides[get_db] = override_get_db\napp.dependency_overrides[get_current_user] = override_get_current_user\n\n\ndef test_read_all_authenticated(test_todo):\n    response = client.get(\"/todos\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [{'complete': False, 'title': 'Learn to code!',\n                                'description': 'Need to learn everyday!', 'id': 1,\n                                'priority': 5, 'owner_id': 1}]\n\n\ndef test_read_one_authenticated(test_todo):\n    response = client.get(\"/todos/todo/1\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == {'complete': False, 'title': 'Learn to code!',\n                                'description': 'Need to learn everyday!', 'id': 1,\n                                'priority': 5, 'owner_id': 1}\n\n\ndef test_read_one_authenticated_not_found():\n    response = client.get(\"/todos/todo/999\")\n    assert response.status_code == 404\n    assert response.json() == {'detail': 'Todo not found.'}\n\n\ndef test_create_todo(test_todo):\n    request_data={\n        'title': 'New Todo!',\n        'description':'New todo description',\n        'priority': 5,\n        'complete': False,\n    }\n\n    response = client.post('/todos/todo/', json=request_data)\n    assert response.status_code == 201\n\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 2).first()\n    assert model.title == request_data.get('title')\n    assert model.description == request_data.get('description')\n    assert model.priority == request_data.get('priority')\n    assert model.complete == request_data.get('complete')\n\n\ndef test_update_todo(test_todo):\n    request_data={\n        'title':'Change the title of the todo already saved!',\n        'description': 'Need to learn everyday!',\n        'priority': 5,\n        'complete': False,\n    }\n\n    response = client.put('/todos/todo/1', json=request_data)\n    assert response.status_code == 204\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 1).first()\n    assert model.title == 'Change the title of the todo already saved!'\n\n\ndef test_update_todo_not_found(test_todo):\n    request_data={\n        'title':'Change the title of the todo already saved!',\n        'description': 'Need to learn everyday!',\n        'priority': 5,\n        'complete': False,\n    }\n\n    response = client.put('/todos/todo/999', json=request_data)\n    assert response.status_code == 404\n    assert response.json() == {'detail': 'Todo not found.'}\n\n\ndef test_delete_todo(test_todo):\n    response = client.delete('/todos/todo/1')\n    assert response.status_code == 204\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 1).first()\n    assert model is None\n\n\ndef test_delete_todo_not_found():\n    response = client.delete('/todos/todo/999')\n    assert response.status_code == 404\n    assert response.json() == {'detail': 'Todo not found.'}\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"type": "test_file", "path": "Project 5/TodoApp/test/test_users.py", "content": "from .utils import *\nfrom ..routers.users import get_db, get_current_user\nfrom fastapi import status\n\napp.dependency_overrides[get_db] = override_get_db\napp.dependency_overrides[get_current_user] = override_get_current_user\n\ndef test_return_user(test_user):\n    response = client.get(\"/user\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json()['username'] == 'codingwithrobytest'\n    assert response.json()['email'] == 'codingwithrobytest@email.com'\n    assert response.json()['first_name'] == 'Eric'\n    assert response.json()['last_name'] == 'Roby'\n    assert response.json()['role'] == 'admin'\n    assert response.json()['phone_number'] == '(111)-111-1111'\n\n\ndef test_change_password_success(test_user):\n    response = client.put(\"/user/password\", json={\"password\": \"testpassword\",\n                                                  \"new_password\": \"newpassword\"})\n    assert response.status_code == status.HTTP_204_NO_CONTENT\n\n\ndef test_change_password_invalid_current_password(test_user):\n    response = client.put(\"/user/password\", json={\"password\": \"wrong_password\",\n                                                  \"new_password\": \"newpassword\"})\n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n    assert response.json() == {'detail': 'Error on password change'}\n\n\ndef test_change_phone_number_success(test_user):\n    response = client.put(\"/user/phonenumber/2222222222\")\n    assert response.status_code == status.HTTP_204_NO_CONTENT\n\n\n\n\n\n\n"}
{"type": "test_file", "path": "Project 4/TodoApp/test/test_todos.py", "content": "from ..routers.todos import get_db, get_current_user\nfrom fastapi import status\nfrom ..models import Todos\nfrom .utils import *\n\napp.dependency_overrides[get_db] = override_get_db\napp.dependency_overrides[get_current_user] = override_get_current_user\n\n\ndef test_read_all_authenticated(test_todo):\n    response = client.get(\"/\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == [{'complete': False, 'title': 'Learn to code!',\n                                'description': 'Need to learn everyday!', 'id': 1,\n                                'priority': 5, 'owner_id': 1}]\n\n\ndef test_read_one_authenticated(test_todo):\n    response = client.get(\"/todo/1\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == {'complete': False, 'title': 'Learn to code!',\n                                'description': 'Need to learn everyday!', 'id': 1,\n                                'priority': 5, 'owner_id': 1}\n\n\ndef test_read_one_authenticated_not_found():\n    response = client.get(\"/todo/999\")\n    assert response.status_code == 404\n    assert response.json() == {'detail': 'Todo not found.'}\n\n\ndef test_create_todo(test_todo):\n    request_data={\n        'title': 'New Todo!',\n        'description':'New todo description',\n        'priority': 5,\n        'complete': False,\n    }\n\n    response = client.post('/todo/', json=request_data)\n    assert response.status_code == 201\n\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 2).first()\n    assert model.title == request_data.get('title')\n    assert model.description == request_data.get('description')\n    assert model.priority == request_data.get('priority')\n    assert model.complete == request_data.get('complete')\n\n\ndef test_update_todo(test_todo):\n    request_data={\n        'title':'Change the title of the todo already saved!',\n        'description': 'Need to learn everyday!',\n        'priority': 5,\n        'complete': False,\n    }\n\n    response = client.put('/todo/1', json=request_data)\n    assert response.status_code == 204\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 1).first()\n    assert model.title == 'Change the title of the todo already saved!'\n\n\ndef test_update_todo_not_found(test_todo):\n    request_data={\n        'title':'Change the title of the todo already saved!',\n        'description': 'Need to learn everyday!',\n        'priority': 5,\n        'complete': False,\n    }\n\n    response = client.put('/todo/999', json=request_data)\n    assert response.status_code == 404\n    assert response.json() == {'detail': 'Todo not found.'}\n\n\ndef test_delete_todo(test_todo):\n    response = client.delete('/todo/1')\n    assert response.status_code == 204\n    db = TestingSessionLocal()\n    model = db.query(Todos).filter(Todos.id == 1).first()\n    assert model is None\n\n\ndef test_delete_todo_not_found():\n    response = client.delete('/todo/999')\n    assert response.status_code == 404\n    assert response.json() == {'detail': 'Todo not found.'}\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"type": "test_file", "path": "Project 4/TodoApp/test/test_example.py", "content": "import pytest\n\n\ndef test_equal_or_not_equal():\n    assert 3 == 3\n    assert 3 != 1\n\n\ndef test_is_instance():\n    assert isinstance('this is a string', str)\n    assert not isinstance('10', int)\n\n\ndef test_boolean():\n    validated = True\n    assert validated is True\n    assert ('hello' == 'world') is False\n\n\ndef test_type():\n    assert type('Hello' is str)\n    assert type('World' is not int)\n\n\ndef test_greater_and_less_than():\n    assert 7 > 3\n    assert 4 < 10\n\n\ndef test_list():\n    num_list = [1, 2, 3, 4, 5]\n    any_list = [False, False]\n    assert 1 in num_list\n    assert 7 not in num_list\n    assert all(num_list)\n    assert not any(any_list)\n\n\nclass Student:\n    def __init__(self, first_name: str, last_name: str, major: str, years: int):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.major = major\n        self.years = years\n\n\n@pytest.fixture\ndef default_employee():\n    return Student('John', 'Doe', 'Computer Science', 3)\n\n\ndef test_person_initialization(default_employee):\n    assert default_employee.first_name == 'John', 'First name should be John'\n    assert default_employee.last_name == 'Doe', 'Last name should be Doe'\n    assert default_employee.major == 'Computer Science'\n    assert default_employee.years == 3\n\n\n\n\n\n"}
{"type": "test_file", "path": "Project 4/TodoApp/test/test_users.py", "content": "from .utils import *\nfrom ..routers.users import get_db, get_current_user\nfrom fastapi import status\n\napp.dependency_overrides[get_db] = override_get_db\napp.dependency_overrides[get_current_user] = override_get_current_user\n\ndef test_return_user(test_user):\n    response = client.get(\"/user\")\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json()['username'] == 'codingwithrobytest'\n    assert response.json()['email'] == 'codingwithrobytest@email.com'\n    assert response.json()['first_name'] == 'Eric'\n    assert response.json()['last_name'] == 'Roby'\n    assert response.json()['role'] == 'admin'\n    assert response.json()['phone_number'] == '(111)-111-1111'\n\n\ndef test_change_password_success(test_user):\n    response = client.put(\"/user/password\", json={\"password\": \"testpassword\",\n                                                  \"new_password\": \"newpassword\"})\n    assert response.status_code == status.HTTP_204_NO_CONTENT\n\n\ndef test_change_password_invalid_current_password(test_user):\n    response = client.put(\"/user/password\", json={\"password\": \"wrong_password\",\n                                                  \"new_password\": \"newpassword\"})\n    assert response.status_code == status.HTTP_401_UNAUTHORIZED\n    assert response.json() == {'detail': 'Error on password change'}\n\n\ndef test_change_phone_number_success(test_user):\n    response = client.put(\"/user/phonenumber/2222222222\")\n    assert response.status_code == status.HTTP_204_NO_CONTENT\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 1/books.py", "content": "from fastapi import Body, FastAPI\n\napp = FastAPI()\n\n\nBOOKS = [\n    {'title': 'Title One', 'author': 'Author One', 'category': 'science'},\n    {'title': 'Title Two', 'author': 'Author Two', 'category': 'science'},\n    {'title': 'Title Three', 'author': 'Author Three', 'category': 'history'},\n    {'title': 'Title Four', 'author': 'Author Four', 'category': 'math'},\n    {'title': 'Title Five', 'author': 'Author Five', 'category': 'math'},\n    {'title': 'Title Six', 'author': 'Author Two', 'category': 'math'}\n]\n\n\n@app.get(\"/books\")\nasync def read_all_books():\n    return BOOKS\n\n\n@app.get(\"/books/{book_title}\")\nasync def read_book(book_title: str):\n    for book in BOOKS:\n        if book.get('title').casefold() == book_title.casefold():\n            return book\n\n\n@app.get(\"/books/\")\nasync def read_category_by_query(category: str):\n    books_to_return = []\n    for book in BOOKS:\n        if book.get('category').casefold() == category.casefold():\n            books_to_return.append(book)\n    return books_to_return\n\n\n# Get all books from a specific author using path or query parameters\n@app.get(\"/books/byauthor/\")\nasync def read_books_by_author_path(author: str):\n    books_to_return = []\n    for book in BOOKS:\n        if book.get('author').casefold() == author.casefold():\n            books_to_return.append(book)\n\n    return books_to_return\n\n\n@app.get(\"/books/{book_author}/\")\nasync def read_author_category_by_query(book_author: str, category: str):\n    books_to_return = []\n    for book in BOOKS:\n        if book.get('author').casefold() == book_author.casefold() and \\\n                book.get('category').casefold() == category.casefold():\n            books_to_return.append(book)\n\n    return books_to_return\n\n\n@app.post(\"/books/create_book\")\nasync def create_book(new_book=Body()):\n    BOOKS.append(new_book)\n\n\n@app.put(\"/books/update_book\")\nasync def update_book(updated_book=Body()):\n    for i in range(len(BOOKS)):\n        if BOOKS[i].get('title').casefold() == updated_book.get('title').casefold():\n            BOOKS[i] = updated_book\n\n\n@app.delete(\"/books/delete_book/{book_title}\")\nasync def delete_book(book_title: str):\n    for i in range(len(BOOKS)):\n        if BOOKS[i].get('title').casefold() == book_title.casefold():\n            BOOKS.pop(i)\n            break\n"}
{"type": "source_file", "path": "Project 2/books2.py", "content": "from typing import Optional\nfrom fastapi import FastAPI, Path, Query, HTTPException, Body\nfrom pydantic import BaseModel, Field\nfrom starlette import status\n\napp = FastAPI()\n\n\nclass Book:\n    id: int\n    title: str\n    author: str\n    description: str\n    rating: int\n    published_date: int\n\n    def __init__(self, id, title, author, description, rating, published_date):\n        self.id = id\n        self.title = title\n        self.author = author\n        self.description = description\n        self.rating = rating\n        self.published_date = published_date\n\n\nclass BookRequest(BaseModel):\n    id: Optional[int] = Field(description='ID is not needed on create', default=None)\n    title: str = Field(min_length=3)\n    author: str = Field(min_length=1)\n    description: str = Field(min_length=1, max_length=100)\n    rating: int = Field(gt=0, lt=6)\n    published_date: int = Field(gt=1999, lt=2031)\n\n    model_config = {\n        \"json_schema_extra\": {\n            \"example\": {\n                \"title\": \"A new book\",\n                \"author\": \"codingwithroby\",\n                \"description\": \"A new description of a book\",\n                \"rating\": 5,\n                'published_date': 2029\n            }\n        }\n    }\n        \n\n\n\nBOOKS = [\n    Book(1, 'Computer Science Pro', 'codingwithroby', 'A very nice book!', 5, 2030),\n    Book(2, 'Be Fast with FastAPI', 'codingwithroby', 'A great book!', 5, 2030),\n    Book(3, 'Master Endpoints', 'codingwithroby', 'A awesome book!', 5, 2029),\n    Book(4, 'HP1', 'Author 1', 'Book Description', 2, 2028),\n    Book(5, 'HP2', 'Author 2', 'Book Description', 3, 2027),\n    Book(6, 'HP3', 'Author 3', 'Book Description', 1, 2026)\n]\n\n\n@app.get(\"/books\", status_code=status.HTTP_200_OK)\nasync def read_all_books():\n    return BOOKS\n\n\n@app.get(\"/books/{book_id}\", status_code=status.HTTP_200_OK)\nasync def read_book(book_id: int = Path(gt=0)):\n    for book in BOOKS:\n        if book.id == book_id:\n            return book\n    raise HTTPException(status_code=404, detail='Item not found')\n\n\n@app.get(\"/books/\", status_code=status.HTTP_200_OK)\nasync def read_book_by_rating(book_rating: int = Query(gt=0, lt=6)):\n    books_to_return = []\n    for book in BOOKS:\n        if book.rating == book_rating:\n            books_to_return.append(book)\n    return books_to_return\n\n\n\n@app.get(\"/books/publish/\", status_code=status.HTTP_200_OK)\nasync def read_books_by_publish_date(published_date: int = Query(gt=1999, lt=2031)):\n    books_to_return = []\n    for book in BOOKS:\n        if book.published_date == published_date:\n            books_to_return.append(book)\n    return books_to_return\n\n\n@app.post(\"/create-book\", status_code=status.HTTP_201_CREATED)\nasync def create_book(book_request: BookRequest):\n    new_book = Book(**book_request.model_dump())\n    BOOKS.append(find_book_id(new_book))\n\n\ndef find_book_id(book: Book):\n    book.id = 1 if len(BOOKS) == 0 else BOOKS[-1].id + 1\n    return book\n\n\n@app.put(\"/books/update_book\", status_code=status.HTTP_204_NO_CONTENT)\nasync def update_book(book: BookRequest):\n    book_changed = False\n    for i in range(len(BOOKS)):\n        if BOOKS[i].id == book.id:\n            BOOKS[i] = book\n            book_changed = True\n    if not book_changed:\n        raise HTTPException(status_code=404, detail='Item not found')\n\n\n@app.delete(\"/books/{book_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_book(book_id: int = Path(gt=0)):\n    book_changed = False\n    for i in range(len(BOOKS)):\n        if BOOKS[i].id == book_id:\n            BOOKS.pop(i)\n            book_changed = True\n            break\n    if not book_changed:\n        raise HTTPException(status_code=404, detail='Item not found')\n"}
{"type": "source_file", "path": "Project 3.5/TodoApp/alembic/env.py", "content": "from logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\nfrom alembic import context\nimport models\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\nfileConfig(config.config_file_name)\ntarget_metadata = models.Base.metadata\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\n\n# if config.config_file_name is not None:\n#     fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\n# target_metadata = None\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"}
{"type": "source_file", "path": "Project 3.5/TodoApp/__init__.py", "content": ""}
{"type": "source_file", "path": "Project 3.5/TodoApp/alembic/versions/aeff25f89db0_create_phone_number_for_user_col.py", "content": "\"\"\"create phone number for user col\n\nRevision ID: aeff25f89db0\nRevises: \nCreate Date: 2023-08-28 19:59:25.616334\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'aeff25f89db0'\ndown_revision: Union[str, None] = None\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    op.add_column('users', sa.Column('phone_number', sa.String(), nullable=True))\n\n\ndef downgrade() -> None:\n    op.drop_column('users', 'phone_number')\n"}
{"type": "source_file", "path": "Project 3.5/TodoApp/main.py", "content": "from fastapi import FastAPI\nimport models\nfrom database import engine\nfrom routers import auth, todos, admin, users\n\napp = FastAPI()\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp.include_router(auth.router)\napp.include_router(todos.router)\napp.include_router(admin.router)\napp.include_router(users.router)"}
{"type": "source_file", "path": "Project 3.5/TodoApp/database.py", "content": "from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\nSQLALCHEMY_DATABASE_URL = 'sqlite:///./todosapp.db'\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={'check_same_thread': False})\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n"}
{"type": "source_file", "path": "Project 3.5/TodoApp/models.py", "content": "from database import Base\nfrom sqlalchemy import Column, Integer, String, Boolean, ForeignKey\n\n\nclass Users(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True)\n    username = Column(String, unique=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    role = Column(String)\n    phone_number = Column(String)\n\n\nclass Todos(Base):\n    __tablename__ = 'todos'\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    description = Column(String)\n    priority = Column(Integer)\n    complete = Column(Boolean, default=False)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n"}
{"type": "source_file", "path": "Project 3.5/TodoApp/routers/__init__.py", "content": ""}
{"type": "source_file", "path": "Project 3.5/TodoApp/routers/admin.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom models import Todos\nfrom database import SessionLocal\nfrom .auth import get_current_user\n\nrouter = APIRouter(\n    prefix='/admin',\n    tags=['admin']\n)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n\n\n@router.get(\"/todo\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None or user.get('user_role') != 'admin':\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Todos).all()\n\n\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None or user.get('user_role') != 'admin':\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    todo_model = db.query(Todos).filter(Todos.id == todo_id).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n    db.query(Todos).filter(Todos.id == todo_id).delete()\n    db.commit()\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 3.5/TodoApp/routers/todos.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom models import Todos\nfrom database import SessionLocal\nfrom .auth import get_current_user\n\nrouter = APIRouter()\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n\n\nclass TodoRequest(BaseModel):\n    title: str = Field(min_length=3)\n    description: str = Field(min_length=3, max_length=100)\n    priority: int = Field(gt=0, lt=6)\n    complete: bool\n\n\n@router.get(\"/\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Todos).filter(Todos.owner_id == user.get('id')).all()\n\n\n@router.get(\"/todo/{todo_id}\", status_code=status.HTTP_200_OK)\nasync def read_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is not None:\n        return todo_model\n    raise HTTPException(status_code=404, detail='Todo not found.')\n\n\n@router.post(\"/todo\", status_code=status.HTTP_201_CREATED)\nasync def create_todo(user: user_dependency, db: db_dependency,\n                      todo_request: TodoRequest):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    todo_model = Todos(**todo_request.model_dump(), owner_id=user.get('id'))\n\n    db.add(todo_model)\n    db.commit()\n\n\n@router.put(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def update_todo(user: user_dependency, db: db_dependency,\n                      todo_request: TodoRequest,\n                      todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n\n    todo_model.title = todo_request.title\n    todo_model.description = todo_request.description\n    todo_model.priority = todo_request.priority\n    todo_model.complete = todo_request.complete\n\n    db.add(todo_model)\n    db.commit()\n\n\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n    db.query(Todos).filter(Todos.id == todo_id).filter(Todos.owner_id == user.get('id')).delete()\n\n    db.commit()\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 3.5/TodoApp/routers/auth.py", "content": "from datetime import timedelta, datetime, timezone\nfrom typing import Annotated\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom pydantic import BaseModel\nfrom sqlalchemy.orm import Session\nfrom starlette import status\nfrom database import SessionLocal\nfrom models import Users\nfrom passlib.context import CryptContext\nfrom fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer\nfrom jose import jwt, JWTError\n\nrouter = APIRouter(\n    prefix='/auth',\n    tags=['auth']\n)\n\nSECRET_KEY = '197b2c37c391bed93fe80344fe73b806947a65e36206e05a1a23c2fa12702fe3'\nALGORITHM = 'HS256'\n\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\noauth2_bearer = OAuth2PasswordBearer(tokenUrl='auth/token')\n\n\nclass CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    password: str\n    role: str\n    phone_number: str\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\n\n\ndef authenticate_user(username: str, password: str, db):\n    user = db.query(Users).filter(Users.username == username).first()\n    if not user:\n        return False\n    if not bcrypt_context.verify(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(username: str, user_id: int, role: str, expires_delta: timedelta):\n    encode = {'sub': username, 'id': user_id, 'role': role}\n    expires = datetime.now(timezone.utc) + expires_delta\n    encode.update({'exp': expires})\n    return jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_bearer)]):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get('sub')\n        user_id: int = payload.get('id')\n        user_role: str = payload.get('role')\n        if username is None or user_id is None:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                detail='Could not validate user.')\n        return {'username': username, 'id': user_id, 'user_role': user_role}\n    except JWTError:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Could not validate user.')\n\n\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\nasync def create_user(db: db_dependency,\n                      create_user_request: CreateUserRequest):\n    create_user_model = Users(\n        email=create_user_request.email,\n        username=create_user_request.username,\n        first_name=create_user_request.first_name,\n        last_name=create_user_request.last_name,\n        role=create_user_request.role,\n        hashed_password=bcrypt_context.hash(create_user_request.password),\n        is_active=True,\n        phone_number=create_user_request.phone_number\n    )\n\n    db.add(create_user_model)\n    db.commit()\n\n\n@router.post(\"/token\", response_model=Token)\nasync def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n                                 db: db_dependency):\n    user = authenticate_user(form_data.username, form_data.password, db)\n    if not user:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Could not validate user.')\n    token = create_access_token(user.username, user.id, user.role, timedelta(minutes=20))\n\n    return {'access_token': token, 'token_type': 'bearer'}\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 3.5/TodoApp/routers/users.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom models import Users\nfrom database import SessionLocal\nfrom .auth import get_current_user\nfrom passlib.context import CryptContext\n\nrouter = APIRouter(\n    prefix='/user',\n    tags=['user']\n)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n\n\nclass UserVerification(BaseModel):\n    password: str\n    new_password: str = Field(min_length=6)\n\n\n@router.get('/', status_code=status.HTTP_200_OK)\nasync def get_user(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Users).filter(Users.id == user.get('id')).first()\n\n\n@router.put(\"/password\", status_code=status.HTTP_204_NO_CONTENT)\nasync def change_password(user: user_dependency, db: db_dependency,\n                          user_verification: UserVerification):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    user_model = db.query(Users).filter(Users.id == user.get('id')).first()\n\n    if not bcrypt_context.verify(user_verification.password, user_model.hashed_password):\n        raise HTTPException(status_code=401, detail='Error on password change')\n    user_model.hashed_password = bcrypt_context.hash(user_verification.new_password)\n    db.add(user_model)\n    db.commit()\n\n\n@router.put(\"/phonenumber/{phone_number}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def change_phonenumber(user: user_dependency, db: db_dependency,\n                          phone_number: str):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    user_model = db.query(Users).filter(Users.id == user.get('id')).first()\n    user_model.phone_number = phone_number\n    db.add(user_model)\n    db.commit()\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 3/TodoApp/database.py", "content": "from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\nSQLALCHEMY_DATABASE_URL = 'sqlite:///./todosapp.db'\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={'check_same_thread': False})\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n"}
{"type": "source_file", "path": "Project 3/TodoApp/__init__.py", "content": ""}
{"type": "source_file", "path": "Project 3/TodoApp/main.py", "content": "from fastapi import FastAPI\nimport models\nfrom database import engine\nfrom routers import auth, todos, admin, users\n\napp = FastAPI()\n\nmodels.Base.metadata.create_all(bind=engine)\n\napp.include_router(auth.router)\napp.include_router(todos.router)\napp.include_router(admin.router)\napp.include_router(users.router)"}
{"type": "source_file", "path": "Project 3/TodoApp/routers/__init__.py", "content": ""}
{"type": "source_file", "path": "Project 3/TodoApp/routers/admin.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom models import Todos\nfrom database import SessionLocal\nfrom .auth import get_current_user\n\nrouter = APIRouter(\n    prefix='/admin',\n    tags=['admin']\n)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n\n\n@router.get(\"/todo\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None or user.get('user_role') != 'admin':\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Todos).all()\n\n\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None or user.get('user_role') != 'admin':\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    todo_model = db.query(Todos).filter(Todos.id == todo_id).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n    db.query(Todos).filter(Todos.id == todo_id).delete()\n    db.commit()\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 3/TodoApp/routers/auth.py", "content": "from datetime import timedelta, datetime, timezone\nfrom typing import Annotated\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom pydantic import BaseModel\nfrom sqlalchemy.orm import Session\nfrom starlette import status\nfrom database import SessionLocal\nfrom models import Users\nfrom passlib.context import CryptContext\nfrom fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer\nfrom jose import jwt, JWTError\n\nrouter = APIRouter(\n    prefix='/auth',\n    tags=['auth']\n)\n\nSECRET_KEY = '197b2c37c391bed93fe80344fe73b806947a65e36206e05a1a23c2fa12702fe3'\nALGORITHM = 'HS256'\n\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\noauth2_bearer = OAuth2PasswordBearer(tokenUrl='auth/token')\n\n\nclass CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    password: str\n    role: str\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\n\n\ndef authenticate_user(username: str, password: str, db):\n    user = db.query(Users).filter(Users.username == username).first()\n    if not user:\n        return False\n    if not bcrypt_context.verify(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(username: str, user_id: int, role: str, expires_delta: timedelta):\n    encode = {'sub': username, 'id': user_id, 'role': role}\n    expires = datetime.now(timezone.utc) + expires_delta\n    encode.update({'exp': expires})\n    return jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_bearer)]):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get('sub')\n        user_id: int = payload.get('id')\n        user_role: str = payload.get('role')\n        if username is None or user_id is None:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                detail='Could not validate user.')\n        return {'username': username, 'id': user_id, 'user_role': user_role}\n    except JWTError:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Could not validate user.')\n\n\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\nasync def create_user(db: db_dependency,\n                      create_user_request: CreateUserRequest):\n    create_user_model = Users(\n        email=create_user_request.email,\n        username=create_user_request.username,\n        first_name=create_user_request.first_name,\n        last_name=create_user_request.last_name,\n        role=create_user_request.role,\n        hashed_password=bcrypt_context.hash(create_user_request.password),\n        is_active=True\n    )\n\n    db.add(create_user_model)\n    db.commit()\n\n\n@router.post(\"/token\", response_model=Token)\nasync def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n                                 db: db_dependency):\n    user = authenticate_user(form_data.username, form_data.password, db)\n    if not user:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Could not validate user.')\n    token = create_access_token(user.username, user.id, user.role, timedelta(minutes=20))\n\n    return {'access_token': token, 'token_type': 'bearer'}\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 3/TodoApp/routers/todos.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom models import Todos\nfrom database import SessionLocal\nfrom .auth import get_current_user\n\nrouter = APIRouter()\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n\n\nclass TodoRequest(BaseModel):\n    title: str = Field(min_length=3)\n    description: str = Field(min_length=3, max_length=100)\n    priority: int = Field(gt=0, lt=6)\n    complete: bool\n\n\n@router.get(\"/\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Todos).filter(Todos.owner_id == user.get('id')).all()\n\n\n@router.get(\"/todo/{todo_id}\", status_code=status.HTTP_200_OK)\nasync def read_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is not None:\n        return todo_model\n    raise HTTPException(status_code=404, detail='Todo not found.')\n\n\n@router.post(\"/todo\", status_code=status.HTTP_201_CREATED)\nasync def create_todo(user: user_dependency, db: db_dependency,\n                      todo_request: TodoRequest):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    todo_model = Todos(**todo_request.model_dump(), owner_id=user.get('id'))\n\n    db.add(todo_model)\n    db.commit()\n\n\n@router.put(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def update_todo(user: user_dependency, db: db_dependency,\n                      todo_request: TodoRequest,\n                      todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n\n    todo_model.title = todo_request.title\n    todo_model.description = todo_request.description\n    todo_model.priority = todo_request.priority\n    todo_model.complete = todo_request.complete\n\n    db.add(todo_model)\n    db.commit()\n\n\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n    db.query(Todos).filter(Todos.id == todo_id).filter(Todos.owner_id == user.get('id')).delete()\n\n    db.commit()\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 3/TodoApp/routers/users.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom models import Users\nfrom database import SessionLocal\nfrom .auth import get_current_user\nfrom passlib.context import CryptContext\n\nrouter = APIRouter(\n    prefix='/user',\n    tags=['user']\n)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n\n\nclass UserVerification(BaseModel):\n    password: str\n    new_password: str = Field(min_length=6)\n\n\n@router.get('/', status_code=status.HTTP_200_OK)\nasync def get_user(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Users).filter(Users.id == user.get('id')).first()\n\n\n@router.put(\"/password\", status_code=status.HTTP_204_NO_CONTENT)\nasync def change_password(user: user_dependency, db: db_dependency,\n                          user_verification: UserVerification):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    user_model = db.query(Users).filter(Users.id == user.get('id')).first()\n\n    if not bcrypt_context.verify(user_verification.password, user_model.hashed_password):\n        raise HTTPException(status_code=401, detail='Error on password change')\n    user_model.hashed_password = bcrypt_context.hash(user_verification.new_password)\n    db.add(user_model)\n    db.commit()\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 3/TodoApp/models.py", "content": "from database import Base\nfrom sqlalchemy import Column, Integer, String, Boolean, ForeignKey\n\n\nclass Users(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True)\n    username = Column(String, unique=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    role = Column(String)\n\n\nclass Todos(Base):\n    __tablename__ = 'todos'\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    description = Column(String)\n    priority = Column(Integer)\n    complete = Column(Boolean, default=False)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n"}
{"type": "source_file", "path": "Project 4/TodoApp/routers/auth.py", "content": "from datetime import timedelta, datetime, timezone\nfrom typing import Annotated\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom pydantic import BaseModel\nfrom sqlalchemy.orm import Session\nfrom starlette import status\nfrom ..database import SessionLocal\nfrom ..models import Users\nfrom passlib.context import CryptContext\nfrom fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer\nfrom jose import jwt, JWTError\n\nrouter = APIRouter(\n    prefix='/auth',\n    tags=['auth']\n)\n\nSECRET_KEY = '197b2c37c391bed93fe80344fe73b806947a65e36206e05a1a23c2fa12702fe3'\nALGORITHM = 'HS256'\n\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\noauth2_bearer = OAuth2PasswordBearer(tokenUrl='auth/token')\n\n\nclass CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    password: str\n    role: str\n    phone_number: str\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\n\n\ndef authenticate_user(username: str, password: str, db):\n    user = db.query(Users).filter(Users.username == username).first()\n    if not user:\n        return False\n    if not bcrypt_context.verify(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(username: str, user_id: int, role: str, expires_delta: timedelta):\n    encode = {'sub': username, 'id': user_id, 'role': role}\n    expires = datetime.now(timezone.utc) + expires_delta\n    encode.update({'exp': expires})\n    return jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_bearer)]):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get('sub')\n        user_id: int = payload.get('id')\n        user_role: str = payload.get('role')\n        if username is None or user_id is None:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                detail='Could not validate user.')\n        return {'username': username, 'id': user_id, 'user_role': user_role}\n    except JWTError:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Could not validate user.')\n\n\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\nasync def create_user(db: db_dependency,\n                      create_user_request: CreateUserRequest):\n    create_user_model = Users(\n        email=create_user_request.email,\n        username=create_user_request.username,\n        first_name=create_user_request.first_name,\n        last_name=create_user_request.last_name,\n        role=create_user_request.role,\n        hashed_password=bcrypt_context.hash(create_user_request.password),\n        is_active=True,\n        phone_number=create_user_request.phone_number\n    )\n\n    db.add(create_user_model)\n    db.commit()\n\n\n@router.post(\"/token\", response_model=Token)\nasync def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n                                 db: db_dependency):\n    user = authenticate_user(form_data.username, form_data.password, db)\n    if not user:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Could not validate user.')\n    token = create_access_token(user.username, user.id, user.role, timedelta(minutes=20))\n\n    return {'access_token': token, 'token_type': 'bearer'}\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 5/TodoApp/routers/__init__.py", "content": ""}
{"type": "source_file", "path": "Project 4/TodoApp/database.py", "content": "from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\nSQLALCHEMY_DATABASE_URL = 'sqlite:///./todosapp.db'\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={'check_same_thread': False})\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n"}
{"type": "source_file", "path": "Project 4/TodoApp/models.py", "content": "from .database import Base\nfrom sqlalchemy import Column, Integer, String, Boolean, ForeignKey\n\n\nclass Users(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True)\n    username = Column(String, unique=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    role = Column(String)\n    phone_number = Column(String)\n\n\nclass Todos(Base):\n    __tablename__ = 'todos'\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    description = Column(String)\n    priority = Column(Integer)\n    complete = Column(Boolean, default=False)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n"}
{"type": "source_file", "path": "Project 4/TodoApp/alembic/env.py", "content": "from logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\nfrom alembic import context\nimport models\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\nfileConfig(config.config_file_name)\ntarget_metadata = models.Base.metadata\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\n\n# if config.config_file_name is not None:\n#     fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\n# target_metadata = None\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"}
{"type": "source_file", "path": "PythonRefresher/Assignment (Comments Variables)/assignment.py", "content": "\"\"\"\n- You have $50\n- You buy an item that is $15\n- With a tax of 3%\n- print how much money you have left\n\"\"\"\n\nmoney = 50\nitem = 15\ntax = .03\n\nmoney_left = money - item - (item * tax)\n\nprint(money_left)\n\nprint(50 - 15 - (15 * .03))\n\n"}
{"type": "source_file", "path": "Project 4/TodoApp/routers/__init__.py", "content": ""}
{"type": "source_file", "path": "Project 4/TodoApp/__init__.py", "content": ""}
{"type": "source_file", "path": "Project 4/TodoApp/routers/todos.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom ..models import Todos\nfrom ..database import SessionLocal\nfrom .auth import get_current_user\n\nrouter = APIRouter()\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n\n\nclass TodoRequest(BaseModel):\n    title: str = Field(min_length=3)\n    description: str = Field(min_length=3, max_length=100)\n    priority: int = Field(gt=0, lt=6)\n    complete: bool\n\n\n@router.get(\"/\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Todos).filter(Todos.owner_id == user.get('id')).all()\n\n\n@router.get(\"/todo/{todo_id}\", status_code=status.HTTP_200_OK)\nasync def read_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is not None:\n        return todo_model\n    raise HTTPException(status_code=404, detail='Todo not found.')\n\n\n@router.post(\"/todo\", status_code=status.HTTP_201_CREATED)\nasync def create_todo(user: user_dependency, db: db_dependency,\n                      todo_request: TodoRequest):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    todo_model = Todos(**todo_request.model_dump(), owner_id=user.get('id'))\n\n    db.add(todo_model)\n    db.commit()\n\n\n@router.put(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def update_todo(user: user_dependency, db: db_dependency,\n                      todo_request: TodoRequest,\n                      todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n\n    todo_model.title = todo_request.title\n    todo_model.description = todo_request.description\n    todo_model.priority = todo_request.priority\n    todo_model.complete = todo_request.complete\n\n    db.add(todo_model)\n    db.commit()\n\n\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n    db.query(Todos).filter(Todos.id == todo_id).filter(Todos.owner_id == user.get('id')).delete()\n\n    db.commit()\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 4/TodoApp/main.py", "content": "from fastapi import FastAPI\nfrom .models import Base\nfrom .database import engine\nfrom .routers import auth, todos, admin, users\n\napp = FastAPI()\n\nBase.metadata.create_all(bind=engine)\n\n\n@app.get(\"/healthy\")\ndef health_check():\n    return {'status': 'Healthy'}\n\n\napp.include_router(auth.router)\napp.include_router(todos.router)\napp.include_router(admin.router)\napp.include_router(users.router)\n"}
{"type": "source_file", "path": "Project 4/TodoApp/routers/admin.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom ..models import Todos\nfrom ..database import SessionLocal\nfrom .auth import get_current_user\n\nrouter = APIRouter(\n    prefix='/admin',\n    tags=['admin']\n)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n\n\n@router.get(\"/todo\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None or user.get('user_role') != 'admin':\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Todos).all()\n\n\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None or user.get('user_role') != 'admin':\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    todo_model = db.query(Todos).filter(Todos.id == todo_id).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n    db.query(Todos).filter(Todos.id == todo_id).delete()\n    db.commit()\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 4/TodoApp/routers/users.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom ..models import Users\nfrom ..database import SessionLocal\nfrom .auth import get_current_user\nfrom passlib.context import CryptContext\n\nrouter = APIRouter(\n    prefix='/user',\n    tags=['user']\n)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n\n\nclass UserVerification(BaseModel):\n    password: str\n    new_password: str = Field(min_length=6)\n\n\n@router.get('/', status_code=status.HTTP_200_OK)\nasync def get_user(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Users).filter(Users.id == user.get('id')).first()\n\n\n@router.put(\"/password\", status_code=status.HTTP_204_NO_CONTENT)\nasync def change_password(user: user_dependency, db: db_dependency,\n                          user_verification: UserVerification):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    user_model = db.query(Users).filter(Users.id == user.get('id')).first()\n\n    if not bcrypt_context.verify(user_verification.password, user_model.hashed_password):\n        raise HTTPException(status_code=401, detail='Error on password change')\n    user_model.hashed_password = bcrypt_context.hash(user_verification.new_password)\n    db.add(user_model)\n    db.commit()\n\n\n@router.put(\"/phonenumber/{phone_number}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def change_phonenumber(user: user_dependency, db: db_dependency,\n                          phone_number: str):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    user_model = db.query(Users).filter(Users.id == user.get('id')).first()\n    user_model.phone_number = phone_number\n    db.add(user_model)\n    db.commit()\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 5/TodoApp/routers/auth.py", "content": "from datetime import timedelta, datetime, timezone\nfrom typing import Annotated\nfrom fastapi import APIRouter, Depends, HTTPException, Request\nfrom pydantic import BaseModel\nfrom sqlalchemy.orm import Session\nfrom starlette import status\nfrom ..database import SessionLocal\nfrom ..models import Users\nfrom passlib.context import CryptContext\nfrom fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer\nfrom jose import jwt, JWTError\nfrom fastapi.templating import Jinja2Templates\n\nrouter = APIRouter(\n    prefix='/auth',\n    tags=['auth']\n)\n\nSECRET_KEY = '197b2c37c391bed93fe80344fe73b806947a65e36206e05a1a23c2fa12702fe3'\nALGORITHM = 'HS256'\n\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\noauth2_bearer = OAuth2PasswordBearer(tokenUrl='auth/token')\n\n\nclass CreateUserRequest(BaseModel):\n    username: str\n    email: str\n    first_name: str\n    last_name: str\n    password: str\n    role: str\n    phone_number: str\n\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\n\ntemplates = Jinja2Templates(directory=\"TodoApp/templates\")\n\n\n### Pages ###\n\n@router.get(\"/login-page\")\ndef render_login_page(request: Request):\n    return templates.TemplateResponse(\"login.html\", {\"request\": request})\n\n@router.get(\"/register-page\")\ndef render_register_page(request: Request):\n    return templates.TemplateResponse(\"register.html\", {\"request\": request})\n\n### Endpoints ###\ndef authenticate_user(username: str, password: str, db):\n    user = db.query(Users).filter(Users.username == username).first()\n    if not user:\n        return False\n    if not bcrypt_context.verify(password, user.hashed_password):\n        return False\n    return user\n\n\ndef create_access_token(username: str, user_id: int, role: str, expires_delta: timedelta):\n    encode = {'sub': username, 'id': user_id, 'role': role}\n    expires = datetime.now(timezone.utc) + expires_delta\n    encode.update({'exp': expires})\n    return jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)\n\n\nasync def get_current_user(token: Annotated[str, Depends(oauth2_bearer)]):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get('sub')\n        user_id: int = payload.get('id')\n        user_role: str = payload.get('role')\n        if username is None or user_id is None:\n            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                                detail='Could not validate user.')\n        return {'username': username, 'id': user_id, 'user_role': user_role}\n    except JWTError:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Could not validate user.')\n\n\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\nasync def create_user(db: db_dependency,\n                      create_user_request: CreateUserRequest):\n    create_user_model = Users(\n        email=create_user_request.email,\n        username=create_user_request.username,\n        first_name=create_user_request.first_name,\n        last_name=create_user_request.last_name,\n        role=create_user_request.role,\n        hashed_password=bcrypt_context.hash(create_user_request.password),\n        is_active=True,\n        phone_number=create_user_request.phone_number\n    )\n\n    db.add(create_user_model)\n    db.commit()\n\n\n@router.post(\"/token\", response_model=Token)\nasync def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n                                 db: db_dependency):\n    user = authenticate_user(form_data.username, form_data.password, db)\n    if not user:\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail='Could not validate user.')\n    token = create_access_token(user.username, user.id, user.role, timedelta(minutes=20))\n\n    return {'access_token': token, 'token_type': 'bearer'}\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 5/TodoApp/__init__.py", "content": ""}
{"type": "source_file", "path": "Project 5/TodoApp/routers/admin.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom ..models import Todos\nfrom ..database import SessionLocal\nfrom .auth import get_current_user\n\nrouter = APIRouter(\n    prefix='/admin',\n    tags=['admin']\n)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n\n\n@router.get(\"/todo\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None or user.get('user_role') != 'admin':\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Todos).all()\n\n\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None or user.get('user_role') != 'admin':\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    todo_model = db.query(Todos).filter(Todos.id == todo_id).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n    db.query(Todos).filter(Todos.id == todo_id).delete()\n    db.commit()\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 5/TodoApp/alembic/versions/aeff25f89db0_create_phone_number_for_user_col.py", "content": "\"\"\"create phone number for user col\n\nRevision ID: aeff25f89db0\nRevises: \nCreate Date: 2023-08-28 19:59:25.616334\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'aeff25f89db0'\ndown_revision: Union[str, None] = None\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    op.add_column('users', sa.Column('phone_number', sa.String(), nullable=True))\n\n\ndef downgrade() -> None:\n    op.drop_column('users', 'phone_number')\n"}
{"type": "source_file", "path": "Project 5/TodoApp/database.py", "content": "from sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\nSQLALCHEMY_DATABASE_URL = 'sqlite:///./todosapp.db'\n\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={'check_same_thread': False})\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n"}
{"type": "source_file", "path": "Project 5/TodoApp/main.py", "content": "from fastapi import FastAPI, Request, status\nfrom .models import Base\nfrom .database import engine\nfrom .routers import auth, todos, admin, users\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import RedirectResponse\n\napp = FastAPI()\n\nBase.metadata.create_all(bind=engine)\n\napp.mount(\"/static\", StaticFiles(directory=\"TodoApp/static\"), name=\"static\")\n\n\n@app.get(\"/\")\ndef test(request: Request):\n    return RedirectResponse(url=\"/todos/todo-page\", status_code=status.HTTP_302_FOUND)\n\n\n@app.get(\"/healthy\")\ndef health_check():\n    return {'status': 'Healthy'}\n\n\napp.include_router(auth.router)\napp.include_router(todos.router)\napp.include_router(admin.router)\napp.include_router(users.router)\n"}
{"type": "source_file", "path": "Project 5/TodoApp/routers/todos.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path, Request, status\nfrom starlette import status\nfrom ..models import Todos\nfrom ..database import SessionLocal\nfrom .auth import get_current_user\nfrom starlette.responses import RedirectResponse\nfrom fastapi.templating import Jinja2Templates\n\ntemplates = Jinja2Templates(directory=\"TodoApp/templates\")\n\nrouter = APIRouter(\n    prefix='/todos',\n    tags=['todos']\n)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\n\n\nclass TodoRequest(BaseModel):\n    title: str = Field(min_length=3)\n    description: str = Field(min_length=3, max_length=100)\n    priority: int = Field(gt=0, lt=6)\n    complete: bool\n\n\ndef redirect_to_login():\n    redirect_response = RedirectResponse(url=\"/auth/login-page\", status_code=status.HTTP_302_FOUND)\n    redirect_response.delete_cookie(key=\"access_token\")\n    return redirect_response\n\n\n### Pages ###\n\n@router.get(\"/todo-page\")\nasync def render_todo_page(request: Request, db: db_dependency):\n    try:\n        user = await get_current_user(request.cookies.get('access_token'))\n\n        if user is None:\n            return redirect_to_login()\n\n        todos = db.query(Todos).filter(Todos.owner_id == user.get(\"id\")).all()\n\n        return templates.TemplateResponse(\"todo.html\", {\"request\": request, \"todos\": todos, \"user\": user})\n\n    except:\n        return redirect_to_login()\n\n\n@router.get('/add-todo-page')\nasync def render_todo_page(request: Request):\n    try:\n        user = await get_current_user(request.cookies.get('access_token'))\n\n        if user is None:\n            return redirect_to_login()\n\n        return templates.TemplateResponse(\"add-todo.html\", {\"request\": request, \"user\": user})\n\n    except:\n        return redirect_to_login()\n\n\n@router.get(\"/edit-todo-page/{todo_id}\")\nasync def render_edit_todo_page(request: Request, todo_id: int, db: db_dependency):\n    try:\n        user = await get_current_user(request.cookies.get('access_token'))\n\n        if user is None:\n            return redirect_to_login()\n\n        todo = db.query(Todos).filter(Todos.id == todo_id).first()\n\n        return templates.TemplateResponse(\"edit-todo.html\", {\"request\": request, \"todo\": todo, \"user\": user})\n\n    except:\n        return redirect_to_login()\n\n\n\n### Endpoints ###\n@router.get(\"/\", status_code=status.HTTP_200_OK)\nasync def read_all(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Todos).filter(Todos.owner_id == user.get('id')).all()\n\n\n@router.get(\"/todo/{todo_id}\", status_code=status.HTTP_200_OK)\nasync def read_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is not None:\n        return todo_model\n    raise HTTPException(status_code=404, detail='Todo not found.')\n\n\n@router.post(\"/todo\", status_code=status.HTTP_201_CREATED)\nasync def create_todo(user: user_dependency, db: db_dependency,\n                      todo_request: TodoRequest):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    todo_model = Todos(**todo_request.model_dump(), owner_id=user.get('id'))\n\n    db.add(todo_model)\n    db.commit()\n\n\n@router.put(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def update_todo(user: user_dependency, db: db_dependency,\n                      todo_request: TodoRequest,\n                      todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n\n    todo_model.title = todo_request.title\n    todo_model.description = todo_request.description\n    todo_model.priority = todo_request.priority\n    todo_model.complete = todo_request.complete\n\n    db.add(todo_model)\n    db.commit()\n\n\n@router.delete(\"/todo/{todo_id}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_todo(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n\n    todo_model = db.query(Todos).filter(Todos.id == todo_id)\\\n        .filter(Todos.owner_id == user.get('id')).first()\n    if todo_model is None:\n        raise HTTPException(status_code=404, detail='Todo not found.')\n    db.query(Todos).filter(Todos.id == todo_id).filter(Todos.owner_id == user.get('id')).delete()\n\n    db.commit()\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 5/TodoApp/models.py", "content": "from .database import Base\nfrom sqlalchemy import Column, Integer, String, Boolean, ForeignKey\n\n\nclass Users(Base):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True)\n    username = Column(String, unique=True)\n    first_name = Column(String)\n    last_name = Column(String)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n    role = Column(String)\n    phone_number = Column(String)\n\n\nclass Todos(Base):\n    __tablename__ = 'todos'\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String)\n    description = Column(String)\n    priority = Column(Integer)\n    complete = Column(Boolean, default=False)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n"}
{"type": "source_file", "path": "Project 5/TodoApp/routers/users.py", "content": "from typing import Annotated\nfrom pydantic import BaseModel, Field\nfrom sqlalchemy.orm import Session\nfrom fastapi import APIRouter, Depends, HTTPException, Path\nfrom starlette import status\nfrom ..models import Users\nfrom ..database import SessionLocal\nfrom .auth import get_current_user\nfrom passlib.context import CryptContext\n\nrouter = APIRouter(\n    prefix='/user',\n    tags=['user']\n)\n\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n\ndb_dependency = Annotated[Session, Depends(get_db)]\nuser_dependency = Annotated[dict, Depends(get_current_user)]\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n\n\nclass UserVerification(BaseModel):\n    password: str\n    new_password: str = Field(min_length=6)\n\n\n@router.get('/', status_code=status.HTTP_200_OK)\nasync def get_user(user: user_dependency, db: db_dependency):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    return db.query(Users).filter(Users.id == user.get('id')).first()\n\n\n@router.put(\"/password\", status_code=status.HTTP_204_NO_CONTENT)\nasync def change_password(user: user_dependency, db: db_dependency,\n                          user_verification: UserVerification):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    user_model = db.query(Users).filter(Users.id == user.get('id')).first()\n\n    if not bcrypt_context.verify(user_verification.password, user_model.hashed_password):\n        raise HTTPException(status_code=401, detail='Error on password change')\n    user_model.hashed_password = bcrypt_context.hash(user_verification.new_password)\n    db.add(user_model)\n    db.commit()\n\n\n@router.put(\"/phonenumber/{phone_number}\", status_code=status.HTTP_204_NO_CONTENT)\nasync def change_phonenumber(user: user_dependency, db: db_dependency,\n                          phone_number: str):\n    if user is None:\n        raise HTTPException(status_code=401, detail='Authentication Failed')\n    user_model = db.query(Users).filter(Users.id == user.get('id')).first()\n    user_model.phone_number = phone_number\n    db.add(user_model)\n    db.commit()\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 5/TodoApp/alembic/env.py", "content": "from logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\nfrom alembic import context\nimport models\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\nfileConfig(config.config_file_name)\ntarget_metadata = models.Base.metadata\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\n\n# if config.config_file_name is not None:\n#     fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\n# target_metadata = None\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"}
{"type": "source_file", "path": "PythonRefresher/Boolean and Operators/BooleanAndOperators.py", "content": "\"\"\"\nBoolean and Operators\n\"\"\"\n\n# Comparison Operators\nprint(1 == 2)\nprint(1 != 2)\nprint(1 > 2)\nprint(1 < 2)\nprint(1 >= 1)\nprint(1 <= 2)\n\n\n# Logical Operators\nprint(1 > 3 and 5 < 7)\nprint(1 > 3 or 5 < 7)\nprint(not(1 == 1))\n\n\n"}
{"type": "source_file", "path": "PythonRefresher/Functions Assignment/FunctionAssignment.py", "content": "\"\"\"\nFunction Assignment\n- Create a function that takes in 3 parameters(firstname, lastname, age) and\nreturns a dictionary based on those values\n\"\"\"\n\n\ndef user_dictionary(firstname, lastname, age):\n    created_user_dictionary = {\n        \"firstname\": firstname,\n        \"lastname\": lastname,\n        \"age\": age\n    }\n    return created_user_dictionary\n\n\nsolution_dictionary = user_dictionary(firstname=\"Eric\", lastname=\"Roby\", age=32)\nprint(solution_dictionary)\n\n\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "Project 4/TodoApp/alembic/versions/aeff25f89db0_create_phone_number_for_user_col.py", "content": "\"\"\"create phone number for user col\n\nRevision ID: aeff25f89db0\nRevises: \nCreate Date: 2023-08-28 19:59:25.616334\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'aeff25f89db0'\ndown_revision: Union[str, None] = None\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    op.add_column('users', sa.Column('phone_number', sa.String(), nullable=True))\n\n\ndef downgrade() -> None:\n    op.drop_column('users', 'phone_number')\n"}
{"type": "source_file", "path": "PythonRefresher/Dictionaries/Dictionary.py", "content": "\"\"\"\nDictionaries\n\"\"\"\n\n\nuser_dictionary = {\n    'username': 'codingwithroby',\n    'name': 'Eric',\n    'age': 32\n}\n\n\nuser_dictionary2 = user_dictionary.copy()\nuser_dictionary2.pop(\"age\")\nprint(user_dictionary2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
{"type": "source_file", "path": "PythonRefresher/Comments/Comments.py", "content": "# Going to print hello world!\n# print(\"Hello World\")\nprint(\"Hi Eric\")\n\n# This is going over\n# Multiple\n# Lines\n\n\"\"\"\nThis is going over\nmultiple \nlines\n\"\"\"\n\n'''\nThis is going over\nmultiple \nlines\n'''"}
{"type": "source_file", "path": "PythonRefresher/Dictionaries Assignment/DictionaryAssignment.py", "content": "\"\"\"\nBased on the dictionary:\nmy_vehicle = {\n    \"model\": \"Ford\",\n    \"make\": \"Explorer\",\n    \"year\": 2018,\n    \"mileage\": 40000\n}\n - Create a for loop to print all keys and values\n - Create a new variable vehicle2, which is a copy of my_vehicle\n - Add a new key 'number_of_tires' to the vehicle2 variable that is equal to 4\n - Delete the mileage key and value from vehicle2\n - Print just the keys from vehicle2\n\"\"\"\n\n\nmy_vehicle = {\n    \"model\": \"Ford\",\n    \"make\": \"Explorer\",\n    \"year\": 2018,\n    \"mileage\": 40000\n}\n\n\nfor x, y in my_vehicle.items():\n    print(x, y)\n\n\nvehicle2 = my_vehicle.copy()\n\n\nvehicle2[\"number_of_tires\"] = 4\n\n\nvehicle2.pop(\"mileage\")\n\n\nfor i in vehicle2:\n    print(i)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}
