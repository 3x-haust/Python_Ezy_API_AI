{"repo_info": {"repo_name": "codeimag.es", "repo_owner": "bbelderbos", "repo_url": "https://github.com/bbelderbos/codeimag.es"}}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/conftest.py", "content": "import pytest\n\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, SQLModel, create_engine\nfrom sqlmodel.pool import StaticPool\n\nfrom tips.main import app, get_session\n\n\n@pytest.fixture(name=\"session\")\ndef session_fixture():\n    engine = create_engine(\n        \"sqlite://\", connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n    )\n    SQLModel.metadata.create_all(engine)\n    with Session(engine) as session:\n        yield session\n\n\n@pytest.fixture(name=\"client\")\ndef client_fixture(session: Session):\n    def get_session_override():\n        return session\n\n    app.dependency_overrides[get_session] = get_session_override\n    client = TestClient(app)\n    yield client\n    app.dependency_overrides.clear()\n"}
{"type": "test_file", "path": "tests/test_api.py", "content": "from datetime import datetime, timedelta\nfrom unittest.mock import patch, MagicMock\n\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlmodel import Session, select\n\nfrom tips.db import get_password_hash, _generate_activation_key\nfrom tips.models import User, Tip\n\nS3_FAKE_URL = \"https://carbon-bucket.s3.us-east-2.amazonaws.com/beautiful-code.png\"\n\n\n@pytest.fixture(name=\"user\")\ndef user1(session: Session):\n    encrypted_pw = get_password_hash(\"some_pass1\")\n    user = User(\n        username=\"bob\",\n        email=\"bob@pybit.es\",\n        password=encrypted_pw,\n        password2=encrypted_pw,\n        activation_key=_generate_activation_key(\"some-key\"),\n        key_expires=datetime.utcnow() + timedelta(days=2),\n    )\n    session.add(user)\n    session.commit()\n    yield user\n    session.delete(user)\n\n\n@pytest.fixture(name=\"other_user\")\ndef user2(session: Session):\n    encrypted_pw = get_password_hash(\"some_pass1\")\n    user = User(\n        username=\"julian\",\n        email=\"julian@pybit.es\",\n        password=encrypted_pw,\n        password2=encrypted_pw,\n    )\n    session.add(user)\n    session.commit()\n    yield user\n    session.delete(user)\n\n\n@pytest.fixture(name=\"inactive_user\")\ndef user3(session: Session, user: User):\n    user.active = False\n    session.add(user)\n    session.commit()\n    yield user\n    session.delete(user)\n\n\n@pytest.fixture(name=\"verified_user\")\ndef user4(session: Session, user: User):\n    user.verified = True\n    session.add(user)\n    session.commit()\n    yield user\n    session.delete(user)\n\n\n@pytest.fixture(name=\"limited_user\")\ndef user5(session: Session, verified_user: User):\n    verified_user.premium = True\n    # not \"real\" but easy to test validation\n    verified_user.premium_day_limit = 1\n    session.add(verified_user)\n    session.commit()\n    yield verified_user\n    session.delete(verified_user)\n\n\n@pytest.fixture\ndef tip(session: Session, user: User):\n    tip = Tip(\n        title=\"hello world\",\n        code=\"print('hello world')\",\n        description=\"some description\",\n        user=user,\n    )\n    session.add(tip)\n    session.commit()\n    yield tip\n    session.delete(tip)\n\n\n@pytest.fixture\ndef tip_other_user(session: Session, other_user: User):\n    tip = Tip(\n        title=\"f-string debugging\",\n        code=\"f'{var=}')\",\n        description=\"another description\",\n        user=other_user,\n    )\n    session.add(tip)\n    session.commit()\n    yield tip\n    session.delete(tip)\n\n\n@pytest.fixture(name=\"token\")\ndef get_token(verified_user: User, session: Session, client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"bob\", \"password\": \"some_pass1\"})\n    return response.json()[\"access_token\"]\n\n\n@pytest.fixture(name=\"limited_token\")\ndef get_token_limited_user(limited_user: User, session: Session, client: TestClient):\n    response = client.post(\"/token\", data={\"username\": \"bob\", \"password\": \"some_pass1\"})\n    return response.json()[\"access_token\"]\n\n\ndef test_signup(session: Session, client: TestClient):\n    response = client.post(\n        \"/users/\",\n        json={\n            \"username\": \"bob\",\n            \"email\": \"bob@pybit.es\",\n            \"password\": \"some_pass1\",\n            \"password2\": \"some_pass1\",\n        },\n    )\n    assert response.status_code == 201\n    user = session.exec(select(User)).one()\n    assert user.username == \"bob\"\n    assert user.email == \"bob@pybit.es\"\n    assert user.active is True\n    assert user.verified is False\n    assert user.premium is False\n    assert user.premium_day_limit == 10\n    assert (user.key_expires.date() - user.added.date()).days == 2  # type: ignore\n\n\ndef test_signup_username_already_in_use(client: TestClient, user: User):\n    response = client.post(\n        \"/users/\",\n        json={\n            \"username\": \"bob\",\n            \"email\": \"bob@pybit.es\",\n            \"password\": \"some_pass1\",\n            \"password2\": \"some_pass1\",\n        },\n    )\n    assert response.status_code == 400\n    assert response.json()[\"detail\"] == \"User already exists\"\n\n\ndef test_signup_email_already_used(client: TestClient, user: User):\n    response = client.post(\n        \"/users/\",\n        json={\n            \"username\": \"frank\",\n            \"email\": \"bob@pybit.es\",\n            \"password\": \"some_pass1\",\n            \"password2\": \"some_pass1\",\n        },\n    )\n    assert response.status_code == 400\n    assert response.json()[\"detail\"] == \"Email already in use\"\n\n\ndef test_signup_non_matching_password(client: TestClient, user: User):\n    response = client.post(\n        \"/users/\",\n        json={\n            \"username\": \"frank\",\n            \"email\": \"frank@pybit.es\",\n            \"password\": \"some_pass1\",\n            \"password2\": \"some_pass2\",\n        },\n    )\n    assert response.status_code == 400\n    assert response.json()[\"detail\"] == \"The two passwords should match\"\n\n\ndef test_activate_user(user: User, client: TestClient):\n    response = client.get(\"/activate/\" + user.activation_key)\n    assert response.status_code == 200\n    assert response.json() == {\"account_active\": True}\n\n\ndef test_activate_wrong_key(user: User, client: TestClient):\n    response = client.get(\"/activate/nonsense\")\n    assert response.status_code == 400\n    assert response.json()[\"detail\"] == \"No account found for this key\"\n\n\ndef test_activate_inactive_account(inactive_user: User, client: TestClient):\n    response = client.get(\"/activate/\" + inactive_user.activation_key)\n    assert response.status_code == 400\n    assert response.json()[\"detail\"] == \"Inactive account\"\n\n\ndef test_activate_already_verified_account(verified_user: User, client: TestClient):\n    response = client.get(\"/activate/\" + verified_user.activation_key)\n    assert response.status_code == 400\n    assert response.json()[\"detail\"] == \"Account already verified\"\n\n\ndef test_activate_expired_key(user: User, client: TestClient, session: Session):\n    user.key_expires = datetime.utcnow() - timedelta(days=2)\n    session.add(user)\n    session.commit()\n    response = client.get(\"/activate/\" + user.activation_key)\n    assert response.status_code == 400\n    assert response.json()[\"detail\"] == \"Activation key expired\"\n\n\ndef test_token(verified_user: User, client: TestClient):\n    response = client.post(\n        \"/token\",\n        data={\n            \"username\": \"bob\",\n            \"password\": \"some_pass1\",\n        },\n    )\n    data = response.json()\n    assert response.status_code == 200\n    assert \"access_token\" in data\n    assert data[\"token_type\"] == \"bearer\"\n\n\ndef test_token_wrong_password(user: User, client: TestClient):\n    response = client.post(\n        \"/token\",\n        data={\n            \"username\": \"bob\",\n            \"password\": \"blabla\",\n        },\n    )\n    assert response.status_code == 401\n    assert response.json()[\"detail\"] == \"Incorrect username or password\"\n\n\ndef test_token_inactive_account(inactive_user: User, client: TestClient):\n    response = client.post(\n        \"/token\",\n        data={\n            \"username\": \"bob\",\n            \"password\": \"some_pass1\",\n        },\n    )\n    assert response.status_code == 401\n    assert response.json()[\"detail\"] == \"Inactive account\"\n\n\ndef test_token_unverified_account(user: User, client: TestClient):\n    response = client.post(\n        \"/token\",\n        data={\n            \"username\": \"bob\",\n            \"password\": \"some_pass1\",\n        },\n    )\n    assert response.status_code == 401\n    assert response.json()[\"detail\"] == \"User not verified\"\n\n\ndef test_create_tip_logged_out(user: User, client: TestClient):\n    response = client.post(\n        \"/create\",\n        json={\n            \"title\": \"hello world\",\n            \"code\": \"print('hello world')\",\n            \"description\": \"some description\",\n        },\n    )\n    assert response.status_code == 401\n    assert response.json()[\"detail\"] == \"Not authenticated\"\n\n\n@patch(\"tips.main.create_code_image\")\n@patch(\"tips.main.upload_to_s3\", side_effect=[S3_FAKE_URL])\n@patch(\"tips.main.os\")\ndef test_create_tip_logged_in(\n    os_mock: MagicMock,\n    s3_mock: MagicMock,\n    carbon_mock: MagicMock,\n    session: Session,\n    client: TestClient,\n    token: str,\n):\n    \"\"\"\n    This test mocks out external dependencies in the create_tip endpoint.\n    1. pybites-carbon tool that uses selenium to make the image on carbon.now.sh\n    2. aws code to upload image to S3\n    3. os module stuff\n    \"\"\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = client.post(\n        \"/create\",\n        json={\n            \"title\": \"hello world\",\n            \"code\": \"print('hello world')\",\n            \"description\": \"some description\",\n        },\n        headers=headers,\n    )\n    assert response.status_code == 201\n\n    tmp_path = \"/tmp/1\"\n    os_mock.makedirs.assert_called_with(tmp_path, exist_ok=True)\n    os_mock.rmdir.assert_called_with(tmp_path)\n\n    tip = session.exec(select(Tip)).one()\n    assert tip.description == \"some description\"\n    assert tip.background == \"#ABB8C3\"\n    assert tip.wt == \"sharp\"\n    assert tip.url == S3_FAKE_URL\n    assert tip.code == \"print('hello world')\"\n    assert tip.title == \"hello world\"\n    assert tip.language == \"python\"\n    assert tip.theme == \"seti\"\n    assert tip.public is True\n    assert tip.user_id == 1\n\n\ndef test_create_tip_out_of_credits(\n    session: Session,\n    client: TestClient,\n    tip: Tip,\n    limited_token: str,\n):\n    \"\"\"\n    We need limited token + tip fixutres here\n    -> limited token - links to limited_user which has\n       a premium of max 1 token per day\n    -> tip - triggers one tip already posted by user so\n       the next attempt will exceed daily post rage\n    \"\"\"\n    headers = {\"Authorization\": f\"Bearer {limited_token}\"}\n    response = client.post(\n        \"/create\",\n        json={\n            \"title\": \"hello world\",\n            \"code\": \"print('hello world')\",\n            \"description\": \"some description\",\n        },\n        headers=headers,\n    )\n    assert response.status_code == 400\n    expected_msg_substr = (\n        \"Cannot exceed daily post rate of (1) snippets. Do you need more? Contact us\"\n    )\n    assert expected_msg_substr in response.json()[\"detail\"]\n\n\ndef test_create_tip_cannot_same_one_twice(\n    session: Session,\n    client: TestClient,\n    tip: Tip,\n    token: str,\n):\n    \"\"\"\n    We need limited user + tip fixutres here\n    -> limited = premium of 1 token\n    -> tip = one tip posted so next tip will exceed daily post rage\n    \"\"\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = client.post(\n        \"/create\",\n        json={\n            \"title\": \"hello world\",\n            \"code\": \"print('hello world')\",\n            \"description\": \"some description\",\n        },\n        headers=headers,\n    )\n    assert response.status_code == 400\n    assert response.json() == {\"detail\": \"You already posted this tip\"}\n\n\ndef test_delete_tip(client: TestClient, tip: Tip, token: str):\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = client.delete(\n        \"/1\",\n        headers=headers,\n    )\n    assert response.status_code == 200\n    assert response.json() == {\"ok\": True}\n\n\ndef test_delete_tip_loggedout(client: TestClient):\n    response = client.delete(\"/1\")\n    assert response.status_code == 401\n\n\ndef test_delete_non_existing_tip_loggedin(user: User, client: TestClient, token: str):\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = client.delete(\n        \"/1\",\n        headers=headers,\n    )\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Tip not found\"}\n\n\ndef test_delete_existing_tip_not_owned_by_you(\n    tip_other_user: Tip, client: TestClient, token: str\n):\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = client.delete(\n        \"/1\",\n        headers=headers,\n    )\n    assert response.status_code == 404\n    assert response.json() == {\"detail\": \"Tip not owned by you\"}\n\n\ndef test_get_all_tips(tip: Tip, tip_other_user: Tip, client: TestClient):\n    response = client.get(\"/tips\")\n    # removing added column as it's not predictable (datetime)\n    exclude_keys = {\"added\"}\n    actual = [\n        {k: row[k] for k in row.keys() - set(exclude_keys)} for row in response.json()\n    ]\n    expected = [\n        {\n            \"description\": \"another description\",\n            \"language\": \"python\",\n            \"background\": \"#ABB8C3\",\n            \"theme\": \"seti\",\n            \"wt\": \"sharp\",\n            \"id\": 2,\n            \"user_id\": 2,\n            \"public\": True,\n            \"url\": None,\n            \"title\": \"f-string debugging\",\n            \"code\": \"f'{var=}')\",\n        },\n        {\n            \"description\": \"some description\",\n            \"language\": \"python\",\n            \"background\": \"#ABB8C3\",\n            \"theme\": \"seti\",\n            \"wt\": \"sharp\",\n            \"id\": 1,\n            \"user_id\": 1,\n            \"public\": True,\n            \"url\": None,\n            \"title\": \"hello world\",\n            \"code\": \"print('hello world')\",\n        },\n    ]\n    assert actual == expected\n\n\ndef test_search(tip: Tip, tip_other_user: Tip, client: TestClient):\n    response = client.post(\"/search\", data={\"term\": \"f-string\"})\n    assert response.text.count(\"<h2>\") == 1\n    assert \"f-string debugging\" in response.text\n    assert \"hello world\" not in response.text\n"}
{"type": "test_file", "path": "tests/test_cli.py", "content": "import pytest\nfrom sqlmodel import Session, create_engine, SQLModel, select\n\nfrom tips.models import User\nfrom tips.user import main\n\n\ndef test_cli(capfd, session: Session):\n    args = [\"-u\", \"peter\", \"-e\", \"peter@gmail.com\", \"-p\", \"some-pass\"]\n    engine = create_engine(\"sqlite:///\")\n    SQLModel.metadata.create_all(engine)\n    main(args, engine=engine)\n\n    with Session(engine) as session:\n        users = session.exec(select(User)).all()\n    assert len(users) == 1\n    user = users[0]\n    assert user.email == \"peter@gmail.com\"\n    assert user.active is True\n    assert user.username == \"peter\"\n    assert user.verified is False\n    assert user.premium is False\n\n    # cannot make same user again\n    with pytest.raises(SystemExit):\n        main(args, engine=engine)\n\n    assert capfd.readouterr().out.rstrip() == \"peter already exists\"\n"}
{"type": "source_file", "path": "migrations/env.py", "content": "from logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\n\nfrom alembic import context\nfrom sqlmodel import SQLModel\n\nfrom tips.config import DATABASE_URL\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\nconfig.set_main_option(\"sqlalchemy.url\", DATABASE_URL)\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\nfrom tips.models import Tip, User\n\ntarget_metadata = SQLModel.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(connection=connection, target_metadata=target_metadata)\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"}
{"type": "source_file", "path": "migrations/versions/53adfbb741fd_add_user_columns.py", "content": "\"\"\"add user columns\n\nRevision ID: 53adfbb741fd\nRevises: 9df03a0a6d32\nCreate Date: 2021-12-23 08:41:26.095731\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlmodel\n\n\n# revision identifiers, used by Alembic.\nrevision = \"53adfbb741fd\"\ndown_revision = \"9df03a0a6d32\"\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column(\"user\", sa.Column(\"active\", sa.Boolean(), nullable=True))\n    op.add_column(\"user\", sa.Column(\"premium\", sa.Boolean(), nullable=True))\n    op.create_index(op.f(\"ix_user_active\"), \"user\", [\"active\"], unique=False)\n    op.create_index(op.f(\"ix_user_premium\"), \"user\", [\"premium\"], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f(\"ix_user_premium\"), table_name=\"user\")\n    op.drop_index(op.f(\"ix_user_active\"), table_name=\"user\")\n    op.drop_column(\"user\", \"premium\")\n    op.drop_column(\"user\", \"active\")\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "migrations/versions/9df03a0a6d32_add_private_column.py", "content": "\"\"\"add private column\n\nRevision ID: 9df03a0a6d32\nRevises: c42802b681df\nCreate Date: 2021-12-23 08:36:43.552043\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlmodel\n\n\n# revision identifiers, used by Alembic.\nrevision = \"9df03a0a6d32\"\ndown_revision = \"c42802b681df\"\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column(\"tip\", sa.Column(\"public\", sa.Boolean(), nullable=True))\n    op.create_index(op.f(\"ix_tip_public\"), \"tip\", [\"public\"], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f(\"ix_tip_public\"), table_name=\"tip\")\n    op.drop_column(\"tip\", \"public\")\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "migrations/versions/9736cdc8b5e9_add_defaults.py", "content": "\"\"\"add defaults\n\nRevision ID: 9736cdc8b5e9\nRevises: 3e44ae42fad8\nCreate Date: 2021-12-23 09:59:53.057813\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlmodel\nfrom sqlalchemy.dialects import postgresql\n\n# revision identifiers, used by Alembic.\nrevision = \"9736cdc8b5e9\"\ndown_revision = \"3e44ae42fad8\"\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column(\"user\", \"activation_key\", existing_type=sa.VARCHAR(), nullable=True)\n    op.alter_column(\n        \"user\", \"key_expires\", existing_type=postgresql.TIMESTAMP(), nullable=True\n    )\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column(\n        \"user\", \"key_expires\", existing_type=postgresql.TIMESTAMP(), nullable=False\n    )\n    op.alter_column(\n        \"user\", \"activation_key\", existing_type=sa.VARCHAR(), nullable=False\n    )\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "migrations/versions/3e44ae42fad8_add_user_columns.py", "content": "\"\"\"add user columns\n\nRevision ID: 3e44ae42fad8\nRevises: 53adfbb741fd\nCreate Date: 2021-12-23 09:13:16.517143\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlmodel\n\n\n# revision identifiers, used by Alembic.\nrevision = \"3e44ae42fad8\"\ndown_revision = \"53adfbb741fd\"\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column(\n        \"user\",\n        sa.Column(\"activation_key\", sqlmodel.sql.sqltypes.AutoString(), nullable=False),\n    )\n    op.add_column(\"user\", sa.Column(\"key_expires\", sa.DateTime(), nullable=False))\n    op.add_column(\"user\", sa.Column(\"verified\", sa.Boolean(), nullable=True))\n    op.add_column(\"user\", sa.Column(\"premium_day_limit\", sa.Integer(), nullable=True))\n    op.create_index(\n        op.f(\"ix_user_activation_key\"), \"user\", [\"activation_key\"], unique=False\n    )\n    op.create_index(op.f(\"ix_user_key_expires\"), \"user\", [\"key_expires\"], unique=False)\n    op.create_index(\n        op.f(\"ix_user_premium_day_limit\"), \"user\", [\"premium_day_limit\"], unique=False\n    )\n    op.create_index(op.f(\"ix_user_verified\"), \"user\", [\"verified\"], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f(\"ix_user_verified\"), table_name=\"user\")\n    op.drop_index(op.f(\"ix_user_premium_day_limit\"), table_name=\"user\")\n    op.drop_index(op.f(\"ix_user_key_expires\"), table_name=\"user\")\n    op.drop_index(op.f(\"ix_user_activation_key\"), table_name=\"user\")\n    op.drop_column(\"user\", \"premium_day_limit\")\n    op.drop_column(\"user\", \"verified\")\n    op.drop_column(\"user\", \"key_expires\")\n    op.drop_column(\"user\", \"activation_key\")\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "migrations/versions/c42802b681df_initial_migration.py", "content": "\"\"\"Initial Migration\n\nRevision ID: c42802b681df\nRevises:\nCreate Date: 2021-12-23 08:33:39.957512\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlmodel\n\n\n# revision identifiers, used by Alembic.\nrevision = \"c42802b681df\"\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"user\",\n        sa.Column(\"added\", sa.DateTime(timezone=True), nullable=False),\n        sa.Column(\"username\", sqlmodel.sql.sqltypes.AutoString(), nullable=False),\n        sa.Column(\"email\", sqlmodel.sql.sqltypes.AutoString(), nullable=False),\n        sa.Column(\"password\", sqlmodel.sql.sqltypes.AutoString(), nullable=False),\n        sa.Column(\"id\", sa.Integer(), nullable=True),\n        sa.PrimaryKeyConstraint(\"id\"),\n    )\n    op.create_index(op.f(\"ix_user_email\"), \"user\", [\"email\"], unique=False)\n    op.create_index(op.f(\"ix_user_id\"), \"user\", [\"id\"], unique=False)\n    op.create_index(op.f(\"ix_user_password\"), \"user\", [\"password\"], unique=False)\n    op.create_index(op.f(\"ix_user_username\"), \"user\", [\"username\"], unique=False)\n    op.create_table(\n        \"tip\",\n        sa.Column(\"added\", sa.DateTime(timezone=True), nullable=False),\n        sa.Column(\"title\", sqlmodel.sql.sqltypes.AutoString(), nullable=False),\n        sa.Column(\"code\", sqlmodel.sql.sqltypes.AutoString(), nullable=False),\n        sa.Column(\"description\", sqlmodel.sql.sqltypes.AutoString(), nullable=True),\n        sa.Column(\"language\", sqlmodel.sql.sqltypes.AutoString(), nullable=True),\n        sa.Column(\"background\", sqlmodel.sql.sqltypes.AutoString(), nullable=True),\n        sa.Column(\"theme\", sqlmodel.sql.sqltypes.AutoString(), nullable=True),\n        sa.Column(\"id\", sa.Integer(), nullable=True),\n        sa.Column(\"user_id\", sa.Integer(), nullable=True),\n        sa.Column(\"url\", sqlmodel.sql.sqltypes.AutoString(), nullable=True),\n        sa.ForeignKeyConstraint(\n            [\"user_id\"],\n            [\"user.id\"],\n        ),\n        sa.PrimaryKeyConstraint(\"id\"),\n    )\n    op.create_index(op.f(\"ix_tip_background\"), \"tip\", [\"background\"], unique=False)\n    op.create_index(op.f(\"ix_tip_code\"), \"tip\", [\"code\"], unique=False)\n    op.create_index(op.f(\"ix_tip_description\"), \"tip\", [\"description\"], unique=False)\n    op.create_index(op.f(\"ix_tip_id\"), \"tip\", [\"id\"], unique=False)\n    op.create_index(op.f(\"ix_tip_language\"), \"tip\", [\"language\"], unique=False)\n    op.create_index(op.f(\"ix_tip_theme\"), \"tip\", [\"theme\"], unique=False)\n    op.create_index(op.f(\"ix_tip_title\"), \"tip\", [\"title\"], unique=False)\n    op.create_index(op.f(\"ix_tip_url\"), \"tip\", [\"url\"], unique=False)\n    op.create_index(op.f(\"ix_tip_user_id\"), \"tip\", [\"user_id\"], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f(\"ix_tip_user_id\"), table_name=\"tip\")\n    op.drop_index(op.f(\"ix_tip_url\"), table_name=\"tip\")\n    op.drop_index(op.f(\"ix_tip_title\"), table_name=\"tip\")\n    op.drop_index(op.f(\"ix_tip_theme\"), table_name=\"tip\")\n    op.drop_index(op.f(\"ix_tip_language\"), table_name=\"tip\")\n    op.drop_index(op.f(\"ix_tip_id\"), table_name=\"tip\")\n    op.drop_index(op.f(\"ix_tip_description\"), table_name=\"tip\")\n    op.drop_index(op.f(\"ix_tip_code\"), table_name=\"tip\")\n    op.drop_index(op.f(\"ix_tip_background\"), table_name=\"tip\")\n    op.drop_table(\"tip\")\n    op.drop_index(op.f(\"ix_user_username\"), table_name=\"user\")\n    op.drop_index(op.f(\"ix_user_password\"), table_name=\"user\")\n    op.drop_index(op.f(\"ix_user_id\"), table_name=\"user\")\n    op.drop_index(op.f(\"ix_user_email\"), table_name=\"user\")\n    op.drop_table(\"user\")\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "tips/db.py", "content": "from datetime import date, datetime, timedelta\nimport hashlib\nimport secrets\n\nfrom sqlmodel import Session, SQLModel, create_engine, select, or_\nfrom passlib.context import CryptContext\nfrom sqlalchemy import func\n\nfrom .config import DATABASE_URL, DEBUG\nfrom .models import User, UserCreate, Tip\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nengine = create_engine(DATABASE_URL, echo=DEBUG)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n\n\ndef create_db_and_tables():\n    SQLModel.metadata.create_all(engine)\n\n\ndef _generate_activation_key(username):\n    \"\"\"\n    Generate a random activation key\n    See https://stackoverflow.com/a/24936834/1128469\n    \"\"\"\n    chars = \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)\"\n    secret_key = \"\".join(secrets.choice(chars) for i in range(20))\n    return hashlib.sha256((secret_key + username).encode(\"utf-8\")).hexdigest()\n\n\ndef get_password_hash(password):\n    return pwd_context.hash(password)\n\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\n\n\ndef get_user_by_activation_key(session, key):\n    query = select(User).where(User.activation_key == key)\n    user = session.exec(query).first()\n    return user\n\n\ndef activate_user(session, user):\n    user.verified = True\n    user.activation_key = \"\"\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n    return user\n\n\ndef get_user_by_username(session, username):\n    query = select(User).where(User.username == username)\n    user = session.exec(query).first()\n    return user\n\n\ndef email_used_by_user(session, email):\n    query = select(User).where(User.email == email)\n    return len(session.exec(query).all()) > 0\n\n\ndef create_user(session, username, email, password):\n    encrypted_pw = get_password_hash(password)\n    user = UserCreate(username=username, email=email, password=encrypted_pw)\n    db_user = User.from_orm(user)\n    db_user.activation_key = _generate_activation_key(username)\n    db_user.key_expires = datetime.utcnow() + timedelta(days=2)\n    session.add(db_user)\n    session.commit()\n    session.refresh(db_user)\n    return db_user\n\n\ndef get_tips_posted_today(session, user):\n    today = date.today()\n    tomorrow = date.today() + timedelta(days=1)\n    # where is 'and' by default, for or use sqlmodel.or_\n    #\n    # test revealed that this did not work:\n    # cast(Tip.added, Date) == date.today()\n    #\n    # 'between' does - https://stackoverflow.com/a/8898533\n    query = select(Tip).where(Tip.user == user, Tip.added.between(today, tomorrow))\n    return session.exec(query).all()\n\n\ndef get_tip_by_id(session, tip_id):\n    tip = session.get(Tip, tip_id)\n    return tip\n\n\ndef delete_this_tip(session, tip):\n    session.delete(tip)\n    session.commit()\n\n\ndef get_tip_by_title(session, title, user):\n    query = select(Tip).where(Tip.title == title, Tip.user == user)\n    tip = session.exec(query).first()\n    return tip\n\n\ndef create_new_tip(session, tip, url, user):\n    db_tip = Tip.from_orm(tip)\n    db_tip.url = url\n    db_tip.user = user\n    db_tip.language = db_tip.language.lower()\n    session.add(db_tip)\n    session.commit()\n    session.refresh(db_tip)\n    return db_tip\n\n\ndef get_all_tips(session, offset, limit, term=None):\n    statement = select(Tip)\n    if term is not None:\n        term = term.lower()\n        statement = statement.where(\n            or_(\n                func.lower(Tip.title).contains(term),\n                func.lower(Tip.code).contains(term),\n                func.lower(Tip.description).contains(term),\n            )\n        )\n    statement = statement.offset(offset).limit(limit)\n    statement = statement.order_by(Tip.added.desc())\n    tips = session.exec(statement).all()\n    return tips\n"}
{"type": "source_file", "path": "tips/config.py", "content": "from pathlib import Path\n\nfrom decouple import config\n\n\nDATABASE_URL = config(\"DATABASE_URL\")\nDEBUG = config(\"DEBUG\", default=False, cast=bool)\n\nif DEBUG:\n    CHROME_DRIVER = str(Path.home() / \"bin\" / \"chromedriver\")\nelse:  # pragma: no cover\n    # from Heroku buildpack\n    CHROME_DRIVER = \".chromedriver/bin/chromedriver\"\n    # SQLAlchemy + Heroku\n    # https://help.heroku.com/ZKNTJQSK/why-is-sqlalchemy-1-4-x-not-connecting-to-heroku-postgres\n    if DATABASE_URL.startswith(\"postgres://\"):\n        DATABASE_URL = DATABASE_URL.replace(\"postgres://\", \"postgresql://\", 1)\n\nUSER_DIR = \"/tmp/{user_id}\"\nSECRET_KEY = config(\"SECRET_KEY\")\nALGORITHM = config(\"ALGORITHM\", default=\"HS256\")\nACCESS_TOKEN_EXPIRE_MINUTES = config(\n    \"ACCESS_TOKEN_EXPIRE_MINUTES\", default=30, cast=int\n)\nFREE_DAILY_TIPS = config(\"FREE_DAILY_TIPS\", default=3, cast=int)\nPREMIUM_DAY_LIMIT = config(\"PREMIUM_DAY_LIMIT\", default=10, cast=int)\nBASE_URL = config(\"BASE_URL\")\nFROM_EMAIL = config(\"FROM_EMAIL\")  # notification email\nADMIN_EMAIL = config(\"ADMIN_EMAIL\")\nSENDGRID_API_KEY = config(\"SENDGRID_API_KEY\", default=\"\")\nAWS_S3_BUCKET = config(\"AWS_S3_BUCKET\", default=\"\")\nAWS_ACCESS_KEY_ID = config(\"AWS_ACCESS_KEY_ID\", default=\"\")\nAWS_SECRET_ACCESS_KEY = config(\"AWS_SECRET_ACCESS_KEY\", default=\"\")\nAWS_REGION = config(\"AWS_REGION\", default=\"\")\n"}
{"type": "source_file", "path": "tips/aws.py", "content": "import os\nfrom typing import Optional\n\nimport boto3\n\nfrom .config import AWS_S3_BUCKET, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION\n\nDEFAULT_BUCKET_PERMISSION = \"public-read\"\n\n\ndef upload_to_s3(\n    filepath: str, bucket: Optional[str] = None, acl: Optional[str] = None\n) -> str:\n    s3_bucket = bucket or AWS_S3_BUCKET\n    acl = acl or DEFAULT_BUCKET_PERMISSION\n\n    session = boto3.Session(\n        aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY\n    )\n    s3 = session.resource(\"s3\")\n    response = s3.Bucket(s3_bucket).put_object(\n        Key=os.path.basename(filepath), Body=open(filepath, \"rb\"), ACL=acl\n    )\n\n    s3_file_link = f\"https://{s3_bucket}.s3.{AWS_REGION}.amazonaws.com/{response.key}\"\n    return s3_file_link\n"}
{"type": "source_file", "path": "tips/__init__.py", "content": ""}
{"type": "source_file", "path": "tips/mail.py", "content": "import sendgrid\nfrom sendgrid.helpers.mail import To, From, Mail\n\nfrom .config import DEBUG, FROM_EMAIL, ADMIN_EMAIL, SENDGRID_API_KEY\n\nME = \"me\"\nALL = \"all\"\nPYBITES = \"Pybites\"\n\nsg = sendgrid.SendGridAPIClient(api_key=SENDGRID_API_KEY)\n\n\ndef send_email(\n    to_email, subject, body, from_email=FROM_EMAIL, display_name=PYBITES, html=True\n):\n\n    # newlines get wrapped in email, use html\n    body = body.replace(\"\\n\", \"<br>\")\n\n    # if local no emails\n    if DEBUG:\n        print(\"local env - no email, only print send_email args:\")\n        print(\"to_email: {}\".format(to_email))\n        print(\"subject: {}\".format(subject))\n        print(\"body: {}\".format(body))\n        print(\"from_email: {}\".format(from_email))\n        print(\"html: {}\".format(html))\n        print()\n        return\n\n    from_email = From(email=from_email, name=display_name)\n\n    to_email = ADMIN_EMAIL if to_email == \"me\" else to_email\n    to_email = To(to_email)\n\n    # https://github.com/sendgrid/sendgrid-python/blob/master/sendgrid/helpers/mail/mail.py\n    message = Mail(\n        from_email=from_email,\n        to_emails=to_email,\n        subject=subject,\n        plain_text_content=body if not html else None,\n        html_content=body if html else None,\n    )\n\n    response = sg.send(message)\n\n    if str(response.status_code)[0] != \"2\":\n        print(f\"ERROR sending message, status_code {response.status_code}\")\n\n    return response\n\n\nif __name__ == \"__main__\":\n    subject = \"new user (test message)\"\n    body = \"\"\"test message with <a href='https://codechalleng.es/'>link</a>.\"\"\"\n    response = send_email(\"me\", subject, body)\n    print(response.status_code)\n    print(response.body)\n    print(response.headers)\n"}
{"type": "source_file", "path": "tips/post_snippet.py", "content": "\"\"\"\nScript to post a code snippet to Pybites Codeimag.es ->\nhttps://pybites-codeimages.herokuapp.com\n\"\"\"\nfrom pprint import pprint as pp\nimport sys\n\nimport requests\nfrom decouple import config\n\nCODEIMAGES_USER = config(\"CODEIMAGES_USER\")\nCODEIMAGES_PASSWORD = config(\"CODEIMAGES_PASSWORD\")\nDEBUG = config(\"DEBUG\", cast=bool, default=False)\nLIVE_SITE = \"https://pybites-codeimages.herokuapp.com\"\nBASE_URL = \"http://localhost:8000\" if DEBUG else LIVE_SITE\nTOKEN_URL = f\"{BASE_URL}/token\"\nCREATE_TIP_URL = f\"{BASE_URL}/create\"\n\n\ndef _write_multiline_input(action):\n    print(f\"{action}, enter <enter>+qq to finish: \")\n    lines = []\n    exit_mark = \"qq\"\n    while True:\n        line = input()\n        if line.strip().lower() == exit_mark:\n            break\n        lines.append(line)\n    return \"\\n\".join(lines)\n\n\ndef get_token(user, password):\n    payload = {\"username\": user, \"password\": password}\n    resp = requests.post(TOKEN_URL, data=payload)\n    data = resp.json()\n\n    if \"access_token\" not in data:\n        sys.exit(data[\"detail\"])\n\n    return data[\"access_token\"]\n\n\ndef main(args):\n    try:\n        user, password, *_ = args\n    except ValueError:\n        user, password = CODEIMAGES_USER, CODEIMAGES_PASSWORD\n\n    token = get_token(user, password)\n\n    while True:\n        title = input(\"Add a title: \")\n        code = _write_multiline_input(\"Paste your code snippet\")\n        description = _write_multiline_input(\"Add an optional description\")\n\n        payload = {\n            \"title\": title.strip(),\n            \"code\": code.lstrip(),\n            \"description\": description.strip(),\n        }\n        print(\"Posting tip ...\")\n        headers = {\"Authorization\": f\"Bearer {token}\"}\n        resp = requests.post(CREATE_TIP_URL, json=payload, headers=headers)\n        if str(resp.status_code).startswith(\"2\"):\n            print(f\"Code snippet posted to CodeImag.es: {BASE_URL}\")\n        else:\n            print(f\"Something went wrong, API returned status code {resp.status_code}\")\n        print()\n        print(\"API response:\")\n        pp(resp.json())\n\n        if input(\"Press enter to post another tip, 'q' to exit: \") == \"q\":\n            print(\"Bye\")\n            break\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n"}
{"type": "source_file", "path": "migrations/versions/ed403b0ed346_add_wt_column.py", "content": "\"\"\"add wt column\n\nRevision ID: ed403b0ed346\nRevises: 9736cdc8b5e9\nCreate Date: 2022-11-27 10:33:47.320197\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\nimport sqlmodel\nfrom sqlalchemy.dialects import postgresql\n\n# revision identifiers, used by Alembic.\nrevision = \"ed403b0ed346\"\ndown_revision = \"9736cdc8b5e9\"\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column(\n        \"tip\", sa.Column(\"wt\", sqlmodel.sql.sqltypes.AutoString(), nullable=True)\n    )\n    op.alter_column(\"tip\", \"public\", existing_type=sa.BOOLEAN(), nullable=False)\n    op.drop_index(\"ix_tip_background\", table_name=\"tip\")\n    op.drop_index(\"ix_tip_code\", table_name=\"tip\")\n    op.drop_index(\"ix_tip_description\", table_name=\"tip\")\n    op.drop_index(\"ix_tip_id\", table_name=\"tip\")\n    op.drop_index(\"ix_tip_language\", table_name=\"tip\")\n    op.drop_index(\"ix_tip_public\", table_name=\"tip\")\n    op.drop_index(\"ix_tip_theme\", table_name=\"tip\")\n    op.drop_index(\"ix_tip_title\", table_name=\"tip\")\n    op.drop_index(\"ix_tip_url\", table_name=\"tip\")\n    op.drop_index(\"ix_tip_user_id\", table_name=\"tip\")\n    op.alter_column(\n        \"user\", \"activation_key\", existing_type=sa.VARCHAR(), nullable=False\n    )\n    op.alter_column(\n        \"user\", \"key_expires\", existing_type=postgresql.TIMESTAMP(), nullable=False\n    )\n    op.alter_column(\"user\", \"verified\", existing_type=sa.BOOLEAN(), nullable=False)\n    op.alter_column(\"user\", \"active\", existing_type=sa.BOOLEAN(), nullable=False)\n    op.alter_column(\"user\", \"premium\", existing_type=sa.BOOLEAN(), nullable=False)\n    op.alter_column(\n        \"user\", \"premium_day_limit\", existing_type=sa.INTEGER(), nullable=False\n    )\n    op.drop_index(\"ix_user_activation_key\", table_name=\"user\")\n    op.drop_index(\"ix_user_active\", table_name=\"user\")\n    op.drop_index(\"ix_user_email\", table_name=\"user\")\n    op.drop_index(\"ix_user_id\", table_name=\"user\")\n    op.drop_index(\"ix_user_key_expires\", table_name=\"user\")\n    op.drop_index(\"ix_user_password\", table_name=\"user\")\n    op.drop_index(\"ix_user_premium\", table_name=\"user\")\n    op.drop_index(\"ix_user_premium_day_limit\", table_name=\"user\")\n    op.drop_index(\"ix_user_username\", table_name=\"user\")\n    op.drop_index(\"ix_user_verified\", table_name=\"user\")\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_index(\"ix_user_verified\", \"user\", [\"verified\"], unique=False)\n    op.create_index(\"ix_user_username\", \"user\", [\"username\"], unique=False)\n    op.create_index(\n        \"ix_user_premium_day_limit\", \"user\", [\"premium_day_limit\"], unique=False\n    )\n    op.create_index(\"ix_user_premium\", \"user\", [\"premium\"], unique=False)\n    op.create_index(\"ix_user_password\", \"user\", [\"password\"], unique=False)\n    op.create_index(\"ix_user_key_expires\", \"user\", [\"key_expires\"], unique=False)\n    op.create_index(\"ix_user_id\", \"user\", [\"id\"], unique=False)\n    op.create_index(\"ix_user_email\", \"user\", [\"email\"], unique=False)\n    op.create_index(\"ix_user_active\", \"user\", [\"active\"], unique=False)\n    op.create_index(\"ix_user_activation_key\", \"user\", [\"activation_key\"], unique=False)\n    op.alter_column(\n        \"user\", \"premium_day_limit\", existing_type=sa.INTEGER(), nullable=True\n    )\n    op.alter_column(\"user\", \"premium\", existing_type=sa.BOOLEAN(), nullable=True)\n    op.alter_column(\"user\", \"active\", existing_type=sa.BOOLEAN(), nullable=True)\n    op.alter_column(\"user\", \"verified\", existing_type=sa.BOOLEAN(), nullable=True)\n    op.alter_column(\n        \"user\", \"key_expires\", existing_type=postgresql.TIMESTAMP(), nullable=True\n    )\n    op.alter_column(\"user\", \"activation_key\", existing_type=sa.VARCHAR(), nullable=True)\n    op.create_index(\"ix_tip_user_id\", \"tip\", [\"user_id\"], unique=False)\n    op.create_index(\"ix_tip_url\", \"tip\", [\"url\"], unique=False)\n    op.create_index(\"ix_tip_title\", \"tip\", [\"title\"], unique=False)\n    op.create_index(\"ix_tip_theme\", \"tip\", [\"theme\"], unique=False)\n    op.create_index(\"ix_tip_public\", \"tip\", [\"public\"], unique=False)\n    op.create_index(\"ix_tip_language\", \"tip\", [\"language\"], unique=False)\n    op.create_index(\"ix_tip_id\", \"tip\", [\"id\"], unique=False)\n    op.create_index(\"ix_tip_description\", \"tip\", [\"description\"], unique=False)\n    op.create_index(\"ix_tip_code\", \"tip\", [\"code\"], unique=False)\n    op.create_index(\"ix_tip_background\", \"tip\", [\"background\"], unique=False)\n    op.alter_column(\"tip\", \"public\", existing_type=sa.BOOLEAN(), nullable=True)\n    op.drop_column(\"tip\", \"wt\")\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "tips/user.py", "content": "import argparse\nimport sys\n\nfrom sqlmodel import Session\n\nfrom .db import engine as default_engine, create_user, get_user_by_username\n\n\ndef main(args, *, engine=None):\n    engine = engine or default_engine\n\n    parser = argparse.ArgumentParser(\"Create a user\")\n    parser.add_argument(\"-u\", \"--username\", required=True)\n    parser.add_argument(\"-e\", \"--email\", required=True)\n    parser.add_argument(\"-p\", \"--password\", required=True)\n\n    args = parser.parse_args(args)\n\n    with Session(engine) as session:\n        user = get_user_by_username(session, args.username)\n        if user is not None:\n            print(f\"{args.username} already exists\")\n            sys.exit(1)\n\n        create_user(session, args.username, args.email, args.password)\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    main(sys.argv[1:])\n"}
{"type": "source_file", "path": "tips/models.py", "content": "from datetime import datetime\nfrom typing import List, Optional\n\nfrom sqlmodel import Column, DateTime, Field, Relationship, SQLModel\n\nfrom .config import FREE_DAILY_TIPS, PREMIUM_DAY_LIMIT\n\n\nclass UserBase(SQLModel):\n    username: str\n    email: str\n    password: str\n\n\nclass User(UserBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    tips: List[\"Tip\"] = Relationship(\n        back_populates=\"user\", sa_relationship_kwargs={\"cascade\": \"all,delete\"}\n    )\n    activation_key: str = \"\"\n    key_expires: datetime = datetime.now()\n    verified: bool = False\n    active: bool = True\n    premium: bool = False\n    premium_day_limit: int = PREMIUM_DAY_LIMIT\n    added: Optional[datetime] = Field(\n        sa_column=Column(\n            DateTime(timezone=True), nullable=False, default=datetime.utcnow\n        )\n    )\n\n    @property\n    def max_daily_snippets(self):\n        if self.premium:\n            return self.premium_day_limit\n        else:\n            return FREE_DAILY_TIPS\n\n\nclass UserCreate(UserBase):\n    password2: Optional[str]\n\n\nclass UserRead(UserBase):\n    id: int\n\n\nclass TipBase(SQLModel):\n    title: str\n    code: str\n    description: Optional[str]\n    language: Optional[str] = \"python\"\n    background: Optional[str] = \"#ABB8C3\"\n    theme: Optional[str] = \"seti\"\n    wt: Optional[str] = \"sharp\"\n\n\nclass Tip(TipBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\")\n    user: Optional[User] = Relationship(\n        back_populates=\"tips\", sa_relationship_kwargs={\"lazy\": \"subquery\"}\n    )\n    public: bool = True\n    added: Optional[datetime] = Field(\n        sa_column=Column(\n            DateTime(timezone=True), nullable=False, default=datetime.utcnow\n        )\n    )\n    url: Optional[str]\n\n\nclass TipCreate(TipBase):\n    pass\n\n\nclass Token(SQLModel):\n    access_token: str\n    token_type: str\n\n\nclass TokenData(SQLModel):\n    username: Optional[str] = None\n"}
{"type": "source_file", "path": "tips/main.py", "content": "from datetime import datetime, timedelta\nimport base64\nimport os\nfrom typing import Optional\n\nfrom fastapi import Depends, Form, FastAPI, HTTPException, Query, status, Request\nfrom fastapi.templating import Jinja2Templates\nfrom fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\nfrom fastapi.staticfiles import StaticFiles\nfrom sqlmodel import Session\nfrom jose import JWTError, jwt\nfrom carbon.carbon import create_code_image\n\nfrom .aws import upload_to_s3\nfrom .config import (\n    BASE_URL,\n    CHROME_DRIVER,\n    USER_DIR,\n    SECRET_KEY,\n    ALGORITHM,\n    ACCESS_TOKEN_EXPIRE_MINUTES,\n    FROM_EMAIL,\n)\nfrom .db import (\n    get_session,\n    activate_user,\n    create_db_and_tables,\n    create_user,\n    email_used_by_user,\n    verify_password,\n    delete_this_tip,\n    get_user_by_username,\n    get_user_by_activation_key,\n    get_tip_by_id,\n    get_tip_by_title,\n    get_tips_posted_today,\n    get_all_tips,\n    create_new_tip,\n)\nfrom .models import (\n    Tip,\n    TipCreate,\n    User,\n    UserCreate,\n    Token,\n    TokenData,\n)\nfrom .mail import send_email\n\napp = FastAPI()\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\ntemplates = Jinja2Templates(directory=\"templates\")\n\n\ndef authenticate_user(session, username: str, password: str):\n    user = get_user_by_username(session, username)\n    if not user or not verify_password(password, user.password):\n        return False\n    return user\n\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\n\ndef get_current_user(\n    session: Session = Depends(get_session), token: str = Depends(oauth2_scheme)\n):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n    user = get_user_by_username(session, token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n\n\n@app.on_event(\"startup\")\ndef on_startup():\n    create_db_and_tables()\n\n\n@app.get(\"/activate/{key}\")\ndef activate(*, key: str, session: Session = Depends(get_session)):\n    user = get_user_by_activation_key(session, key)\n    if not user:\n        raise HTTPException(status_code=400, detail=\"No account found for this key\")\n\n    if not user.active:\n        raise HTTPException(status_code=400, detail=\"Inactive account\")\n\n    if user.verified:\n        raise HTTPException(status_code=400, detail=\"Account already verified\")\n\n    if datetime.now() > user.key_expires:\n        raise HTTPException(status_code=400, detail=\"Activation key expired\")\n\n    activate_user(session, user)\n    return {\"account_active\": True}\n\n\n@app.post(\"/create\", status_code=201, response_model=Tip)\ndef create_tip(\n    *,\n    tip: TipCreate,\n    session: Session = Depends(get_session),\n    current_user: User = Depends(get_current_user),\n):\n    tips_posted_today = get_tips_posted_today(session, current_user)\n    if len(tips_posted_today) >= current_user.max_daily_snippets:\n        msg = (\n            f\"Cannot exceed daily post rate of ({current_user.max_daily_snippets})\"\n            f\" snippets. Do you need more? Contact us: {FROM_EMAIL}\"\n        )\n        raise HTTPException(status_code=400, detail=msg)\n\n    if get_tip_by_title(session, tip.title, current_user) is not None:\n        raise HTTPException(status_code=400, detail=\"You already posted this tip\")\n\n    # to not clash with other users\n    user_dir = USER_DIR.format(user_id=current_user.id)\n    os.makedirs(user_dir, exist_ok=True)\n\n    expected_carbon_outfile = os.path.join(user_dir, \"carbon.png\")\n    options = {\n        \"language\": tip.language,\n        \"background\": tip.background,\n        \"theme\": tip.theme,\n        \"wt\": tip.wt,\n        \"driver_path\": CHROME_DRIVER,\n        \"destination\": user_dir,\n        \"disable-dev-shm\": True,\n    }\n    create_code_image(tip.code, **options)\n\n    byte_str = f\"{current_user.username}_{tip.title}\".encode(\"utf-8\")\n    key = base64.b64encode(byte_str)\n    encrypted_filename = key.decode(\"utf-8\") + \".png\"\n\n    unique_user_filename = os.path.join(user_dir, encrypted_filename)\n    os.rename(expected_carbon_outfile, unique_user_filename)\n\n    url = upload_to_s3(unique_user_filename)\n\n    os.remove(unique_user_filename)\n    os.rmdir(user_dir)\n\n    tip = create_new_tip(session, tip, url, current_user)\n    return tip\n\n\n@app.delete(\"/{tip_id}\")\ndef delete_tip(\n    *,\n    tip_id: int,\n    session: Session = Depends(get_session),\n    current_user: User = Depends(get_current_user),\n):\n    tip = get_tip_by_id(session, tip_id)\n    if tip is None:\n        raise HTTPException(status_code=404, detail=\"Tip not found\")\n    if tip.user != current_user:\n        raise HTTPException(status_code=404, detail=\"Tip not owned by you\")\n    delete_this_tip(session, tip)\n    return {\"ok\": True}\n\n\n@app.get(\"/tips\", response_model=list[Tip])\ndef get_tips(\n    *,\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n    session: Session = Depends(get_session),\n):\n    tips = get_all_tips(session, offset, limit)\n    return tips\n\n\n@app.get(\"/\", response_model=list[Tip])\ndef get_tips_web(\n    *,\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n    session: Session = Depends(get_session),\n    request: Request,\n):\n    tips = get_all_tips(session, offset, limit)\n    return templates.TemplateResponse(\"tips.html\", {\"request\": request, \"tips\": tips})\n\n\n@app.post(\"/search\", response_model=list[Tip])\ndef get_tips_search(\n    *,\n    offset: int = 0,\n    limit: int = Query(default=100, le=100),\n    session: Session = Depends(get_session),\n    request: Request,\n    term: str = Form(...),\n):\n    tips = get_all_tips(session, offset, limit, term=term)\n    return templates.TemplateResponse(\n        \"tips.html\", {\"request\": request, \"tips\": tips, \"term\": term}\n    )\n\n\n@app.post(\"/token\", response_model=Token)\ndef login_for_access_token(\n    *,\n    form_data: OAuth2PasswordRequestForm = Depends(),\n    session: Session = Depends(get_session),\n):\n    user = authenticate_user(session, form_data.username, form_data.password)\n\n    error = \"\"\n    if not user:\n        error = \"Incorrect username or password\"\n\n    elif not user.active:\n        error = \"Inactive account\"\n\n    elif not user.verified:\n        error = \"User not verified\"\n\n    if error:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=error,\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = create_access_token(\n        data={\"sub\": user.username}, expires_delta=access_token_expires\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\n@app.post(\"/users\", status_code=201, response_model=User)\ndef signup(*, payload: UserCreate, session: Session = Depends(get_session)):\n    \"\"\"Create a new user in the database\"\"\"\n    username = payload.username\n    email = payload.email\n    password = payload.password\n    password2 = payload.password2\n\n    user = get_user_by_username(session, username)\n    if user is not None:\n        raise HTTPException(\n            status_code=400,\n            detail=\"User already exists\",\n        )\n\n    if email_used_by_user(session, email):\n        raise HTTPException(\n            status_code=400,\n            detail=\"Email already in use\",\n        )\n\n    if password != password2:\n        raise HTTPException(\n            status_code=400,\n            detail=\"The two passwords should match\",\n        )\n\n    user = create_user(session, username, email, password)\n\n    subject = \"Please verify your CodeImag.es account\"\n    msg = f\"{BASE_URL}/activate/{user.activation_key}\"\n    send_email(email, subject, msg)\n\n    return user\n"}
