{"repo_info": {"repo_name": "Request_Api_Project", "repo_owner": "programadorLhama", "repo_url": "https://github.com/programadorLhama/Request_Api_Project"}}
{"type": "source_file", "path": "src/__init__.py", "content": ""}
{"type": "source_file", "path": "run.py", "content": "import uvicorn\n\nif __name__==\"__main__\":\n    uvicorn.run(\n        \"src.main.config.http_server_configs:app\",\n        host='0.0.0.0',\n        port=8000,\n        reload=True,\n        debug=True\n    )\n"}
{"type": "source_file", "path": "src/data/usescases/starship_information_colector.py", "content": "from typing import Type, Dict\nfrom src.domain.usecases.starship_information_colector import StarshipInformationColectorInterface\nfrom src.data.interfaces.swapi_api_consumer import SwapiApiConsumerInterface\nfrom src.errors import HttpUnprocessableEntityError\n\n\nclass StarshipInformationColector(StarshipInformationColectorInterface):\n    ''' StarshipInformationColector usecase '''\n\n    def __init__(self, api_consumer: Type[SwapiApiConsumerInterface]) -> None:\n        self.__api_consumer = api_consumer\n\n    def find_starship(self, starship_id: int, time: str) -> Dict:\n        '''\n            Find starship information and return it\n            :param  - starship_id: Id of the starship\n                    - time: Time in hours\n            :returns - Dictionary with starship information\n        '''\n\n        starship_information = self.__search_starship(starship_id)\n        mglt = starship_information['MGLT']\n\n        distance_traveld = self.__calculate_distance_traveled_to_spaceship(mglt, time)\n\n        formated_response = self.__format_response(starship_information, distance_traveld)\n        return formated_response\n\n    def __search_starship(self, starship_id: int) -> Dict:\n        '''\n            Get Starship aind validade information\n            :param - starship_id: Id of the starship\n            :returns - Dictionary with starship information from API\n        '''\n\n        api_response = self.__api_consumer.get_starship_information(starship_id)\n\n        if api_response.response['MGLT'] == 'unknown':\n            raise HttpUnprocessableEntityError('Unprocessible Information for selected starship')\n\n        return api_response.response\n\n    @classmethod\n    def __calculate_distance_traveled_to_spaceship(cls, mglt: str, time: str) -> int:\n        '''\n            Algorithm to calculate distance traveled\n            :param  - mglt: string with Maximum number of Megalights for this spaceship\n                    - time: Time in hours\n            :returns - distance traveled in megalights\n        '''\n\n        distance_traveled = int(mglt) * int(time)\n        return distance_traveled\n\n    @classmethod\n    def __format_response(cls, starship_information: Dict, distance_traveled: int) -> Dict:\n        return {\n            \"starship\": starship_information[\"name\"],\n            \"model\": starship_information[\"model\"],\n            \"manufacturer\": starship_information[\"manufacturer\"],\n            \"max_atmosphering_speed\": starship_information[\"max_atmosphering_speed\"],\n            \"MGLT\": starship_information[\"MGLT\"],\n            \"distance_traveled\": str(distance_traveled) + \" ML\"\n        }\n"}
{"type": "source_file", "path": "src/data/interfaces/swapi_api_consumer.py", "content": "from abc import ABC, abstractmethod\nfrom typing import Type, Tuple, Dict\nfrom requests import Request\n\nclass SwapiApiConsumerInterface(ABC):\n    ''' Api consumer Interface '''\n\n    @abstractmethod\n    def get_starships(self, page: int) -> Tuple[int, Type[Request], Dict]:\n        ''' Must Implement '''\n        raise Exception('Must implement get_starships')\n\n    @abstractmethod\n    def get_starship_information(self, starship_id: int) -> Tuple[int, Type[Request], Dict]:\n        ''' Must Implement '''\n        raise Exception('Must implement get_starship_information')\n"}
{"type": "source_file", "path": "src/data/interfaces/__init__.py", "content": ""}
{"type": "source_file", "path": "src/data/usescases/__init__.py", "content": ""}
{"type": "source_file", "path": "src/data/__init__.py", "content": ""}
{"type": "source_file", "path": "src/domain/__init__.py", "content": ""}
{"type": "source_file", "path": "src/errors/http_unprocessable_entity.py", "content": "class HttpUnprocessableEntityError(Exception):\n    ''' Http Unprocessable error '''\n\n    def __init__(self, message: str) -> None:\n        super().__init__(message)\n        self.message = message\n        self.name = 'UnprocessableEntity'\n        self.status_code = 422\n"}
{"type": "source_file", "path": "src/domain/usecases/starship_information_colector.py", "content": "from abc import ABC, abstractmethod\nfrom typing import Dict\n\nclass StarshipInformationColectorInterface(ABC):\n    ''' Starship Information Colector Interface '''\n\n    @abstractmethod\n    def find_starship(self, starship_id: int, time: str) -> Dict:\n        ''' Must implement '''\n        raise Exception('Must implement find_starship method')\n"}
{"type": "source_file", "path": "src/domain/usecases/starships_list_colector.py", "content": "from abc import ABC, abstractmethod\nfrom typing import Dict, List\n\nclass StarshipsListColectorInterface(ABC):\n    ''' Starships Colector Interface '''\n\n    @abstractmethod\n    def list(self, page: int) -> List[Dict]:\n        ''' Must implement '''\n        raise Exception('Must implement list method')\n"}
{"type": "source_file", "path": "src/data/usescases/starships_list_colector.py", "content": "from typing import Dict, List, Type\nfrom src.domain.usecases import StarshipsListColectorInterface\nfrom src.data.interfaces.swapi_api_consumer import SwapiApiConsumerInterface\n\nclass StarshipsListColector(StarshipsListColectorInterface):\n    ''' StarshipsListColector usecase '''\n\n    def __init__(self, api_consumer: Type[SwapiApiConsumerInterface]) -> None:\n        self.__api_consumer = api_consumer\n\n    def list(self, page: int) -> List[Dict]:\n        '''\n            List some starships informations\n            :params - page: int with the number in pagination\n            :returns - List with all information\n        '''\n\n        api_response = self.__api_consumer.get_starships(page)\n        starships_formated_list = self.__format_api_response(api_response.response[\"results\"])\n        return starships_formated_list\n\n    @classmethod\n    def __format_api_response(cls, results: List[Dict]) -> List[Dict]:\n        '''\n            Format response from api\n            :params - results: List with spaceships informations\n            :returns - List with spaceships informations formated\n        '''\n        starships_formated_list = []\n\n        for starship in results:\n            starships_formated_list.append(\n                {\n                    \"id\": starship[\"url\"].split(\"/\")[-2],\n                    \"name\": starship[\"name\"],\n                    \"model\": starship[\"model\"],\n                    \"max_atmosphering_speed\": starship[\"max_atmosphering_speed\"],\n                    \"hyperdrive_rating\": starship[\"hyperdrive_rating\"],\n                    \"MGLT\": starship[\"MGLT\"],\n                }\n            )\n\n        return starships_formated_list\n"}
{"type": "source_file", "path": "src/domain/usecases/__init__.py", "content": "from .starships_list_colector import StarshipsListColectorInterface\n"}
{"type": "source_file", "path": "src/errors/http_request_error.py", "content": "class HttpRequestError(Exception):\n    ''' Http error '''\n\n    def __init__(self, message: str, status_code: int) -> None:\n        super().__init__(message)\n        self.message = message\n        self.status_code = status_code\n"}
{"type": "source_file", "path": "src/infra/__init__.py", "content": "from .swapi_api_consumer import SwapiApiConsumer\n"}
{"type": "source_file", "path": "src/main/config/http_server_configs.py", "content": "from fastapi import FastAPI\nfrom src.main.routes import starships_routes\n\napp = FastAPI()\n\napp.include_router(starships_routes)\n"}
{"type": "source_file", "path": "src/errors/__init__.py", "content": "from .http_request_error import HttpRequestError\nfrom .http_unprocessable_entity import HttpUnprocessableEntityError\n"}
{"type": "source_file", "path": "src/main/config/__init__.py", "content": "from .http_server_configs import app\n"}
{"type": "source_file", "path": "src/main/adapters/__init__.py", "content": "from .request_adapter import request_adapter\n"}
{"type": "source_file", "path": "src/main/composer/get_starships_in_pagination_composer.py", "content": "from src.presenters.controllers.starships_list_colector_controller import StarshipsListColectorController\nfrom src.data.usescases.starships_list_colector import StarshipsListColector\nfrom src.infra.swapi_api_consumer import SwapiApiConsumer\n\ndef get_starships_in_pagination_composer():\n    ''' Composer '''\n\n    infra = SwapiApiConsumer()\n    usecase = StarshipsListColector(infra)\n    controller = StarshipsListColectorController(usecase)\n\n    return controller\n"}
{"type": "source_file", "path": "src/presenters/interface/__init__.py", "content": ""}
{"type": "source_file", "path": "src/main/__init__.py", "content": ""}
{"type": "source_file", "path": "src/main/composer/__init__.py", "content": ""}
{"type": "source_file", "path": "src/main/routes/starships_routes.py", "content": "from fastapi import APIRouter, Request as RequestFastApi\nfrom fastapi.responses import JSONResponse\n\nfrom src.validators.get_starships_in_pagination_validator import get_pagination_validator\nfrom src.validators.get_starship_information_validator import get_starship_information_validator\n\nfrom src.main.adapters import request_adapter\nfrom src.main.composer.get_starships_in_pagination_composer import get_starships_in_pagination_composer\nfrom src.main.composer.get_starship_information_composer import get_starship_information_composer\n\nfrom src.presenters.errors.error_controller import handle_errors\n\nstarships_routes = APIRouter()\n\n@starships_routes.get(\"/api/starships/list\")\nasync def get_starships_in_pagination(request: RequestFastApi):\n    ''' get_starships_in_pagination '''\n\n    response = None\n    controller = get_starships_in_pagination_composer()\n\n    try:\n        get_pagination_validator(request)\n        response = await request_adapter(request, controller.handler)\n    except Exception as e:\n        response = handle_errors(e)\n\n    return JSONResponse(\n        status_code=response[\"status_code\"],\n        content=response[\"data\"]\n    )\n\n# Essa rota fica melhor com get!\n@starships_routes.post(\"/api/starships/information\")\nasync def get_starship_information(request: RequestFastApi):\n    ''' get_starship_information '''\n\n    response = None\n    controller = get_starship_information_composer()\n\n    try:\n        await get_starship_information_validator(request)\n        response = await request_adapter(request, controller.handler)\n    except Exception as e:\n        response = handle_errors(e)\n\n    return JSONResponse(\n        status_code=response[\"status_code\"],\n        content=response[\"data\"]\n    )\n"}
{"type": "source_file", "path": "src/presenters/controllers/__init__.py", "content": ""}
{"type": "source_file", "path": "src/infra/swapi_api_consumer.py", "content": "from typing import Dict, Tuple, Type\nfrom collections import namedtuple\nimport requests\nfrom requests import Request\nfrom src.errors import HttpRequestError\nfrom src.data.interfaces.swapi_api_consumer import SwapiApiConsumerInterface\n\nclass SwapiApiConsumer(SwapiApiConsumerInterface):\n\n    ''' Class to consume swapi api with http requests '''\n\n    def __init__(self) -> None:\n        self.get_starships_response = namedtuple('GET_Starships', 'status_code request response')\n        self.get_starship_information_response = namedtuple('GET_Starship_Info', 'status_code request response')\n\n    def get_starships(self, page: int) -> Tuple[int, Type[Request], Dict]:\n        '''\n            request starships in pagination\n            :param - page: int with page of navegation\n            :return - Tuple with status_code, request, response attributes\n        '''\n\n        req = requests.Request(\n            method='GET',\n            url='https://swapi.dev/api/starships/',\n            params={\"page\": page}\n        )\n        req_prepared = req.prepare()\n\n        response = self.__send_http_request(req_prepared)\n        status_code = response.status_code\n\n        if ((status_code >= 200) and (status_code <= 299)):\n            return self.get_starships_response(\n                status_code=status_code, request=req, response=response.json()\n            )\n        else:\n            raise HttpRequestError(\n                message=response.json()[\"detail\"], status_code=status_code\n            )\n\n    def get_starship_information(self, starship_id: int) -> Tuple[int, Type[Request], Dict]:\n        '''\n            request starship information\n            :param - starship_id: int with id of selected starship\n            :return - Tuple with status_code, request, response attributes\n        '''\n\n        req = requests.Request(\n            method='GET',\n            url='https://swapi.dev/api/starships/{}/'.format(starship_id)\n        )\n        req_prepared = req.prepare()\n\n        response = self.__send_http_request(req_prepared)\n        status_code = response.status_code\n\n        if ((status_code >= 200) and (status_code <= 299)):\n            return self.get_starship_information_response(\n                status_code=status_code, request=req, response=response.json()\n            )\n        else:\n            raise HttpRequestError(\n                message=response.json()[\"detail\"], status_code=status_code\n            )\n\n    @classmethod\n    def __send_http_request(cls, req_prepared: Type[Request]) -> any:\n        '''\n            Prepare a session and send http request\n            :param - req_prepared: Request Object with all params\n            :response - Http response raw\n        '''\n\n        http_session = requests.Session()\n        response = http_session.send(req_prepared)\n        return response\n"}
{"type": "source_file", "path": "src/presenters/interface/controllers.py", "content": "from typing import Dict\nfrom abc import ABC, abstractmethod\n\nclass ControllersInterface(ABC):\n    ''' Interface to COntrollers '''\n\n    @abstractmethod\n    def handler(self, http_request: Dict):\n        ''' Method to handle request '''\n        raise 'Should implement handler method'\n"}
{"type": "source_file", "path": "src/main/adapters/request_adapter.py", "content": "from typing import Callable\nfrom fastapi import Request as RequestFastApi\n\nasync def request_adapter(request: RequestFastApi, callback: Callable):\n    '''\n        Adapter to httpRequest\n        @param - request: Http request Object with all properties\n                 callback: Calback to process http request\n        @return - Http Response to Request\n    '''\n\n    body = None\n\n    try:\n        body = await request.json()\n    except:\n        pass\n\n    http_request = {\n        \"query_params\": request.query_params,\n        \"body\": body\n    }\n\n    http_response = callback(http_request)\n    return http_response\n"}
{"type": "source_file", "path": "src/presenters/controllers/starships_list_colector_controller.py", "content": "from typing import Dict\nfrom src.domain.usecases.starships_list_colector import StarshipsListColectorInterface\nfrom src.presenters.interface.controllers import ControllersInterface\n\nclass StarshipsListColectorController(ControllersInterface):\n    ''' Controller to List Starships '''\n\n    def __init__(self, starships_list_colector: StarshipsListColectorInterface) -> None:\n        self.__use_case = starships_list_colector\n\n    def handler(self, http_request: Dict):\n        ''' Handler to list colector '''\n\n        page = http_request[\"query_params\"][\"page\"]\n\n        starships_list = self.__use_case.list(page)\n        http_response = { \"status_code\": 200, \"data\": { \"data\": starships_list } }\n\n        return http_response\n"}
{"type": "source_file", "path": "src/validators/__init__.py", "content": ""}
{"type": "source_file", "path": "src/main/routes/__init__.py", "content": "from .starships_routes import starships_routes\n"}
{"type": "source_file", "path": "src/presenters/errors/__init__.py", "content": ""}
{"type": "source_file", "path": "src/presenters/__init__.py", "content": ""}
{"type": "source_file", "path": "src/presenters/errors/error_controller.py", "content": "from typing import Type, Dict\nfrom src.errors import HttpRequestError, HttpUnprocessableEntityError\n\ndef handle_errors(error: Type[Exception]) -> Dict:\n    '''\n        Handler to treat Exception cases\n        @param: error - Exception\n        @returns: Dict with data and status_code\n    '''\n    if isinstance(error, HttpRequestError):\n        return {\n            \"data\": { \"error\": error.message },\n            \"status_code\": error.status_code\n        }\n    elif isinstance(error, HttpUnprocessableEntityError):\n        return {\n            \"data\": { \"error\": error.message },\n            \"status_code\": error.status_code\n        }\n    else:\n        return {\n            \"data\": { \"error\": str(error) },\n            \"status_code\": 500\n        }\n"}
{"type": "source_file", "path": "src/main/composer/get_starship_information_composer.py", "content": "from src.presenters.controllers.starship_information_colector_controller import StarshipInformationColectorController\nfrom src.data.usescases.starship_information_colector import StarshipInformationColector\nfrom src.infra.swapi_api_consumer import SwapiApiConsumer\n\ndef get_starship_information_composer():\n    ''' Composer '''\n\n    infra = SwapiApiConsumer()\n    usecase = StarshipInformationColector(infra)\n    controller = StarshipInformationColectorController(usecase)\n\n    return controller\n"}
{"type": "source_file", "path": "src/presenters/controllers/starship_information_colector_controller.py", "content": "from typing import Type, Dict\nfrom src.presenters.interface.controllers import ControllersInterface\nfrom src.domain.usecases.starship_information_colector import StarshipInformationColectorInterface\n\nclass StarshipInformationColectorController(ControllersInterface):\n    ''' Controller to StarshipInformationColector '''\n\n    def __init__(self, starship_information_colector: Type[StarshipInformationColectorInterface]) -> None:\n        self.__use_case = starship_information_colector\n\n    def handler(self, http_request: Dict):\n        ''' Handler to information colector controller '''\n\n        starship_id = http_request[\"body\"][\"starship_id\"]\n        time = http_request[\"body\"][\"time\"]\n\n        starship_information = self.__use_case.find_starship(starship_id, time)\n        http_response = { \"status_code\": 200, \"data\": { \"data\": starship_information } }\n\n        return http_response\n"}
{"type": "source_file", "path": "src/validators/get_starships_in_pagination_validator.py", "content": "from cerberus import Validator\nfrom src.errors import HttpUnprocessableEntityError\n\ndef get_pagination_validator(request: any):\n    ''' pagination validator '''\n\n    query_param_validator = Validator({\n        'page': {'type': 'string', 'allowed': ['1', '2', '3', '4'], 'required': True}\n    })\n\n    response = query_param_validator.validate(request.query_params)\n\n    if response is False:\n        raise HttpUnprocessableEntityError(query_param_validator.errors)\n"}
{"type": "source_file", "path": "src/validators/get_starship_information_validator.py", "content": "from cerberus import Validator\nfrom src.errors import HttpUnprocessableEntityError\n\nasync def get_starship_information_validator(request: any):\n    ''' starship information validator '''\n\n    body = None\n\n    try:\n        body = await request.json()\n    except:\n        pass\n\n    body_validator = Validator({\n        'starship_id': {'type': 'integer', 'required': True},\n        'time': {'type': 'integer', 'required': True}\n    })\n\n    response = body_validator.validate(body)\n\n    if response is False:\n        raise HttpUnprocessableEntityError(body_validator.errors)\n"}
