{"repo_info": {"repo_name": "fastapi", "repo_owner": "marciovrl", "repo_url": "https://github.com/marciovrl/fastapi"}}
{"type": "source_file", "path": "app/__init__.py", "content": ""}
{"type": "source_file", "path": "app/db/models.py", "content": "from pydantic import BaseModel\nfrom typing import List\n\n\nclass Answer(BaseModel):\n    question_id: int\n    alternative_id: int\n\n\nclass UserAnswer(BaseModel):\n    user_id: int\n    answers: List[Answer]\n"}
{"type": "source_file", "path": "app/api/api.py", "content": "import json\n\n\ndef read_user():\n    with open('data/users.json') as stream:\n        users = json.load(stream)\n\n    return users\n\n\ndef read_questions(position: int):\n    with open('data/questions.json') as stream:\n        questions = json.load(stream)\n\n    for question in questions:\n        if question['position'] == position:\n            return question\n\n\ndef read_alternatives(question_id: int):\n    alternatives_question = []\n    with open('data/alternatives.json') as stream:\n        alternatives = json.load(stream)\n\n    for alternative in alternatives:\n        if alternative['question_id'] == question_id:\n            alternatives_question.append(alternative)\n\n    return alternatives_question\n\n\ndef create_answer(payload):\n    answers = []\n    result = []\n\n    with open('data/alternatives.json') as stream:\n        alternatives = json.load(stream)\n\n    for question in payload['answers']:\n        for alternative in alternatives:\n            if alternative['question_id'] == question['question_id']:\n                answers.append(alternative['alternative'])\n                break\n\n    with open('data/cars.json') as stream:\n        cars = json.load(stream)\n\n    for car in cars:\n        if answers[0] in car.values() and answers[1] in car.values() and answers[2] in car.values():\n            result.append(car)\n\n    return result\n\n\ndef read_result(user_id: int):\n    user_result = []\n\n    with open('data/results.json') as stream:\n        results = json.load(stream)\n\n    with open('data/users.json') as stream:\n        users = json.load(stream)\n\n    with open('data/cars.json') as stream:\n        cars = json.load(stream)\n\n    for result in results:\n        if result['user_id'] == user_id:\n            for user in users:\n                if user['id'] == result['user_id']:\n                    user_result.append({'user': user})\n                    break\n\n        for car_id in result['cars']:\n            for car in cars:\n                if car_id == car['id']:\n                    user_result.append(car)\n\n    return user_result\n"}
{"type": "source_file", "path": "app/main.py", "content": "from fastapi import FastAPI, HTTPException\nfrom starlette.responses import Response\n\nfrom app.db.models import UserAnswer\nfrom app.api import api\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"Fast API in Python\"}\n\n\n@app.get(\"/user\")\ndef read_user():\n    return api.read_user()\n\n\n@app.get(\"/question/{position}\", status_code=200)\ndef read_questions(position: int, response: Response):\n    question = api.read_questions(position)\n\n    if not question:\n        raise HTTPException(status_code=400, detail=\"Error\")\n\n    return question\n\n\n@app.get(\"/alternatives/{question_id}\")\ndef read_alternatives(question_id: int):\n    return api.read_alternatives(question_id)\n\n\n@app.post(\"/answer\", status_code=201)\ndef create_answer(payload: UserAnswer):\n    payload = payload.dict()\n\n    return api.create_answer(payload)\n\n\n@app.get(\"/result/{user_id}\")\ndef read_result(user_id: int):\n    return api.read_result(user_id)\n"}
