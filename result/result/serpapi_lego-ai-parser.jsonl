{"repo_info": {"repo_name": "lego-ai-parser", "repo_owner": "serpapi", "repo_url": "https://github.com/serpapi/lego-ai-parser"}}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_costco_listings.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_costco_listings_successful_response():\n  targets = [\n    \"app/classify/tests/data/targets/costco-listings-successful.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    result_filename = target['mock_name'].replace('.json','-result.json')\n    result_filename = result_filename.replace('/targets/', '/results/')\n\n    with open(result_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert len(r.json()['results']) > 0\n    assert (\"message\" not in r.json()['results'][0])"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_bestbuy_listings.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_bestbuy_listings_successful_response():\n  targets = [\n    \"app/classify/tests/data/targets/bestbuy-listings-successful.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    result_filename = target['mock_name'].replace('.json','-result.json')\n    result_filename = result_filename.replace('/targets/', '/results/')\n\n    with open(result_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert len(r.json()['results']) > 0\n    assert (\"message\" not in r.json()['results'][0])"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_custom_classifier.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_custom_dictionary_results():\n  targets = [\n    \"app/classify/tests/data/targets/electronic-shops-custom.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    result_filename = target['mock_name'].replace('.json','-result.json')\n    result_filename = result_filename.replace('/targets/', '/results/')\n    with open(result_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert len(r.json()['results']) > 0\n    assert (\"message\" not in r.json()['results'][0])"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_etsy_listings.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_etsy_listings_successful_response():\n  targets = [\n    \"app/classify/tests/data/targets/etsy-listings-successful.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    result_filename = target['mock_name'].replace('.json','-result.json')\n    result_filename = result_filename.replace('/targets/', '/results/')\n\n    with open(result_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert len(r.json()['results']) > 0\n    assert (\"message\" not in r.json()['results'][0])"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_parse_only.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_prompts_only():\n  targets = [\n    \"app/classify/tests/data/targets/car-repair-parse-only.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    prompt_filename = target['mock_name'].replace('.json','-result.json')\n    prompt_filename = prompt_filename.replace('/targets/', '/results/')\n    with open(prompt_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert len(r.json()['results']) > 0\n    assert (\"message\" not in r.json()['results'][0])"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_prompts_only.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_prompts_only():\n  targets = [\n    \"app/classify/tests/data/targets/electronic-shops-successful-prompts-only.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    prompt_filename = target['mock_name'].replace('.json','-prompt.json')\n    prompt_filename = prompt_filename.replace('/targets/', '/prompts/')\n    with open(prompt_filename) as json_file:\n      prompt = json.load(json_file)\n\n    assert r.status_code == 200\n    assert \"prompts\" in r.json()\n    assert \"prompt_objects\" in r.json()\n    assert r.json() == prompt"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_nordstrom_listings.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_nordstrom_listings_successful_response():\n  targets = [\n    \"app/classify/tests/data/targets/nordstrom-listings-successful.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    result_filename = target['mock_name'].replace('.json','-result.json')\n    result_filename = result_filename.replace('/targets/', '/results/')\n    print(json_file)\n\n    with open(result_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert len(r.json()['results']) > 0\n    assert (\"message\" not in r.json()['results'][0])"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_google_local_results.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_google_local_results_successful_response():\n  targets = [\n    \"app/classify/tests/data/targets/electronic-shops-successful.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    result_filename = target['mock_name'].replace('.json','-result.json')\n    result_filename = result_filename.replace('/targets/', '/results/')\n\n    with open(result_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert len(r.json()['results']) > 0\n    assert (\"message\" not in r.json()['results'][0])"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_wayfair_listings.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_wayfair_listings_successful_response():\n  targets = [\n    \"app/classify/tests/data/targets/wayfair-listings-successful.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    result_filename = target['mock_name'].replace('.json','-result.json')\n    result_filename = result_filename.replace('/targets/', '/results/')\n\n    with open(result_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert len(r.json()['results']) > 0\n    assert (\"message\" not in r.json()['results'][0])"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_macys_listings.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_macys_listings_successful_response():\n  targets = [\n    \"app/classify/tests/data/targets/macys-listings-successful.json\"\n  ]\n\n  for target_filename in targets:\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    result_filename = target['mock_name'].replace('.json','-result.json')\n    result_filename = result_filename.replace('/targets/', '/results/')\n\n    with open(result_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert len(r.json()['results']) > 0\n    assert (\"message\" not in r.json()['results'][0])"}
{"type": "test_file", "path": "app/classify/tests/unit_tests/test_error_results.py", "content": "import sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/../../../..\"))\n\nfrom fastapi.testclient import TestClient\nfrom app.schemas import *\nfrom app.main import *\nimport json\n\nclient = TestClient(app)\n\ndef test_limitation_error():\n  targets = [\n    \"app/classify/tests/data/targets/electronic-shops-limitation-error.json\",\n    \"app/classify/tests/data/targets/electronic-shops-api-key-error.json\",\n    \"app/classify/tests/data/targets/electronic-shops-server-error.json\",\n  ]\n\n  error_codes = [\n    \"insufficient_quota\",\n    \"invalid_request_error\",\n    \"server_error\",\n  ]\n\n  for target_filename, error in zip(targets, error_codes):\n    with open(target_filename) as json_file:\n      target = json.load(json_file)\n    r = client.post(\"/classify\", json=target)\n\n    result_filename = target['mock_name'].replace('.json','-result.json')\n    result_filename = result_filename.replace('/targets/', '/results/')\n    with open(result_filename) as json_file:\n      result = json.load(json_file)\n\n    assert r.status_code == 200\n    assert r.json() == result\n    assert (\"message\" in r.json()['results'][0][\"error\"])\n    assert (r.json()['results'][0][\"error\"][\"type\"] == error)\n\n\n\n"}
{"type": "source_file", "path": "app/classify/classify.py", "content": "from app.classify.functions.parser import Parser\nfrom app.classify.functions.prompt_creator import PromptCreator\nfrom app.classify.functions.results import Results\nfrom app.schemas import *\nimport importlib\nimport json\nimport os\n\nclass Classify:\n\tdef classify(self, targets = Targets):\n\t\tif targets.mock_name != None and \"PYTEST_CURRENT_TEST\" not in os.environ:\n\t\t\treturn {\"error\": \"Mock name is only allowed in unit tests.\"}\n\n\t\tif targets.parse_only == None:\n\t\t\t# Create a new mock dictionary for target if given\t\t\n\t\t\tif targets.mock_name != None and os.environ[\"PYTEST_CURRENT_TEST\"] != None:\n\t\t\t\ttry:\n\t\t\t\t\twith open(targets.mock_name) as json_file:\n\t\t\t\t\t\ttargets_dict = json.load(json_file)\n\t\t\t\texcept:\n\t\t\t\t\ttargets_dict = targets.dict()\n\t\t\t\t\tif \"openai_key\" in targets_dict:\n\t\t\t\t\t\ttargets_dict.pop('openai_key')\n\t\t\t\t\tif \"save_locally\" in targets_dict:\n\t\t\t\t\t\ttargets_dict.pop('save_locally')\n\t\t\t\t\tif \"save_name\" in targets_dict:\n\t\t\t\t\t\ttargets_dict.pop('save_name')\n\t\t\t\t\twith open(targets.mock_name, \"w\") as pretty_json:\n\t\t\t\t\t\tjson.dump(targets_dict, pretty_json, indent=2, sort_keys=False)\n\t\t\t\ttargets = Targets(**targets_dict)\n\n\t\t\t# Call the parser command dictionary or return an error\n\t\t\tif targets.classifier != None and (targets.parse_only == False or targets.parse_only == None):\n\t\t\t\tclassifier = json_to_pydantic(targets.classifier.dict())\n\t\t\telse:\n\t\t\t\ttry:\n\t\t\t\t\tparser = targets.path\n\t\t\t\t\tpath = \"app.classify.parsers.{}\".format(parser.lower())\n\t\t\t\t\tclassifier = importlib.import_module(path)\n\t\t\t\t\tclassifier = classifier.commands()\n\t\t\t\t\tif type(classifier) == dict:\n\t\t\t\t\t\treturn classifier\n\t\t\t\texcept:\n\t\t\t\t\treturn {\"error\": \"Could not find parser classifier commands\"}\n\t\t\t\n\t\t\t# Parse the incoming body whether it is html, text, or a mixbag of them\n\t\t\tparser = Parser(classifier = classifier)\n\t\t\tdesired_lines = parser.parse(targets.targets)\n\n\t\t\t# Create a prompt, get maximum response token size, get estimated maximum token size\n\t\t\tprompt_objects = PromptObjects(desired_lines = desired_lines)\n\t\t\tprompt_creator = PromptCreator(classifier = classifier, prompt_objects = prompt_objects)\n\t\t\tclassifier, prompt_objects = prompt_creator.get_prompts()\n\n\t\t\t# Return an error if all bodies are illegal\n\t\t\tif prompt_objects.prompts == []:\n\t\t\t\treturn {\"error\": \"None of the items are below maximum token threshold for this prompt.\"}\n\t\t\t\n\t\t\t# Return mock prompt results, or create a new one, or return prompt results\n\t\t\tif targets.prompts_only == True and targets.mock_name != None and os.environ[\"PYTEST_CURRENT_TEST\"] != None:\n\t\t\t\tmock_prompt_name = targets.mock_name.replace(\".json\", \"-prompt.json\")\n\t\t\t\tmock_prompt_name = mock_prompt_name.replace(\"/targets/\", \"/prompts/\")\n\t\t\t\ttry:\n\t\t\t\t\twith open(mock_prompt_name) as json_file:\n\t\t\t\t\t\tprompt = json.load(json_file)\n\t\t\t\t\treturn prompt\n\t\t\t\texcept:\n\t\t\t\t\tprompts_only_dict = {\n\t\t\t\t\t\t\t\t\t\t\"prompts\": prompt_objects.prompts,\n\t\t\t\t\t\t\t\t\t\t\"prompt_objects\": {\n\t\t\t\t\t\t\t\t\t\t\t\"invalid_lines_indexes\": prompt_objects.invalid_lines_indexes,\n\t\t\t\t\t\t\t\t\t\t\t\"desired_lines\": prompt_objects.desired_lines,\n\t\t\t\t\t\t\t\t\t\t\t\"labels\": prompt_objects.labels\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\twith open(mock_prompt_name, \"w\") as pretty_json:\n\t\t\t\t\t\tjson.dump(prompts_only_dict, pretty_json, indent=2, sort_keys=False)\n\t\t\t\t\treturn prompts_only_dict\n\t\t\telif targets.prompts_only == True:\n\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\"prompts\": prompt_objects.prompts,\n\t\t\t\t\t\t\t\t\t\"prompt_objects\": {\n\t\t\t\t\t\t\t\t\t\t\"invalid_lines_indexes\": prompt_objects.invalid_lines_indexes,\n\t\t\t\t\t\t\t\t\t\t\"desired_lines\": prompt_objects.desired_lines,\n\t\t\t\t\t\t\t\t\t\t\"labels\": prompt_objects.labels\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t# Return mock classified results, or create a new one\n\t\tif targets.mock_name != None and os.environ[\"PYTEST_CURRENT_TEST\"] != None:\n\t\t\tmock_result_name = targets.mock_name.replace(\".json\", \"-result.json\")\n\t\t\tmock_result_name = mock_result_name.replace(\"/targets/\", \"/results/\")\n\t\t\ttry:\n\t\t\t\twith open(mock_result_name) as json_file:\n\t\t\t\t\tresult = json.load(json_file)\n\t\t\t\treturn result\n\t\t\texcept:\n\t\t\t\tif targets.parse_only != None:\n\t\t\t\t\tresults = Results(targets = targets, classifier = None, prompt_objects = targets.parse_only.prompt_objects)\n\t\t\t\t\tresults_to_write = results.to_json()\n\t\t\t\telse:\n\t\t\t\t\tresults = Results(targets = targets, classifier = classifier, prompt_objects = prompt_objects)\n\t\t\t\t\tresults.get_results_from_openai()\n\t\t\t\t\tresults_to_write = results.to_json()\n\t\t\t\twith open(mock_result_name, \"w\") as pretty_json:\n\t\t\t\t\tjson.dump({\"results\": results_to_write}, pretty_json, indent=2, sort_keys=False)\n\t\t\t\treturn {\"results\": results_to_write}\n\t\t\n\t\t# Return classified results\n\t\tif targets.parse_only != None:\n\t\t\tresults = Results(targets = targets, classifier = None, prompt_objects = targets.parse_only.prompt_objects)\n\t\t\tresults_from_parsing = results.to_json()\n\t\t\treturn {\"results\": results_from_parsing}\n\t\telse:\n\t\t\tresults = Results(targets = targets, classifier = classifier, prompt_objects = prompt_objects)\n\t\t\tresults.get_results_from_openai()\n\t\t\tresults_from_openai = results.to_json()\n\t\t\treturn {\"results\": results_from_openai}"}
{"type": "source_file", "path": "app/classify/functions/results.py", "content": "import asyncio\nimport aiohttp\nimport re\nfrom app.schemas import *\n\nclass Results:\n  def __init__(self, targets = Targets, classifier = Classifier, prompt_objects = PromptObjects):\n    self.targets = targets\n    self.classifier = classifier\n    self.prompt_objects = prompt_objects\n    if targets.parse_only != None and targets.parse_only.responses != None:\n      self.responses = targets.parse_only.responses\n    else:\n      self.responses = []\n\n  def get_results_from_openai(self):\n    async def call_openai(session, prompt):\n      self.classifier.data.prompt = prompt + \"\\n\"\n      headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer {}\".format(self.targets.openai_key)\n      }\n      try:\n        async with session.post(self.classifier.openai_endpoint, headers=headers, json=self.classifier.data.dict()) as resp:\n          return await resp.json()\n      except:\n        return {\"error\": \"Error from Local Machine\"}\n    \n    async def get_results(concurrent_prompts):\n      connector = aiohttp.TCPConnector(limit=None)\n      async with aiohttp.ClientSession(connector=connector) as session:\n        tasks = []\n        for prompt in concurrent_prompts:\n          tasks.append(asyncio.ensure_future(call_openai(session, prompt)))\n        return await asyncio.gather(*tasks, return_exceptions=False)\n\n    if self.targets.allowed_concurrency == 1:\n      self.responses = asyncio.run(get_results(self.prompt_objects.prompts))\n    else:\n      all_prompt_calls = []\n      remainder = len(self.prompt_objects.prompts) % self.targets.allowed_concurrency\n      if remainder != 0 and remainder != len(self.prompt_objects.prompts):\n        remainder_prompts = self.prompt_objects.prompts[(0 - remainder):]\n        array_without_remainder = self.prompt_objects.prompts[0:(0 - remainder)]\n        concurrent_prompts = []\n        for prompt, i in zip(array_without_remainder, range(0, len(array_without_remainder))):\n          concurrent_prompts.append(prompt)\n          if i != 0 and self.targets.allowed_concurrency % i == 0:\n            all_prompt_calls.append(concurrent_prompts)\n            concurrent_prompts = []\n        all_prompt_calls.append(remainder_prompts) # [[1,2],[3,4],[5]]\n      else:\n        array_without_remainder = self.prompt_objects.prompts\n        concurrent_prompts = []\n        if len(array_without_remainder) == 1:\n          all_prompt_calls = [array_without_remainder]\n        else:\n          for prompt, i in zip(array_without_remainder, range(0, len(array_without_remainder))):\n            concurrent_prompts.append(prompt)\n            if i != 0 and self.targets.allowed_concurrency % i == 0:\n              all_prompt_calls.append(concurrent_prompts)\n              concurrent_prompts = []\n\n      for concurrent_prompt_array in all_prompt_calls:\n        self.responses = self.responses + asyncio.run(get_results(concurrent_prompt_array))\n\n  def to_json(self):\n    results = []\n    index = 0\n    for response in self.responses:\n      if index in self.prompt_objects.invalid_lines_indexes:\n        while index not in self.prompt_objects.invalid_lines_indexes:\n          results.append({\"error\": \"Maximum Token Size is reached for this prompt. This is skipped.\"})\n          index = index + 1\n      if 'error' in response:\n        results.append({\"error\": response['error']})\n      elif 'choices' in response:\n        response = response['choices'][0]['text']\n        lines = response.split(\"\\n\")\n        lines = [line for line in lines if line != '']\n        for line, line_index in zip(lines, range(0, len(lines))):\n          result_dict = {}\n          line = re.split(r\" \\| |\\| | \\|\", line)\n          line = [word for word in line if word != '']\n          for i in range(len(line)):\n            if \"#$\" in line[i]: # Array\n              desired_array = []\n              array = [word for word in line[i].split(\"#$\") if word != '']\n              for word in array:\n                desired_line = self.prompt_objects.desired_lines[index + line_index]\n                if word in desired_line:\n                  desired_array.append(word.strip())\n              if desired_array != []:\n                result_dict[self.prompt_objects.labels[i]] = desired_array\n            else:\n              try:\n                if line[i] != \"-\" and self.prompt_objects.labels[i] != \"Line\": # String\n                  desired_line = self.prompt_objects.desired_lines[index + line_index]\n                  if line[i] in desired_line:\n                    result_dict[self.prompt_objects.labels[i]] = line[i]\n              except:\n                result_dict = {\"error\": \"The prompt is creating more results than expected. Try to restructure targets, and or examples.\"}\n          results.append(result_dict)\n        index = index + len(lines)\n    \n    if results == []:\n      results = [{\"error\": \"The model predicted a completion that begins with a stop sequence, resulting in no output. Consider adjusting your prompt or stop sequences.\"}]\n    \n    return results\n"}
{"type": "source_file", "path": "app/classify/parsers/costco/costco_listings.py", "content": "from app.schemas import *\n\ndef commands():\n  return json_to_pydantic({\n    \"main_prompt\": \"A table with NUMBER_OF_LABELS cells in each row summarizing the different parts of the examples at each new line below here and above the table. Elements in cells containing multiple elements are separated by #$\\n\\n\",\n    \"data\": {\n      \"model\": \"text-davinci-003\",\n      \"temperature\": 0.01,\n      \"top_p\": 0.9,\n      \"best_of\": 1,\n      \"frequency_penalty\": 0,\n      \"presence_penalty\": 0\n    },\n    \"model_specific_token_size\": 3800,\n    \"openai_endpoint\": \"https://api.openai.com/v1/completions\",\n    \"explicitly_excluded_strings\": [\n      \"\\n\",\n      \"Compare Product\"\n    ],\n    \"examples_for_prompt\": [\n      {\n        \"text\": \"Quick Ship $1,099.99 Price valid through 12/25/22 Samsung 65\\\" Class - Q80BD Series - 4K UHD QLED LCD TV - Allstate 3-Year Protection Plan Bundle Included for 5 years of total coverage* Rated 4.6 out of 5 stars based on 441 reviews. (441) Select Options\",\n        \"classifications\": {\n          \"line\": \"1\",\n          \"tags\": \"#$Quick Ship#$\",\n          \"price_info\": \"Price valid through 12/25/22\",\n          \"title\": \"Samsung 65\\\" Class - Q80BD Series - 4K UHD QLED LCD TV - Allstate 3-Year Protection Plan Bundle Included for 5 years of total coverage*\",\n          \"rating\": \"4.6\",\n          \"number_of_reviews\": \"441\",\n          \"price\": \"$1,099.99\",\n          \"options_available\": \"Options\"\n        }\n      },\n      {\n        \"text\": \"Sponsored $18.99 $6 OFF Starbucks French Roast, Whole Bean Coffee, 2.5 lbs May be available In-Warehouse at a lower non-delivered price  Add sponsored\",\n        \"classifications\": {\n          \"line\": \"2\",\n          \"pice_info\": \"$6 OFF\",\n          \"product_info\": \"May be available In-Warehouse at a lower non-delivered price\",\n          \"title\": \"Starbucks French Roast, Whole Bean Coffee, 2.5 lbs\",\n          \"price\": \"$18.99\",\n          \"sponsored\": \"Sponsored\"\n        }\n      },\n      {\n        \"text\": \"$14.99 After $8 OFF Starbucks Organic Winter Blend Whole Bean Coffee, Medium, 2.5 lbs Out of Stock\",\n        \"classifications\": {\n          \"line\": \"3\",\n          \"price_info\": \"$8 OFF\",\n          \"title\": \"Starbucks Organic Winter Blend Whole Bean Coffee, Medium, 2.5 lbs\",\n          \"price\": \"$14.99\",\n          \"out_of_stock\": \"Out of Stock\"\n        }\n      }\n    ]\n  })\n"}
{"type": "source_file", "path": "app/classify/functions/parser.py", "content": "from selectolax.parser import HTMLParser\nfrom app.schemas import *\nimport re\n\n\nclass Parser:\n  def __init__(self, classifier = Classifier):\n    html_regex = \"<(\\\"[^\\\"]*\\\"|'[^']*'|[^'\\\">])*>\"\n    self.html_regex = re.compile(html_regex)\n    self.classifier = classifier\n    self.explicitly_excluded_regex = re.compile(\"|\".join(self.classifier.explicitly_excluded_strings))\n  \n  def parse_single(self, text):\n    tree = HTMLParser(text)\n    tree = tree.text(separator=' ', strip=True)\n    tree = re.sub(self.explicitly_excluded_regex,' ',tree).strip()\n    tree = re.sub('  ', ' ', tree).strip()\n    tree = re.sub('\\|', '｜', tree).strip()\n    return tree\n\n  def parse(self, texts):\n    lined_targets = []\n    for text in texts:\n      if re.search(self.html_regex, text):\n        entry = self.parse_single(text)\n      else:\n        entry = self.parse_single(\"<p>{}</p>\".format(text))\n      lined_targets.append(entry)\n    return lined_targets\n"}
{"type": "source_file", "path": "app/classify/functions/prompt_creator.py", "content": "import re\nfrom app.schemas import *\nfrom transformers import GPT2TokenizerFast\n\ntokenizer = GPT2TokenizerFast.from_pretrained(\"gpt2\")\n\nclass PromptCreator:\n  def __init__(self, classifier = Classifier, prompt_objects = PromptObjects):\n    self.classifier = classifier\n    self.prompt_objects = prompt_objects\n    self.keys = []\n    self.number_of_labels = 0\n    self.example_rows = []\n    self.base_prompt_token_size = 0\n    self.model_specific_token_size = classifier.model_specific_token_size\n\n  def get_data_from_examples(self):\n    for example in self.classifier.examples_for_prompt:\n      [self.keys.append(key) for key in sorted(list(example.classifications.keys())) if key not in self.keys]\n    self.prompt_objects.labels = [re.sub(\"_\", \" \", key.title()) for key in self.keys]\n    self.number_of_labels = len(self.prompt_objects.labels)\n\n  def get_main_prompt(self):\n    return re.sub(\"NUMBER_OF_LABELS\", \"{}\".format(self.number_of_labels), self.classifier.main_prompt)\n\n  def get_example_lines(self):\n    return \"\\n\".join([example.text for example in self.classifier.examples_for_prompt])\n\n  def get_desired_lines(self, lines):\n    desired_lines_string = \"\\n\" + \"\\n\".join(lines) + \"\\n\"\n    return desired_lines_string\n  \n  def get_table_labels(self):\n    table_labels_string = \"|\" + \"\".join(([\" {} |\".format(label) for label in self.prompt_objects.labels ])) + \"\\n\"\n    return table_labels_string\n\n  def get_table_separator(self):\n    table_separator_string = \"|\" + \"\".join([\" --- |\" for i in self.prompt_objects.labels]) + \"\\n\"\n    return table_separator_string\n\n  def get_example_rows(self):\n    for example in self.classifier.examples_for_prompt:\n      row_text = \"|\"\n      for key in self.keys:\n        if key in example.classifications:\n          row_text = row_text + \" {} |\".format(example.classifications[key])\n        else:\n          row_text = row_text + \" - |\"\n      row_text = row_text + \"\\n\"\n      self.example_rows.append(row_text)\n    self.example_rows = \"\".join(self.example_rows)\n    self.example_rows = self.example_rows[0:-1]\n    return self.example_rows\n\n  def calculate_token_size(self, line):\n    tokenized = tokenizer(line)['input_ids']\n    return len(tokenized)\n\n  def get_maximum_token_size(self, previous_max_token_size, line):\n    token_size = self.number_of_labels + (2 * self.calculate_token_size(line)) + 2 # abc\\n|1|abc|-|-|\\n\n    return previous_max_token_size + token_size\n\n  def separate_for_calls(self):\n    token_sizes_of_lines = [(5 + self.calculate_token_size(line)) for line in self.prompt_objects.desired_lines]\n    \n    invalid_lines_indexes = []\n    valid_calls = []\n    valid_call = []\n    previous_max_token_size = 0\n    for size, line, i in zip(token_sizes_of_lines, self.prompt_objects.desired_lines, range(0, len(token_sizes_of_lines))):\n      previous_max_token_size = self.get_maximum_token_size(previous_max_token_size, line)\n      if (self.base_prompt_token_size + size) > self.model_specific_token_size:\n        invalid_lines_indexes.append(i)\n      elif (self.base_prompt_token_size + previous_max_token_size) > self.model_specific_token_size:\n        valid_call.append(line)\n      elif (self.base_prompt_token_size + previous_max_token_size) < self.model_specific_token_size:\n        previous_max_token_size = 0\n        valid_calls.append(valid_call)\n        valid_call = []\n      elif i == len(token_sizes_of_lines) - 1:\n        valid_calls.append(valid_call)\n\n    self.prompt_objects.invalid_lines_indexes = invalid_lines_indexes\n\n    return valid_calls\n\n  def get_prompts(self):\n    self.get_data_from_examples()\n    main_prompt_string = self.get_main_prompt()\n    example_lines_string = self.get_example_lines()\n    desired_lines_string = self.get_desired_lines(self.prompt_objects.desired_lines)\n    table_labels_string = self.get_table_labels()\n    table_separator_string = self.get_table_separator()\n    example_rows = self.get_example_rows()\n    \n    prompt = \"\".join([\n      main_prompt_string,\n      example_lines_string,\n      desired_lines_string,\n      table_labels_string,\n      table_separator_string,\n      example_rows\n    ])\n    \n    max_tokens_size = self.get_maximum_token_size(0, prompt)\n    total_estimated_token_size = self.calculate_token_size(prompt) + max_tokens_size\n\n    if total_estimated_token_size > self.model_specific_token_size:\n      base_prompt = \"\".join([\n        main_prompt_string,\n        example_lines_string,\n        table_labels_string,\n        table_separator_string,\n        example_rows\n      ])\n      self.base_prompt_token_size = self.calculate_token_size(base_prompt)\n      valid_calls = self.separate_for_calls()\n\n      if valid_calls == []:\n        self.prompt_objects.prompts = []\n      else:\n        for i in range(0,len(valid_calls)):\n          desired_lines_string = self.get_desired_lines(valid_calls[i])\n          valid_calls[i] = \"\".join([\n            main_prompt_string,\n            example_lines_string,\n            desired_lines_string,\n            table_labels_string,\n            table_separator_string,\n            example_rows\n          ])\n        self.prompt_objects.prompts = valid_calls\n    else:\n      self.prompt_objects.prompts = [prompt]\n      self.prompt_objects.invalid_lines_indexes = []\n\n    return self.classifier, self.prompt_objects"}
{"type": "source_file", "path": "app/classify/parsers/amazon/amazon_listings.py", "content": "from app.schemas import *\n\ndef commands():\n  return json_to_pydantic({\n    \"main_prompt\": \"A table with NUMBER_OF_LABELS cells in each row summarizing the different parts of the text where elements in cells that might contain multiple elements are separated by #$:\\n\\n\",\n    \"data\": {\n      \"model\": \"text-davinci-003\",\n      \"temperature\": 0.001,\n      \"top_p\": 0.9,\n      \"best_of\": 2,\n      \"frequency_penalty\": 0,\n      \"presence_penalty\": 0\n    },\n    \"model_specific_token_size\": 3800,\n    \"openai_endpoint\": \"https://api.openai.com/v1/completions\",\n    \"explicitly_excluded_strings\": [\n      \"\\n\",\n    ],\n    \"examples_for_prompt\": [\n      {\n        \"text\": \"Featured from our brands Allegro Coffee, Coffee Decaf Colombia El Premio De Timana Ground, 12 Ounce 12 Ounce (Pack of 1) 4.6 4.6 out of 5 stars (353) Amazon brand\",\n        \"classifications\": {\n          \"line\": \"1\",\n          \"title\": \"Allegro Coffee, Coffee Decaf Colombia El Premio De Timana Ground, 12 Ounce\",\n          \"brand_information\": \"Featured from our brands\",\n          \"scale\": \"12 Ounce (Pack of 1)\",\n          \"rating\": \"4.6\",\n          \"reviews\": \"353\"\n        }\n      },\n      {\n        \"text\": \"Krispy Kreme Original Glazed Doughnut, Ground Coffee, Flavored Medium Roast, Bagged 12 oz 12 Ounce (Pack of 1) 4.5 4.5 out of 5 stars (1,489) Options: 3 flavors 3 flavors\",\n        \"classifications\": {\n          \"line\": \"2\",\n          \"title\": \"Krispy Kreme Original Glazed Doughnut, Ground Coffee, Flavored Medium Roast, Bagged 12 oz\",\n          \"scale\": \"12 Ounce (Pack of 1)\",\n          \"rating\": \"4.5\",\n          \"reviews\": \"1,489\",\n          \"product_options\": \"3 flavors#$\"\n        }\n      },\n      {\n        \"text\": \"Stumptown Coffee Roasters, Medium Roast Organic Whole Bean Coffee Gifts - Holler Mountain 12 Ounce Bag with Flavor Notes of Citrus Zest, Caramel and Hazelnut 12 Ounce 4.3 4.3 out of 5 stars (8,311) Options: 2 sizes, 6 flavors 2 sizes, 6 flavors Climate Pledge Friendly uses sustainability certifications to highlight products that support our commitment to help preserve the natural world. Time is fleeting. Learn more Product Certification (1) USDA Organic\",\n        \"classifications\": {\n          \"line\": \"3\",\n          \"title\": \"Stumptown Coffee Roasters, Medium Roast Organic Whole Bean Coffee Gifts - Holler Mountain 12 Ounce Bag with Flavor Notes of Citrus Zest, Caramel and Hazelnut\",\n          \"scale\": \"12 Ounce\",\n          \"rating\": \"4.3\",\n          \"reviews\": \"8,311\",\n          \"product_options\": \"2 sizes#$6 flavors#$\",\n          \"tags\": \"Climate Pledge Friendly#$USDA Organic#$\"\n        }\n      },\n      {\n        \"text\": \"Best Seller Sponsored Ad - Nifty Coffee Pod Carousel – Compatible with K-Cups, 35 Pod Pack Storage, Spins 360-Degrees, Lazy Susan Plat... Sponsored Nifty Coffee Pod Carousel – Compatible with K-Cups, 35 Pod Pack Storage, Spins 360-Degrees, Lazy Susan Platform, Modern Black Design, Home or Office Kitchen Counter Organizer 4.9 4.9 out of 5 stars (84,749) $19.99 $29.99 Ships to Turkey Small Business Shop products from small business brands sold in Amazon’s store. Discover more about the small businesses partnering with Amazon and Amazon’s commitment to empowering them. Learn more\",\n        \"classifications\": {\n          \"line\": \"4\",\n          \"title\": \"Nifty Coffee Pod Carousel – Compatible with K-Cups, 35 Pod Pack Storage, Spins 360-Degrees, Lazy Susan Platform, Modern Black Design, Home or Office Kitchen Counter Organizer\",\n          \"rating\": \"4.9\",\n          \"reviews\": \"84,749\",\n          \"tags\": \"Best Seller#$Sponsored Ad#$Small Business#$\",\n          \"old_price\": \"$29.99\",\n          \"price\": \"$19.99\",\n          \"shipment_information\": \"Ships to Turkey\"\n        }\n      },\n      {\n        \"text\": \"Apple MacBook Pro 13.3\\\" with Retina Display, M1 Chip with 8-Core CPU and 8-Core GPU, 16GB Memory, 512GB SSD, Space Gray, Late 2020 4.6 4.6 out of 5 stars (45) $1,799.99 Only 2 left in stock - order soon. More Buying Choices $1,399.55(2 used & new offers)\",\n        \"classifications\": {\n          \"line\": \"5\",\n          \"title\": \"Apple MacBook Pro 13.3\\\" with Retina Display, M1 Chip with 8-Core CPU and 8-Core GPU, 16GB Memory, 512GB SSD, Space Gray, Late 2020\",\n          \"rating\": \"4.6\",\n          \"reviews\": \"45\",\n          \"price\": \"$1,799.99\",\n          \"stock_information\": \"Only 2 left in stock - order soon\",\n          \"more_buying_options\": \"$1,399.55#$2 used & new offers#$\"\n        }\n      },\n      {\n        \"text\": \"Hoerrye for iPhone 14 Pro Max & iPhone 14 Pro Camera Lens Protector, Case-Friendly, Military-Grade Shockproof Camera Protection for iPhone Accessories - Colorful 3.8 3.8 out of 5 stars (307) $12.99 Save 20% with coupon Ships to Turkey More Buying Choices $11.49(2 used & new offers) +8 colors/patterns\",\n        \"classifications\": {\n          \"line\": \"6\",\n          \"title\": \"Hoerrye for iPhone 14 Pro Max & iPhone 14 Pro Camera Lens Protector, Case-Friendly, Military-Grade Shockproof Camera Protection for iPhone Accessories - Colorful\",\n          \"rating\": \"3.8\",\n          \"reviews\": \"307\",\n          \"price\": \"$12.99\",\n          \"tags\": \"Save 20% with coupon\",\n          \"shipment_information\": \"Ships to Turkey\",\n          \"more_buying_options\": \"$11.49#$2 used & new offers#$\",\n          \"product_options\": \"+8 colors/patterns#$\"\n        }\n      },\n    ]\n  })"}
{"type": "source_file", "path": "app/classify/parsers/etsy/etsy_listings.py", "content": "from app.schemas import *\n\ndef commands():\n  return json_to_pydantic({\n    \"main_prompt\": \"A table with NUMBER_OF_LABELS cells in each row summarizing the different parts of the examples at each new line below here and above the table. Elements in cells containing multiple elements are separated by #$\\n\\n\",\n    \"data\": {\n      \"model\": \"text-davinci-003\",\n      \"temperature\": 0.01,\n      \"top_p\": 0.9,\n      \"best_of\": 1,\n      \"frequency_penalty\": 0,\n      \"presence_penalty\": 0\n    },\n    \"model_specific_token_size\": 3800,\n    \"openai_endpoint\": \"https://api.openai.com/v1/completions\",\n    \"explicitly_excluded_strings\": [\n      \"\\n\",\n      \"Add to Favourites\",\n      \"Add to basket\"\n    ],\n    \"examples_for_prompt\": [\n      {\n        \"text\": f\"1 Ct Diamond Tennis Bracelet, 14K Solid Yellow Gold, Natural Real Stones, Elegant Gift For Woman, Fine Jewelry, 7.5\\\" (401) Star Seller Sale Price EUR 756.96 EUR 756.96 EUR 1,081.38 Original Price EUR 1,081.38 (30% off) Sale ends in 30 hours Ad vertisement by Etsy seller Ad from Etsy seller RaffaelloDitty From shop RaffaelloDitty FREE delivery\",\n        \"classifications\": {\n          \"line\": \"1\",\n          \"tags\": f\"#$Star Seller#$30% off#$Sale ends in 30 hours#$#$Ad from Etsy seller#$FREE delivery#$\",\n          \"title\": \"1 Ct Diamond Tennis Bracelet, 14K Solid Yellow Gold, Natural Real Stones, Elegant Gift For Woman, Fine Jewelry, 7.5\\\"\",\n          \"shop\": \"RaffaelloDitty\",\n          \"price\": \"EUR 756.96\",\n          \"old_price\": \"EUR 1,081.38\",\n          \"number_of_reviews\": \"401\"\n        }\n      },\n      {\n        \"text\": \"european bracelet big hole bead, artisan glass bead silver tube, Halloween, Large Hole, Silver Core, European Bracelet Beads, Christmas gift (70) EUR 16.00 ad vertisement by Etsy seller Ad from Etsy seller DewLampworkGlass From shop DewLampworkGlass Only 1 left — order soon\",\n        \"classifications\": {\n          \"line\": \"2\",\n          \"tags\": \"#$Only 1 left — order soon#$Ad from Etsy seller#$\",\n          \"title\": \"european bracelet big hole bead, artisan glass bead silver tube, Halloween, Large Hole, Silver Core, European Bracelet Beads, Christmas gift\",\n          \"shop\": \"DewLampworkGlass\",\n          \"price\": \"EUR 16.00\"\n        }\n      },\n      {\n        \"text\": f\"Taurus Crystal Bracelet, Taurus Bracelet Birthstone, Black Onyx Jewelry, Tigers Eye Bracelet Natural Stone, Gift for Taurus, Taurus Crystals (711) Sale Price EUR 27.00 EUR 27.00 EUR 30.00 Original Price EUR 30.00 (10% off)  ad vertisement by Etsy seller Ad from Etsy seller MelyannaCrystals From shop MelyannaCrystals FREE delivery\",\n        \"classifications\": {\n          \"line\": \"3\",\n          \"tags\": f\"#$10% off#$Ad from Etsy seller#$FREE delivery#$\",\n          \"title\": \"Taurus Crystal Bracelet, Taurus Bracelet Birthstone, Black Onyx Jewelry, Tigers Eye Bracelet Natural Stone, Gift for Taurus, Taurus Crystals\",\n          \"shop\": \"MelyannaCrystals\",\n          \"price\": \"EUR 27.00\",\n          \"old_price\": \"EUR 30.00\"\n        }\n      }\n    ]\n  })\n"}
{"type": "source_file", "path": "app/classify/parsers/google/google_local_results.py", "content": "from app.schemas import *\n\ndef commands():\n  return json_to_pydantic({\n    \"main_prompt\": \"A table with NUMBER_OF_LABELS cells in each row summarizing the different parts of the text at each line:\\n\\n\",\n    \"data\": {\n      \"model\": \"text-davinci-003\",\n      \"temperature\": 0.001,\n      \"top_p\": 0.9,\n      \"best_of\": 2,\n      \"frequency_penalty\": 0,\n      \"presence_penalty\": 0\n    },\n    \"model_specific_token_size\": 3800,\n    \"openai_endpoint\": \"https://api.openai.com/v1/completions\",\n    \"explicitly_excluded_strings\": [\n      \"Order\",\n      \"Website\",\n      \"Directions\",\n      \"\\n\"\n    ],\n    \"examples_for_prompt\": [\n      {\n        \"text\": \"Houndstooth Coffee 4.6(824) · $$ · Coffee shop 401 Congress Ave. #100c · In Frost Bank Tower Closed ⋅ Opens 7AM Cozy hangout for carefully sourced brews\",\n        \"classifications\": {\n          \"line\": \"1\",\n          \"title\": \"Houndstooth Coffee\",\n          \"rating\": \"4.1\",\n          \"number_of_reviews\": \"824\",\n          \"expensiveness\": \"$$\",\n          \"type\": \"Coffee Shop\",\n          \"address\": \"401 Congress Ave. #100c · In Frost Bank Tower\",\n          \"open_hours\": \"Opens 7AM\",\n          \"description_or_review\": \"Cozy hangout for carefully sourced brews\"\n        }\n      },\n      {\n        \"text\": \"Starbucks 4.4(471) · $$ · Coffee shop 301 W 3rd St Opens soon ⋅ 5:30AM Iconic Seattle-based coffeehouse chain\",\n        \"classifications\": {\n          \"line\": \"2\",\n          \"title\": \"Starbucks\",\n          \"rating\": \"4.1\",\n          \"number_of_reviews\": \"471\",\n          \"expensiveness\": \"$$\",\n          \"type\": \"Coffee Shop\",\n          \"address\": \"301 W 3rd St\",\n          \"open_hours\": \"Opens soon ⋅ 5:30AM\",\n          \"description_or_review\": \"Iconic Seattle-based coffeehouse chain\"\n        }\n      },\n      {\n        \"text\": \"Progress Coffee Bank of America Building 5.0(1) · Cafe 515 Congress Ave. Closed ⋅ Opens 7AM Dine-in·Takeout·No delivery\",\n        \"classifications\": {\n          \"line\": \"3\",\n          \"title\": \"Progress Coffee Bank of America Building\",\n          \"rating\": \"5.0\",\n          \"number_of_reviews\": \"1\",\n          \"type\": \"Cafe\",\n          \"address\": \"515 Congress Ave.\",\n          \"open_hours\": \"Closed ⋅ Opens 7AM\",\n          \"delivery_options\": \"Dine-in·Takeout·No delivery\"\n        }\n      },\n      {\n        \"text\": \"Coffee Cantata Nicosia 5.0(3) · Tea store Nicosia Closed ⋅ Opens 10AM Mon In-store shopping\",\n        \"classifications\": {\n          \"line\": \"4\",\n          \"title\": \"Coffee Cantata Nicosia\",\n          \"rating\": \"5.0\",\n          \"number_of_reviews\": \"3\",\n          \"type\": \"Tea store\",\n          \"address\": \"Nicosia\",\n          \"open_hours\": \"Closed ⋅ Opens 10AM Mon\",\n          \"delivery_options\": \"In-store shopping\"\n        }\n      },\n      {\n        \"text\": \"La Bella Bakery - Gloria Jean's Coffees K. Kaymaklı 4.4(251) · €€ · Coffee shop Şehit mustafa Ruso Caddesi no:148 - Küçük Kaymaklı - Lefkoşa - KKTC Mersin 10 Turkey Lefkoşa · In Aydın Oto Camları & Döşeme Ltd. On the menu: tea\",\n        \"classifications\": {\n          \"line\": \"5\",\n          \"title\": \"La Bella Bakery - Gloria Jean's Coffees K. Kaymaklı\",\n          \"rating\": \"4.4\",\n          \"number_of_reviews\": \"251\",\n          \"expensiveness\": \"€€\",\n          \"type\": \"Coffee shop\",\n          \"address\": \"Şehit mustafa Ruso Caddesi no:148 - Küçük Kaymaklı - Lefkoşa - KKTC Mersin 10 Turkey Lefkoşa · In Aydın Oto Camları & Döşeme Ltd.\",\n          \"description_or_review\": \"On the menu: tea\"\n        }\n      },\n      {\n        \"text\": \"A.D.A. Auto Repair Center 4.8(26) · Auto repair shop 30+ years in business · Nicosia · 99 639471 Closes soon ⋅ 3PM \\\"I strongly recommend this repair shop.\\\"\",\n        \"classifications\": {\n          \"line\": \"6\",\n          \"title\": \"A.D.A. Auto Repair Center\",\n          \"rating\": \"4.8\",\n          \"number_of_reviews\": \"26\",\n          \"type\": \"Auto repair shop\",\n          \"address\": \"Nicosia\",\n          \"open_hours\": \"Closes soon ⋅ 3PM\",\n          \"years_of_business\": \"30+ years in business\",\n          \"description_or_review\": \"\\\"I strongly recommend this repair shop.\\\"\",\n          \"phone\": \"99 008200\"\n        }\n      },\n      {\n        \"text\": \"Evolution GYM No reviews · Gym Nicosia · +90 533 821 10 02 Open ⋅ Closes 6PM\",\n        \"classifications\": {\n          \"line\": \"7\",\n          \"title\": \"Evolution GYM\",\n          \"type\": \"Gym\",\n          \"address\": \"Nicosia\",\n          \"open_hours\": \"Closes 6PM\",\n          \"phone\": \"+90 000 827 11 00\"\n        }\n      },\n      {\n        \"text\": \"A McDonald's 420 Fulton St · (929) 431-6994 Open ⋅ Closes 1AM Dine-in · Curbside pickup · No-contact delivery\",\n        \"classifications\": {\n          \"line\": \"8\",\n          \"title\": \"McDonald's\",\n          \"rating\": \"A\",\n          \"address\": \"420 Fulton St\",\n          \"open_hours\": \"Open ⋅ Closes 1AM\",\n          \"delivery_options\": \"Dine-in · Curbside pickup · No-contact delivery\",\n          \"phone\": \"(900) 451-6800\"\n        }\n      }\n    ]\n  })"}
{"type": "source_file", "path": "app/classify/parsers/nordstrom/nordstrom_listings.py", "content": "from app.schemas import *\n\ndef commands():\n  return json_to_pydantic({\n    \"main_prompt\": \"A table with NUMBER_OF_LABELS cells in each row summarizing the different parts of the text at each line:\\n\\n\",\n    \"data\": {\n      \"model\": \"text-davinci-003\",\n      \"temperature\": 0.01,\n      \"top_p\": 0.9,\n      \"best_of\": 1,\n      \"frequency_penalty\": 0,\n      \"presence_penalty\": 0\n    },\n    \"model_specific_token_size\": 3800,\n    \"openai_endpoint\": \"https://api.openai.com/v1/completions\",\n    \"explicitly_excluded_strings\": [\n      \"\\n\",\n      \"Add to Favourites\",\n      \"Add to basket\"\n    ],\n    \"examples_for_prompt\": [\n      {\n        \"text\": \"Previous Next Sustainable Style Nordstrom Recycled Cashmere Blend Beanie $44.00 Current Price $44.00 (21) Free Delivery\",\n        \"classifications\": {\n          \"line\": \"1\",\n          \"brand\": \"Nordstrom\",\n          \"title\": \"Recycled Cashmere Blend Beanie\",\n          \"price\": \"$44.00\",\n          \"number_of_reviews\": \"21\"\n        }\n      },\n      {\n        \"text\": f\"Zella Pyrite Slim Fit Pocket Joggers $17.99 Current Price $17.99 (69% off) 69% off. $59.00 Previous Price $59.00 (133) Free Delivery\",\n        \"classifications\": {\n          \"line\": \"2\",\n          \"brand\": \"Zella\",\n          \"title\": \"Pyrite Slim Fit Pocket Joggers\",\n          \"price\": \"$17.99\",\n          \"old_price\": \"$59.00\",\n          \"number_of_reviews\": \"133\"\n        }\n      },\n      {\n        \"text\": f\"Limited-Time Sale Nike Everyday Plus 6-Pack Cushioned Low Socks $16.50 Current Price $16.50 (25% off) 25% off. $22.00 Previous Price $22.00 (10) Free Delivery\",\n        \"classifications\": {\n          \"line\": \"3\",\n          \"brand\": \"Nike\",\n          \"title\": \"Everyday Plus 6-Pack Cushioned Low Socks\",\n          \"price\": \"$16.50\",\n          \"old_price\": \"$22.00\",\n          \"number_of_reviews\": \"10\",\n          \"deal\": \"Limited-Time Special\"\n        }\n      },\n      {\n        \"text\": f\"Previous Next Limited-Time Sale Nike Sportswear Club Hoodie $48.00 – $55.00 Current Price $48.00 to $55.00 (Up to 12% off select items) Up to 12% off select items. $55.00 Previous Price $55.00 (136) Free Delivery\",\n        \"classifications\": {\n          \"line\": \"3\",\n          \"brand\": \"Nike\",\n          \"title\": \"Sportswear Club Hoodie\",\n          \"price\": \"$48.00 to $55.00\",\n          \"old_price\": \"$55.00\",\n          \"number_of_reviews\": \"136\",\n          \"deal\": \"Limited-Time Special\"\n        }\n      }\n    ]\n  })\n"}
{"type": "source_file", "path": "app/classify/parsers/macys/macys_listings.py", "content": "from app.schemas import *\r\n\r\ndef commands():\r\n  return json_to_pydantic({\r\n    \"main_prompt\": \"A table with NUMBER_OF_LABELS cells in each row summarizing the different parts of the text at each line:\\n\\n\",\r\n    \"data\": {\r\n      \"model\": \"text-davinci-003\",\r\n      \"temperature\": 0.01,\r\n      \"top_p\": 0.9,\r\n      \"best_of\": 1,\r\n      \"frequency_penalty\": 0,\r\n      \"presence_penalty\": 0\r\n    },\r\n    \"model_specific_token_size\": 3800,\r\n    \"openai_endpoint\": \"https://api.openai.com/v1/completions\",\r\n    \"explicitly_excluded_strings\": [\r\n      \"\\n\",\r\n      \"Add to Favourites\",\r\n      \"Add to basket\"\r\n    ],\r\n    \"examples_for_prompt\": [\r\n      {\r\n        \"text\": \"Limited-Time Special +2 Alfani Women's Ultra-Soft Printed Packaged Pajama Set, Created for Macy's TRY 1,338.50 Sale TRY 577.60  (279)\",\r\n        \"classifications\": {\r\n          \"line\": \"1\",\r\n          \"brand\": \"Alfani\",\r\n          \"title\": \"Women's Ultra-Soft Printed Packaged Pajama Set, Created for Macy's\",\r\n          \"shop\": \"RaffaelloDitty\",\r\n          \"price\": \"TRY 577.60\",\r\n          \"old_price\": \"TRY 1,338.50\",\r\n          \"number_of_reviews\": \"279\",\r\n          \"deal\": \"Limited-Time Special\"\r\n        }\r\n      },\r\n      {\r\n        \"text\": \"Deal of the Day +4 Alfani Women's Seam-Front Mock Neck Sweater, Created for Macy's TRY 1,146.00 Sale TRY 458.40 Flash Sale 60% Off  (39)\",\r\n        \"classifications\": {\r\n          \"line\": \"2\",\r\n          \"brand\": \"Alfani\",\r\n          \"title\": \"Women's Seam-Front Mock Neck Sweater, Created for Macy's\",\r\n          \"shop\": \"RaffaelloDitty\",\r\n          \"price\": \"TRY 458.40\",\r\n          \"old_price\": \"TRY 1,146.00\",\r\n          \"number_of_reviews\": \"39\",\r\n          \"deal\": \"Deal of the Day\"\r\n        }\r\n      },\r\n      {\r\n        \"text\": \"Limited-Time Special Alfani Men's Classic-Fit Stretch Black Tuxedo Separates, Created for Macy's TRY 2,214.90 - 6,933.50 Sale TRY 885.90 - 2,773.40  (2)\",\r\n        \"classifications\": {\r\n          \"line\": \"3\",\r\n          \"brand\": \"Alfani\",\r\n          \"title\": \"Men's Classic-Fit Stretch Black Tuxedo Separates, Created for Macy's\",\r\n          \"shop\": \"RaffaelloDitty\",\r\n          \"price\": \"TRY 885.90 - 2,773.40\",\r\n          \"old_price\": \"TRY 2,214.90 - 6,933.50\",\r\n          \"number_of_reviews\": \"2\",\r\n          \"deal\": \"Limited-Time Special\"\r\n        }\r\n      }\r\n    ]\r\n  })\r\n"}
{"type": "source_file", "path": "app/classify/parsers/bestbuy/bestbuy_listings.py", "content": "from app.schemas import *\n\ndef commands():\n  return json_to_pydantic({\n    \"main_prompt\": \"A table with NUMBER_OF_LABELS cells in each row summarizing the different parts of the examples at each new line below here and above the table. Elements in cells containing multiple elements are separated by #$\\n\\n\",\n    \"data\": {\n      \"model\": \"text-davinci-003\",\n      \"temperature\": 0.01,\n      \"top_p\": 0.9,\n      \"best_of\": 1,\n      \"frequency_penalty\": 0,\n      \"presence_penalty\": 0\n    },\n    \"model_specific_token_size\": 3800,\n    \"openai_endpoint\": \"https://api.openai.com/v1/completions\",\n    \"explicitly_excluded_strings\": [\n      \"\\n\",\n      \"Add to Cart\",\n      \"Compare Save\",\n      \"Compare\",\n      \"Learn more\",\n    ],\n    \"examples_for_prompt\": [\n      {\n        \"text\": \"Sony - PlayStation 5 - DualSense Wireless Controller - Cosmic Red SKU: 6464309 more Color:Cosmic Red Get previous slide selected Get next slide Rating 4.8 out of 5 stars with 2465 reviews (2,465) $49.99 Your price for this item is $49.99 Save $25Was $74.99 The previous price was $74.99 Open-Box: from $39.99 Get it today Pickup: Ready in 1 hour at Bangor See all pickup locations FREE Shipping: Get it by Wed, Dec 21 See all shipping options for 04785 Save\",\n        \"classifications\": {\n          \"line\": \"1\",\n          \"title\": \"Sony - PlayStation 5 - DualSense Wireless Controller - Cosmic Red\",\n          \"price\": \"$49.99\",\n          \"old_price\": \"$74.99\",\n          \"number_of_reviews\": \"2465\",\n          \"rating\": \"4.8\",\n          \"product_details\": \"#$Color:Cosmic Red#$SKU: 6464309#$\",\n          \"tags\": \"#$Open-Box: from $39.99#$Save $25#$Was $74.99#$The previous price was $74.99#$Get it today#$\",\n          \"shipping_information\": \"#$Pickup: Ready in 1 hour at Bangor#$FREE Shipping: Get it by Wed, Dec 21#$\"\n        }\n      },\n      {\n        \"text\": \"Microsoft - Xbox Series X 1TB Console - Black SKU: 6428324 more Rating 4.9 out of 5 stars with 22363 reviews (22,363) $499.99 Your price for this item is $499.99 High Demand Product This item is expected to sell out quickly. To improve your odds of getting one, we've updated our reservation process. Save\",\n        \"classifications\": {\n          \"line\": \"2\",\n          \"title\": \"Microsoft - Xbox Series X 1TB Console - Black\",\n          \"price\": \"$499.99\",\n          \"number_of_reviews\": \"22363\",\n          \"rating\": \"4.9\",\n          \"product_details\": \"#$SKU: 6428324#$\",\n          \"tags\": \"#$High Demand Product#$This item is expected to sell out quickly. To improve your odds of getting one, we've updated our reservation process.#$\"\n        }\n      },\n      {\n        \"text\": \"Sony - PlayStation 5 Digital Edition Console SKU: 6430161 more Rating 4.9 out of 5 stars with 6199 reviews (6,199) $399.99 Your price for this item is $399.99 Sold Out This item is currently sold out but we are working to get more inventory. Sold Out Save\",\n        \"classifications\": {\n          \"line\": \"3\",\n          \"title\": \"Sony - PlayStation 5 Digital Edition Console\",\n          \"price\": \"$399.99\",\n          \"number_of_reviews\": \"6199\",\n          \"rating\": \"4.9\",\n          \"product_details\": \"#$SKU: 6430161#$\",\n          \"tags\": \"#$This item is currently sold out but we are working to get more inventory.#$\",\n          \"sold_out\": \"Sold Out\"\n        }\n      },\n      {\n        \"text\": \"Sponsored Pokémon Violet - Nintendo Switch, Nintendo Switch (OLED Model), Nintendo Switch Lite Publisher: Nintendo SKU: 6464088 Release Date: 11/18/2022 ESRB Rating: E (Everyone) Rating 4.2 out of 5 stars with 608 reviews (608) Get it today Pickup: Ready in 1 hour at Bangor See all pickup locations FREE Shipping: Get it by Wed, Dec 21 See all shipping options for 04785 Save $59.99 Your price for this item is $59.99\",\n        \"classifications\": {\n          \"line\": \"4\",\n          \"number_of_reviews\": \"608\",\n          \"price\": \"$59.99\",\n          \"product_details\": \"#$Publisher: Nintendo#$SKU: 6464088#$Release Date: 11/18/2022#$ESRB Rating: E (Everyone)#$\",\n          \"rating\": \"4.2\",\n          \"shipping_information\": \"#$Pickup: Ready in 1 hour at Bangor#$FREE Shipping: Get it by Wed, Dec 21#$\",\n          \"tags\": \"#$Sponsored#$Save $59.99#$Your price for this item is $59.99#$Get it today#$\",\n          \"title\": \"Pokémon Violet - Nintendo Switch, Nintendo Switch (OLED Model), Nintendo Switch Lite\"\n        }\n      }\n    ]\n  })\n"}
{"type": "source_file", "path": "app/credentials.py", "content": "global CUNCURRENCY_THRESHOLD_PER_MINUTE\nglobal OPENAI_KEY\nglobal ALLOWED_CONCURRENCY\n\nALLOWED_CONCURRENCY = 1\nOPENAI_KEY = \"<OPENAI KEY>\""}
{"type": "source_file", "path": "app/main.py", "content": "from fastapi import FastAPI\nfrom app.schemas import Targets\nfrom app.classify.classify import Classify\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"To learn more about the Daath AI Parser, please visit https://github.com/kagermanov27/daath-ai-parser/\"}\n\n@app.post(\"/classify\")\ndef classify(targets: Targets):\n    classifier = Classify()\n    return classifier.classify(targets = targets)"}
{"type": "source_file", "path": "app/classify/parsers/wayfair/wayfair_listings.py", "content": "from app.schemas import *\n\ndef commands():\n  return json_to_pydantic({\n    \"main_prompt\": \"A table with NUMBER_OF_LABELS cells in each row summarizing the different parts of the examples at each new line below here and above the table. Elements in cells containing multiple elements are separated by #$\\n\\n\",\n    \"data\": {\n      \"model\": \"text-davinci-003\",\n      \"temperature\": 0.01,\n      \"top_p\": 0.8,\n      \"best_of\": 1,\n      \"frequency_penalty\": 0,\n      \"presence_penalty\": 0\n    },\n    \"model_specific_token_size\": 3800,\n    \"openai_endpoint\": \"https://api.openai.com/v1/completions\",\n    \"explicitly_excluded_strings\": [\n      \"\\n\",\n      \"Opens in a new tab\",\n      \"Quickview\",\n      \"Save this item to your list\"\n    ],\n    \"examples_for_prompt\": [\n      {\n        \"text\": \"Wayfair's Choice Oliverson 661 lb. Capacity Stack Chair with Air-Vent Back and Powder Coated Sled Base by Inbox Zero $48.99$142.00 (168) Rated 4.5 out of 5 stars.168 total votes Free shipping Sponsored Grab the attention of visitors when they step into your meeting space and see these smart looking guest chairs. This modern beauty features a fully perforated back to provide airflow during conference hall meetings. Designed for versatility this chair is designed for reception areas, school functions, break rooms, cafeterias, event spaces and express emission testing locations where customers must get out their vehicle. Always be ready for guests by having several plastic guest chairs tucked away in your home. If you work in grungy environments and need a chair that is easy to clean plastic stack chairs are ideal. Store or transport up to 5 chairs on our compatible steel sled base stack chair dolly. When in need of a space-saving seating solution that is permanent or temporary, allow this stackable side chair to work for you. Overall: 31'' H x 17.75'' W x 20'' D Overall Product Weight: 8lb. These are currently the best value on Wayfair! An 8 pound chair that holds 661 pounds and requires no assembly. They stack easily and can be used at a desk, dining table, etc. I bought them in orange and in black.. Carrie. ellington, CT. 2022-06-26 18:28:36\",\n        \"classifications\": {\n          \"line\": \"1\",\n          \"tags\": \"#$Free shipping#$Sponsored#$Wayfair's Choice#$\",\n          \"title\": \"Oliverson 661 lb. Capacity Stack Chair with Air-Vent Back and Powder Coated Sled Base\",\n          \"brand\": \"Inbox Zero\",\n          \"price\": \"$48.99\",\n          \"old_price\": \"$142.00\",\n          \"number_of_votes\": \"168\",\n          \"average_rating\": \"4.5\",\n          \"details\": \"#$Overall: 31'' H x 17.75'' W x 20'' D#$Overall Product Weight: 8lb.#$\"\n        }\n      },\n      {\n        \"text\": \"+5 Sizes Available in 6 Sizes Sealy Cool 12\\\" Medium Memory Foam Mattress with CopperChill Technology by\\xa0 Sealy From$365.99$1,099.00 Open Box Price:$504.00 (2284) Rated 4.5 out of 5 stars.2284 total votes Fast Delivery FREE Shipping Get it by Thu. Dec 22 Comfort Level Medium Mattress Type Memory Foam Mattress Thickness 12'' Sponsored\",\n        \"classifications\": {\n          \"line\": \"2\",\n          \"tags\": \"#$6 Sizes#$Open Box Price:$504.00#$Fast Delivery#$FREE Shipping#$Get it by Thu. Dec 22#$Sponsored#$\",\n          \"title\": \"Sealy Cool 12\\\" Medium Memory Foam Mattress with CopperChill Technology\",\n          \"brand\": \"Sealy\",\n          \"price\": \"$365.99\",\n          \"old_price\": \"$1,099.00\",\n          \"number_of_votes\": \"2284\",\n          \"average_rating\": \"4.5\",\n          \"details\": \"#$Comfort Level Medium#$Mattress Type Memory Foam#$Mattress Thickness 12''#$\"\n        }\n      },\n      {\n        \"text\": \"Sale +3 Sizes Available in 4 Sizes 6'' Mattress by Home Life From $91.99 $161.99 ( 164 ) Rated 4 out of 5 stars. 164 total votes Free shipping Mattress Type Innerspring Mattress Thickness 6''\",\n        \"classifications\": {\n          \"line\": \"3\",\n          \"brand\": \"Home Life\",\n          \"details\": \"#$Mattress Type Innerspring#$Mattress Thickness 6''#$\",\n          \"number_of_votes\": \"164\",\n          \"old_price\": \"$161.99\",\n          \"price\": \"$91.99\",\n          \"average_rating\": \"4\",\n          \"tags\": \"#$4 Sizes#$Free shipping#$Sale#$\",\n          \"title\": \"6'' Mattress\"\n        }\n      }\n    ]\n  })"}
{"type": "source_file", "path": "app/schemas.py", "content": "from pydantic import BaseModel\nfrom typing import Union\nfrom app.credentials import *\n\nclass TextDaVinci2DefaultData(BaseModel):\n\tprompt: str = None\n\tmodel: str = \"text-davinci-002\"\n\ttemperature: Union[float, int] = 0.7\n\tmax_tokens: int = 256\n\ttop_p: Union[float, int] = 1\n\tfrequency_penalty: Union[float, int] = 0\n\tpresence_penalty: Union[float, int] = 0\n\n\nclass ClassifierExampleForPrompt(BaseModel):\n  text: str\n  classifications: dict\n\n\nclass Classifier(BaseModel):\n  main_prompt: str = \"A table with NUMBER_OF_LABELS cells in each row summarizing the different parts of the text:\\n\\n\"\n  data: BaseModel = TextDaVinci2DefaultData()\n  model_specific_token_size: int = 4000\n  openai_endpoint: str = \"https://api.openai.com/v1/completions\"\n  explicitly_excluded_strings: list = [\"\\n\"]\n  examples_for_prompt: list = []\n\nclass PromptObjects(BaseModel):\n\tdesired_lines: list = None\n\tinvalid_lines_indexes: list = None\n\tvalid_calls_token_sizes: list = None\n\tlabels: list = None\n\tprompts: list = None\n\nclass ParseOnly(BaseModel):\n\tresponses: list = None\n\tprompt_objects: PromptObjects = None\n\nclass Targets(BaseModel):\n\tpath: str = \"google.google_local_results\"\n\ttargets: list = None\n\topenai_key: str = OPENAI_KEY\n\tallowed_concurrency: int = ALLOWED_CONCURRENCY\n\tclassifier: Classifier = None\n\tprompts_only: bool = False\n\tmock_name: str = None\n\tparse_only: ParseOnly = None\n\n\ndef json_to_pydantic(classifier_json):\n\tif \"examples_for_prompt\" in classifier_json:\n\t\texamples_for_prompt = []\n\t\tfor example in classifier_json['examples_for_prompt']:\n\t\t\ttry:\n\t\t\t\texamples_for_prompt.append(ClassifierExampleForPrompt(**example))\n\t\t\texcept:\n\t\t\t\treturn {\"error\": \"Unknown Example Structure\"}\n\telse:\n\t\treturn {\"error\": \"No examples provided for prompt\"}\n\t\n\tif \"data\" in classifier_json:\n\t\ttry:\n\t\t\tdata = TextDaVinci2DefaultData(**classifier_json['data'])\n\t\texcept:\n\t\t\treturn {\"error\": \"Unkown or Unsupported Model Data\"}\n\t\n\ttry:\n\t\tclassifier_json.pop('examples_for_prompt')\n\t\tclassifier_json.pop('data')\n\t\tclassifier = Classifier(**classifier_json)\n\t\tclassifier.data = data\n\t\tclassifier.examples_for_prompt = examples_for_prompt\n\t\treturn classifier\n\texcept:\n\t\treturn {\"error\": \"A problem occured when reading the classifier dictionary\"}"}
