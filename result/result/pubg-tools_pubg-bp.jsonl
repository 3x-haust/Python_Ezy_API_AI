{"repo_info": {"repo_name": "pubg-bp", "repo_owner": "pubg-tools", "repo_url": "https://github.com/pubg-tools/pubg-bp"}}
{"type": "source_file", "path": "entry.py", "content": "# -*- coding: utf-8 -*-\n\"\"\"\nThis file can be called from terminal to convert an .py file to .pyd or .c file, where .pyd is kind\nof a .dll file for python which can be called in any python model but anyone can not read it easily\nand .c file contains our algorithm in ``c`` programing language.\nwe can call the file in the following way from the terminal:\n\n```\n$ python encrypt.py -f FILE.py\n```\n\nThis command line will create following 3 files and 1 folder:\n\n- FILE.cp[PYTHON_VERSION].[OS_NAME].pyd : Files can be used as python .dll file\n- FILE.c    : File contains algorithm in ``c`` programing language\n- FILE.pyx  : File which is used for creating .pyd file (can delete this file)\n- build (folder)    : Folder contains our algorithms .exe, .lib and .obj file\n\nNow you can directly use .pyd file in your other python files by importing in the following way:\n```\nimport FILE\n```\n\nError:\n++++++\n- Unable to find vcvarsall.bat : This error shows that we don't have c compiler in our os\ndownload and install microsoft visual c++ build tools for you respective os and python version.\n\"\"\"\n\nimport shutil\nimport os\nimport argparse\n\n\nclass Encryptor:\n    \"\"\"\n    Class: Encryptor have following methods:\n\n    - __init__(self, file_path): Takes file_path (python file path) as an argument and initialize\n     other variables then calls setup_file() and encrypt() methods\n    - setup_file(self): Creates a setup.py file with its context\n    - encrypt(self): Call the setup.py file from terminal/command prompt\n    \"\"\"\n\n    def __init__(self, file_path):\n        r\"\"\"\n        This method  initialize all the variables then calls setup_file() and encrypt() methods.\n        It also creates File.pyx which is just copy of File.py with renamed to File.pyx, cython read\n        File.pyx file not FIle.py file.\n        :param file_path: Python file path example: (C:\\Project_folder\\File.py)\n        \"\"\"\n        if not os.path.exists(file_path):\n            raise Exception(\"{} does not exists!\".format(file_path))\n        self.file_path = file_path\n        self.file_name = os.path.basename(self.file_path)\n        self.file_dir = os.path.dirname(self.file_path)\n        self.file_base_name, self.file_extension = os.path.splitext(self.file_name)\n        if not self.file_extension == \".py\":\n            raise Exception(\"{} is not .py format!\".format(self.file_extension))\n        # Creating .pvx file\n        self.file_pyx_name = self.file_base_name + \".pyx\"\n        shutil.copy(self.file_path, self.file_pyx_name)\n        self.setup_file()\n        self.encrypt()\n\n    def setup_file(self):\n        \"\"\"\n        Creates a setup.py file which contains the cython script to cythonize the FILE.pyx file.\n        \"\"\"\n        with open(\"setup.py\", \"+w\") as file:\n            file.write(\n                \"from setuptools import setup\\n\"\n                \"from Cython.Build import cythonize\\n\\n\"\n                \"setup(ext_modules=cythonize('{}'))\".format(self.file_pyx_name)\n            )\n\n    def encrypt(self):\n        \"\"\"\n        Calls the setup.py from terminal/command prompt to cythonize the file.\n        \"\"\"\n        command = \"python setup.py build_ext --inplace\"\n        os.system(str(command))\n\n        print(\n            \"Now you can directly use import {} to use your file and\"\n            \" its functions from .pyd file.\".format(self.file_base_name)\n        )\n\n\nif __name__ == \"__main__\":\n    PARSER = argparse.ArgumentParser(\n        description=\"Convert .py file to .pyd file using Cython\"\n    )\n    PARSER.add_argument(\n        \"-f\",\n        \"--file\",\n        type=str,\n        action=\"store\",\n        help=\"Enter the file_path(if \"\n        \"file is in other \"\n        \"directory else file name) \"\n        \"which you want to convert \"\n        \"to .pyd format\\nPlease \"\n        'use \"FILE_NAME\" for your '\n        \"file name\",\n    )\n    ARGS = PARSER.parse_args()\n    Encryptor(ARGS.file)\n"}
{"type": "source_file", "path": "server/db/myredis.py", "content": "import redis\n\n\nclass RedisWrapper:\n    def __init__(self, host=\"localhost\", port=6379, db=0):\n        \"\"\"\n        初始化RedisWrapper对象。\n\n        Args:\n            host (str, optional): Redis服务器的主机名。默认为\"localhost\"。\n            port (int, optional): Redis服务器的端口号。默认为6379。\n            db (int, optional): Redis数据库的索引。默认为0。\n        \"\"\"\n        self.redis_client = redis.Redis(host=host, port=port, db=db)\n\n    def set(self, key, value, expire=None):\n        \"\"\"\n        将指定的键值对存储到Redis中。\n\n        Args:\n            key (str): 要存储的键。\n            value (str): 要存储的值。\n            expire (int, optional): 键值对的过期时间（以秒为单位）。默认为None，表示不设置过期时间。\n        \"\"\"\n        self.redis_client.set(key, value, ex=expire)\n\n    def get(self, key):\n        \"\"\"\n        从Redis中获取指定键的值。\n\n        Args:\n            key (str): 要获取值的键。\n\n        Returns:\n            str: 指定键的值，如果键不存在则返回None。\n        \"\"\"\n        return self.redis_client.get(key)\n\n    def delete(self, key):\n        \"\"\"\n        从Redis中删除指定的键值对。\n\n        Args:\n            key (str): 要删除的键。\n        \"\"\"\n        self.redis_client.delete(key)\n\n    def update(self, key, value):\n        \"\"\"\n        更新Redis中指定键的值。\n\n        如果键存在，则更新其对应的值为指定的值；如果键不存在，则抛出KeyError异常。\n\n        Args:\n            key (str): 要更新的键。\n            value (str): 新的值。\n\n        Raises:\n            KeyError: 如果指定的键在Redis中不存在。\n        \"\"\"\n        if self.redis_client.exists(key):\n            self.redis_client.set(key, value)\n        else:\n            raise KeyError(f\"键 '{key}' 在Redis中不存在。\")\n\n    def flushall(self):\n        \"\"\"\n        清空Redis中的所有键值对。\n        \"\"\"\n        self.redis_client.flushdb()\n"}
{"type": "source_file", "path": "server/km-to-txt.py", "content": "import json\n\n# Read the cards.json file\nwith open(\"./cards.json\", \"r\", encoding=\"utf-8\") as json_file:\n    data = json.load(json_file)\n\n# Extract the card field from each object in the array\ncards = [card_obj[\"card\"] for card_obj in data]\n\n# Write the cards to cards.txt file\nwith open(\"cards.txt\", \"w\", encoding=\"utf-8\") as txt_file:\n    for card in cards:\n        txt_file.write(card + \"\\n\")\n"}
{"type": "source_file", "path": "server/db/mymongo.py", "content": "from pymongo import MongoClient\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.primitives import hashes\nimport hashlib\n\n\nclass MongoDBWrapper:\n    \"\"\"\n    A wrapper class for interacting with MongoDB.\n\n    用于与 MongoDB 进行交互的包装类。\n    \"\"\"\n\n    def __init__(self, host, port, database):\n        \"\"\"\n        Initializes a MongoDBWrapper instance.\n        初始化 MongoDBWrapper 实例。\n        Args:\n            host (str): The MongoDB server host.\n                MongoDB 服务器主机。\n            port (int): The MongoDB server port.\n                MongoDB 服务器端口。\n            database (str): The name of the database to connect to.\n                要连接的数据库的名称。\n        \"\"\"\n        self.client = MongoClient(host, port)\n        self.db = self.client[database]\n\n    def insert_document(self, collection, document):\n        \"\"\"\n        Inserts a document into the specified collection.\n        将文档插入到指定的集合中。\n        Args:\n            collection (str): The name of the collection.\n                集合的名称。\n            document (dict): The document to be inserted.\n                要插入的文档。\n        \"\"\"\n        self.db[collection].insert_one(document)\n\n    def find_documents(self, collection, query):\n        \"\"\"\n        Finds documents in the specified collection based on the given query.\n        根据给定的查询条件在指定的集合中查找文档。\n        Args:\n            collection (str): The name of the collection.\n                集合的名称。\n            query (dict): The query to filter the documents.\n                用于筛选文档的查询条件。\n        Returns:\n            pymongo.cursor.Cursor: A cursor object containing the matching documents.\n                包含匹配文档的游标对象。\n        \"\"\"\n        return self.db[collection].find(query)\n\n    def update_document(self, collection, query, update):\n        \"\"\"\n        Updates a document in the specified collection based on the given query and update.\n\n        根据给定的查询条件和更新内容在指定的集合中更新文档。\n\n        Args:\n            collection (str): The name of the collection.\n                集合的名称。\n            query (dict): The query to filter the documents.\n                用于筛选文档的查询条件。\n            update (dict): The update to be applied to the matching documents.\n                要应用于匹配文档的更新内容。\n        \"\"\"\n        self.db[collection].update_one(query, update)\n\n    def delete_document(self, collection, query):\n        \"\"\"\n        Deletes a document from the specified collection based on the given query.\n        根据给定的查询条件从指定的集合中删除文档。\n        Args:\n            collection (str): The name of the collection.\n                集合的名称。\n            query (dict): The query to filter the documents.\n                用于筛选文档的查询条件。\n        \"\"\"\n        self.db[collection].delete_one(query)\n\n\n# 示例使用\n# 假设你已经有了一个私钥的PEM格式字符串\nprivate_key_pem = \"\"\"-----BEGIN RSA PRIVATE KEY-----\nZhangqiaoqing2024.\n-----END RSA PRIVATE KEY-----\"\"\"\n\n\ndef encrypt_with_private_key_pem(input_string, key):\n    # 创建一个sha256哈希对象\n    hash_object = hashlib.sha256()\n\n    # 将key和input_string合并，然后编码为字节串\n    to_encrypt = (key + input_string).encode()\n\n    # 给哈希对象提供数据\n    hash_object.update(to_encrypt)\n\n    # 获取十六进制格式的哈希值\n    hashed = hash_object.hexdigest()\n\n    return hashed\n\n\n# # 示例使用\n# # 假设你已经有了一个PEM格式的私钥字符串\n# private_key_pem = \"\"\"-----BEGIN PRIVATE KEY-----\n# ...\n# -----END PRIVATE KEY-----\"\"\"\n\n# # 要加密的明文\n# plaintext = \"Hello, World!\"\n\n# # 加密数据\n# encrypted_data = encrypt_with_private_key_pem(private_key_pem, plaintext)\n\n# # 打印加密后的数据\n# print(\"Encrypted Data:\", encrypted_data)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    isc = encrypt_with_private_key_pem(\n        \"8851bb969c574e7c9e070d49598e3539\", \"Zhangqiaoqing2024.\"\n    )\n    print(isc)\n    # b9084ed2202928a38b0626a98f217694aa3a8a12fd1c76994cef344e2d782fb3\n    # Create an instance of the wrapper class\n    # wrapper = MongoDBWrapper(\"localhost\", 27017, \"pubg_db\")\n\n    # # Insert a document\n    # document = {\"name\": \"John\", \"age\": 30}\n    # wrapper.insert_document(\"mycollection\", document)\n\n    # # Find documents\n    # query = {\"age\": {\"$gt\": 25}}\n    # results = wrapper.find_documents(\"mycollection\", query)\n    # for result in results:\n    #     print(result)\n\n    # # Update a document\n    # query = {\"name\": \"John\"}\n    # update = {\"$set\": {\"age\": 35}}\n    # wrapper.update_document(\"mycollection\", query, update)\n\n    # Delete a document\n    # query = {\"name\": \"John\"}\n    # wrapper.delete_document(\"mycollection\", query)\n"}
{"type": "source_file", "path": "main.py", "content": "from src.templates.init import init_Form\nfrom PyQt5 import QtWidgets\nimport sys\nimport cv2\nimport matplotlib\nimport pyautogui\nimport multiprocessing\nimport pytesseract\nfrom src.API.base import base_url\nimport zipfile\nimport pyautogui\nimport pytesseract\nimport os\n\n\nos.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = r'.\\Lib\\site-packages\\PyQt5\\Qt5\\plugins\\platforms'\n\n\n\n# import ssl\n# import _ssl\n\n\nif __name__ == \"__main__\":\n    multiprocessing.freeze_support()\n    app = QtWidgets.QApplication(sys.argv)\n    Form = QtWidgets.QWidget()\n    ui = init_Form()\n    ui.setupUi(Form)\n    Form.show()\n    sys.exit(app.exec_())"}
{"type": "source_file", "path": "server/main.py", "content": "from typing import Union\nfrom fastapi import FastAPI, File, Form, UploadFile, HTTPException, Query\nfrom fastapi.websockets import WebSocket, WebSocketDisconnect\nfrom fastapi.responses import JSONResponse\nimport datetime, uuid, uvicorn\nfrom db.mymongo import MongoDBWrapper, encrypt_with_private_key_pem\nfrom copy import deepcopy\nfrom fastapi.middleware.cors import CORSMiddleware\nimport asyncio, json\nfrom fastapi import Body\nfrom db.myredis import RedisWrapper\nfrom pydantic import BaseModel\nfrom fastapi.encoders import jsonable_encoder\nfrom bson import ObjectId\nfrom datetime import timedelta\n\npubgDB = MongoDBWrapper(\"localhost\", 27017, \"pubg\")\npubgUserDB = MongoDBWrapper(\"localhost\", 27017, \"pubgUserLogger\")\nmyRedis = RedisWrapper(\"localhost\", 6379, 2)\n\n# 连接redis\n\nhashkey = \"xxxxxx\"\nkey = \"xxxxxx\"\n\napp = FastAPI(debug=True)\n\n# 允许所有来源的跨域请求\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"version\": \"v2.3.0\"}\n\n\n# 获取文件表\n@app.get(\"/get_files\")\ndef get_files():\n    try:\n        result = pubgDB.find_documents(\"files\", {\"key\": \"images\"})\n        files = list(result)\n        if files:\n            return {\"code\": 0, \"data\": files[0][\"list\"]}\n        else:\n            return {\"code\": 0, \"data\": []}\n    except Exception as e:\n        print(e)\n        return {\"code\": -1, \"message\": \"error\"}\n\n\n# 错误上报的接收接口\n@app.post(\"/error_report\")\ndef error_report(\n    data: str = Body(...), windows_id: str = Body(...), version: str = Body(...)\n):\n    try:\n        # 先判断该机器码是否存在这个错误\n        result = pubgDB.find_documents(\n            \"error_report\",\n            {\"windows_id\": windows_id, \"version\": version, \"error\": data},\n        )\n        error = list(result)\n        if error:\n            return {\"code\": 0, \"message\": \"已经上报过了\"}\n        pubgDB.insert_document(\n            \"error_report\",\n            {\n                \"error\": data,\n                \"createTime\": str(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")),\n                \"windows_id\": windows_id,\n                \"version\": version,\n            },\n        )\n        return {\"code\": 0, \"message\": \"success\"}\n    except Exception as e:\n        print(e)\n        return {\"code\": -1, \"message\": \"error\"}\n\n\nclass CloudAccountReportData(BaseModel):\n    # \"map_name\": \"\",  # 点位名称\n    # \"map\": \"\",  # 地图\n    # \"start_time\": \"\",  # 开始时间\n    # \"bp\": 0,  # bp数量\n    # \"death_time\": \"\",  # 死亡时间\n    # \"windows_id\": self.windows_id,  # 机器码\n    # \"version\": self.version,  # 版本号\n    # \"user_id\": self.pip_user_id,  # 用户id\n    map_name: str\n    map_: str\n    start_time: str\n    bp: int\n    death_time: str\n    windows_id: str\n    version: str\n    user_id: str\n\n\n# 云账号统计数据上报\n@app.post(\"/cloud_account_report\")\ndef cloud_account_report(data: CloudAccountReportData = Body(...)):\n    try:\n        if data and data.user_id:\n            # 判断是否已经有了这条数据 通过 data.start_time\n            result = pubgUserDB.find_documents(\n                data.user_id,\n                {\"start_time\": data.start_time, \"user_id\": data.user_id},\n            )\n            if list(result):\n                return {\"code\": 0, \"message\": \"已经上报过了\"}\n            pubgUserDB.insert_document(data.user_id, data.dict())\n            return {\"code\": 0, \"message\": \"success\"}\n        pass\n    except Exception as e:\n        print(e)\n        return {\"code\": -1, \"message\": \"error\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n# 检查卡密是否过期\n@app.get(\"/check_card/{card_id}\")\ndef check_card(card_id: str):\n    try:\n        result = pubgDB.find_documents(\n            \"cards\", {\"card\": encrypt_with_private_key_pem(card_id, key)}\n        )\n        card = list(result)\n        if card:\n            if card[0][\"status\"] == \"未激活\":\n                return {\"code\": 0, \"message\": \"未激活\", \"type\": card[0][\"type\"]}\n            else:\n                # 查询是那个用户激活的 返回到期时间\n                result = pubgDB.find_documents(\n                    \"users\", {\"windows_id\": card[0][\"windows_id\"]}\n                )\n                user = list(result)\n                if user:\n                    return {\n                        \"code\": 0,\n                        \"message\": \"已激活\",\n                        \"endTime\": user[0][\"endTime\"],\n                        \"windows_id\": user[0][\"windows_id\"],\n                    }\n                else:\n                    return {\"code\": -1, \"message\": \"卡密不可用\"}\n        else:\n            return {\"code\": -1, \"message\": \"卡密不存在\"}\n    except Exception as e:\n        print(e)\n        return {\"code\": -1, \"message\": \"error\"}\n\n\n# 更新某张卡密的信息与状态 （web端用）\n@app.post(\"/update_card/{card_id}\")\ndef web_update_card(card_id: str, email: str, windows_id: str):\n    try:\n        # 获取卡密信息\n        result = pubgDB.find_documents(\n            \"cards\", {\"card\": encrypt_with_private_key_pem(card_id, key)}\n        )\n        if windows_id is None:\n            return {\"code\": -1, \"message\": \"windows_id 不能为空\"}\n        else:\n            # 获取用户信息\n            result = pubgDB.find_documents(\"users\", {\"windows_id\": windows_id})\n            user = list(result)\n            # 判断用户是否存在 且 未到期\n            if user.endTimeKey < int(datetime.datetime.now().timestamp()):\n                return {\"code\": -1, \"message\": \"用户不存在或已到期\"}\n            # 计算还有多少天到期\n            one_day = 24 * 60 * 60\n            end_time = user[0][\"endTimeKey\"]\n            current_time = int(datetime.datetime.now().timestamp())\n            day = (end_time - current_time) / one_day\n\n        pass\n    except Exception as e:\n        pass\n    pass\n\n\n# 创建卡密\n@app.post(\"/create_card\")\ndef create_card(type: str, nums: int, apikey: str):\n    global key, pubgDB\n    keys = []\n    try:\n        if key == apikey:\n            for i in range(nums):\n                _uuid = str(uuid.uuid4()).replace(\"-\", \"\")\n                card = {\n                    \"card\": str(encrypt_with_private_key_pem(str(_uuid), key)),\n                    \"type\": str(type),\n                    \"status\": \"未激活\",\n                    \"createTime\": str(\n                        datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")\n                    ),\n                }\n                card_copy = deepcopy(card)\n                card[\"card\"] = _uuid\n                pubgDB.insert_document(\"cards\", card_copy)\n                keys.append(card)\n            return {\"code\": 0, \"hashed_str\": keys}\n        else:\n            return {\"code\": 0, \"message\": \"Invalid key\"}\n    except Exception as e:\n        print(e)\n        return {\"code\": 0, \"message\": \"Invalid key\"}\n\n\n# 激活卡密\n@app.put(\"/activate_card/{card_id}\")\ndef activate_card(card_id: str, windows_id: str):\n    try:\n        # 查询卡密是否存在以及状态\n        km_result = pubgDB.find_documents(\n            \"cards\", {\"card\": encrypt_with_private_key_pem(card_id, key)}\n        )\n        card = list(km_result)\n        # 判断卡密是否激活\n        if card:\n            if card[0][\"status\"] != \"未激活\":\n                return {\"code\": 0, \"message\": \"卡密已被使用\"}\n        else:\n            return {\"code\": -1, \"message\": \"卡密不存在\"}\n        result = pubgDB.find_documents(\"users\", {\"windows_id\": windows_id})\n        user = list(result)\n        # 卡密可使用时间\n        card_end_time = int(card[0][\"type\"])\n        current_time = int(datetime.datetime.now().timestamp())\n        one_day = 24 * 60 * 60\n        if user:\n            # 判断用户是否到期 到期返回 已经到期\n            if user[0][\"endTimeKey\"] < current_time:\n                query = {\"card\": encrypt_with_private_key_pem(card_id, key)}\n                update = {\"$set\": {\"status\": \"已激活\", \"windows_id\": windows_id}}\n                pubgDB.update_document(\"cards\", query, update)\n                # 更新用户信息\n                user[0][\"cards\"].append(card_id)\n                user[0][\"endTimeKey\"] = current_time + (one_day * card_end_time)\n                user[0][\"endTime\"] = datetime.datetime.fromtimestamp(\n                    user[0][\"endTimeKey\"]\n                ).strftime(\"%Y-%m-%d %H:%M\")\n                query = {\"windows_id\": windows_id}\n                update = {\"$set\": user[0]}\n                pubgDB.update_document(\"users\", query, update)\n                return {\"code\": 0, \"message\": \"重新激活成功\"}\n            else:\n                # 续期\n                user[0][\"cards\"].append(card_id)\n                user[0][\"endTimeKey\"] = int(user[0][\"endTimeKey\"]) + (\n                    one_day * card_end_time\n                )\n                user[0][\"endTime\"] = datetime.datetime.fromtimestamp(\n                    user[0][\"endTimeKey\"]\n                ).strftime(\"%Y-%m-%d %H:%M\")\n                # 修改用户信息\n                query = {\"windows_id\": windows_id}\n                update = {\"$set\": user[0]}\n                pubgDB.update_document(\"users\", query, update)\n                # 修改卡密状态\n                query = {\"card\": encrypt_with_private_key_pem(card_id, key)}\n                update = {\"$set\": {\"status\": \"已激活\", \"windows_id\": windows_id}}\n                pubgDB.update_document(\"cards\", query, update)\n                return {\"code\": 0, \"message\": \"续期成功\"}\n        else:\n            end_time = current_time + (one_day * card_end_time)\n            user_obj = {\n                \"windows_id\": windows_id,\n                \"cards\": [card_id],\n                \"createTime\": str(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\")),\n                \"endTimeKey\": end_time,\n                \"endTime\": datetime.datetime.fromtimestamp(end_time).strftime(\n                    \"%Y-%m-%d %H:%M\"\n                ),\n            }\n            user_cp = deepcopy(user_obj)\n            # 创建新用户\n            pubgDB.insert_document(\"users\", user_cp)\n            query = {\"card\": encrypt_with_private_key_pem(card_id, key)}\n            update = {\"$set\": {\"status\": \"已激活\", \"windows_id\": windows_id}}\n            pubgDB.update_document(\"cards\", query, update)\n            return {\"code\": 0, \"message\": \"激活成功\", \"user\": user_obj}\n    except Exception as e:\n        print(e)\n        return {\"code\": -1, \"message\": \"error\"}\n\n\n# 删除卡密\n@app.delete(\"/delete_card/{card_id}\")\ndef delete_card(card_id: str):\n    try:\n        # 查询卡密是否存在\n        km_result = pubgDB.find_documents(\n            \"cards\", {\"card\": encrypt_with_private_key_pem(card_id, key)}\n        )\n        card = list(km_result)\n        # 判断卡密是否存在\n        if card:\n            # 删除卡密\n            pubgDB.delete_document(\n                \"cards\", {\"card\": encrypt_with_private_key_pem(card_id, key)}\n            )\n            return {\"code\": 0, \"message\": \"卡密删除成功\"}\n        else:\n            return {\"code\": -1, \"message\": \"卡密不存在\"}\n    except Exception as e:\n        print(e)\n        return {\"code\": -1, \"message\": \"error\"}\n\n\n# 删除某个用户\n@app.delete(\"/delete_user/{windows_id}\")\ndef delete_user(windows_id: str):\n    try:\n        result = pubgDB.find_documents(\"users\", {\"windows_id\": windows_id})\n        user = list(result)\n        if user:\n            pubgDB.delete_document(\"users\", {\"windows_id\": windows_id})\n            return {\"code\": 0, \"message\": \"用户删除成功\"}\n        else:\n            return {\"code\": -1, \"message\": \"用户不存在\"}\n    except Exception as e:\n        print(e)\n        return {\"code\": -1, \"message\": \"error\"}\n\n\n# 检查到期\n@app.get(\"/check_expiry/{windows_id}\")\ndef check_expiry(windows_id: str):\n    try:\n        result = pubgDB.find_documents(\"users\", {\"windows_id\": windows_id})\n        user = list(result)\n        if user:\n            current_time = int(datetime.datetime.now().timestamp())\n            if user[0][\"endTimeKey\"] < current_time:\n                return {\"code\": 0, \"message\": \"用户已到期\"}\n            else:\n                return {\n                    \"code\": 0,\n                    \"message\": \"用户未到期\",\n                    \"endTime\": user[0][\"endTime\"],\n                }\n        else:\n            return {\"code\": -1, \"message\": \"用户不存在\"}\n    except Exception as e:\n        print(e)\n        return {\"code\": -1, \"message\": \"出现未知错误\"}\n\n\n# 检查是否登录\n@app.get(\"/check_login/{windows_id}\")\ndef check_login(windows_id: str):\n    try:\n        # 判断 redis 中是否有这个用户\n        if myRedis.get(windows_id):\n            return {\"code\": -1, \"message\": \"该账号已在其他地方登录！\"}\n        else:\n            return {\"code\": 0, \"message\": \"该账号未登录\"}\n    except Exception as e:\n        print(e)\n        return {\"code\": -1, \"message\": \"出现未知错误\"}\n\n\n# 换绑\n@app.put(\"/change_bind/{card_id}\")\ndef change_bind(card_id: str):\n    try:\n        # 查询那个用户绑定了这个卡密\n        result = pubgDB.find_documents(\n            \"cards\", {\"card\": encrypt_with_private_key_pem(card_id, key)}\n        )\n        card = list(result)\n        if card:\n            if card[0][\"status\"] == \"已激活\":\n                # 查询该用户\n                result = pubgDB.find_documents(\n                    \"users\", {\"windows_id\": card[0][\"windows_id\"]}\n                )\n                user = list(result)\n                # 判断是否已到期 / 到期时间小于三天\n                current_time = int(datetime.datetime.now().timestamp())\n                if user[0][\"endTimeKey\"] < current_time:\n                    return {\"code\": 0, \"message\": \"用户已到期\"}\n                elif user[0][\"endTimeKey\"] - current_time < 3 * 24 * 60 * 60:\n                    return {\"code\": 0, \"message\": \"到期时间小于三天,无法换绑\"}\n                else:\n                    # 计算到期时间还有多少天\n                    one_day = 24 * 60 * 60\n                    end_time = user[0][\"endTimeKey\"]\n                    current_time = int(datetime.datetime.now().timestamp())\n                    day = (end_time - current_time - one_day) / one_day\n                    # 修改卡密状态\n                    query = {\"card\": encrypt_with_private_key_pem(card_id, key)}\n                    update = {\"$set\": {\"status\": \"未激活\", \"type\": int(day)}}\n                    pubgDB.update_document(\"cards\", query, update)\n                    # 删除旧用户\n                    pubgDB.delete_document(\n                        \"users\", {\"windows_id\": card[0][\"windows_id\"]}\n                    )\n                    return {\"code\": 0, \"message\": \"换绑成功\"}\n            else:\n                return {\"code\": 0, \"message\": \"未激活的卡密无法换绑\"}\n        else:\n            return {\"code\": -1, \"message\": \"卡密不存在\"}\n        pass\n    except Exception as e:\n        pass\n\n\n# 长连接 动态检查到期\n@app.websocket(\"/check_expiry_long/{windows_id}\")\nasync def websocket_endpoint(websocket: WebSocket, windows_id: str):\n    try:\n        # 验证令牌\n        await websocket.accept()\n        if not await validate_token(windows_id):\n            raise ValueError(\"无效的机器码/该机器已过期\")\n        while True:\n            try:\n                data = await asyncio.wait_for(websocket.receive_text(), timeout=5)\n                if data:\n                    print(\"接收到的数据\", data)\n                    _result = json.loads(data)\n                    if _result[\"version\"] is None or _result[\"version\"] not in [\n                        \"v2.3.0\",\n                        \"v2.8.1\",\n                    ]:\n                        print(\"版本不一致\")\n                        await websocket.send_text(\"版本不一致\")\n                        break\n                else:\n                    print(\"接收到的数据为空\")\n                    break\n            except asyncio.TimeoutError:\n                print(\"接收数据超时\")\n            except Exception as e:\n                print(\"接收数据异常\", e)\n            # 处理接收到的数据\n            print(windows_id + \"已连接\")\n            # 判断是否有这个用户  并且该用户未到期\n            result = pubgDB.find_documents(\"users\", {\"windows_id\": windows_id})\n            user = list(result)\n            print(\"用户信息\", user)\n            if user:\n                current_time = int(datetime.datetime.now().timestamp())\n                if user[0][\"endTimeKey\"] > current_time:\n                    # 向 redis 中写入 windows_id  过期时间为 3分钟\n                    myRedis.set(windows_id, windows_id, 180)\n                    await websocket.send_text(\"未到期\")\n                else:\n                    await websocket.send_text(\"已到期\")\n                    websocket.close()\n            else:\n                await websocket.send_text(\"已到期\")\n                websocket.close()\n                print(\"用户不存在\")\n            await asyncio.sleep(5)\n\n    except ValueError as e:\n        # 处理令牌验证失败的情况\n        await websocket.send_text(f\"错误: {str(e)}\")\n    except WebSocketDisconnect:\n        # 处理客户端断开连接的情况\n        print(f\"{windows_id}--客户端断开了连接\")\n    except Exception as e:\n        # 处理其他异常\n        print(f\"发生未预期的异常\")\n    finally:\n        # 无论发生什么，都会执行的代码\n        print(f\"{windows_id}----WebSocket 连接已关闭\")\n        # 删除 redis 中的 windows_id\n        myRedis.delete(windows_id)\n        try:\n            await websocket.close(code=3000)  # 使用自定义的关闭代码\n        except Exception as e:\n            print(\"关闭连时已经关闭了\")\n\n\n# 验证令牌是否过期\nasync def validate_token(windows_id: str):\n    # 判断是否有这个用户  并且该用户未到期\n    result = pubgDB.find_documents(\"users\", {\"windows_id\": windows_id})\n    user = list(result)\n    if user:\n        current_time = int(datetime.datetime.now().timestamp())\n        print(\"时间戳\", current_time, user[0][\"endTimeKey\"], current_time)\n        if user[0][\"endTimeKey\"] > current_time:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=\"127.0.0.1\", port=18081)\n"}
{"type": "source_file", "path": "setup.py", "content": "from setuptools import setup\nfrom Cython.Build import cythonize\n\nsetup(ext_modules=cythonize('tools.pyx'))"}
{"type": "source_file", "path": "src/oldtools/tools.py", "content": "# from src.myClass.globadata import Singleton\n# from src.myClass.myopencv import ImageFinder\n# from src.model.myopencv import ImageFinder\n# from src.model.globadata import Singleton\nfrom PyQt5.QtWidgets import QDialog, QLabel, QVBoxLayout\nfrom PyQt5.QtWidgets import QDialog, QLabel, QVBoxLayout\nfrom PyQt5.QtGui import QPixmap\nfrom PyQt5.QtCore import Qt\nimport os\nimport time\nimport subprocess\nimport requests\nimport src.mycv.myopencv as myopencv\n\nfinder = myopencv.ImageFinder(imgopcv=0.8)\n\n\n# # 获取给定文件夹下的所有图片的绝对路径\ndef find__img_list(autoPath: str) -> list:\n    \"\"\"\n    获取给定文件夹下的所有图片的绝对路径。\n\n    Args:\n        autoPath (str): 文件夹路径。\n\n    Returns:\n        list: 包含所有图片绝对路径的列表。\n\n    \"\"\"\n    project_path = os.path.dirname(os.path.dirname(__file__))\n    # 获取某个文件夹下的所有图片\n    dir_path = os.path.join(project_path, autoPath)\n    # 获取文件夹下的所有图片\n    imgs = os.listdir(dir_path)\n    # 获取图片的绝对路径\n    imgs = [os.path.join(dir_path, img) for img in imgs]\n    return imgs\n\n\n# 获取某个文件\ndef find_project_file(autoPath: str) -> str:\n    \"\"\"\n    获取某个文件的绝对路径。\n\n    Args:\n        autoPath (str): 文件路径。\n\n    Returns:\n        str: 文件的绝对路径。\n\n    \"\"\"\n    project_path = os.path.dirname(os.path.dirname(__file__))\n    # 获取文件的绝对路径\n    file_path = os.path.join(project_path, autoPath)\n    return file_path\n\n\n# 在给定的autoPath中查找图片列表，并在窗口中找到这些图片的中心点\ndef find_imgs(autoPath: str) -> tuple:\n    \"\"\"\n    在给定的autoPath中查找图片列表，并在窗口中找到这些图片的中心点。\n\n    Args:\n        autoPath (str): 图片路径。\n\n    Returns:\n        tuple: 包含图片中心点的元组。\n\n    \"\"\"\n    imgs = find__img_list(autoPath)\n    # 获取窗口大小\n    center_point = finder.find_images_all(imgs)\n    return center_point\n\n\n# 在给定的autoPath中查找图片列表，并在窗口中找到这些图片的中心点\ndef find_img_target(autoPath: str) -> tuple:\n    \"\"\"\n    在给定的autoPath中查找一张图片，并在窗口中找到这个图片的中心点。\n\n    Args:\n        autoPath (str): 图片路径。\n        target: 目标。\n\n    Returns:\n        tuple: 包含图片中心点的元组。\n\n    \"\"\"\n    imgs = find_project_file(autoPath)\n    center_point = finder.find_image_all(imgs)\n    return center_point\n\n\n# 二极化匹配\ndef find_imgs_binary(autoPath: str, target):\n    target_path = find_project_file(autoPath)\n    return finder.find_one_img_screen_pubg(\n        target_path,\n        target,\n        imgopcv=0.5,\n        isgray=True,\n    )\n\n\n# 判断顶部罗盘中心的颜色\ndef find_color(x, y) -> list:\n    \"\"\"find_color(x, y) -> list\n\n    Args:\n        x (int): x坐标。\n        y (int): y坐标。\n\n    Returns:\n        list: 返回颜色的列表。\n    \"\"\"\n    target = finder.find_color(int(x), int(y))\n    return target.tolist()\n\n\n# 判断给定的颜色是否在指定的区间范围内\ndef is_in_intervals(color, intervals) -> bool:\n    \"\"\"\n    判断给定的颜色是否在指定的区间范围内。\n    Args:\n        color (list): 表示颜色的列表，包含RGB三个通道的值。\n        intervals (list): 包含颜色区间的列表，每个区间由最小值和最大值组成。\n\n    Returns:\n        bool: 如果颜色在所有通道的区间范围内，则返回True；否则返回False。\n    \"\"\"\n    for i, value in enumerate(color):\n        if not (intervals[i][0] <= value <= intervals[i][1]):\n            return False\n    return True\n\n\n# 坐标系计算函数\ndef determine_quadrant_and_distance_with_tolerance(x, y, tolerance=3):\n    # 坐标系的中心点坐标\n    center_x = 259 / 2\n    center_y = 259 / 2\n\n    # 计算与中心点的距离差\n    distance_x = x - center_x\n    distance_y = y - center_y\n\n    # 判断点是否在中心点附近\n    if abs(distance_x) <= tolerance and abs(distance_y) <= tolerance:\n        quadrant = \"中心点附近\"\n    elif distance_x == 0:  # 点在y轴上\n        quadrant = \"y轴\"\n    elif distance_y == 0:  # 点在x轴上\n        quadrant = \"x轴\"\n    else:\n        # 判断点所在的象限\n        if x > center_x and y > center_y:\n            quadrant = \"第一象限\"\n        elif x < center_x and y > center_y:\n            quadrant = \"第二象限\"\n        elif x < center_x and y < center_y:\n            quadrant = \"第三象限\"\n        elif x > center_x and y < center_y:\n            quadrant = \"第四象限\"\n\n    # 返回象限和距离差\n    return quadrant, distance_x, distance_y\n\n\ndef get_machine_code():\n    # 获取机器码\n    try:\n        # 使用wmic命令获取硬件信息\n        result = (\n            subprocess.check_output(\"wmic csproduct get uuid\", shell=True)\n            .decode()\n            .split(\"\\n\")[1]\n            .strip()\n        )\n        return result\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return None\n\n\n# 创建一个自定义的弹窗\ndef createPop(imgPath, title=\"获取CDK\"):\n    \"\"\"\n    创建一个自定义的弹窗，展示从网络获取的图片。\n    参数：\n    - imgPath:str,图片的URL路径\n    - title:str,弹窗的标题,默认为\"获取CDK\"\n    返回值：\n    无返回值\n    \"\"\"\n    # 从网络获取图片\n    response = requests.get(imgPath)\n    # 获取图片内容\n    content = response.content\n    # 将图片内容转换为QByteArray\n    image_data = bytearray(content)\n    # 创建QPixmap并从QByteArray加载图片\n    pixmap = QPixmap()\n    pixmap.loadFromData(image_data, \"JPG\")  # 指定图片格式\n    # 创建一个自定义的弹窗\n    dialog = QDialog()\n    dialog.setWindowTitle(title)\n    # 不显示问号\n    dialog.setWindowFlags(Qt.WindowCloseButtonHint)\n    # 创建一个QLabel用于展示图片\n    label = QLabel()\n    # 设置图片到QLabel\n    # 创建一个模态对话框\n    dialog.setModal(True)\n    label.setPixmap(pixmap.scaled(400, 300, Qt.KeepAspectRatio))  # 根据需要调整大小\n    # 创建一个垂直布局\n    layout = QVBoxLayout()\n    # 将QLabel添加到布局中\n    layout.addWidget(label)\n    # 设置弹窗的布局\n    dialog.setLayout(layout)\n    # 显示弹窗\n    dialog.show()\n    dialog.exec_()\n"}
{"type": "source_file", "path": "src/API/base.py", "content": "import requests\n\n\n\nbase_url = \"http://127.0.0.1:18081\"\n\n\n# 发起请求\ndef QtRequest(url, method=\"GET\", data=None):\n    \"\"\"\n    发起请求。\n\n    Args:\n        url (str): 请求的url。\n        method (str, optional): 请求的方法，默认为\"GET\"。\n        data (dict, optional): 请求的数据，默认为None。\n\n    Returns:\n        tuple: 包含状态码和数据的元组。\n\n    \"\"\"\n    match method:\n        case \"GET\":\n            response = requests.get(base_url + url)\n        case \"POST\":\n            response = requests.post(base_url + url, json=data)\n        case \"PUT\":\n            response = requests.put(base_url + url, data)\n        case \"DELETE\":\n            response = requests.delete(base_url + url)\n        case \"PATCH\":\n            response = requests.patch(base_url + url, data)\n        case _:\n            return 404, \"Not Found\"\n    return response.status_code, response.json()\n"}
{"type": "source_file", "path": "src/model/myopencv.py", "content": "import cv2\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pyautogui\n\n\nclass ImageFinder:\n    def __init__(self, imgopcv, search_area_percentages=(0, 0, 1920, 1080)):\n        self.imgopcv = imgopcv\n        self.search_area_percentages = search_area_percentages\n        self.screen_width, self.screen_height = pyautogui.size()\n\n    # 相对于某个坐标系的屏幕截取\n    def find_image_in_screen(self, image_path):\n        try:\n            # 计算截取区域的坐标\n            left = int(self.search_area_percentages[0])\n            top = int(self.search_area_percentages[1])\n            right = int(self.search_area_percentages[2])\n            bottom = int(self.search_area_percentages[3])\n\n            # 截取屏幕图像的特定区域\n            screenshot = pyautogui.screenshot(\n                region=(left, top, right - left, bottom - top)\n            )\n            screen_np = np.array(screenshot)\n            img_rgb = cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)\n            template = cv2.imdecode(\n                np.fromfile(image_path, dtype=np.uint8), cv2.IMREAD_GRAYSCALE\n            )\n            if template is None:\n                print(\n                    f\"Error loading image '{image_path}'. Check the file path and integrity.\"\n                )\n                return None\n            w, h = template.shape[::-1]\n\n            # 将屏幕图像转换为灰度图\n            img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\n\n            # 模板匹配\n            res = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)\n\n            # 设定匹配阈值\n            threshold = self.imgopcv\n            loc = np.where(res >= threshold)\n\n            # 寻找最佳匹配位置\n            if len(loc[0]) > 0:\n                # 找到最大值的索引\n                pt = np.unravel_index(\n                    res.argmax(), res.shape\n                )  # 使用 argmax 找到最大值的索引\n\n                # 计算匹配区域的中心点坐标\n                center_point = (\n                    pt[1] + w / 2,\n                    pt[0] + h / 2,\n                )  # pt[1] 是列索引，pt[0] 是行索引\n                return center_point\n            # 如果没有找到匹配，则返回None\n            return (None, None)\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return (None, None)\n\n    # 相对于整个屏幕的屏幕截取\n    def find_image_all(self, image_path):\n        try:\n            # 截取屏幕图像\n            screenshot = pyautogui.screenshot()\n            screen_np = np.array(screenshot)\n            img_rgb = cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)\n            # 读取目标图片并转换为灰度图\n            image_path = f\"{image_path}\"\n            template = cv2.imdecode(\n                np.fromfile(image_path, dtype=np.uint8), cv2.IMREAD_GRAYSCALE\n            )\n            if template is None:\n                print(\n                    f\"Error loading image '{image_path}'. Check the file path and integrity.\"\n                )\n                return None\n            w, h = template.shape[::-1]\n            # 将屏幕图像转换为灰度图\n            img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\n            # 模板匹配\n            res = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)\n            # 设定匹配阈值\n            threshold = self.imgopcv\n            loc = np.where(res >= threshold)\n            # 寻找最佳匹配位置\n            if len(loc[0]) > 0:\n                # 找到最大值的索引\n                pt = np.unravel_index(\n                    res.argmax(), res.shape\n                )  # 使用 argmax 找到最大值的索引\n\n                # 计算匹配区域的中心点坐标\n                center_point = (\n                    pt[1] + w / 2,\n                    pt[0] + h / 2,\n                )  # pt[1] 是列索引，pt[0] 是行索引\n                return center_point\n            # 如果没有找到匹配，则返回None\n            return (None, None)\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return (None, None)\n\n    # 相对于整个屏幕截取找多张图\n    def find_images_all(self, image_paths):\n        try:\n            # 计算截取区域的坐标\n            left = int(self.search_area_percentages[0])\n            top = int(self.search_area_percentages[1])\n            right = int(self.search_area_percentages[2])\n            bottom = int(self.search_area_percentages[3])\n            # 截取屏幕图像的特定区域\n            screenshot = pyautogui.screenshot(\n                region=(left, top, right - left, bottom - top)\n            )\n            screen_np = np.array(screenshot)\n            img_rgb = cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)\n\n            # 循环遍历提供的图片路径列表\n            for image_path in image_paths:\n                # image_path = plt.imread(image_path)\n                # 读取目标图片并转换为灰度图\n                image_path = f\"{image_path}\"\n                template = cv2.imdecode(\n                    np.fromfile(image_path, dtype=np.uint8), cv2.IMREAD_GRAYSCALE\n                )\n                if template is None:\n                    print(\n                        f\"Error loading image '{image_path}'. Check the file path and integrity.\"\n                    )\n                    continue  # 如果图片加载失败，跳过这张图片\n\n                w, h = template.shape[::-1]  # 获取图片的宽度和高度\n\n                # 将屏幕图像转换为灰度图\n                img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\n\n                # 模板匹配\n                res = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)\n\n                # 设定匹配阈值\n                threshold = self.imgopcv\n                loc = np.where(res >= threshold)\n\n                # 寻找最佳匹配位置\n                if len(loc[0]) > 0:\n                    # 找到最大值的索引\n                    pt = np.unravel_index(res.argmax(), res.shape)\n\n                    # 计算匹配区域的中心点坐标\n                    center_point = (pt[1] + w // 2, pt[0] + h // 2)\n                    return center_point  # 返回第一张找到的图片的中心点坐标\n\n            # 如果没有找到匹配，则返回None\n            return (None, None)\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return (None, None)\n\n    # 相对于某个坐标系 来找到 单张图\n    def find_one_img_screen_pubg(\n        self,\n        img_pas,\n        search_area_percentages,\n        imgopcv=0.5,\n        cv_type=\"COLOR_RGB2BGR\",\n        isgray=False,\n    ):\n        try:\n            cv_type_list = {\n                \"COLOR_RGB2BGR\": cv2.COLOR_RGB2BGR,\n                \"TM_CCORR_NORMED\": cv2.TM_CCORR_NORMED,\n            }\n            project_path = os.path.dirname(os.path.dirname(__file__))\n            img1_path = np.fromfile(\n                os.path.join(project_path, img_pas),\n                dtype=np.uint8,\n            )\n            img1 = cv2.imdecode(img1_path, -1)\n            # 获取图片的宽高\n            h, w = img1.shape[:2]\n            gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)\n            # 获取屏幕\n            left = int(search_area_percentages[0])\n            top = int(search_area_percentages[1])\n            right = int(search_area_percentages[2])\n            bottom = int(search_area_percentages[3])\n            # 截取屏幕图像的特定区域\n            screenshot = pyautogui.screenshot(\n                region=(left, top, right - left, bottom - top)\n            )\n            screen_np = np.array(screenshot)\n\n            # 将屏幕图像转换为灰度图\n            img_rgb = cv2.cvtColor(screen_np, cv_type_list[cv_type])\n            gray2 = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\n            # 判断是否进行二极化\n            if isgray:\n                # #########方法3，自动指定阈值，小于127是黑色，大于127是白色\n                ret, binary1 = cv2.threshold(gray1, 127, 255, cv2.THRESH_BINARY)\n                ret, binary2 = cv2.threshold(gray2, 127, 255, cv2.THRESH_BINARY)\n                res = cv2.matchTemplate(binary1, binary2, cv2.TM_CCOEFF_NORMED)\n                # cv2.imshow(\"origin\", target)\n                # print(\"yuzhi:\", ret)  # 自动计算的分割阈值\n                # cv2.imshow(\"binary\", binary)\n            else:\n                res = cv2.matchTemplate(gray2, gray1, cv2.TM_CCOEFF_NORMED)\n            # 设定匹配阈值\n            threshold = imgopcv\n            loc = np.where(res >= threshold)\n            # 寻找最佳匹配位置\n            if len(loc[0]) > 0:\n                # 找到最大值的索引\n                pt = np.unravel_index(res.argmax(), res.shape)\n                # 计算匹配区域的中心点坐标\n                center_point = (pt[1] + w // 2, pt[0] + h // 2)\n                return center_point\n            else:\n                return (None, None)\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return (None, None)\n\n    # 相对于某个坐标系 来找到 单张图 加解密\n    def find_one_img_screen_pubg_with_encryption_decryption(\n        self,\n        encrypted_img_path,\n        search_area_percentages,\n        decryption_key,\n        imgopcv=0.5,\n        cv_type=\"COLOR_RGB2BGR\",\n        isgray=False,\n    ):\n        \"\"\"相对于某个坐标系 来找到 单张图 包含加解密\n\n        Args:\n            encrypted_img_path (str): 图像加密后的路径\n            search_area_percentages (str): 解密图像的key的路径\n            decryption_key (str): 解密图像的key的路径\n            imgopcv (float, optional): 图片相似度. Defaults to 0.5.\n            cv_type (str, optional): 模板匹配类型. Defaults to \"COLOR_RGB2BGR\".\n            isgray (bool, optional): 是否使用二极化. Defaults to False.\n\n        Returns:\n            元组: 包含图片中心点的元组。(None,None) (int,int)\n        \"\"\"\n        try:\n            cv_type_list = {\n                \"COLOR_RGB2BGR\": cv2.COLOR_RGB2BGR,\n                \"TM_CCORR_NORMED\": cv2.TM_CCORR_NORMED,\n            }\n            # 加载加密的图片\n            encrypted_img = cv2.imread(encrypted_img_path, cv2.IMREAD_UNCHANGED)\n            # 使用提供的解密秘钥对图片进行解密\n            decrypted_img = self.decryption(encrypted_img, decryption_key)\n            img1 = decrypted_img\n            # 获取图片的宽高\n            h, w = img1.shape[:2]\n            gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)\n            # 获取屏幕\n            left = int(search_area_percentages[0])\n            top = int(search_area_percentages[1])\n            right = int(search_area_percentages[2])\n            bottom = int(search_area_percentages[3])\n            # 截取屏幕图像的特定区域\n            screenshot = pyautogui.screenshot(\n                region=(left, top, right - left, bottom - top)\n            )\n            screen_np = np.array(screenshot)\n\n            # 将屏幕图像转换为灰度图\n            img_rgb = cv2.cvtColor(screen_np, cv_type_list[cv_type])\n            gray2 = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\n            # 判断是否进行二极化\n            if isgray:\n                # #########方法3，自动指定阈值，小于127是黑色，大于127是白色\n                ret, binary1 = cv2.threshold(gray1, 127, 255, cv2.THRESH_BINARY)\n                ret, binary2 = cv2.threshold(gray2, 127, 255, cv2.THRESH_BINARY)\n                res = cv2.matchTemplate(binary1, binary2, cv2.TM_CCOEFF_NORMED)\n            else:\n                res = cv2.matchTemplate(gray2, gray1, cv2.TM_CCOEFF_NORMED)\n            # 设定匹配阈值\n            threshold = imgopcv\n            loc = np.where(res >= threshold)\n            # 寻找最佳匹配位置\n            if len(loc[0]) > 0:\n                # 找到最大值的索引\n                pt = np.unravel_index(res.argmax(), res.shape)\n                # 计算匹配区域的中心点坐标\n                center_point = (pt[1] + w // 2, pt[0] + h // 2)\n                return center_point\n            else:\n                return (None, None)\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return (None, None)\n\n    # 相对于整个屏幕截取找多张图 加解密\n    def find_image_all_with_encryption_decryption(\n        self,\n        image_path,\n        image_path_key,\n    ):\n        try:\n            # 截取屏幕图像\n            screenshot = pyautogui.screenshot()\n            screen_np = np.array(screenshot)\n            img_rgb = cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)  # 屏幕图像\n            # 读取目标图片并转换为灰度图\n            # 加载加密的图片\n            encrypted_img = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)\n            # 使用提供的解密秘钥对图片进行解密\n            decrypted_img = self.decryption(encrypted_img, image_path_key)\n            # 将 decrypted_img 转换为灰度图\n            template = cv2.cvtColor(decrypted_img, cv2.COLOR_BGR2GRAY)\n            if template is None:\n                print(\n                    f\"Error loading image '{image_path}'. Check the file path and integrity.\"\n                )\n                return (None, None)\n            w, h = template.shape[::-1]\n            # 将屏幕图像转换为灰度图\n            img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\n            # 模板匹配\n            res = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)\n            # 设定匹配阈值\n            threshold = self.imgopcv\n            loc = np.where(res >= threshold)\n            # 寻找最佳匹配位置\n            if len(loc[0]) > 0:\n                # 找到最大值的索引\n                pt = np.unravel_index(\n                    res.argmax(), res.shape\n                )  # 使用 argmax 找到最大值的索引\n                # 计算匹配区域的中心点坐标\n                center_point = (\n                    pt[1] + w / 2,\n                    pt[0] + h / 2,\n                )  # pt[1] 是列索引，pt[0] 是行索引\n                return center_point\n            # 如果没有找到匹配，则返回None\n            return (None, None)\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return (None, None)\n\n    # 相对于整个屏幕截取多张图 找图片 加解密\n    def find_images_all_with_encryption_decryption(self, image_paths, image_path_keys):\n        try:\n            # 计算截取区域的坐标\n            left = int(self.search_area_percentages[0])\n            top = int(self.search_area_percentages[1])\n            right = int(self.search_area_percentages[2])\n            bottom = int(self.search_area_percentages[3])\n            # 截取屏幕图像的特定区域\n            screenshot = pyautogui.screenshot(\n                region=(left, top, right - left, bottom - top)\n            )\n            screen_np = np.array(screenshot)\n            img_rgb = cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)\n\n            # 循环遍历提供的图片路径列表\n            for i, image_path in enumerate(image_paths):\n                # 读取加密的图片\n                encrypted_img = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)\n                # 使用提供的解密秘钥对图片进行解密\n                decrypted_img = self.decryption(encrypted_img, image_path_keys[i])\n                # 将 decrypted_img 转换为灰度图\n                template = cv2.cvtColor(decrypted_img, cv2.COLOR_BGR2GRAY)\n                if template is None:\n                    print(\n                        f\"Error loading image '{image_path}'. Check the file path and integrity.\"\n                    )\n                    continue\n                w, h = template.shape[::-1]\n                # 将屏幕图像转换为灰度图\n                img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\n                # 模板匹配\n                res = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)\n                # 设定匹配阈值\n                threshold = self.imgopcv\n                loc = np.where(res >= threshold)\n                # 寻找最佳匹配位置\n                if len(loc[0]) > 0:\n                    # 找到最大值的索引\n                    pt = np.unravel_index(res.argmax(), res.shape)\n                    # 计算匹配区域的中心点坐标\n                    center_point = (\n                        pt[1] + w / 2,\n                        pt[0] + h / 2,\n                    )\n                    return center_point\n            # 如果没有找到匹配，则返回None\n            return (None, None)\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return (None, None)\n\n    def decryption(self, img, key):\n        \"\"\"\n        将图像进行解密\n        :param img: 加密后的图片\n        :param key: 秘钥\n        :return: 返回一个解密后的图片\n        \"\"\"\n        img_decrypted = cv2.bitwise_xor(img, key)\n        return img_decrypted\n\n    def find_color(self, x, y):\n        try:\n            screenshot = pyautogui.screenshot()\n            screen_np = np.array(screenshot)\n            img_rgb = cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)\n            color = img_rgb[y, x]\n            return color\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return None\n\n\n# 使用示例\nif __name__ == \"__main__\":\n    finder = ImageFinder()\n    target_image_path = \"../images/kaishi.jpg\"\n    search_area_percentages = (\n        (0.1, 0.1),  # 顶部 left right\n        (0.9, 0.1),  # 底部 left right\n    )\n    result = finder.find_image_in_screen(target_image_path, search_area_percentages)\n    if result is not None:\n        print(f\"Found image at screen coordinates: {result}\")\n    else:\n        print(\"No match found.\")\n"}
{"type": "source_file", "path": "src/templates/reject.py", "content": "# -*- coding: utf-8 -*-\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nfrom PyQt5.QtWidgets import QWidget, QMessageBox\nimport sys, os\nfrom PyQt5 import QtWidgets, QtCore\nfrom PyQt5.QtCore import pyqtSignal\nfrom src.API.base import QtRequest\n\nfrom src.tools.tools import find_project_file,find_color,get_system_info,createPop\n\n\n\n# Rest of the code remains the same\nclass reject_From(QWidget):\n\n    closed = pyqtSignal()  # 自定义信号\n\n    def __init__(self, isClose=False):\n        super(reject_From, self).__init__()\n        self.version = \"v2.8.1\"\n        self.setWindowModality(QtCore.Qt.ApplicationModal)\n        self.isClose = isClose\n        self.setupUi(self)\n\n    def setupUi(self, Form):\n        self._from = Form\n        Form.setObjectName(\"Form\")\n        Form.resize(400, 220)\n        self.label = QtWidgets.QLabel(Form)\n        self.label.setGeometry(QtCore.QRect(20, 20, 359, 24))\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())\n        self.label.setSizePolicy(sizePolicy)\n        font = QtGui.QFont()\n        font.setPointSize(18)\n        self.label.setFont(font)\n        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)\n        self.label.setAlignment(QtCore.Qt.AlignCenter)\n        self.label.setObjectName(\"label\")\n        self.lineEdit = QtWidgets.QLineEdit(Form)\n        self.lineEdit.setGeometry(QtCore.QRect(30, 70, 341, 31))\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())\n        self.lineEdit.setSizePolicy(sizePolicy)\n        self.lineEdit.setObjectName(\"lineEdit\")\n        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(40, 130, 311, 51))\n        self.horizontalLayoutWidget.setObjectName(\"horizontalLayoutWidget\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(14)\n        self.pushButton.setFont(font)\n        self.pushButton.setObjectName(\"pushButton\")\n        self.horizontalLayout.addWidget(self.pushButton)\n        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(14)\n        self.pushButton_2.setFont(font)\n        self.pushButton_2.setObjectName(\"pushButton_2\")\n        self.horizontalLayout.addWidget(self.pushButton_2)\n        # 禁止窗体 放大缩小\n        Form.setFixedSize(400, 220)\n        # 禁用窗体最大化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMaximizeButtonHint, False)\n        # 禁用窗体最小化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMinimizeButtonHint, False)\n        if self.isClose:\n            # 禁用关闭按钮\n            Form.setWindowFlag(QtCore.Qt.WindowType.WindowCloseButtonHint, False)\n        self.retranslateUi(Form)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n        # 增加 获取CDK 的插槽事件\n        self.pushButton_2.clicked.connect(self.getCDK)\n        # 增加 激活 的插槽事件\n        self.pushButton.clicked.connect(self.activate)\n        # 设置窗口 icon\n        icon = QtGui.QIcon()\n        icon.addPixmap(\n            QtGui.QPixmap(\n                find_project_file(\n                    os.path.normpath(\n                        os.path.join(\n                            os.path.join(os.path.expanduser(\"~\"), \"ChickenBrothers\"),\n                            \"public/head.ico\",\n                        )\n                    )\n                )\n            ),\n            QtGui.QIcon.Mode.Normal,\n            QtGui.QIcon.State.Off,\n        )\n        Form.setWindowIcon(icon)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n\n    def retranslateUi(self, Form):\n        _translate = QtCore.QCoreApplication.translate\n        Form.setWindowTitle(_translate(\"Form\", \"激活设备/增加时间\"))\n        self.label.setText(_translate(\"Form\", \"激活设备\"))\n        self.pushButton.setText(_translate(\"Form\", \"激活\"))\n        self.pushButton_2.setText(_translate(\"Form\", \"获取CDK\"))\n        # 禁用关闭按钮\n\n    def getCDK(self):\n        image_path = \"xxxx\"  # Replace with the actual path to your image\n        # createPop(image_path)\n\n    # 激活卡密\n    def activate(self):\n        # 检查激活框\n        km_id = self.lineEdit.text()\n        if not km_id:\n            QMessageBox.warning(self, \"错误\", \"未填写卡密\")\n            return\n        window_id = get_system_info()\n        if not window_id:\n            QMessageBox.warning(self, \"错误\", \"无法获取机器码\")\n            return\n        # 激活\n        try:\n            km_id = km_id.strip()\n            _, res = QtRequest(\n                url=f\"/activate_card/{km_id}?windows_id={window_id}\",\n                method=\"PUT\",\n            )\n            print(res)\n            if res.get(\"code\") == 0:\n                if res.get(\"message\") == \"卡密已被使用\":\n                    QMessageBox.warning(self, \"错误\", \"卡密已被使用\")\n                    return\n                else:\n                    QMessageBox.information(self, \"成功\", res.get(\"message\"))\n                    self._from.close()\n            else:\n                QMessageBox.warning(self, \"错误\", res.get(\"message\"))\n                pass\n        except Exception as e:\n            QMessageBox.warning(self, \"错误\", \"未知错误\")\n\n    def closeEvent(self, event):\n        self.closed.emit()  # 发射信号\n        super(reject_From, self).closeEvent(event)\n\n\nclass reject_From_noModel(QWidget):\n    def __init__(self):\n        super(reject_From_noModel, self).__init__()\n        self.setupUi(self)\n\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(400, 220)\n        self.label = QtWidgets.QLabel(Form)\n        self.label.setGeometry(QtCore.QRect(20, 20, 359, 24))\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())\n        self.label.setSizePolicy(sizePolicy)\n        font = QtGui.QFont()\n        font.setPointSize(18)\n        self.label.setFont(font)\n        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)\n        self.label.setAlignment(QtCore.Qt.AlignCenter)\n        self.label.setObjectName(\"label\")\n        self.lineEdit = QtWidgets.QLineEdit(Form)\n        self.lineEdit.setGeometry(QtCore.QRect(30, 70, 341, 31))\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())\n        self.lineEdit.setSizePolicy(sizePolicy)\n        self.lineEdit.setObjectName(\"lineEdit\")\n        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(40, 130, 311, 51))\n        self.horizontalLayoutWidget.setObjectName(\"horizontalLayoutWidget\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(14)\n        self.pushButton.setFont(font)\n        self.pushButton.setObjectName(\"pushButton\")\n        self.horizontalLayout.addWidget(self.pushButton)\n        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(14)\n        self.pushButton_2.setFont(font)\n        self.pushButton_2.setObjectName(\"pushButton_2\")\n        self.horizontalLayout.addWidget(self.pushButton_2)\n        # 禁止窗体 放大缩小\n        Form.setFixedSize(400, 220)\n        # 禁用窗体最大化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMaximizeButtonHint, False)\n        # 禁用窗体最小化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMinimizeButtonHint, False)\n        self.retranslateUi(Form)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n        # 增加 获取CDK 的插槽事件\n        self.pushButton_2.clicked.connect(self.getCDK)\n\n    def retranslateUi(self, Form):\n        _translate = QtCore.QCoreApplication.translate\n        Form.setWindowTitle(_translate(\"Form\", \"激活设备/增加时间\"))\n        self.label.setText(_translate(\"Form\", \"激活设备\"))\n        self.pushButton.setText(_translate(\"Form\", \"激活\"))\n        self.pushButton_2.setText(_translate(\"Form\", \"获取CDK\"))\n\n    def getCDK(self):\n        image_path = \"xxxx\"  # Replace with the actual path to your image\n        # createPop(image_path)\n\n\nif __name__ == \"__main__\":\n    app = QtWidgets.QApplication(sys.argv)\n    Form = QtWidgets.QWidget()\n    ui = reject_From_noModel()\n    ui.setupUi(Form)\n    Form.show()\n    sys.exit(app.exec_())\n"}
{"type": "source_file", "path": "src/mycv/__init__.py", "content": ""}
{"type": "source_file", "path": "src/templates/init.py", "content": "from PyQt5 import QtCore, QtGui, QtWidgets\nfrom PyQt5.QtWidgets import QWidget, QMessageBox\nfrom PyQt5.QtCore import QTimer, QProcess, pyqtSignal\n\nfrom src.API.base import QtRequest\nfrom src.templates.reject import reject_From\nimport ctypes, win32gui, subprocess, os\nimport src.tools.tools as mytools\nfrom src.templates.window import window_Form\nimport requests, zipfile\n\nfrom src.tools.tools import find_project_file, find_color, get_system_info,determine_quadrant_and_distance_with_tolerance\n\n\n\nclass MySignalClass(QtCore.QObject):\n    # 定义一个信号\n    valueChanged = pyqtSignal(int)\n\n\nclass MySignalClass2(QtCore.QObject):\n    # 定义一个信号\n    valueChanged = pyqtSignal(str)\n\n\nclass init_Form(QWidget):\n\n    def __init__(self):\n        super(init_Form, self).__init__()\n        self.version = \"v2.8.1\"\n        self.setupUi(self)\n        QTimer.singleShot(200, self.on_window_shown)\n\n    def setupUi(self, Form):\n        self._from = Form\n        Form.setObjectName(\"Form\")\n        Form.resize(454, 215)\n        self.label = QtWidgets.QLabel(Form)\n        self.label.setGeometry(QtCore.QRect(0, 60, 454, 21))\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.label.setFont(font)\n        self.label.setObjectName(\"label\")\n        self.progressBar = QtWidgets.QProgressBar(Form)\n        self.progressBar.setGeometry(QtCore.QRect(110, 100, 241, 31))\n        self.progressBar.setProperty(\"value\", 0)\n        self.progressBar.setObjectName(\"progressBar\")\n        # 禁止窗体 放大缩小\n        Form.setFixedSize(454, 215)\n        # 禁用窗体最大化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMaximizeButtonHint, False)\n        # 禁用窗体最小化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMinimizeButtonHint, False)\n        self.retranslateUi(Form)\n        # 设置窗口 icon\n        icon = QtGui.QIcon()\n        icon.addPixmap(\n            QtGui.QPixmap(\n                find_project_file(\n                    os.path.normpath(\n                        os.path.join(\n                            os.path.join(os.path.expanduser(\"~\"), \"ChickenBrothers\"),\n                            \"public/head.ico\",\n                        )\n                    )\n                )\n            ),\n            QtGui.QIcon.Mode.Normal,\n            QtGui.QIcon.State.Off,\n        )\n        Form.setWindowIcon(icon)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n        # 创建信号类实例\n        self.signal_emitter = MySignalClass()\n        # 连接信号到槽函数\n        self.signal_emitter.valueChanged.connect(self.updateProgressBar)\n        self.updatelabels = MySignalClass2()\n        self.updatelabels.valueChanged.connect(self.label.setText)\n        # self.on_window_shown()\n        # QTimer.singleShot(1, self.on_window_shown)\n\n    def updateProgressBar(self, value):\n        # 槽函数，更新进度条的值\n        self.progressBar.setValue(value)\n\n    def retranslateUi(self, Form):\n        _translate = QtCore.QCoreApplication.translate\n        Form.setWindowTitle(_translate(\"Form\", \"吃鸡兄弟-预检查\"))\n        self.label.setText(_translate(\"Form\", \"预检查\"))\n        # 设置 self.label 的宽度为百分百\n        self.label.setFixedWidth(454)\n        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)\n\n    def on_window_shown(self):\n        # 检查redis是否开启 且 可以连接\n        if self.redisState():\n            self.signal_emitter.valueChanged.emit(20)\n        else:\n            self._from.close()\n            return\n        # 检查Windows屏幕分辨率\n        if self.check_windows_resolution():\n            self.signal_emitter.valueChanged.emit(40)\n        else:\n            self._from.close()\n            return\n        # 检查设备与网络连接\n        # if self.check_connectivity():\n        #     self.signal_emitter.valueChanged.emit(50)\n        # else:\n        #     self._from.close()\n        #     return\n        # # 检查图片资源是否存在\n        # if self.loading_images():\n        #     self.signal_emitter.valueChanged.emit(80)\n        # else:\n        #     self._from.close()\n        #     return\n        # # 检查ocr\n        # if self.check_ocr_new():\n        #     self.signal_emitter.valueChanged.emit(100)\n        # else:\n        #     self._from.close()\n        #     return\n        # 都通过后 展示主窗体\n        self.window_Form = window_Form()\n        self._from.close()\n        self.window_Form.show()\n\n    # 检查Windows屏幕分辨率\n    def check_windows_resolution(self):\n        user32 = ctypes.windll.user32\n        width = user32.GetSystemMetrics(0)\n        height = user32.GetSystemMetrics(1)\n        # print(width, height)\n        return True\n        _width = 3840\n        _height = 2160\n        _width = 1920\n        _height = 1080\n        # 如果主屏幕分辨率 不是 1920 * 1080 的话 弹出弹窗 提示 分辨率错误\n        if width != _width or height != _height:\n            QMessageBox.warning(\n                self, \"错误\", f\"请将屏幕分辨率设置为 {_width} * {_height}\"\n            )\n            self._from.close()\n            return False\n        else:\n            return True\n\n    # 检查游戏是否开启\n    def check_game_open(self):\n        hwnd = win32gui.FindWindow(None, \"TslGame\")\n        if hwnd == 0:\n            QMessageBox.warning(self, \"错误\", \"请先开启游戏！\")\n            # ctypes.windll.user32.MessageBoxW(0, \"请先开启游戏！\", \"游戏未开启\", 0)\n            # self._from.close()\n            return False\n        else:\n            return True\n\n    # 连通性检测\n    def check_connectivity(self):\n        match_code = get_system_info()\n        if match_code:\n            try:\n                codelogin, reslogin = QtRequest(f\"/check_login/{match_code}\", \"GET\")\n                if reslogin.get(\"code\") < 0:\n                    # 用户已登录\n                    QMessageBox.warning(self, \"错误\", reslogin.get(\"message\"))\n                    self._from.close()\n                    return\n                code, res = QtRequest(f\"/check_expiry/{match_code}\", \"GET\")\n                if res.get(\"code\") >= 0:\n                    if res.get(\"message\") == \"用户已到期\":\n                        # 关闭当前窗口 展示 reject_From 窗口\n                        self.reject_From = reject_From()\n                        self.reject_From.show()\n                        self._from.close()\n                    else:\n                        return True\n                else:\n                    self.reject_From = reject_From()\n                    self.reject_From.show()\n                    self._from.close()\n            except Exception as e:\n                print(\"请求出现错误\", e)\n                QMessageBox.warning(self, \"错误\", \"网络连接失败,请检查你的DNS\")\n                self._from.close()\n                return False\n        else:\n            QMessageBox.warning(self, \"错误\", \"无法获取机器码\")\n            self._from.close()\n            return False\n        pass\n\n    # 检查redis是否开启 且 可以连接\n    def redisState(self):\n        try:\n            process = QProcess()\n            # 尝试获取Redis进程列表\n            process.start('tasklist /fi \"imagename eq redis-server.exe\"')\n            process.waitForFinished()  # 等待命令执行完成\n            # 获取命令执行的输出\n            output = process.readAll()\n            # 使用系统默认编码尝试解码输出\n            try:\n                output_str = output.data().decode(\"cp1252\")  # 尝试使用cp1252编码\n            except UnicodeDecodeError as e:\n                print(\"错误1\", e)\n                QMessageBox.warning(self, \"错误\", \"redis检查失败，请检查是否安装redis\")\n                self._from.close()\n                return False\n            # 检查输出中是否包含redis-server.exe\n            if \"redis-server.exe\" in output_str:\n                return True\n            else:\n                QMessageBox.warning(self, \"错误\", \"redis检查失败，请检查是否安装redis\")\n                return False\n        except Exception as e:\n            print(\"错误\", e)\n            QMessageBox.warning(self, \"错误\", \"redis检查失败，请检查是否安装redis\")\n            self._from.close()\n            return False\n\n    # 检查图片资源是否存在\n    def loading_images(self):\n        # try:\n        # 获取资源列表\n        httpurl = \"xxxxx\"\n        files_list = QtRequest(\"/get_files\", \"GET\")\n        if int(files_list[0]) != 200:\n            QMessageBox.warning(self, \"错误\", \"获取资源列表失败\")\n            return False\n        if int(files_list[1].get(\"code\")) < 0:\n            QMessageBox.warning(self, \"错误\", \"获取资源列表失败\")\n            return False\n        _list = files_list[1].get(\"data\")\n        global_images_path = os.path.join(os.path.expanduser(\"~\"), \"ChickenBrothers\")\n        no_load_files = []\n        # 循环判断 _list 中的文件是否存在\n        for file in _list:\n            save_path = os.path.normpath(os.path.join(global_images_path, file))\n            if not os.path.exists(save_path):\n                # 将 public\\death\\2.png 格式的路径格式化为 url\n                url = f\"{httpurl}/{os.path.basename(file)}\".replace(\"\\\\\", \"/\")\n                print(url)\n                no_load_files.append({\"url\": url, \"save_path\": save_path})\n                # 记录不存在文件的名称\n        if len(no_load_files) > 0:\n            self.updatelabels.valueChanged.emit(\"正在下载资源...\")\n            # 下载图片资源\n            for i, file in enumerate(no_load_files):\n                _file = requests.get(file[\"url\"]).content\n                if not os.path.exists(os.path.dirname(file[\"save_path\"])):\n                    os.makedirs(os.path.dirname(file[\"save_path\"]))\n                # 将图片保存到指定路径的指定文件\n                with open(file[\"save_path\"], \"wb\") as f:\n                    f.write(_file)\n                # 更新进度条\n                self.signal_emitter.valueChanged.emit(\n                    int((i + 1) / len(no_load_files) * 100)\n                )\n        return True\n\n    # 检查是否包含ocr\n    def check_ocr(self):\n        global_images_path = os.path.join(os.path.expanduser(\"~\"), \"ChickenBrothers\")\n        ocr_file = os.path.join(global_images_path, \"ocr\", \"tesseract.exe\")\n        httpurl = \"xxxxx\"\n        # 判断是否有这个文件\n        if not os.path.exists(ocr_file):\n            # 下载 httpurl 文件\n            # 下载文件\n            try:\n                # 下载文件\n                _file = requests.get(httpurl).content\n                # 将图片保存到指定路径的指定文件\n                with open(global_images_path, \"wb\") as f:\n                    f.write(_file)\n                # windows解压文件\n                subprocess.Popen(\n                    f\"tar -xf {global_images_path} -C {global_images_path}\",\n                    shell=True,\n                )\n                return True\n            except Exception as e:\n                print(\"错误\", e)\n                QMessageBox.warning(self, \"错误\", \"资源下载失败\")\n                return False\n\n    # 检查是否包含ocr\n    def check_ocr_new(self):\n        global_images_path = os.path.join(\n            os.path.expanduser(\"~\"), \"ChickenBrothers\", \"ocr.zip\"\n        )\n        ocr_file = os.path.join(\n            os.path.expanduser(\"~\"), \"ChickenBrothers\", \"ocr\", \"tesseract.exe\"\n        )\n        ocr_directory = os.path.join(os.path.expanduser(\"~\"), \"ChickenBrothers\", \"ocr\")\n        httpurl = \"xxxxx\"\n\n        # 判断是否有这个文件\n        if not os.path.exists(ocr_file):\n            try:\n                self.updatelabels.valueChanged.emit(\"正在下载资源...\")\n                # 下载文件并显示进度条\n                response = requests.get(httpurl, stream=True)\n                total_length = int(response.headers.get(\"content-length\", 0))\n\n                with open(global_images_path, \"wb\") as f:\n                    dl = 0\n                    for chunk in response.iter_content(chunk_size=4096):\n                        if chunk:\n                            f.write(chunk)\n                            dl += len(chunk)\n                            done = int(100 * dl / total_length)\n                            # 更新进度条\n                            self.signal_emitter.valueChanged.emit(done)\n                # 使用 zipfile 解压文件到指定目录\n                with zipfile.ZipFile(global_images_path, 'r') as zip_ref:\n                    zip_ref.extractall(ocr_directory)\n                return True\n            except Exception as e:\n                print(\"错误\", e)\n                QMessageBox.warning(self, \"错误\", \"资源下载失败\")\n                return False\n        else:\n            return True\n\n    # except Exception as e:\n    # print(\"错误\", e)\n    # QMessageBox.warning(self, \"错误\", \"资源下载失败\")\n    # return False\n"}
{"type": "source_file", "path": "src/templates/login.py", "content": "# -*- coding: utf-8 -*-\n\n#\n# Created by: PyQt5 UI code generator 5.15.10\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic5 is\n# run again.  Do not edit this file unless you know what you are doing.\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nfrom PyQt5.QtWidgets import QWidget, QMessageBox\nfrom PyQt5.QtCore import QTimer, QProcess, pyqtSignal, QThread\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nimport src.tools.tools as mytools\n\nimport os, re, sys, json\n\nfind_project_file = mytools.find_project_file\n\n\nclass LoginThread(QThread):\n    result = pyqtSignal(object)\n    error = pyqtSignal(str)\n\n    def __init__(self, email, password):\n        super().__init__()\n        self.email = email\n        self.password = password\n\n    def run(self):\n       pass\n\n\nclass Ui_Login(QWidget):\n\n    pip_user_id = pyqtSignal(str)\n\n    def __init__(self):\n        super(Ui_Login, self).__init__()\n        self.setupUi(self)\n\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(571, 289)\n        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(170, 90, 251, 31))\n        self.horizontalLayoutWidget.setObjectName(\"horizontalLayoutWidget\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)\n        self.label.setObjectName(\"label\")\n        self.horizontalLayout.addWidget(self.label)\n        self.lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.lineEdit.setFont(font)\n        self.lineEdit.setObjectName(\"lineEdit\")\n        self.horizontalLayout.addWidget(self.lineEdit)\n        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(170, 140, 251, 31))\n        self.horizontalLayoutWidget_2.setObjectName(\"horizontalLayoutWidget_2\")\n        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)\n        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_2.setObjectName(\"horizontalLayout_2\")\n        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)\n        self.label_2.setObjectName(\"label_2\")\n        self.horizontalLayout_2.addWidget(self.label_2)\n        self.lineEdit_2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.lineEdit_2.setFont(font)\n        self.lineEdit_2.setObjectName(\"lineEdit_2\")\n        self.horizontalLayout_2.addWidget(self.lineEdit_2)\n        self.pushButton = QtWidgets.QPushButton(Form)\n        self.pushButton.setGeometry(QtCore.QRect(250, 190, 91, 41))\n        font = QtGui.QFont()\n        font.setPointSize(14)\n        self.pushButton.setFont(font)\n        self.pushButton.setObjectName(\"pushButton\")\n        self.label_3 = QtWidgets.QLabel(Form)\n        self.label_3.setGeometry(QtCore.QRect(220, 20, 141, 41))\n        font = QtGui.QFont()\n        font.setPointSize(18)\n        self.label_3.setFont(font)\n        self.label_3.setTextFormat(QtCore.Qt.RichText)\n        self.label_3.setAlignment(QtCore.Qt.AlignCenter)\n        self.label_3.setObjectName(\"label_3\")\n\n        self.retranslateUi(Form)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n\n    def retranslateUi(self, Form):\n        # 禁止窗体 放大缩小\n        Form.setFixedSize(571, 289)\n        # 禁用窗体最大化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMaximizeButtonHint, False)\n        # 禁用窗体最小化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMinimizeButtonHint, False)\n        # 设置窗口 icon\n        icon = QtGui.QIcon()\n        icon.addPixmap(\n            QtGui.QPixmap(\n                find_project_file(\n                    os.path.normpath(\n                        os.path.join(\n                            os.path.join(os.path.expanduser(\"~\"), \"ChickenBrothers\"),\n                            \"public/head.ico\",\n                        )\n                    )\n                )\n            ),\n            QtGui.QIcon.Mode.Normal,\n            QtGui.QIcon.State.Off,\n        )\n        Form.setWindowIcon(icon)\n        _translate = QtCore.QCoreApplication.translate\n        Form.setWindowTitle(_translate(\"Form\", \"云账号登录\"))\n        self.label.setText(_translate(\"Form\", \"账号：\"))\n        self.label_2.setText(_translate(\"Form\", \"密码：\"))\n        self.pushButton.setText(_translate(\"Form\", \"登录\"))\n        self.label_3.setText(_translate(\"Form\", \"云账号登录\"))\n        self.changeBind()\n\n    def changeBind(self):\n        self.pushButton.clicked.connect(self.login)\n        # 设置输入框默认值\n        # self.lineEdit.setText(\"zhangqiaoqing2001@gmail.com\")\n        # 设置密码框默认值\n        # self.lineEdit_2.setText(\"Tiancity2164.\")\n\n    def login(self):\n        try:\n            # 修改按钮文字\n            self.pushButton.setText(\"登录中...\")\n            # 禁用所有输入框和按钮\n            self.lineEdit.setEnabled(False)\n            self.lineEdit_2.setEnabled(False)\n            self.pushButton.setEnabled(False)\n            account = self.lineEdit.text()\n            password = self.lineEdit_2.text()\n            if re.match(r\"^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$\", account):\n                self.thread = LoginThread(account, password)\n                self.thread.result.connect(self.on_login_success)\n                self.thread.error.connect(self.on_login_error)\n                self.thread.start()\n            else:\n                QMessageBox.warning(self, \"错误\", \"请输入正确的邮箱地址\")\n        except:\n            QMessageBox.warning(self, \"错误\", \"登录失败\")\n\n    def on_login_success(self, auth_response):\n        print(auth_response)\n        print(auth_response.user.id)\n        # 登录成功处理\n        QMessageBox.information(self, \"成功\", \"登录成功！\")\n        self.lineEdit.setEnabled(True)\n        self.lineEdit_2.setEnabled(True)\n        self.pushButton.setEnabled(True)\n        self.pushButton.setText(\"登录\")\n        self.pip_user_id.emit(auth_response.user.id)\n        self.close()\n\n    def on_login_error(self, error_message):\n        # 显示错误信息\n        QMessageBox.warning(self, \"错误\", error_message)\n        self.lineEdit.setEnabled(True)\n        self.lineEdit_2.setEnabled(True)\n        self.pushButton.setEnabled(True)\n        self.pushButton.setText(\"登录\")\n        self.pip_user_id.emit(\"\")\n\n    def closeEvent(self, event):\n        self.pip_user_id.emit(\"\")  # 发射信号\n        super(Ui_Login, self).closeEvent(event)\n\n\nif __name__ == \"__main__\":\n\n    app = QtWidgets.QApplication(sys.argv)\n    Form = QtWidgets.QWidget()\n    ui = Ui_Login()\n    ui.setupUi(Form)\n    Form.show()\n    sys.exit(app.exec_())\n"}
{"type": "source_file", "path": "src/model/myredis.py", "content": "import redis\n\n\nclass RedisWrapper:\n    def __init__(self, host=\"localhost\", port=6379, db=0):\n        \"\"\"\n        初始化RedisWrapper对象。\n\n        Args:\n            host (str, optional): Redis服务器的主机名。默认为\"localhost\"。\n            port (int, optional): Redis服务器的端口号。默认为6379。\n            db (int, optional): Redis数据库的索引。默认为0。\n        \"\"\"\n        self.redis_client = redis.Redis(host=host, port=port, db=db, ssl=False)\n\n    def set(self, key, value):\n        \"\"\"\n        将指定的键值对存储到Redis中。\n\n        Args:\n            key (str): 要存储的键。\n            value (str): 要存储的值。\n        \"\"\"\n        self.redis_client.set(key, value)\n\n    def get(self, key):\n        \"\"\"\n        从Redis中获取指定键的值。\n\n        Args:\n            key (str): 要获取值的键。\n\n        Returns:\n            str: 指定键的值，如果键不存在则返回None。\n        \"\"\"\n        return self.redis_client.get(key)\n\n    def delete(self, key):\n        \"\"\"\n        从Redis中删除指定的键值对。\n\n        Args:\n            key (str): 要删除的键。\n        \"\"\"\n        self.redis_client.delete(key)\n\n    def update(self, key, value):\n        \"\"\"\n        更新Redis中指定键的值。\n\n        如果键存在，则更新其对应的值为指定的值；如果键不存在，则抛出KeyError异常。\n\n        Args:\n            key (str): 要更新的键。\n            value (str): 新的值。\n\n        Raises:\n            KeyError: 如果指定的键在Redis中不存在。\n        \"\"\"\n        if self.redis_client.exists(key):\n            self.redis_client.set(key, value)\n        else:\n            raise KeyError(f\"键 '{key}' 在Redis中不存在。\")\n\n    def flushall(self):\n        \"\"\"\n        清空Redis中的所有键值对。\n        \"\"\"\n        self.redis_client.flushdb()\n"}
{"type": "source_file", "path": "src/model/gameClass.py", "content": "from time import sleep\nfrom src.tools.tools import (\n    find_imgs,\n    find_img_target,\n    find_color,\n    find_imgs_binary,\n    determine_quadrant_and_distance_with_tolerance,\n    find__img_list,\n    find_img_target_relative,\n    findColorTarget2,\n)\nfrom src.model.myredis import RedisWrapper\nimport multiprocessing\nimport json, random, win32con, win32api, time, math, pydirectinput\nfrom src.API.base import QtRequest\nimport cv2\nimport numpy as np\nfrom PIL import ImageGrab, Image\nimport os\nfrom datetime import datetime\nimport pytesseract\n\npydirectinput.FAILSAFE = False\nglobal_images_path = os.path.join(os.path.expanduser(\"~\"), \"ChickenBrothers\")\n\npytesseract.pytesseract.tesseract_cmd = os.path.join(\n    global_images_path, \"ocr\", \"tesseract.exe\"\n)\n\n\nclass PUBGClass:\n    def __init__(\n        self,\n        maps,\n        windows_id,\n        pip_user_id=None,\n        randomMap=False,\n        planeTime=30,\n        bpImageSavePath=None,\n        ImageSavaPath=None,\n    ) -> None:\n        self.version = \"v2.8.1\"\n        self.maps = maps  # 地图数据\n        self.randomMap = randomMap  # 随机标点\n        self.planeTime = planeTime  # 跳伞延迟时间\n        self.loopStart = multiprocessing.Value(\"b\", False)\n        self.loopTow = multiprocessing.Value(\"b\", False)\n        self.windows_id = windows_id\n        self.bpImageSavePath = bpImageSavePath\n        self.ImageSavaPath = ImageSavaPath\n        self.pip_user_id = pip_user_id\n\n        # 同步统计信息\n        game_manger = multiprocessing.Manager()\n        self.game_dict = game_manger.dict(\n            {\n                \"map_name\": \"\",  # 点位名称\n                \"map_\": \"\",  # 地图\n                \"start_time\": \"\",  # 开始时间\n                \"bp\": 0,  # bp数量\n                \"death_time\": \"\",  # 死亡时间\n                \"windows_id\": self.windows_id,  # 机器码\n                \"version\": self.version,  # 版本号\n                \"user_id\": self.pip_user_id,  # 用户id\n            }\n        )\n        pass\n\n    # 开始游戏 和 结束游戏 的进程\n    def playHomeLoop(self):\n        \"\"\"\n        用于检查是否在主页，如果在主页则开始游戏。\n        如果为在主页则检查其他错误情况/弹窗。\n        \"\"\"\n        self.loopStart.value = True\n        errorMaps = find__img_list(\"public\\\\error\")\n        myredis = RedisWrapper()\n        myredis.flushall()\n        myredis.set(\"classState\", \"开始挂机\")\n        # 开启一个主循环\n        while self.loopStart.value:\n            try:\n                # 是否在主页\n                if self.isMainPage():\n                    while self.loopStart.value:\n                        for item in errorMaps:\n                            # 426,154,1429,797,宽高(1003,643)\n                            positions = find_imgs_binary(\n                                item, (426, 154, 1429, 797), 0.7\n                            )\n                            print(\"检查弹窗\", positions)\n                            if positions[0] is not None:\n                                myredis.set(\"classState\", \"有弹窗需要点击\")\n                                pydirectinput.moveTo(\n                                    positions[0] + 426, positions[1] + 154\n                                )\n                                sleep(1)\n                                pydirectinput.click()\n                                sleep(1)\n                        break\n                    # 清空 redis 的所有值\n                    myredis.flushall()\n                    self.startGame()  # 开始游戏\n                    # 设置为已点击开始游戏 按钮\n                else:\n                    # 是否死亡\n                    self.characherDeath()  # 检查死亡\n                # 循环的延迟\n                sleep(1)\n            except Exception as e:\n                print(\"错误\", e)\n                self.updateErrors(e)\n                myredis.set(\"classState\", f\"出现异常-如果影响游戏正常流程，请反馈\")\n                sleep(1)\n\n    # 开始游戏后，游戏中的主进程\n    def gameMainLoop(self):\n        # print(\"gameMainLoop\")\n        myredis = RedisWrapper()\n        myredis.set(\"classState\", \"开始挂机-2\")\n        while self.loopStart.value:\n            print(\"挂机中\")\n            # myredis.set(\"classState\", \"挂机中\")\n            try:\n                if self.loopTow.value:\n                    self.waitGame()  # 检查是否在等待状态\n                    self.inPlane()  # 检查是否在飞机上 在的话 等待跳伞\n                sleep(1)\n            except Exception as e:\n                self.updateErrors(e)\n                myredis.set(\"classState\", f\"出现异常-如果影响游戏正常流程，请反馈\")\n                sleep(1)\n\n    def updateErrors(self, error):\n        version = self.version\n        err = str(error)\n        print(res)\n\n    def stop(self):\n        myredis = RedisWrapper()\n        myredis.flushall()\n        self.loopStart.value = False\n        self.loopTow.value = False\n\n    # 判断我们是否在主页\n    def isMainPage(self):\n        positions = find_imgs(\"public\\\\home\")\n        if positions[0] is not None:\n            return True\n        else:\n            return False\n\n    # 开始游戏\n    def startGame(self):\n        positions = find_imgs(\"public\\\\startGame\")\n        if positions[0] is not None:\n            pydirectinput.moveTo(positions[0], positions[1])\n            sleep(1)\n            pydirectinput.click()\n            self.loopTow.value = True\n            return\n\n    # 落地死亡后\n    def characherDeath(self):\n        myredis = RedisWrapper()\n        # 检查是否死亡\n        while self.loopStart.value:\n            positions = find_imgs(\"public\\\\death\")\n            if positions[0] is None:\n                break\n            else:\n                if self.bpImageSavePath:\n                    # 判断是否有 bp 那张图\n                    positions_bp = find_img_target_relative(\n                        \"public\\\\bp\\\\bp.jpg\", (92, 281, 237, 342), 0.8\n                    )\n                    if positions_bp[0] is not None:\n                        self.capture_screen_region(\n                            92, 281, 145, 61, self.bpImageSavePath, \"BP图片\"\n                        )\n\n                # 上报数据\n                if self.pip_user_id:\n                    # 判断是否有 bp 那张图\n                    positions_bp = find_img_target_relative(\n                        \"public\\\\bp\\\\bp.jpg\", (92, 281, 237, 342), 0.8\n                    )\n                    if positions_bp[0] is not None:\n                        # 记录bp数量\n                        self.game_dict[\"bp\"] = self.get_bp_nums(92, 281, 145, 61)\n                        # 记录死亡时间\n                        self.game_dict[\"death_time\"] = datetime.now().strftime(\n                            \"%Y-%m-%d %H:%M:%S\"\n                        )\n                        # _, res = QtRequest(\n                        #     \"/cloud_account_report\", \"POST\", data=dict(self.game_dict)\n                        # )\n                        # # print(\"上报数据\", self.pip_user_id, dict(self.game_dict))\n                        # if res and res.get(\"code\") == -1:\n                        #     myredis.set(\"classState\", \"上报数据异常\")\n                        #     time.sleep(2)\n                        # else:\n                        #     myredis.set(\"classState\", \"提交数据成功\")\n                        #     time.sleep(1)\n\n                # print(\"死亡\")\n                myredis.set(\"classState\", \"死亡\")\n                myredis.set(\"kill\", \"1\")\n                self.loopTow.value = False\n                pydirectinput.moveTo(positions[0], positions[1])\n                sleep(1)\n                pydirectinput.click()\n                pass\n            sleep(1)\n\n    # 广场等待\n    def waitGame(self):\n        myredis = RedisWrapper()\n        # 读取是否开始游戏\n        start = myredis.get(\"wait\")\n        while self.loopTow.value and start is None:\n            positions = find_imgs(\"public\\\\wait\")\n            if positions[0] is not None:\n                try:\n                    myredis.set(\"classState\", \"在出生岛等待\")\n                    # 更新 记录数据 开始时间\n                    self.game_dict[\"start_time\"] = datetime.now().strftime(\n                        \"%Y-%m-%d %H:%M:%S\"\n                    )\n                    # 开地图 判断是那张地图\n                    pydirectinput.moveTo(300, 300)\n                    sleep(1)\n                    pydirectinput.click()\n                    sleep(1)\n                    pydirectinput.press(\"m\")\n                    map_name = self.checkMap()  # 当前地图名称\n                    if map_name is not None:\n                        myredis.set(\"classState\", f\"获取到的地图名称 {map_name}\")\n                        map_data = self.maps[map_name]  # 当前地图数据\n                        # 根据 map_data 的数组长度 随机取值\n                        map_number = random.randint(0, len(map_data) - 1)\n                        # 本局点位\n                        # 判断是否是随机抽取点位\n                        if self.randomMap and len(map_data) > 1:\n                            # 随机抽取点位\n                            myredis.set(\"dies\", json.dumps(map_data[map_number]))\n                        else:\n                            map_number = 0\n                            # 将点位存入 dies\n                            myredis.set(\"dies\", json.dumps(map_data[0]))\n                        # 开始标记第一个点\n                        _map_data = map_data[map_number]\n                        self.game_dict[\"map_name\"] = _map_data.get(\"name\")\n                        pydirectinput.moveTo(\n                            _map_data.get(\"dian1\").get(\"x\"),\n                            _map_data.get(\"dian1\").get(\"y\"),\n                        )\n                        sleep(1)\n                        # 右键标记目标点\n                        pydirectinput.rightClick()\n                        # 缩放滚轮打开详细位置\n                        self.mouse_scroll_up(30)\n                        sleep(1)\n                        # 关闭地图\n                        pydirectinput.press(\"m\")\n                        sleep(1)\n                        # 切换第一人称\n                        pydirectinput.press(\"v\")\n                        # 向 redis 存入 当前已经开始游戏\n                        myredis.set(\"wait\", \"1\")\n                        myredis.set(\"classState\", \"标点结束-现在应该是第一人称\")\n                        break\n                    else:\n                        pydirectinput.press(\"m\")\n                        self.game_end_funtion()\n                        myredis.set(\"wait\", \"1\")\n                        myredis.set(\"classState\", \"没找到地图数据-啥也不干\")\n                        break\n                except Exception as e:\n                    print(\"错误\", e)\n                    myredis.set(\"wait\", \"1\")\n                    myredis.set(\"classState\", \"没找到地图数据-啥也不干\")\n                    break\n            else:\n                print(\"不处于等待\")\n                myredis.set(\"classState\", \"不处于等待\")\n                break\n\n    # 是否在飞机上\n    def inPlane(self):\n        # 判断是否在飞机上\n        positions = find_imgs(\"public\\\\inPlane\")\n        if positions[0] is not None:\n            start_time = time.time()  # 开始时间\n            while self.loopTow.value:\n                if time.time() - start_time > self.planeTime:\n                    # 到时间了 要跳伞\n                    start_time = time.time()\n                    myredis = RedisWrapper()\n                    while self.loopTow.value:\n                        kill = myredis.get(\"kill\")\n                        if kill is not None:\n                            return\n                        if time.time() - start_time > 60:\n                            myredis.set(\"classState\", \"寻找目标点超时\")\n                            return\n                        result = findColorTarget2(x=960, y=35, length=140)\n                        if result:\n                            break\n                        else:\n                            win32api.mouse_event(\n                                win32con.MOUSEEVENTF_MOVE, int(15) * 20, 0\n                            )\n                    pydirectinput.press(\"f\")\n                    self.jump()  # 跳伞后 寻找目标点 找到目标点后 开启降落伞\n                    break\n                else:\n                    sleep(1)\n\n    # 开始跳伞\n    def jump(self):\n        myredis = RedisWrapper()\n        luodi = myredis.get(\"luodi\")\n        if luodi is not None:\n            return\n        # 寻找目标点\n        # self.findTarget(20)\n        start_time = time.time()\n        # start_time_key = 14\n        while self.loopTow.value:\n            kill = myredis.get(\"kill\")\n            if kill is not None:\n                return\n            if time.time() - start_time > 60:\n                myredis.set(\"classState\", \"寻找目标点超时\")\n                return\n            result = findColorTarget2(x=960, y=35, length=1)\n            if result:\n                break\n            else:\n                win32api.mouse_event(win32con.MOUSEEVENTF_MOVE, 20, 0)\n                time.sleep(0.2)\n        # 找到目标点后 延迟5秒 按f\n        for i in range(14):\n            if self.loopTow.value == False:\n                return\n            pydirectinput.press(\"f\")\n            # print(\"跳伞\")\n            myredis.set(\"classState\", \"跳伞\")\n            sleep(1)\n        # 按下 ctrl + w 向目标点飞行\n        pydirectinput.keyDown(\"ctrl\")\n        pydirectinput.keyDown(\"w\")\n        while self.loopTow.value:\n            if findColorTarget2(881, 35, 160) is None:\n                pydirectinput.keyUp(\"ctrl\")\n                break\n\n        # 判断右下角是否有目标点\n        # count = 0\n        # _find_target_start_time = time.time()\n        # while self.loopTow.value:\n        #     if time.time() - _find_target_start_time > 600:\n        #         print(\"寻找目标点超时\")\n        #         myredis.set(\"classState\", \"寻找目标点超时-这局放弃\")\n        #         myredis.set(\"luodi\", \"1\")\n        #         self.loopTow.value = False\n        #         return\n        #     tx, ty = find_imgs_binary(\n        #         \"public\\\\target\\\\dianpng.png\",\n        #         (1628, 792, 1890, 1052),\n        #     )\n        #     if tx and ty:\n        #         count += 1\n        #         if count > 5:\n        #             # 确定小地图有目标点\n        #             pydirectinput.keyUp(\"ctrl\")\n        #             quadrant, _, _ = determine_quadrant_and_distance_with_tolerance(\n        #                 tx, ty + 10, 50\n        #             )\n        #             if quadrant == \"中心点附近\":\n        #                 break\n        #     else:\n        #         # 判断是否落地\n        #         positions = find_imgs_binary(\n        #             \"public\\\\landing\\\\1920_luodi_game2.png\", (688, 966, 750, 1037), 0.7\n        #         )\n        #         if positions[0] is not None:\n        #             print(\"提前落地\")\n        #             myredis.set(\"classState\", \"并未到达目标点提前落地-这局放弃\")\n        #             # 并未到达目标点提前落地\n        #             pydirectinput.keyUp(\"a\")\n        #             pydirectinput.keyUp(\"w\")\n        #             pydirectinput.keyUp(\"ctrl\")\n        #             myredis.set(\"luodi\", \"1\")\n        #             return\n        #     sleep(1)\n        # 开始落地\n        # print(\"开始落地\")\n        myredis.set(\"classState\", \"开始落地\")\n        pydirectinput.keyUp(\"ctrl\")\n        pydirectinput.keyDown(\"a\")\n        _find_luodi_start_time = time.time()\n        while self.loopTow.value:\n            if time.time() - _find_luodi_start_time > 600:\n                myredis.set(\"classState\", \"寻找落地点超时-这局放弃\")\n                myredis.set(\"luodi\", \"1\")\n                self.game_end_funtion()\n                self.loopTow.value = False\n                return\n            # 判断是否落地\n            positions = find_imgs_binary(\n                \"public\\\\landing\\\\1920_luodi_game2.png\",\n                (688, 966, 750, 1037),\n                0.7,\n            )\n            if positions[0] is not None:\n                pydirectinput.keyUp(\"a\")\n                pydirectinput.keyUp(\"w\")\n                break\n            sleep(1)\n        # 兜底双按键\n        pydirectinput.keyUp(\"a\")\n        pydirectinput.keyUp(\"w\")\n        # 落地了\n        myredis.set(\"luodi\", \"1\")\n        follow = myredis.get(\"follow\")\n        if follow is not None:\n            myredis.set(\"classState\", \"没有读取到地图数据-这局放弃\")\n            return\n        # 判断小地图是否有目标点\n        # positions = find_imgs_binary(\n        #     \"public\\\\target\\\\dianpng.png\",\n        #     (1628, 792, 1890, 1052),\n        # )\n        # redis_dist = myredis.get(\"dies\")\n        # if redis_dist is None:\n        #     return\n        # 准备地图数据\n        redis_dist = myredis.get(\"dies\")\n        if redis_dist is None:\n            myredis.set(\"classState\", \"没有拿到地图数据-这局放弃\")\n            return\n        dies = json.loads(redis_dist)\n        dian2_x, dian2_y = dies.get(\"dian2\").get(\"x\"), dies.get(\"dian2\").get(\"y\")\n        dian3_x, dian3_y = dies.get(\"dian3\").get(\"x\"), dies.get(\"dian3\").get(\"y\")\n        # 取出后续逻辑\n        follow_up = dies.get(\"times\")\n\n        self.runToTarget()\n        sleep(1)\n        # 标记第二个目标点\n        self.markTarget(dian2_x, dian2_y)\n        # # 判断小地图是否有标点\n        # positions = find_imgs_binary(\n        #     \"public\\\\target\\\\dianpng.png\",\n        #     (1628, 792, 1890, 1052),\n        # )\n        # if positions[0] is not None:\n        #     myredis.set(\"classState\", \"没有到达目标点附近-这局放弃\")\n        #     return\n        sleep(1)\n        self.runToTarget()\n        sleep(1)\n        # 标记第三个目标点\n        self.markTarget(dian3_x, dian3_y)\n        sleep(1)\n        self.runToTarget()\n        # print(\"到达目标点\")\n        myredis.set(\"classState\", \"到达目标点\")\n        # 执行后续逻辑\n        self.followUp(follow_up)\n        # print(\"执行完毕\")\n        myredis.set(\"classState\", \"执行完毕\")\n        self.game_end_funtion()\n        return\n\n    # 判断是那张地图\n    def checkMap(self) -> str | None:\n        map_path = \"public\\\\maps\\\\\"\n        # 判断是否有维寒迪\n        position = find_img_target(map_path + \"whd.png\")\n        if position[0] is not None:\n            self.game_dict[\"map_\"] = \"维寒迪\"\n            return \"whd\"\n        # 判断是否有泰格\n        position = find_img_target(map_path + \"tg.png\")\n        if position[0] is not None:\n            self.game_dict[\"map_\"] = \"泰格\"\n            return \"tg\"\n        # 判断是否有容都\n        position = find_img_target(map_path + \"rd.png\")\n        if position[0] is not None:\n            self.game_dict[\"map_\"] = \"容都\"\n            return \"rd\"\n        # 判断是否有米拉码\n        position = find_img_target(map_path + \"mlm.png\")\n        if position[0] is not None:\n            self.game_dict[\"map_\"] = \"米拉码\"\n            return \"mlm\"\n        # 判断是否有艾伦格\n        position = find_img_target(map_path + \"alg.png\")\n        if position[0] is not None:\n            self.game_dict[\"map_\"] = \"艾伦格\"\n            return \"alg\"\n        # 判断是否有萨诺\n        position = find_img_target(map_path + \"sn.png\")\n        if position[0] is not None:\n            self.game_dict[\"map_\"] = \"萨诺\"\n            return \"sn\"\n        # 判断是否有卡拉金\n        position = find_img_target(map_path + \"klj.png\")\n        if position[0] is not None:\n            self.game_dict[\"map_\"] = \"卡拉金\"\n            return \"klj\"\n        # 判断是否有帝斯顿\n        position = find_img_target(map_path + \"dsd.png\")\n        if position[0] is not None:\n            self.game_dict[\"map_\"] = \"帝斯顿\"\n            return \"dsd\"\n        return None\n\n    # 缩放滚轮\n    def mouse_scroll_up(self, lines):\n        \"\"\"\n        模拟鼠标向上滚动指定的行数。\n\n        :param lines: 要滚动的行数\n        \"\"\"\n        WHEEL_DELTA = 120\n        for _ in range(lines):\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, WHEEL_DELTA, 0)\n            sleep(0.01)\n\n    # 寻找目标点\n    def findTarget(self, speed=20):\n        # start_time = time.time()\n        # intervals = [(10, 66), (169, 237), (172, 251)]  # 目标点颜色区间\n        # myredis = RedisWrapper()\n        # while self.loopTow.value:\n        #     kill = myredis.get(\"kill\")\n        #     if kill is not None:\n        #         return\n        #     if time.time() - start_time > 60:\n        #         myredis.set(\"classState\", \"寻找目标点超时\")\n        #         return\n        #     color_list = find_color(1920 / 2, 35)\n        #     # 判断颜色是否在我们目标点区间\n        #     if self.is_in_intervals(color_list, intervals):\n        #         break\n        #     else:\n        #         win32api.mouse_event(win32con.MOUSEEVENTF_MOVE, speed, 0)\n        start_time = time.time()\n        myredis = RedisWrapper()\n        while self.loopTow.value:\n            kill = myredis.get(\"kill\")\n            if kill is not None:\n                return\n            if time.time() - start_time > 60:\n                myredis.set(\"classState\", \"寻找目标点超时\")\n                return\n            result = findColorTarget2(x=960, y=35, length=140)\n            if result:\n                break\n            else:\n                win32api.mouse_event(win32con.MOUSEEVENTF_MOVE, int(15) * 20, 0)\n                # time.sleep(1)\n        start_time = time.time()\n        while self.loopTow.value:\n            kill = myredis.get(\"kill\")\n            if kill is not None:\n                return\n            if time.time() - start_time > 60:\n                myredis.set(\"classState\", \"寻找目标点超时\")\n                return\n            result = findColorTarget2(x=960, y=35, length=1)\n            if result:\n                break\n            else:\n                win32api.mouse_event(win32con.MOUSEEVENTF_MOVE, speed, 0)\n                time.sleep(0.2)\n\n    # 跑向目标点\n    def runToTarget(self):\n        myredis = RedisWrapper()\n        # 寻找目标点\n        self.findTarget(20)\n        start_time = time.time()\n        pydirectinput.press(\"=\")\n        # 开始奔跑后，判断是否到达目标点 626,15,1297,115,宽高(671,100) 881,19,1041,119,宽高(160,100)\n        while self.loopTow.value:\n            time.sleep(1)\n            if time.time() - start_time > 60:\n                myredis.set(\"classState\", \"跑向目标点超时\")\n                return\n            pydirectinput.press(\"f\")\n            # 938, 35, 43\n            if findColorTarget2(938, 35, 43) is None:\n                pydirectinput.press(\"=\")\n                break\n        # 向后修正\n        start_time = time.time()\n        while self.loopTow.value:\n            if findColorTarget2(881, 35, 160):\n                break\n            else:\n                pydirectinput.keyDown(\"s\")\n                time.sleep(0.5)\n                pydirectinput.keyUp(\"s\")\n        # pydirectinput.keyDown(\"w\")\n        # time.sleep(1)\n        # pydirectinput.keyUp(\"w\")\n\n    # 判断颜色是否在目标点区间\n    def is_in_intervals(self, color, intervals):\n        for i, value in enumerate(color):\n            if not (intervals[i][0] <= value <= intervals[i][1]):\n                return False\n        return True\n\n    # 标记目标点\n    def markTarget(self, x, y):\n        pydirectinput.moveTo(x, y)\n        sleep(1)\n        pydirectinput.press(\"m\")\n        sleep(1)\n        pydirectinput.moveTo(x, y)\n        sleep(1)\n        pydirectinput.rightClick()\n        sleep(1)\n        pydirectinput.press(\"m\")\n\n    # 执行到达目标点后的逻辑\n    def followUp(self, follow_up):\n        # print(\"执行到达目标点后的逻辑\", follow_up)\n        myredis = RedisWrapper()\n        follow = myredis.get(\"follow\")\n        if follow is not None:\n            return\n        key_list = [\n            \"a\",\n            \"w\",\n            \"s\",\n            \"d\",\n            \"c\",\n            \"z\",\n            \"tab\",\n            \"space\",\n            \"1\",\n            \"2\",\n            \"3\",\n            \"f\",\n            \"=\",\n        ]\n        for item in follow_up:\n            match_key = item.get(\"key\")\n            # print(match_key)\n            match item.get(\"key\"):\n                case \"a\" | \"A\":\n                    key, type_key, time = (\n                        item.get(\"key\"),\n                        item.get(\"type\"),\n                        item.get(\"time\"),\n                    )\n                    if type_key == \"click\":\n                        sleep(0.3)\n                        pydirectinput.press(\"a\")\n                        sleep(0.3)\n                    else:\n                        sleep(0.3)\n                        pydirectinput.keyDown(\"a\")\n                        sleep(int(time))\n                        pydirectinput.keyUp(\"a\")\n                        sleep(0.3)\n                case \"w\" | \"W\":\n                    key, type_key, time = (\n                        item.get(\"key\"),\n                        item.get(\"type\"),\n                        item.get(\"time\"),\n                    )\n                    if type_key == \"click\":\n                        sleep(0.3)\n                        pydirectinput.press(\"w\")\n                        sleep(0.3)\n                    else:\n                        sleep(0.3)\n                        pydirectinput.keyDown(\"w\")\n                        sleep(int(time))\n                        pydirectinput.keyUp(\"w\")\n                        sleep(0.3)\n                case \"s\" | \"S\":\n                    key, type_key, time = (\n                        item.get(\"key\"),\n                        item.get(\"type\"),\n                        item.get(\"time\"),\n                    )\n                    if type_key == \"click\":\n                        sleep(0.3)\n                        pydirectinput.press(\"s\")\n                        sleep(0.3)\n                    else:\n                        sleep(0.3)\n                        pydirectinput.keyDown(\"s\")\n                        sleep(int(time))\n                        pydirectinput.keyUp(\"s\")\n                        sleep(0.3)\n                case \"d\" | \"D\":\n                    key, type_key, time = (\n                        item.get(\"key\"),\n                        item.get(\"type\"),\n                        item.get(\"time\"),\n                    )\n                    if type_key == \"click\":\n                        sleep(0.3)\n                        pydirectinput.press(\"d\")\n                        sleep(0.3)\n                    else:\n                        sleep(0.3)\n                        pydirectinput.keyDown(\"d\")\n                        sleep(int(time))\n                        pydirectinput.keyUp(\"d\")\n                        sleep(0.3)\n                case \"c\" | \"C\":\n                    key, type_key, time = (\n                        item.get(\"key\"),\n                        item.get(\"type\"),\n                        item.get(\"time\"),\n                    )\n                    if type_key == \"click\":\n                        sleep(0.3)\n                        pydirectinput.press(\"c\")\n                        sleep(0.3)\n                    else:\n                        sleep(0.3)\n                        pydirectinput.keyDown(\"c\")\n                        sleep(int(time))\n                        pydirectinput.keyUp(\"c\")\n                        sleep(0.3)\n                case \"z\" | \"Z\":\n                    key, type_key, time = (\n                        item.get(\"key\"),\n                        item.get(\"type\"),\n                        item.get(\"time\"),\n                    )\n                    if type_key == \"click\":\n                        sleep(0.3)\n                        pydirectinput.press(\"z\")\n                        sleep(0.3)\n                    else:\n                        sleep(0.3)\n                        pydirectinput.keyDown(\"z\")\n                        # print(\"按下z time\", time)\n                        sleep(int(time))\n                        pydirectinput.keyUp(\"z\")\n                        sleep(0.3)\n                case \"tab\" | \"Tab\":\n                    sleep(0.3)\n                    pydirectinput.press(\"tab\")\n                    sleep(0.3)\n                case \"space\" | \"Space\":\n                    sleep(0.3)\n                    pydirectinput.press(\"space\")\n                    sleep(0.3)\n                case \"1\":\n                    sleep(0.3)\n                    pydirectinput.press(\"1\")\n                    sleep(0.3)\n                case \"2\":\n                    sleep(0.3)\n                    pydirectinput.press(\"2\")\n                    sleep(0.3)\n                case \"3\":\n                    sleep(0.3)\n                    pydirectinput.press(\"3\")\n                    sleep(0.3)\n                case \"f\":\n                    sleep(0.3)\n                    pydirectinput.press(\"f\")\n                    sleep(0.3)\n                case \"=\":\n                    sleep(0.3)\n                    pydirectinput.press(\"=\")\n                    sleep(0.3)\n                case match_key if match_key in key_list:\n                    if type_key == \"Down\":\n                        pydirectinput.keyDown(key)\n                        sleep(int(time))\n                        pydirectinput.keyUp(key)\n                    else:\n                        pydirectinput.press(key)\n                case \"jdx\":\n                    key, nums, time = (\n                        item.get(\"key\"),\n                        item.get(\"time\"),\n                        item.get(\"time\"),\n                    )\n                    for i in range(int(nums)):\n                        pydirectinput.moveTo(154, 122)\n                        pydirectinput.rightClick()\n                        sleep(1)\n                case \"leftClick\":\n                    pydirectinput.click()\n                case \"rightClick\":\n                    pydirectinput.rightClick()\n                case \"leftDown\":\n                    time = item.get(\"time\")\n                    pydirectinput.mouseDown(button=\"left\")\n                    sleep(int(time))\n                    pydirectinput.mouseUp(button=\"left\")\n                case \"rightDown\":\n                    time = item.get(\"time\")\n                    pydirectinput.mouseDown(button=\"right\")\n                    sleep(int(time))\n                    pydirectinput.mouseUp(button=\"right\")\n                case \"wait\":\n                    time = item.get(\"time\")\n                    sleep(int(time))\n                case \"ctrl+1\":\n                    pydirectinput.keyDown(\"ctrl\")\n                    sleep(1)\n                    pydirectinput.press(\"1\")\n                    pydirectinput.keyUp(\"ctrl\")\n                case None:\n                    return\n                case _:\n                    pass\n            sleep(1)\n        myredis.set(\"follow\", \"1\")\n\n    # 截取屏幕指定区域 并保存\n    def capture_screen_region(\n        self, x, y, width, height, save_directory, ImagesPathName\n    ):\n        # 截取屏幕指定区域\n        bbox = (x, y, x + width, y + height)\n        screen = ImageGrab.grab(bbox=bbox)\n        screen_np = np.array(screen)\n        # 将图像从RGB转换为BGR（OpenCV使用BGR格式）\n        screen_bgr = cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)\n        # 将图像从BGR转换为RGB\n        screen_rgb = cv2.cvtColor(screen_bgr, cv2.COLOR_BGR2RGB)\n        # 创建Pillow图像对象\n        screen_pil = Image.fromarray(screen_rgb)\n        # 获取当前时间并格式化为字符串\n        current_time = datetime.now().strftime(\"%Y-%m-%d-%H-%M\")  # 使用 - 代替 : 符号\n        current_time_mkdir = datetime.now().strftime(\"%Y-%m-%d\")  # 使用 - 代替 : 符号\n        # 生成保存路径和文件名\n        output_filename = f\"{current_time}.jpg\"\n        output_path = os.path.join(\n            save_directory, ImagesPathName, current_time_mkdir, output_filename\n        )\n        # 确保保存目录存在\n        os.makedirs(os.path.dirname(output_path), exist_ok=True)\n        # 保存图像\n        try:\n            # 使用Pillow保存图像\n            screen_pil.save(output_path)\n            print(f\"图像成功保存到 {output_path}\")\n        except Exception as e:\n            print(f\"保存图像时出现错误: {e}\")\n\n    # 获取bp数量\n    def get_bp_nums(self, x, y, width, height):\n        try:\n            # 截取屏幕指定区域\n            bbox = (x, y, x + width, y + height)\n            screen = ImageGrab.grab(bbox=bbox)\n            screen_np = np.array(screen)\n            # 将图像从RGB转换为BGR（OpenCV使用BGR格式）\n            screen_bgr = cv2.cvtColor(screen_np, cv2.COLOR_BGR2GRAY)\n            # 使用Pytesseract进行OCR\n            custom_config = r\"--oem 3 --psm 6 outputbase digits\"\n            text = pytesseract.image_to_string(screen_bgr, config=custom_config)\n            return str(text).strip()\n        except Exception as e:\n            print(f\"获取BP数量时出现错误: {e}\")\n            return -1\n\n    # 统一结束后执行钩子\n    def game_end_funtion(self):\n        # 调用截图\n        if self.ImageSavaPath:\n            self.capture_screen_region(\n                0, 0, 1920, 1080, self.ImageSavaPath, \"目标点图片\"\n            )\n        else:\n            print(\"没有设置图片保存路径\", self.ImageSavaPath)\n        print(\"游戏结束\")\n        pass\n"}
{"type": "source_file", "path": "ui_to_py.py", "content": "import subprocess\nimport os\n\n\nfiles_path = os.path.abspath(\"./src/ui\")\n# 遍历 ui 文件夹下的所有文件\n\nui_files = []\nfor root, dirs, files in os.walk(files_path):\n    for file in files:\n        if file.endswith(\".ui\"):\n            # 打印文件名\n            print(file)\n            command = (\n                r\".\\Scripts\\python.exe -m PyQt5.uic.pyuic -x \"\n                + f\"{os.path.join(root, file)}\"\n                + \" -o \"\n                + f\"{os.path.join(root, file.replace('.ui', '.py'))}\"\n            )\n            subprocess.run(command, shell=True)\n"}
{"type": "source_file", "path": "src/templates/window.py", "content": "# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'C:\\Users\\zqq\\Desktop\\pubg-bp\\core\\src\\ui\\window.ui'\n#\n# Created by: PyQt5 UI code generator 5.15.10\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic5 is\n# run again.  Do not edit this file unless you know what you are doing.\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nfrom PyQt5 import QtCore, QtGui, QtWidgets\nfrom PyQt5.QtWidgets import QWidget, QMessageBox\nfrom PyQt5.QtCore import QUrl, QObject, pyqtSignal, QTimer\nfrom src.model.gameClass import PUBGClass\nimport multiprocessing, json, random, requests, time, os\nfrom src.tools.tools import (\n    get_system_info,\n    find_project_file,\n    find_project_file,\n    get_system_info,\n)\nfrom PyQt5.QtWebSockets import QWebSocket\nfrom src.model.myredis import RedisWrapper\nfrom src.API.base import QtRequest, base_url\nfrom src.templates.reject import reject_From\nimport requests\nfrom src.templates.login import Ui_Login\n\n\nget_machine_code = get_system_info\n\nbase_ws_url = \"127.0.0.1:18081\"\n\n\n# 创建一个工作线程 循环读取myredis中的值classState值\nclass WorkThread(QtCore.QThread):\n    # 定义信号\n    update = QtCore.pyqtSignal(str)\n\n    def __init__(self, parent=None):\n        super(WorkThread, self).__init__(parent)\n        self.myredis = RedisWrapper()\n        self.myredis.flushall()\n        self.oldText = \"\"\n        self.is_run = True\n\n    def run(self):\n        while self.is_run:\n            val = self.myredis.get(\"classState\")\n            if val:\n                if val.decode(\"utf-8\") != self.oldText:\n                    self.oldText = val.decode(\"utf-8\")\n                    self.update.emit(val.decode(\"utf-8\"))\n            time.sleep(2)\n\n    def stop(self):\n        self.is_run = False\n\n\nclass window_Form(QWidget):\n    def __init__(self):\n        self.version = \"v2.8.1\"\n        multiprocessing.freeze_support()\n        self.myredis = RedisWrapper()\n        self.myredis1 = RedisWrapper(db=1)\n        self.myredis.flushall()\n        self.maps = {\n            \"alg\": [],\n            \"mlm\": [],\n            \"tg\": [],\n            \"rd\": [],\n            \"dst\": [],\n            \"whd\": [],\n            \"sn\": [],\n            \"klj\": [],\n            \"plm\": [],\n        }\n        super(window_Form, self).__init__()\n        self.setupUi(self)\n        self.gameClass = None\n        self.p1 = None\n        self.p2 = None\n        self.web_socket = None\n        self.wsMax = 0\n        self.userState = True  # 连接状态\n        self.window_id = get_system_info()\n        self.web_socket = QWebSocket()\n        self.web_socket.open(\n            QUrl(f\"ws://{base_ws_url}/check_expiry_long/{self.window_id}\")\n        )\n        self.start_ws()\n        QTimer.singleShot(100, self.on_window_shown)\n\n    def setupUi(self, Form):\n        self._from = Form\n        Form.setObjectName(\"Form\")\n        Form.resize(943, 489)\n        self.pushButton = QtWidgets.QPushButton(Form)\n        self.pushButton.setGeometry(QtCore.QRect(20, 10, 161, 71))\n        self.pushButton.setObjectName(\"pushButton\")\n        # self.textBrowser = QtWidgets.QTextBrowser(Form)\n        # self.textBrowser.setGeometry(QtCore.QRect(410, 10, 511, 201))\n        # self.textBrowser.setObjectName(\"textBrowser\")\n        self.groupBox = QtWidgets.QGroupBox(Form)\n        self.groupBox.setGeometry(QtCore.QRect(20, 240, 371, 221))\n        self.groupBox.setObjectName(\"groupBox\")\n        self.tabWidget = QtWidgets.QTabWidget(self.groupBox)\n        self.tabWidget.setGeometry(QtCore.QRect(10, 50, 351, 161))\n        self.tabWidget.setObjectName(\"tabWidget\")\n        self.tab_3 = QtWidgets.QWidget()\n        self.tab_3.setObjectName(\"tab_3\")\n        self.listWidget_2 = QtWidgets.QListWidget(self.tab_3)\n        self.listWidget_2.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_2.setObjectName(\"listWidget_2\")\n        self.tabWidget.addTab(self.tab_3, \"\")\n        self.tab_4 = QtWidgets.QWidget()\n        self.tab_4.setObjectName(\"tab_4\")\n        self.listWidget_3 = QtWidgets.QListWidget(self.tab_4)\n        self.listWidget_3.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_3.setObjectName(\"listWidget_3\")\n        self.tabWidget.addTab(self.tab_4, \"\")\n        self.tab = QtWidgets.QWidget()\n        self.tab.setObjectName(\"tab\")\n        self.listWidget = QtWidgets.QListWidget(self.tab)\n        self.listWidget.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget.setObjectName(\"listWidget\")\n        self.tabWidget.addTab(self.tab, \"\")\n        self.tab_2 = QtWidgets.QWidget()\n        self.tab_2.setObjectName(\"tab_2\")\n        self.listWidget_4 = QtWidgets.QListWidget(self.tab_2)\n        self.listWidget_4.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_4.setObjectName(\"listWidget_4\")\n        self.tabWidget.addTab(self.tab_2, \"\")\n        self.tab_5 = QtWidgets.QWidget()\n        self.tab_5.setObjectName(\"tab_5\")\n        self.listWidget_5 = QtWidgets.QListWidget(self.tab_5)\n        self.listWidget_5.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_5.setObjectName(\"listWidget_5\")\n        self.tabWidget.addTab(self.tab_5, \"\")\n        self.tab_6 = QtWidgets.QWidget()\n        self.tab_6.setObjectName(\"tab_6\")\n        self.listWidget_6 = QtWidgets.QListWidget(self.tab_6)\n        self.listWidget_6.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_6.setObjectName(\"listWidget_6\")\n        self.tabWidget.addTab(self.tab_6, \"\")\n        self.tab_9 = QtWidgets.QWidget()\n        self.tab_9.setObjectName(\"tab_9\")\n        self.listWidget_8 = QtWidgets.QListWidget(self.tab_9)\n        self.listWidget_8.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_8.setObjectName(\"listWidget_8\")\n        self.tabWidget.addTab(self.tab_9, \"\")\n        self.tab_7 = QtWidgets.QWidget()\n        self.tab_7.setObjectName(\"tab_7\")\n        self.listWidget_9 = QtWidgets.QListWidget(self.tab_7)\n        self.listWidget_9.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_9.setObjectName(\"listWidget_9\")\n        self.tabWidget.addTab(self.tab_7, \"\")\n        self.tab_8 = QtWidgets.QWidget()\n        self.tab_8.setObjectName(\"tab_8\")\n        self.listWidget_7 = QtWidgets.QListWidget(self.tab_8)\n        self.listWidget_7.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_7.setObjectName(\"listWidget_7\")\n        self.tabWidget.addTab(self.tab_8, \"\")\n        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)\n        self.pushButton_2.setGeometry(QtCore.QRect(10, 20, 75, 23))\n        self.pushButton_2.setObjectName(\"pushButton_2\")\n        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)\n        self.pushButton_3.setGeometry(QtCore.QRect(90, 20, 75, 23))\n        self.pushButton_3.setObjectName(\"pushButton_3\")\n        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox)\n        self.pushButton_4.setGeometry(QtCore.QRect(170, 20, 75, 23))\n        self.pushButton_4.setObjectName(\"pushButton_4\")\n        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox)\n        self.pushButton_5.setGeometry(QtCore.QRect(250, 20, 75, 23))\n        self.pushButton_5.setObjectName(\"pushButton_5\")\n        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(190, 10, 201, 31))\n        self.horizontalLayoutWidget.setObjectName(\"horizontalLayoutWidget\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.label.setFont(font)\n        self.label.setObjectName(\"label\")\n        self.horizontalLayout.addWidget(self.label)\n        self.spinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.spinBox.setFont(font)\n        self.spinBox.setProperty(\"value\", 30)\n        self.spinBox.setObjectName(\"spinBox\")\n        self.horizontalLayout.addWidget(self.spinBox)\n        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(190, 50, 201, 31))\n        self.horizontalLayoutWidget_2.setObjectName(\"horizontalLayoutWidget_2\")\n        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)\n        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_2.setObjectName(\"horizontalLayout_2\")\n        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.label_2.setFont(font)\n        self.label_2.setObjectName(\"label_2\")\n        self.horizontalLayout_2.addWidget(self.label_2)\n        self.comboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget_2)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.comboBox.setFont(font)\n        self.comboBox.setObjectName(\"comboBox\")\n        self.comboBox.addItem(\"\")\n        self.comboBox.addItem(\"\")\n        self.horizontalLayout_2.addWidget(self.comboBox)\n        # self.textBrowser_2 = QtWidgets.QTextBrowser(Form)\n        # self.textBrowser_2.setGeometry(QtCore.QRect(410, 260, 511, 211))\n        # self.textBrowser_2.setObjectName(\"textBrowser_2\")\n        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(20, 90, 371, 31))\n        self.horizontalLayoutWidget_3.setObjectName(\"horizontalLayoutWidget_3\")\n        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)\n        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_3.setObjectName(\"horizontalLayout_3\")\n        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)\n        self.label_3.setObjectName(\"label_3\")\n        self.horizontalLayout_3.addWidget(self.label_3)\n        self.lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)\n        # self.lineEdit.setEnabled(False)\n        self.lineEdit.setObjectName(\"lineEdit\")\n        self.horizontalLayout_3.addWidget(self.lineEdit)\n        self.scrollArea = QtWidgets.QScrollArea(Form)\n        self.scrollArea.setEnabled(True)\n        self.scrollArea.setGeometry(QtCore.QRect(410, 220, 511, 241))\n        self.scrollArea.setWidgetResizable(True)\n        self.scrollArea.setObjectName(\"scrollArea\")\n        self.scrollAreaWidgetContents = QtWidgets.QWidget()\n        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 509, 239))\n        self.scrollAreaWidgetContents.setObjectName(\"scrollAreaWidgetContents\")\n        self.textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)\n        self.textEdit.setGeometry(QtCore.QRect(0, 0, 511, 241))\n        self.textEdit.setObjectName(\"textEdit\")\n        self.scrollArea.setWidget(self.scrollAreaWidgetContents)\n        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(20, 130, 371, 31))\n        self.horizontalLayoutWidget_4.setObjectName(\"horizontalLayoutWidget_4\")\n        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)\n        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_4.setObjectName(\"horizontalLayout_4\")\n        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget_4)\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())\n        self.label_4.setSizePolicy(sizePolicy)\n        self.label_4.setObjectName(\"label_4\")\n        self.horizontalLayout_4.addWidget(self.label_4)\n        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.horizontalLayoutWidget_4)\n        self.dateTimeEdit.setEnabled(False)\n        self.dateTimeEdit.setObjectName(\"dateTimeEdit\")\n        self.horizontalLayout_4.addWidget(self.dateTimeEdit)\n        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(400, 10, 371, 31))\n        self.horizontalLayoutWidget_5.setObjectName(\"horizontalLayoutWidget_5\")\n        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)\n        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_5.setObjectName(\"horizontalLayout_5\")\n        self.checkBox_2 = QtWidgets.QCheckBox(self.horizontalLayoutWidget_5)\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.checkBox_2.sizePolicy().hasHeightForWidth())\n        self.checkBox_2.setSizePolicy(sizePolicy)\n        self.checkBox_2.setObjectName(\"checkBox_2\")\n        self.horizontalLayout_5.addWidget(self.checkBox_2)\n        self.pushButton_7 = QtWidgets.QPushButton(self.horizontalLayoutWidget_5)\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())\n        self.pushButton_7.setSizePolicy(sizePolicy)\n        self.pushButton_7.setObjectName(\"pushButton_7\")\n        self.horizontalLayout_5.addWidget(self.pushButton_7)\n        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget_5)\n        self.label_5.setObjectName(\"label_5\")\n        self.horizontalLayout_5.addWidget(self.label_5)\n        self.pushButton_10 = QtWidgets.QPushButton(self.horizontalLayoutWidget_5)\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(\n            self.pushButton_10.sizePolicy().hasHeightForWidth()\n        )\n        self.pushButton_10.setSizePolicy(sizePolicy)\n        self.pushButton_10.setObjectName(\"pushButton_10\")\n        self.horizontalLayout_5.addWidget(self.pushButton_10)\n        self.horizontalLayoutWidget_6 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_6.setGeometry(QtCore.QRect(400, 40, 371, 31))\n        self.horizontalLayoutWidget_6.setObjectName(\"horizontalLayoutWidget_6\")\n        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_6)\n        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_6.setObjectName(\"horizontalLayout_6\")\n        self.checkBox = QtWidgets.QCheckBox(self.horizontalLayoutWidget_6)\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.checkBox.sizePolicy().hasHeightForWidth())\n        self.checkBox.setSizePolicy(sizePolicy)\n        self.checkBox.setObjectName(\"checkBox\")\n        self.horizontalLayout_6.addWidget(self.checkBox)\n        self.pushButton_8 = QtWidgets.QPushButton(self.horizontalLayoutWidget_6)\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())\n        self.pushButton_8.setSizePolicy(sizePolicy)\n        self.pushButton_8.setObjectName(\"pushButton_8\")\n        self.horizontalLayout_6.addWidget(self.pushButton_8)\n        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget_6)\n        self.label_6.setObjectName(\"label_6\")\n        self.horizontalLayout_6.addWidget(self.label_6)\n        self.pushButton_9 = QtWidgets.QPushButton(self.horizontalLayoutWidget_6)\n        sizePolicy = QtWidgets.QSizePolicy(\n            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed\n        )\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())\n        self.pushButton_9.setSizePolicy(sizePolicy)\n        self.pushButton_9.setObjectName(\"pushButton_9\")\n        self.horizontalLayout_6.addWidget(self.pushButton_9)\n        self.pushButton_6 = QtWidgets.QPushButton(Form)\n        self.pushButton_6.setGeometry(QtCore.QRect(20, 170, 75, 23))\n        self.pushButton_6.setObjectName(\"pushButton_6\")\n        # self.radioButton = QtWidgets.QRadioButton(Form)\n        # self.radioButton.setGeometry(QtCore.QRect(100, 170, 91, 21))\n        # self.radioButton.setObjectName(\"radioButton\")\n        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(400, 70, 371, 31))\n        self.horizontalLayoutWidget_7.setObjectName(\"horizontalLayoutWidget_7\")\n        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)\n        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_7.setObjectName(\"horizontalLayout_7\")\n        self.label_7 = QtWidgets.QLabel(self.horizontalLayoutWidget_7)\n        self.label_7.setObjectName(\"label_7\")\n        self.horizontalLayout_7.addWidget(self.label_7)\n        self.lineEdit_2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_7)\n        self.lineEdit_2.setEnabled(False)\n        self.lineEdit_2.setObjectName(\"lineEdit_2\")\n        self.horizontalLayout_7.addWidget(self.lineEdit_2)\n        self.pushButton_11 = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)\n        self.pushButton_11.setObjectName(\"pushButton_11\")\n        self.horizontalLayout_7.addWidget(self.pushButton_11)\n        # 设置窗口 icon\n        icon = QtGui.QIcon()\n        icon_path = os.path.normpath(\n            os.path.join(\n                os.path.join(os.path.expanduser(\"~\"), \"ChickenBrothers\"),\n                \"public/head.ico\",\n            )\n        )\n        print(\"图片\", icon_path)\n        icon.addPixmap(\n            QtGui.QPixmap(find_project_file(icon_path)),\n            QtGui.QIcon.Mode.Normal,\n            QtGui.QIcon.State.Off,\n        )\n        Form.setWindowIcon(icon)\n        self.retranslateUi(Form)\n        self.tabWidget.setCurrentIndex(0)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n\n    def retranslateUi(self, Form):\n        _translate = QtCore.QCoreApplication.translate\n        Form.setWindowTitle(_translate(\"Form\", \"吃鸡兄弟-V2.8.1\"))\n        self.pushButton.setText(_translate(\"Form\", \"开始挂机\"))\n        self.groupBox.setTitle(_translate(\"Form\", \"点位数据\"))\n        __sortingEnabled = self.listWidget_2.isSortingEnabled()\n        self.listWidget_2.setSortingEnabled(False)\n        self.listWidget_2.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(\n            self.tabWidget.indexOf(self.tab_3), _translate(\"Form\", \"艾伦格\")\n        )\n        __sortingEnabled = self.listWidget_3.isSortingEnabled()\n        self.listWidget_3.setSortingEnabled(False)\n        self.listWidget_3.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(\n            self.tabWidget.indexOf(self.tab_4), _translate(\"Form\", \"米拉玛\")\n        )\n        __sortingEnabled = self.listWidget.isSortingEnabled()\n        self.listWidget.setSortingEnabled(False)\n        self.listWidget.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(\n            self.tabWidget.indexOf(self.tab), _translate(\"Form\", \"泰戈\")\n        )\n        __sortingEnabled = self.listWidget_4.isSortingEnabled()\n        self.listWidget_4.setSortingEnabled(False)\n        self.listWidget_4.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(\n            self.tabWidget.indexOf(self.tab_2), _translate(\"Form\", \"容都\")\n        )\n        __sortingEnabled = self.listWidget_5.isSortingEnabled()\n        self.listWidget_5.setSortingEnabled(False)\n        self.listWidget_5.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(\n            self.tabWidget.indexOf(self.tab_5), _translate(\"Form\", \"帝斯顿\")\n        )\n        __sortingEnabled = self.listWidget_6.isSortingEnabled()\n        self.listWidget_6.setSortingEnabled(False)\n        self.listWidget_6.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(\n            self.tabWidget.indexOf(self.tab_6), _translate(\"Form\", \"维寒迪\")\n        )\n        self.tabWidget.setTabText(\n            self.tabWidget.indexOf(self.tab_9), _translate(\"Form\", \"萨诺\")\n        )\n        self.tabWidget.setTabText(\n            self.tabWidget.indexOf(self.tab_7), _translate(\"Form\", \"卡拉金\")\n        )\n        self.tabWidget.setTabText(\n            self.tabWidget.indexOf(self.tab_8), _translate(\"Form\", \"帕拉莫\")\n        )\n        # 禁用放大窗口 和 缩小到任务栏\n        # 禁用窗体最大化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMaximizeButtonHint, False)\n        # 禁用窗体最小化\n        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMinimizeButtonHint, False)\n        self.pushButton_2.setText(_translate(\"Form\", \"导入点位\"))\n        self.pushButton_3.setText(_translate(\"Form\", \"删除点位\"))\n        self.pushButton_4.setText(_translate(\"Form\", \"缓存点位\"))\n        self.pushButton_5.setText(_translate(\"Form\", \"清除缓存\"))\n        self.label.setText(_translate(\"Form\", \"跳伞延迟时间(秒)\"))\n        self.label_2.setText(_translate(\"Form\", \"选点方式\"))\n        self.comboBox.setItemText(0, _translate(\"Form\", \"随机\"))\n        self.comboBox.setItemText(1, _translate(\"Form\", \"第一个点\"))\n        self.label_3.setText(_translate(\"Form\", \"机器码:\"))\n        self.label_4.setText(_translate(\"Form\", \"到期时间：\"))\n        # self.pushButton_6.setText(_translate(\"Form\", \"增加时间\"))\n        # self.radioButton.setText(_translate(\"Form\", \"F12自动截图\"))\n        self.checkBox_2.setText(_translate(\"Form\", \"开启\"))\n        self.pushButton_7.setText(_translate(\"Form\", \"设置截屏保存文件夹\"))\n        self.label_5.setText(_translate(\"Form\", \"\"))\n        self.pushButton_10.setText(_translate(\"Form\", \"打开\"))\n        self.checkBox.setText(_translate(\"Form\", \"开启\"))\n        self.pushButton_8.setText(_translate(\"Form\", \"设置截图保存文件夹\"))\n        self.label_6.setText(_translate(\"Form\", \"\"))\n        self.pushButton_9.setText(_translate(\"Form\", \"打开\"))\n        self.pushButton_6.setText(_translate(\"Form\", \"续期\"))\n        self.label_7.setText(_translate(\"Form\", \"云账号  \"))\n        self.pushButton_11.setText(_translate(\"Form\", \"登录\"))\n        self.bind_events()\n\n    def on_window_shown(self):\n        # 设置 机器码 input 为只读\n        self.lineEdit.setReadOnly(True)\n        # _code = get_machine_code()\n        _code = self.window_id\n        print(_code)\n        if _code:\n            self.lineEdit.setText(_code)\n        self.loadingMaps()\n        # 调用 WorkThread 修改 label 的值\n        self.workThread = WorkThread()\n        self.workThread.update.connect(self.add_log_message)\n        self.workThread.start()\n        self.check_connectivity()\n        # 判断 是否开启 截屏保存 和 截图保存\n        self.initImage()\n\n    def bind_events(self):\n        self.listWiget = [\n            self.listWidget_2,\n            self.listWidget_3,\n            self.listWidget,\n            self.listWidget_4,\n            self.listWidget_5,\n            self.listWidget_6,\n            self.listWidget_8,\n            self.listWidget_9,\n            self.listWidget_7,\n        ]\n        # 设置 最新公告\n        # 给 textEdit 设置只读\n        self.textEdit.setReadOnly(True)\n        self.add_log_message(\"欢迎使用吃鸡兄弟\")\n        # 给开始挂机按钮绑定事件\n        self.pushButton.clicked.connect(self.startMainGame)\n        # 给 导入点位 和 删除点位 绑定事件\n        self.pushButton_2.clicked.connect(self.importPoint)\n        self.pushButton_3.clicked.connect(self.deletePoint)\n        # 给 缓存点位 和 清除缓存 绑定事件\n        self.pushButton_4.clicked.connect(self.cachePoint)\n        self.pushButton_5.clicked.connect(self.clearCache)\n        # 给 续期按钮绑定事件\n        self.pushButton_6.clicked.connect(self.renewal)\n        # 给 设置截屏保存位置 和 设置截图保存位置 绑定事件\n        self.pushButton_7.clicked.connect(self.saveWindowImage)\n        self.pushButton_8.clicked.connect(self.saveBPImage)\n        # 给 设置截屏保存位置 和 设置截图保存位置的开启按钮绑定事件\n        self.checkBox_2.stateChanged.connect(self.openWindowImage)\n        self.checkBox.stateChanged.connect(self.openBPImage)\n        # 给 设置截屏保存位置 和 设置截图保存位置的打开按钮绑定事件\n        self.pushButton_10.clicked.connect(self.openWindowImageBtn)\n        self.pushButton_9.clicked.connect(self.openBPImageBtn)\n        # 给登录按钮绑定事件\n        self.pushButton_11.clicked.connect(self.login)\n\n    # 初始化截图相关功能\n    def initImage(self):\n        try:\n            # 从缓存中获取 截屏保存位置 开启状态\n            ImageSavaState = self.myredis1.get(\"ImageSavaState\")\n            if ImageSavaState:\n                ImageSavaState = ImageSavaState.decode(\"utf-8\")\n            ImageSavaPath = self.myredis1.get(\"ImageSavaPath\")\n            if ImageSavaPath:\n                ImageSavaPath = ImageSavaPath.decode(\"utf-8\")\n            bpImageSaveState = self.myredis1.get(\"bpImageSaveState\")\n            if bpImageSaveState:\n                bpImageSaveState = bpImageSaveState.decode(\"utf-8\")\n            bpImageSavePath = self.myredis1.get(\"bpImageSavePath\")\n            # 从缓存中读取 云账号id\n            cloud_id = self.myredis1.get(\"cloud_id\")\n            if cloud_id:\n                self.lineEdit_2.setText(cloud_id.decode(\"utf-8\"))\n                self.pushButton_11.setText(\"退出登录\")\n            if bpImageSavePath:\n                bpImageSavePath = bpImageSavePath.decode(\"utf-8\")\n            if ImageSavaState:\n                self.checkBox_2.setChecked(bool(ImageSavaState))\n                self.pushButton_7.setEnabled(bool(ImageSavaState))\n            else:\n                self.checkBox_2.setChecked(False)\n                self.pushButton_7.setEnabled(False)\n            # 从缓存中获取 截屏保存位置 路径\n            if ImageSavaPath:\n                self.label_5.setText(ImageSavaPath)\n            else:\n                self.label_5.setText(\"\")\n            # 从缓存中获取 截图保存位置 开启状态\n            if bpImageSaveState and bpImageSavePath:\n                self.checkBox.setChecked(bool(bpImageSaveState))\n                self.pushButton_8.setEnabled(bool(bpImageSaveState))\n            else:\n                self.pushButton_8.setEnabled(False)\n                self.checkBox.setChecked(False)\n            if ImageSavaState and ImageSavaPath:\n                self.checkBox_2.setChecked(True)\n                self.pushButton_7.setEnabled(True)\n            else:\n                self.pushButton_7.setEnabled(False)\n                self.checkBox_2.setChecked(False)\n            # 从缓存中获取 截图保存位置 路径\n            if bpImageSavePath:\n                self.label_6.setText(bpImageSavePath)\n            else:\n                self.label_6.setText(\"\")\n        except Exception as e:\n            self.add_log_message(f\"初始化截图功能失败:{e}\")\n\n    # 开关截图保存位置\n    def openWindowImage(self):\n        if self.checkBox_2.isChecked():\n            self.pushButton_7.setEnabled(True)\n        else:\n            self.pushButton_7.setEnabled(False)\n        # 缓存 截屏保存位置 开启状态 到 redis\n        self.myredis1.set(\"ImageSavaState\", str(self.checkBox_2.isChecked()))\n\n    # 开关截图保存位置\n    def openBPImage(self):\n        if self.checkBox.isChecked():\n            self.pushButton_8.setEnabled(True)\n        else:\n            self.pushButton_8.setEnabled(False)\n        # 缓存 截图保存位置 开启状态 到 redis\n        self.myredis1.set(\"bpImageSaveState\", str(self.checkBox.isChecked()))\n\n    # 设置截屏保存位置\n    def saveWindowImage(self):\n        # 选择文件夹\n        file_dialog = QtWidgets.QFileDialog()\n        file_path = file_dialog.getExistingDirectory()\n        if file_path:\n            self.label_5.setText(file_path)\n            # 设置缓存 截屏保存位置路径 到 redis\n            self.myredis1.set(\"ImageSavaPath\", file_path)\n\n    # 设置截图保存位置\n    def saveBPImage(self):\n        # 选择文件夹\n        file_dialog = QtWidgets.QFileDialog()\n        file_path = file_dialog.getExistingDirectory()\n        if file_path:\n            self.label_6.setText(file_path)\n            # 设置缓存 截图保存位置路径 到 redis\n            self.myredis1.set(\"bpImageSavePath\", file_path)\n\n    # 打开截屏保存位置\n    def openWindowImageBtn(self):\n        os.startfile(self.label_5.text())\n\n    # 打开截图保存位置\n    def openBPImageBtn(self):\n        os.startfile(self.label_6.text())\n\n    # 开始挂机\n    def startMainGame(self):\n        _maps = self.maps\n        # 获取跳伞时间\n        jump_time = self.spinBox.value()\n        # 获取 标点方式\n        select_way = self.comboBox.currentText()\n        if select_way == \"随机\":\n            select_way = True\n        else:\n            select_way = False\n        # 判断 是否开启 截屏保存 和 截图保存\n        if self.checkBox_2.isChecked():\n            window_image = self.label_5.text()\n        else:\n            window_image = None\n        if self.checkBox.isChecked():\n            bp_image = self.label_6.text()\n        else:\n            bp_image = None\n        # 启动主进程\n        if self.gameClass is None:\n            self.gameClass = PUBGClass(\n                maps=_maps,\n                windows_id=self.window_id,\n                pip_user_id=self.lineEdit_2.text(),\n                planeTime=jump_time,\n                randomMap=select_way,\n                bpImageSavePath=bp_image,\n                ImageSavaPath=window_image,\n            )\n            self.p1 = multiprocessing.Process(target=self.gameClass.playHomeLoop)\n            self.p2 = multiprocessing.Process(target=self.gameClass.gameMainLoop)\n            self.p1.start()\n            self.p2.start()\n            # 修改按钮文字\n            self.pushButton.setText(\"停止挂机\")\n        else:\n            self.gameClass.stop()\n            if self.p1:\n                self.p1.join()\n            if self.p2:\n                self.p2.join()\n            self.p1 = None\n            self.p2 = None\n            self.gameClass = None\n            # 修改按钮文字\n            self.pushButton.setText(\"开始挂机\")\n\n    # 导入点位\n    def importPoint(self):\n        # 判断当前选中的是哪个tab\n        # 找到这个 tab 下的 listWidget\n        print(\"导入点位\")\n        try:\n            file_name, data = self.readPointFile()\n            if file_name and data:\n                self.update_list(file_name, data)\n            else:\n                QMessageBox.warning(self, \"错误\", \"导入失败\")\n        except Exception as e:\n            self.add_log_message(f\"导入失败:{e}\")\n\n    # 删除点位\n    def deletePoint(self):\n        try:\n            listWiget = [\n                self.listWidget_2,\n                self.listWidget_3,\n                self.listWidget,\n                self.listWidget_4,\n                self.listWidget_5,\n                self.listWidget_6,\n            ]\n            mapKeys = [\"alg\", \"mlm\", \"tg\", \"rd\", \"dst\", \"whd\", \"sn\", \"klj\", \"plm\"]\n            target_list = listWiget[self.tabWidget.currentIndex()]\n            if target_list.count() > 0:\n                target_list.takeItem(target_list.currentRow())\n                if len(self.maps[mapKeys[self.tabWidget.currentIndex()]]) > 0:\n                    self.maps[mapKeys[self.tabWidget.currentIndex()]].pop(\n                        target_list.currentRow()\n                    )\n        except Exception as e:\n            self.add_log_message(f\"删除失败\")\n\n    # 更新点位列表\n    def update_list(self, map_name, map_data):\n        try:\n            mapKeys = [\"alg\", \"mlm\", \"tg\", \"rd\", \"dst\", \"whd\", \"sn\", \"klj\", \"plm\"]\n            target_list = self.listWiget[self.tabWidget.currentIndex()]\n            item = QtWidgets.QListWidgetItem()\n            target_list.addItem(item)\n            target_list.item(target_list.count() - 1).setText(map_name)\n            map_data[\"name\"] = map_name\n            self.maps[mapKeys[self.tabWidget.currentIndex()]].append(map_data)\n        except Exception as e:\n            self.add_log_message(\"更新失败\")\n\n    # 读取文件\n    def readPointFile(self):\n        file_dialog = QtWidgets.QFileDialog()\n        file_path, _ = file_dialog.getOpenFileName(\n            None, \"Select JSON File\", \"\", \"JSON Files (*.json)\"\n        )\n        try:\n            if file_path:\n                with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                    data = json.loads(f.read())\n                    # 读取文件名\n                    file_name = file_path.split(\"/\")[-1].split(\".\")[0]\n                    return file_name, data\n        except Exception as e:\n            if file_path:\n                QMessageBox.warning(self, \"错误\", \"导入失败\")\n                return None, None\n            else:\n                self.add_log_message(\"未选择文件\")\n                return None, None\n\n    # 更新日志\n    def add_log_message(self, text):\n        # 添加一些日志消息\n        self.textEdit.append(self.setTextType(text))\n        # 自动滚动到底部\n        self.textEdit.verticalScrollBar().setValue(\n            self.textEdit.verticalScrollBar().maximum()\n        )\n\n    def setTextType(self, text):\n        # 获取当前 年 月 日 时 分 秒  给变量 myTime\n        myTime = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(time.time()))\n        # 返回格式化后的字符串\n        return f\"[{myTime}]-----{text}\"\n\n        # 长连接的返回值\n\n    # 缓存点位\n    def cachePoint(self):\n        self.myredis1.set(\"maps\", json.dumps(self.maps))\n        self.add_log_message(\"点位缓存成功\")\n\n    def loadingMaps(self):\n        mapKeys = [\"alg\", \"mlm\", \"tg\", \"rd\", \"dst\", \"whd\", \"sn\", \"klj\", \"plm\"]\n        _maps = self.myredis1.get(\"maps\")\n        if _maps:\n            self.maps = json.loads(_maps)\n            for i, map_key in enumerate(mapKeys):\n                if len(self.maps[map_key]) > 0:\n                    for j, map_data in enumerate(self.maps[map_key]):\n                        target_list = self.listWiget[i]\n                        item = QtWidgets.QListWidgetItem()\n                        target_list.addItem(item)\n                        target_list.item(j).setText(map_data[\"name\"])\n\n    # 清除缓存\n    def clearCache(self):\n        reply = QtWidgets.QMessageBox.question(\n            self,\n            \"确认清空\",\n            \"清空会清除所有现有点位(不会删除文件)你确定要清空吗?\",\n            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,\n        )\n        if reply == QtWidgets.QMessageBox.Yes:\n            print(\"确认清空\")\n            self.maps = {\n                \"alg\": [],\n                \"mlm\": [],\n                \"tg\": [],\n                \"rd\": [],\n                \"dst\": [],\n                \"whd\": [],\n                \"sn\": [],\n                \"klj\": [],\n                \"plm\": [],\n            }\n            self.listWiget[self.tabWidget.currentIndex()].clear()\n            self.myredis1.flushall()\n            self.add_log_message(\"点位缓存清除成功\")\n\n    # 连通性检测\n    def check_connectivity(self):\n        match_code = self.window_id\n        if match_code:\n            try:\n                code, res = QtRequest(f\"/check_expiry/{match_code}\", \"GET\")\n                if res.get(\"code\") >= 0:\n                    if res.get(\"message\") == \"用户已到期\":\n                        self._from.close()\n                    else:\n                        print(res.get(\"endTime\"))\n                        end_time = res.get(\"endTime\")\n                        # 将 2024-07-02 15:13 格式的日期写入到界面\n                        self.dateTimeEdit.setDateTime(\n                            QtCore.QDateTime.fromString(end_time, \"yyyy-MM-dd hh:mm\")\n                        )\n                        return True\n                else:\n                    self._from.close()\n            except Exception as e:\n                print(\"错误\", e)\n                QMessageBox.warning(self, \"错误\", \"网络连接失败,请检查你的DNS\")\n                self._from.close()\n                return False\n        else:\n            QMessageBox.warning(self, \"错误\", \"无法获取机器码\")\n            self._from.close()\n            return False\n        pass\n\n    # 续期\n    def renewal(self):\n        self.reject_From = reject_From()\n        self.reject_From.closed.connect(self.renewal_finished)  # 连接信号到槽\n        self.reject_From.show()\n        pass\n\n    def renewal_finished(self):\n        self.check_connectivity()\n        print(\"续期窗口关闭\")\n\n    # 登录\n    def login(self):\n        # 判断按钮是登录 还是退出登录\n        if self.pushButton_11.text() == \"退出登录\":\n            self.myredis1.delete(\"cloud_id\")\n            self.lineEdit_2.setText(\"\")\n            self.pushButton_11.setText(\"登录\")\n            return\n        self.login_From = Ui_Login()\n        self.login_From.pip_user_id.connect(self.webLogin)  # 连接信号到槽\n        self.login_From.show()\n        pass\n\n    def webLogin(self, user_id):\n        print(\"登录成功\", user_id)\n        if user_id:\n            # 修改云账号id\n            self.lineEdit_2.setText(user_id)\n            # 将登录改为退出登录\n            self.pushButton_11.setText(\"退出登录\")\n            # 缓存用户id\n            self.myredis1.set(\"cloud_id\", user_id)\n\n    # 长连接相关\n    def sendMessage(self):\n        print(\"发送消息\")\n        text = json.dumps({\"window_id\": self.window_id, \"version\": self.version})\n        self.web_socket.sendTextMessage(str(text))\n\n    def handleMessage(self, message):\n        print(\"接受消息:\", message)\n        if (\n            \"无效的机器码/该机器已过期\" in message\n            or \"已到期\" in message\n            or \"版本不一致\" in message\n        ):\n            # 主动断开 socket连接\n            self.web_socket.close()\n            QMessageBox.warning(self, \"错误\", str(message))\n            # 主动停止挂机\n            if self.gameClass:\n                self.gameClass.stop()\n            self.p1 = None\n            self.p2 = None\n            self.gameClass = None\n\n            self._from.close()\n        if \"未到期\" in message:\n            self.userState = True\n            # 检查是进程们是否正常启动\n            if self.gameClass:\n                print(self.p1.is_alive())\n                # print(self.p2.is_alive())\n                if self.p1.is_alive() is False:\n                    self.p1 = multiprocessing.Process(\n                        target=self.gameClass.playHomeLoop\n                    )\n                    self.p1.start()\n                    pass\n                if self.p2.is_alive() is False:\n                    self.p2 = multiprocessing.Process(\n                        target=self.gameClass.gameMainLoop\n                    )\n                    self.p2.start()\n                    pass\n\n    def handleBinaryMessage(self, message):\n        print(\"Received binary message:\", message)\n\n    def onOpen(self):\n        self.sendMessage()\n        self.userState = True\n        self.add_log_message(\"连接成功\")\n\n    def onClose(self):\n        try:\n            print(\"关闭连接\", self.wsMax)\n            if self.wsMax < 3:\n                self.add_log_message(\"重连中...\")\n                self.wsMax += 1\n                # self.web_socket = None\n                self.web_socket.open(\n                    QUrl(f\"ws://{base_ws_url}/check_expiry_long/{self.window_id}\")\n                )\n                time.sleep(2)\n            else:\n                self.add_log_message(\"网络连接失败！\")\n                QMessageBox.warning(self, \"错误\", \"网络连接失败！\")\n                self._from.close()\n        except Exception as e:\n            self._from.close()\n\n    def onError(self):\n        print(\"Error:\", self.web_socket.error())\n\n    def start_ws(self):\n        try:\n            self.wsMax = 0\n            self.web_socket.open(\n                QUrl(f\"ws://{base_ws_url}/check_expiry_long/{self.window_id}\")\n            )\n            # 连接信号和槽\n            self.web_socket.textMessageReceived.connect(self.handleMessage)\n            self.web_socket.binaryMessageReceived.connect(self.handleBinaryMessage)\n            self.web_socket.connected.connect(self.onOpen)\n            self.web_socket.disconnected.connect(self.onClose)\n            # 错误处理\n            self.web_socket.error.connect(self.onError)\n        except Exception as e:\n            print(\"出现错误\", e)\n\n    def update_web_socket(self, state):\n        if state == False:\n            QMessageBox.warning(self, \"错误\", \"连接已断开\")\n        else:\n            print(\"已连接\", state)\n\n    def closeEvent(self, event):\n        # 这里可以添加自定义的关闭逻辑\n        if self.p1:\n            self.p1.terminate()\n        if self.p2:\n            self.p2.terminate()\n"}
{"type": "source_file", "path": "src/tools/tools.py", "content": "# from src.myClass.globadata import Singleton\n# from src.myClass.myopencv import ImageFinder\n# from src.model.myopencv import ImageFinder\n# from src.model.globadata import Singleton\nfrom PyQt5.QtWidgets import QDialog, QLabel, QVBoxLayout\nfrom PyQt5.QtWidgets import QDialog, QLabel, QVBoxLayout\nfrom PyQt5.QtGui import QPixmap\nfrom PyQt5.QtCore import Qt\nimport os\nimport subprocess\nimport time\nimport requests\nimport src.mycv.myopencv as myopencv\nimport subprocess\nimport platform\nimport psutil\nimport base64, hashlib\nfrom src.API.base import base_url\nimport cv2, pyautogui\nimport numpy as np\n\npublic_key_str = \"\"\"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuUCLTaMdFjI7nt7JaopY\nW/P2zA3A0O7oj/2tT0snm9SDGXZ+qti6sLZ7q03Gp4SndvccXEwb6oubYimGtaym\nJCiezWlc7pEaGxzuji0bJmZ1a2SG/FlhioOL1y7O+5dAjCtxhrjG9E9U9AvVTNOS\n+rUHNr4peHQkb4AzaKs6LaKpvRjw6QKIWT8DmjuAbsi4TJIH49nHwLv3AorB0nQY\nea5rkAlXysDIfU82LRrCwqbFoD6lNF9/sOAUyQ5IA/Kx/IcIe1cypTBImdJVBKXz\nNsx8GnWbadnMoBUKWVUfa2jUIXLaRq7QI3s+tfMH6rD5x4iqlNL5JCx/K6eVWGVW\nPwIDAQAB\n-----END PUBLIC KEY-----\"\"\"\n\nfinder = myopencv.ImageFinder(imgopcv=0.8)\nglobal_images_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),\"src\",\"public\")\n\n\n# 获取给定文件夹下的所有图片的绝对路径\ndef find__img_list(autoPath: str) -> list:\n    \"\"\"\n    获取给定文件夹下的所有图片的绝对路径。\n\n    Args:\n        autoPath (str): 文件夹路径。\n\n    Returns:\n        list: 包含所有图片绝对路径的列表。\n\n    \"\"\"\n    project_path = global_images_path\n    # 获取某个文件夹下的所有图片\n    dir_path = os.path.join(project_path, autoPath)\n    # 获取文件夹下的所有图片\n    imgs = os.listdir(dir_path)\n    # 获取图片的绝对路径\n    imgs = [os.path.join(dir_path, img) for img in imgs]\n    return imgs\n\n\n# 获取某个文件\ndef find_project_file(autoPath: str) -> str:\n    \"\"\"\n    获取某个文件的绝对路径。\n    Args:\n        autoPath (str): 文件路径。\n    Returns:\n        str: 文件的绝对路径。\n    \"\"\"\n    project_path = global_images_path\n    # 获取文件的绝对路径\n    file_path = os.path.join(project_path, autoPath)\n    return file_path\n\n\n# 在给定的autoPath中查找图片列表，并在窗口中找到这些图片的中心点\ndef find_imgs(autoPath: str) -> tuple:\n    \"\"\"\n    在给定的autoPath中查找图片列表，并在窗口中找到这些图片的中心点。\n\n    Args:\n        autoPath (str): 图片路径。\n\n    Returns:\n        tuple: 包含图片中心点的元组。\n\n    \"\"\"\n    imgs = find__img_list(autoPath)\n    # 获取窗口大小\n    center_point = finder.find_images_all(imgs)\n    return center_point\n\n\n# 在给定的autoPath中查找图片列表，并在窗口中找到这些图片的中心点\ndef find_img_target(autoPath: str) -> tuple:\n    \"\"\"\n    在给定的autoPath中查找一张图片，并在窗口中找到这个图片的中心点。\n\n    Args:\n        autoPath (str): 图片路径。\n        target: 目标。\n\n    Returns:\n        tuple: 包含图片中心点的元组。\n\n    \"\"\"\n    imgs = find_project_file(autoPath)\n    center_point = finder.find_image_all(imgs)\n    return center_point\n\n\n# 二极化匹配\ndef find_imgs_binary(autoPath: str, target, imgopcv=0.5) -> tuple:\n    target_path = find_project_file(autoPath)\n    return finder.find_one_img_screen_pubg(\n        target_path,\n        target,\n        imgopcv=imgopcv,\n        isgray=True,\n    )\n\n\n# 相对于某个坐标系找到单张图\ndef find_img_target_relative(autoPath: str, target, imgopcv=0.5) -> tuple:\n    imgs = find_project_file(autoPath)\n    return finder.find_one_img_screen_pubg(\n        imgs,\n        target,\n        imgopcv=imgopcv,\n        cv_type=\"TM_CCORR_NORMED\",\n    )\n\n\n# 判断顶部罗盘中心的颜色\ndef find_color(x, y) -> list:\n    \"\"\"find_color(x, y) -> list\n\n    Args:\n        x (int): x坐标。\n        y (int): y坐标。\n\n    Returns:\n        list: 返回颜色的列表。\n    \"\"\"\n    target = finder.find_color(int(x), int(y))\n    return target.tolist()\n\n\n# 判断给定的颜色是否在指定的区间范围内\ndef is_in_intervals(color, intervals) -> bool:\n    \"\"\"\n    判断给定的颜色是否在指定的区间范围内。\n    Args:\n        color (list): 表示颜色的列表，包含RGB三个通道的值。\n        intervals (list): 包含颜色区间的列表，每个区间由最小值和最大值组成。\n\n    Returns:\n        bool: 如果颜色在所有通道的区间范围内，则返回True；否则返回False。\n    \"\"\"\n    for i, value in enumerate(color):\n        if not (intervals[i][0] <= value <= intervals[i][1]):\n            return False\n    return True\n\n\n# 坐标系计算函数\ndef determine_quadrant_and_distance_with_tolerance(x, y, tolerance=3):\n    # 坐标系的中心点坐标\n    center_x = 259 / 2\n    center_y = 259 / 2\n\n    # 计算与中心点的距离差\n    distance_x = x - center_x\n    distance_y = y - center_y\n\n    # 判断点是否在中心点附近\n    if abs(distance_x) <= tolerance and abs(distance_y) <= tolerance:\n        quadrant = \"中心点附近\"\n    elif distance_x == 0:  # 点在y轴上\n        quadrant = \"y轴\"\n    elif distance_y == 0:  # 点在x轴上\n        quadrant = \"x轴\"\n    else:\n        # 判断点所在的象限\n        if x > center_x and y > center_y:\n            quadrant = \"第一象限\"\n        elif x < center_x and y > center_y:\n            quadrant = \"第二象限\"\n        elif x < center_x and y < center_y:\n            quadrant = \"第三象限\"\n        elif x > center_x and y < center_y:\n            quadrant = \"第四象限\"\n\n    # 返回象限和距离差\n    return quadrant, distance_x, distance_y\n\n\ndef get_machine_code():\n    # 获取机器码\n    try:\n        # 使用wmic命令获取硬件信息\n        result = (\n            subprocess.check_output(\"wmic csproduct get uuid\", shell=True)\n            .decode()\n            .split(\"\\n\")[1]\n            .strip()\n        )\n        return result\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return None\n\n\n# 创建一个自定义的弹窗\ndef createPop(imgPath, title=\"获取CDK\"):\n    \"\"\"\n    创建一个自定义的弹窗，展示从网络获取的图片。\n    参数：\n    - imgPath:str,图片的URL路径\n    - title:str,弹窗的标题,默认为\"获取CDK\"\n    返回值：\n    无返回值\n    \"\"\"\n    # 从网络获取图片\n    response = requests.get(imgPath)\n    # 获取图片内容\n    content = response.content\n    # 将图片内容转换为QByteArray\n    image_data = bytearray(content)\n    # 创建QPixmap并从QByteArray加载图片\n    pixmap = QPixmap()\n    pixmap.loadFromData(image_data, \"JPG\")  # 指定图片格式\n    # 创建一个自定义的弹窗\n    dialog = QDialog()\n    dialog.setWindowTitle(title)\n    # 不显示问号\n    dialog.setWindowFlags(Qt.WindowCloseButtonHint)\n    # 创建一个QLabel用于展示图片\n    label = QLabel()\n    # 设置图片到QLabel\n    # 创建一个模态对话框\n    dialog.setModal(True)\n    label.setPixmap(pixmap.scaled(400, 300, Qt.KeepAspectRatio))  # 根据需要调整大小\n    # 创建一个垂直布局\n    layout = QVBoxLayout()\n    # 将QLabel添加到布局中\n    layout.addWidget(label)\n    # 设置弹窗的布局\n    dialog.setLayout(layout)\n    # 显示弹窗\n    dialog.show()\n    dialog.exec_()\n\n\ndef get_system_info():\n    # 初始化系统信息字典\n    info = {\"cpu_model\": platform.processor()}\n\n    # 获取BIOS版本\n    if platform.system() == \"Windows\":\n        try:\n            info[\"bios_version\"] = (\n                subprocess.check_output(\"wmic bios get smbiosbiosversion\", shell=True)\n                .decode()\n                .split(\"\\n\")[1]\n                .strip()\n            )\n        except Exception as e:\n            info[\"bios_version\"] = str(e)\n    elif platform.system() == \"Darwin\":\n        try:\n            info[\"bios_version\"] = (\n                subprocess.check_output(\n                    \"system_profiler SPHardwareDataType | grep 'Boot ROM Version'\",\n                    shell=True,\n                )\n                .decode()\n                .split(\": \")[1]\n                .strip()\n            )\n        except Exception as e:\n            info[\"bios_version\"] = str(e)\n\n    # 获取主板型号\n    if platform.system() == \"Windows\":\n        try:\n            info[\"motherboard_model\"] = (\n                subprocess.check_output(\"wmic baseboard get product\", shell=True)\n                .decode()\n                .split(\"\\n\")[1]\n                .strip()\n            )\n        except Exception as e:\n            info[\"motherboard_model\"] = str(e)\n    elif platform.system() == \"Darwin\":\n        try:\n            info[\"motherboard_model\"] = (\n                subprocess.check_output(\n                    \"system_profiler SPHardwareDataType | grep 'Model Identifier'\",\n                    shell=True,\n                )\n                .decode()\n                .split(\": \")[1]\n                .strip()\n            )\n        except Exception as e:\n            info[\"motherboard_model\"] = str(e)\n\n    # # 获取磁盘序列号\n    # if platform.system() == \"Windows\":\n    #     try:\n    #         info[\"disk_serial\"] = (\n    #             subprocess.check_output(\"wmic diskdrive get serialnumber\", shell=True)\n    #             .decode()\n    #             .split(\"\\n\")[1]\n    #             .strip()\n    #         )\n    #     except Exception as e:\n    #         info[\"disk_serial\"] = str(e)\n    # elif platform.system() == \"Darwin\":\n    #     try:\n    #         info[\"disk_serial\"] = (\n    #             subprocess.check_output(\n    #                 \"system_profiler SPSerialATADataType | grep 'Serial Number'\",\n    #                 shell=True,\n    #             )\n    #             .decode()\n    #             .split(\": \")[1]\n    #             .strip()\n    #         )\n    #     except Exception as e:\n    #         info[\"disk_serial\"] = str(e)\n\n    # 获取显卡型号\n    if platform.system() == \"Windows\":\n        try:\n            info[\"gpu_model\"] = (\n                subprocess.check_output(\n                    \"wmic path win32_videocontroller get name\", shell=True\n                )\n                .decode()\n                .split(\"\\n\")[1]\n                .strip()\n            )\n        except Exception as e:\n            info[\"gpu_model\"] = str(e)\n    elif platform.system() == \"Darwin\":\n        try:\n            info[\"gpu_model\"] = (\n                subprocess.check_output(\n                    \"system_profiler SPDisplaysDataType | grep 'Chipset Model'\",\n                    shell=True,\n                )\n                .decode()\n                .split(\": \")[1]\n                .strip()\n            )\n        except Exception as e:\n            info[\"gpu_model\"] = str(e)\n\n    info[\"old_code\"] = get_machine_code()\n    # 获取内存大小、CPU核心数\n    info[\"memory_size\"] = str(round(psutil.virtual_memory().total / (1024**3))) + \" GB\"\n    info[\"processor_count\"] = str(psutil.cpu_count(logical=False))\n    hash_object = hashlib.sha256()\n    hash_object.update(str(info).encode(\"utf-8\"))\n    return hash_object.hexdigest()\n\n\n\n\n# 相对于点来找色\ndef find_colors(x, y, length=30):\n    try:\n        screenshot = pyautogui.screenshot()\n        screen_np = np.array(screenshot)\n        img_rgb = cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)\n        points_and_colors = [(x + i, y, img_rgb[y, x + i]) for i in range(length)]\n        return points_and_colors\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n\n# 寻找指定点位 2\ndef findColorTarget2(x=1920 / 2, y=35, length=30):\n    intervals = [(10, 66), (169, 237), (172, 251)]  # 目标点颜色区间\n    points_and_colors = find_colors(int(x), int(y), length)\n    if points_and_colors:\n        for px, py, color in points_and_colors:\n            if is_in_intervals(color, intervals):\n                print(\"符合条件的点位置：\", (px, py))\n                return (px, py)\n        print(\"没有符合条件的点\")\n        return None\n    else:\n        print(\"没有找到任何点\")\n        return None\n\n\nif __name__ == \"__main__\":\n    # result = find__img_list(\"public\\\\error\")\n    result = get_system_info()\n    print(result)\n"}
{"type": "source_file", "path": "src/ui/window.py", "content": "# -*- coding: utf-8 -*-\n\n#\n# Created by: PyQt5 UI code generator 5.15.10\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic5 is\n# run again.  Do not edit this file unless you know what you are doing.\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.setEnabled(True)\n        Form.resize(943, 489)\n        self.pushButton = QtWidgets.QPushButton(Form)\n        self.pushButton.setGeometry(QtCore.QRect(20, 10, 161, 71))\n        self.pushButton.setObjectName(\"pushButton\")\n        self.groupBox = QtWidgets.QGroupBox(Form)\n        self.groupBox.setGeometry(QtCore.QRect(20, 240, 371, 221))\n        self.groupBox.setObjectName(\"groupBox\")\n        self.tabWidget = QtWidgets.QTabWidget(self.groupBox)\n        self.tabWidget.setGeometry(QtCore.QRect(10, 50, 351, 161))\n        self.tabWidget.setObjectName(\"tabWidget\")\n        self.tab_3 = QtWidgets.QWidget()\n        self.tab_3.setObjectName(\"tab_3\")\n        self.listWidget_2 = QtWidgets.QListWidget(self.tab_3)\n        self.listWidget_2.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_2.setObjectName(\"listWidget_2\")\n        item = QtWidgets.QListWidgetItem()\n        self.listWidget_2.addItem(item)\n        self.tabWidget.addTab(self.tab_3, \"\")\n        self.tab_4 = QtWidgets.QWidget()\n        self.tab_4.setObjectName(\"tab_4\")\n        self.listWidget_3 = QtWidgets.QListWidget(self.tab_4)\n        self.listWidget_3.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_3.setObjectName(\"listWidget_3\")\n        item = QtWidgets.QListWidgetItem()\n        self.listWidget_3.addItem(item)\n        self.tabWidget.addTab(self.tab_4, \"\")\n        self.tab = QtWidgets.QWidget()\n        self.tab.setObjectName(\"tab\")\n        self.listWidget = QtWidgets.QListWidget(self.tab)\n        self.listWidget.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget.setObjectName(\"listWidget\")\n        item = QtWidgets.QListWidgetItem()\n        self.listWidget.addItem(item)\n        self.tabWidget.addTab(self.tab, \"\")\n        self.tab_2 = QtWidgets.QWidget()\n        self.tab_2.setObjectName(\"tab_2\")\n        self.listWidget_4 = QtWidgets.QListWidget(self.tab_2)\n        self.listWidget_4.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_4.setObjectName(\"listWidget_4\")\n        item = QtWidgets.QListWidgetItem()\n        self.listWidget_4.addItem(item)\n        self.tabWidget.addTab(self.tab_2, \"\")\n        self.tab_5 = QtWidgets.QWidget()\n        self.tab_5.setObjectName(\"tab_5\")\n        self.listWidget_5 = QtWidgets.QListWidget(self.tab_5)\n        self.listWidget_5.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_5.setObjectName(\"listWidget_5\")\n        item = QtWidgets.QListWidgetItem()\n        self.listWidget_5.addItem(item)\n        self.tabWidget.addTab(self.tab_5, \"\")\n        self.tab_6 = QtWidgets.QWidget()\n        self.tab_6.setObjectName(\"tab_6\")\n        self.listWidget_6 = QtWidgets.QListWidget(self.tab_6)\n        self.listWidget_6.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_6.setObjectName(\"listWidget_6\")\n        item = QtWidgets.QListWidgetItem()\n        self.listWidget_6.addItem(item)\n        self.tabWidget.addTab(self.tab_6, \"\")\n        self.tab_9 = QtWidgets.QWidget()\n        self.tab_9.setObjectName(\"tab_9\")\n        self.listWidget_8 = QtWidgets.QListWidget(self.tab_9)\n        self.listWidget_8.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_8.setObjectName(\"listWidget_8\")\n        item = QtWidgets.QListWidgetItem()\n        self.listWidget_8.addItem(item)\n        self.tabWidget.addTab(self.tab_9, \"\")\n        self.tab_7 = QtWidgets.QWidget()\n        self.tab_7.setObjectName(\"tab_7\")\n        self.listWidget_9 = QtWidgets.QListWidget(self.tab_7)\n        self.listWidget_9.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_9.setObjectName(\"listWidget_9\")\n        item = QtWidgets.QListWidgetItem()\n        self.listWidget_9.addItem(item)\n        self.tabWidget.addTab(self.tab_7, \"\")\n        self.tab_8 = QtWidgets.QWidget()\n        self.tab_8.setObjectName(\"tab_8\")\n        self.listWidget_7 = QtWidgets.QListWidget(self.tab_8)\n        self.listWidget_7.setGeometry(QtCore.QRect(0, 0, 341, 136))\n        self.listWidget_7.setObjectName(\"listWidget_7\")\n        item = QtWidgets.QListWidgetItem()\n        self.listWidget_7.addItem(item)\n        self.tabWidget.addTab(self.tab_8, \"\")\n        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)\n        self.pushButton_2.setGeometry(QtCore.QRect(10, 20, 75, 23))\n        self.pushButton_2.setObjectName(\"pushButton_2\")\n        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)\n        self.pushButton_3.setGeometry(QtCore.QRect(90, 20, 75, 23))\n        self.pushButton_3.setObjectName(\"pushButton_3\")\n        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox)\n        self.pushButton_4.setGeometry(QtCore.QRect(170, 20, 75, 23))\n        self.pushButton_4.setObjectName(\"pushButton_4\")\n        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox)\n        self.pushButton_5.setGeometry(QtCore.QRect(250, 20, 75, 23))\n        self.pushButton_5.setObjectName(\"pushButton_5\")\n        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(190, 10, 201, 31))\n        self.horizontalLayoutWidget.setObjectName(\"horizontalLayoutWidget\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.label.setFont(font)\n        self.label.setObjectName(\"label\")\n        self.horizontalLayout.addWidget(self.label)\n        self.spinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.spinBox.setFont(font)\n        self.spinBox.setProperty(\"value\", 30)\n        self.spinBox.setObjectName(\"spinBox\")\n        self.horizontalLayout.addWidget(self.spinBox)\n        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(190, 50, 201, 31))\n        self.horizontalLayoutWidget_2.setObjectName(\"horizontalLayoutWidget_2\")\n        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)\n        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_2.setObjectName(\"horizontalLayout_2\")\n        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.label_2.setFont(font)\n        self.label_2.setObjectName(\"label_2\")\n        self.horizontalLayout_2.addWidget(self.label_2)\n        self.comboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget_2)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.comboBox.setFont(font)\n        self.comboBox.setObjectName(\"comboBox\")\n        self.comboBox.addItem(\"\")\n        self.comboBox.addItem(\"\")\n        self.horizontalLayout_2.addWidget(self.comboBox)\n        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(20, 90, 371, 31))\n        self.horizontalLayoutWidget_3.setObjectName(\"horizontalLayoutWidget_3\")\n        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)\n        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_3.setObjectName(\"horizontalLayout_3\")\n        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)\n        self.label_3.setObjectName(\"label_3\")\n        self.horizontalLayout_3.addWidget(self.label_3)\n        self.lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)\n        self.lineEdit.setEnabled(False)\n        self.lineEdit.setObjectName(\"lineEdit\")\n        self.horizontalLayout_3.addWidget(self.lineEdit)\n        self.scrollArea = QtWidgets.QScrollArea(Form)\n        self.scrollArea.setEnabled(True)\n        self.scrollArea.setGeometry(QtCore.QRect(410, 220, 511, 241))\n        self.scrollArea.setWidgetResizable(True)\n        self.scrollArea.setObjectName(\"scrollArea\")\n        self.scrollAreaWidgetContents = QtWidgets.QWidget()\n        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 509, 239))\n        self.scrollAreaWidgetContents.setObjectName(\"scrollAreaWidgetContents\")\n        self.textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)\n        self.textEdit.setGeometry(QtCore.QRect(0, 0, 511, 241))\n        self.textEdit.setObjectName(\"textEdit\")\n        self.scrollArea.setWidget(self.scrollAreaWidgetContents)\n        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(20, 130, 371, 31))\n        self.horizontalLayoutWidget_4.setObjectName(\"horizontalLayoutWidget_4\")\n        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)\n        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_4.setObjectName(\"horizontalLayout_4\")\n        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget_4)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())\n        self.label_4.setSizePolicy(sizePolicy)\n        self.label_4.setObjectName(\"label_4\")\n        self.horizontalLayout_4.addWidget(self.label_4)\n        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.horizontalLayoutWidget_4)\n        self.dateTimeEdit.setEnabled(False)\n        self.dateTimeEdit.setObjectName(\"dateTimeEdit\")\n        self.horizontalLayout_4.addWidget(self.dateTimeEdit)\n        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(400, 10, 371, 31))\n        self.horizontalLayoutWidget_5.setObjectName(\"horizontalLayoutWidget_5\")\n        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)\n        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_5.setObjectName(\"horizontalLayout_5\")\n        self.checkBox_2 = QtWidgets.QCheckBox(self.horizontalLayoutWidget_5)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.checkBox_2.sizePolicy().hasHeightForWidth())\n        self.checkBox_2.setSizePolicy(sizePolicy)\n        self.checkBox_2.setObjectName(\"checkBox_2\")\n        self.horizontalLayout_5.addWidget(self.checkBox_2)\n        self.pushButton_7 = QtWidgets.QPushButton(self.horizontalLayoutWidget_5)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())\n        self.pushButton_7.setSizePolicy(sizePolicy)\n        self.pushButton_7.setObjectName(\"pushButton_7\")\n        self.horizontalLayout_5.addWidget(self.pushButton_7)\n        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget_5)\n        self.label_5.setObjectName(\"label_5\")\n        self.horizontalLayout_5.addWidget(self.label_5)\n        self.pushButton_10 = QtWidgets.QPushButton(self.horizontalLayoutWidget_5)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.pushButton_10.sizePolicy().hasHeightForWidth())\n        self.pushButton_10.setSizePolicy(sizePolicy)\n        self.pushButton_10.setObjectName(\"pushButton_10\")\n        self.horizontalLayout_5.addWidget(self.pushButton_10)\n        self.horizontalLayoutWidget_6 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_6.setGeometry(QtCore.QRect(400, 40, 371, 31))\n        self.horizontalLayoutWidget_6.setObjectName(\"horizontalLayoutWidget_6\")\n        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_6)\n        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_6.setObjectName(\"horizontalLayout_6\")\n        self.checkBox = QtWidgets.QCheckBox(self.horizontalLayoutWidget_6)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.checkBox.sizePolicy().hasHeightForWidth())\n        self.checkBox.setSizePolicy(sizePolicy)\n        self.checkBox.setObjectName(\"checkBox\")\n        self.horizontalLayout_6.addWidget(self.checkBox)\n        self.pushButton_8 = QtWidgets.QPushButton(self.horizontalLayoutWidget_6)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())\n        self.pushButton_8.setSizePolicy(sizePolicy)\n        self.pushButton_8.setObjectName(\"pushButton_8\")\n        self.horizontalLayout_6.addWidget(self.pushButton_8)\n        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget_6)\n        self.label_6.setObjectName(\"label_6\")\n        self.horizontalLayout_6.addWidget(self.label_6)\n        self.pushButton_9 = QtWidgets.QPushButton(self.horizontalLayoutWidget_6)\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n        sizePolicy.setHorizontalStretch(0)\n        sizePolicy.setVerticalStretch(0)\n        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())\n        self.pushButton_9.setSizePolicy(sizePolicy)\n        self.pushButton_9.setObjectName(\"pushButton_9\")\n        self.horizontalLayout_6.addWidget(self.pushButton_9)\n        self.pushButton_6 = QtWidgets.QPushButton(Form)\n        self.pushButton_6.setGeometry(QtCore.QRect(20, 170, 75, 23))\n        self.pushButton_6.setObjectName(\"pushButton_6\")\n        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(400, 70, 371, 31))\n        self.horizontalLayoutWidget_7.setObjectName(\"horizontalLayoutWidget_7\")\n        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)\n        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_7.setObjectName(\"horizontalLayout_7\")\n        self.label_7 = QtWidgets.QLabel(self.horizontalLayoutWidget_7)\n        self.label_7.setObjectName(\"label_7\")\n        self.horizontalLayout_7.addWidget(self.label_7)\n        self.lineEdit_2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_7)\n        self.lineEdit_2.setEnabled(False)\n        self.lineEdit_2.setObjectName(\"lineEdit_2\")\n        self.horizontalLayout_7.addWidget(self.lineEdit_2)\n        self.pushButton_11 = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)\n        self.pushButton_11.setObjectName(\"pushButton_11\")\n        self.horizontalLayout_7.addWidget(self.pushButton_11)\n\n        self.retranslateUi(Form)\n        self.tabWidget.setCurrentIndex(8)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n\n    def retranslateUi(self, Form):\n        _translate = QtCore.QCoreApplication.translate\n        Form.setWindowTitle(_translate(\"Form\", \"Form\"))\n        self.pushButton.setText(_translate(\"Form\", \"开始挂机\"))\n        self.groupBox.setTitle(_translate(\"Form\", \"点位数据\"))\n        __sortingEnabled = self.listWidget_2.isSortingEnabled()\n        self.listWidget_2.setSortingEnabled(False)\n        item = self.listWidget_2.item(0)\n        item.setText(_translate(\"Form\", \"123\"))\n        self.listWidget_2.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate(\"Form\", \"艾伦格\"))\n        __sortingEnabled = self.listWidget_3.isSortingEnabled()\n        self.listWidget_3.setSortingEnabled(False)\n        item = self.listWidget_3.item(0)\n        item.setText(_translate(\"Form\", \"123\"))\n        self.listWidget_3.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate(\"Form\", \"米拉玛\"))\n        __sortingEnabled = self.listWidget.isSortingEnabled()\n        self.listWidget.setSortingEnabled(False)\n        item = self.listWidget.item(0)\n        item.setText(_translate(\"Form\", \"123\"))\n        self.listWidget.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate(\"Form\", \"泰戈\"))\n        __sortingEnabled = self.listWidget_4.isSortingEnabled()\n        self.listWidget_4.setSortingEnabled(False)\n        item = self.listWidget_4.item(0)\n        item.setText(_translate(\"Form\", \"123\"))\n        self.listWidget_4.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate(\"Form\", \"容都\"))\n        __sortingEnabled = self.listWidget_5.isSortingEnabled()\n        self.listWidget_5.setSortingEnabled(False)\n        item = self.listWidget_5.item(0)\n        item.setText(_translate(\"Form\", \"123\"))\n        self.listWidget_5.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate(\"Form\", \"帝斯顿\"))\n        __sortingEnabled = self.listWidget_6.isSortingEnabled()\n        self.listWidget_6.setSortingEnabled(False)\n        item = self.listWidget_6.item(0)\n        item.setText(_translate(\"Form\", \"123\"))\n        self.listWidget_6.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate(\"Form\", \"维寒迪\"))\n        __sortingEnabled = self.listWidget_8.isSortingEnabled()\n        self.listWidget_8.setSortingEnabled(False)\n        item = self.listWidget_8.item(0)\n        item.setText(_translate(\"Form\", \"123\"))\n        self.listWidget_8.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_9), _translate(\"Form\", \"萨诺\"))\n        __sortingEnabled = self.listWidget_9.isSortingEnabled()\n        self.listWidget_9.setSortingEnabled(False)\n        item = self.listWidget_9.item(0)\n        item.setText(_translate(\"Form\", \"123\"))\n        self.listWidget_9.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_7), _translate(\"Form\", \"卡拉金\"))\n        __sortingEnabled = self.listWidget_7.isSortingEnabled()\n        self.listWidget_7.setSortingEnabled(False)\n        item = self.listWidget_7.item(0)\n        item.setText(_translate(\"Form\", \"123\"))\n        self.listWidget_7.setSortingEnabled(__sortingEnabled)\n        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_8), _translate(\"Form\", \"帕拉莫\"))\n        self.pushButton_2.setText(_translate(\"Form\", \"导入点位\"))\n        self.pushButton_3.setText(_translate(\"Form\", \"删除点位\"))\n        self.pushButton_4.setText(_translate(\"Form\", \"缓存点位\"))\n        self.pushButton_5.setText(_translate(\"Form\", \"清除缓存\"))\n        self.label.setText(_translate(\"Form\", \"跳伞延迟时间(秒)\"))\n        self.label_2.setText(_translate(\"Form\", \"选点方式\"))\n        self.comboBox.setItemText(0, _translate(\"Form\", \"随机\"))\n        self.comboBox.setItemText(1, _translate(\"Form\", \"第一个点\"))\n        self.label_3.setText(_translate(\"Form\", \"机器码:\"))\n        self.label_4.setText(_translate(\"Form\", \"到期时间：\"))\n        self.checkBox_2.setText(_translate(\"Form\", \"开启\"))\n        self.pushButton_7.setText(_translate(\"Form\", \"设置截屏保存位置\"))\n        self.label_5.setText(_translate(\"Form\", \"-\"))\n        self.pushButton_10.setText(_translate(\"Form\", \"打开\"))\n        self.checkBox.setText(_translate(\"Form\", \"开启\"))\n        self.pushButton_8.setText(_translate(\"Form\", \"设置截图保存位置\"))\n        self.label_6.setText(_translate(\"Form\", \"-\"))\n        self.pushButton_9.setText(_translate(\"Form\", \"打开\"))\n        self.pushButton_6.setText(_translate(\"Form\", \"续期\"))\n        self.label_7.setText(_translate(\"Form\", \"云账号  \"))\n        self.pushButton_11.setText(_translate(\"Form\", \"登录\"))\n\n\nif __name__ == \"__main__\":\n    import sys\n    app = QtWidgets.QApplication(sys.argv)\n    Form = QtWidgets.QWidget()\n    ui = Ui_Form()\n    ui.setupUi(Form)\n    Form.show()\n    sys.exit(app.exec_())\n"}
{"type": "source_file", "path": "src/ui/login.py", "content": "# -*- coding: utf-8 -*-\n\n#\n# Created by: PyQt5 UI code generator 5.15.10\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic5 is\n# run again.  Do not edit this file unless you know what you are doing.\n\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        Form.resize(571, 289)\n        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(170, 90, 251, 31))\n        self.horizontalLayoutWidget.setObjectName(\"horizontalLayoutWidget\")\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)\n        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\n        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)\n        self.label.setObjectName(\"label\")\n        self.horizontalLayout.addWidget(self.label)\n        self.lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.lineEdit.setFont(font)\n        self.lineEdit.setObjectName(\"lineEdit\")\n        self.horizontalLayout.addWidget(self.lineEdit)\n        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)\n        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(170, 140, 251, 31))\n        self.horizontalLayoutWidget_2.setObjectName(\"horizontalLayoutWidget_2\")\n        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)\n        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)\n        self.horizontalLayout_2.setObjectName(\"horizontalLayout_2\")\n        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)\n        self.label_2.setObjectName(\"label_2\")\n        self.horizontalLayout_2.addWidget(self.label_2)\n        self.lineEdit_2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)\n        font = QtGui.QFont()\n        font.setPointSize(12)\n        self.lineEdit_2.setFont(font)\n        self.lineEdit_2.setObjectName(\"lineEdit_2\")\n        self.horizontalLayout_2.addWidget(self.lineEdit_2)\n        self.pushButton = QtWidgets.QPushButton(Form)\n        self.pushButton.setGeometry(QtCore.QRect(250, 190, 91, 41))\n        font = QtGui.QFont()\n        font.setPointSize(14)\n        self.pushButton.setFont(font)\n        self.pushButton.setObjectName(\"pushButton\")\n        self.label_3 = QtWidgets.QLabel(Form)\n        self.label_3.setGeometry(QtCore.QRect(220, 20, 141, 41))\n        font = QtGui.QFont()\n        font.setPointSize(18)\n        self.label_3.setFont(font)\n        self.label_3.setTextFormat(QtCore.Qt.RichText)\n        self.label_3.setAlignment(QtCore.Qt.AlignCenter)\n        self.label_3.setObjectName(\"label_3\")\n\n        self.retranslateUi(Form)\n        QtCore.QMetaObject.connectSlotsByName(Form)\n\n    def retranslateUi(self, Form):\n        _translate = QtCore.QCoreApplication.translate\n        Form.setWindowTitle(_translate(\"Form\", \"云账号登录\"))\n        self.label.setText(_translate(\"Form\", \"账号：\"))\n        self.label_2.setText(_translate(\"Form\", \"密码：\"))\n        self.pushButton.setText(_translate(\"Form\", \"登录\"))\n        self.label_3.setText(_translate(\"Form\", \"云账号登录\"))\n\n\nif __name__ == \"__main__\":\n    import sys\n    app = QtWidgets.QApplication(sys.argv)\n    Form = QtWidgets.QWidget()\n    ui = Ui_Form()\n    ui.setupUi(Form)\n    Form.show()\n    sys.exit(app.exec_())\n"}
