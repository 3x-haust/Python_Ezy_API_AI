{"repo_info": {"repo_name": "leaping", "repo_owner": "leapingio", "repo_url": "https://github.com/leapingio/leaping"}}
{"type": "test_file", "path": "tracing/test_file.py", "content": "class Person:\n    def __init__(self, x):\n        self.x = x\n\n    def speak(self):\n        return \"hey\"\n\n    def introduce(self):\n        msg = self.speak()\n        return f\"{msg}, I'm a person with attribute x = {self.x}\"\n\n    def calculate(self):\n        return self.x * 2\n\n    def react(self):\n        reaction = self.introduce() + \". Nice to meet you!\"\n        return reaction\n\n    def conclude(self):\n        conclusion = self.react() + \" Let's calculate something: \" + str(self.calculate())\n        return conclusion\n\ndef func(x):\n    y = 3 * x\n    z = y + 5\n\n    p = Person(3)\n    result = p.conclude()  # Modified to use the conclude method\n\n    return z + p.x\n\ndef func2(y):\n    a = y * 2\n    return func(a)\n\ndef func3(z):\n    return func2(z + 1)\n\ndef func4(w):\n    return func3(w * 2)\n\ndef test_failure():\n    val = func4(3)  # Changed to call func4\n    k = 5\n    for i in range(300000):\n        i ^= 2\n    x = 3 / (val - 26)\n    assert val == 4\n"}
{"type": "source_file", "path": "leaping/src/leaping.py", "content": "import argparse\nimport select\nimport signal\nimport sys\nfrom socket import socket, AF_INET, SOCK_STREAM\nimport threading\nimport time\n\nglobal stop_spinner\nstop_spinner = threading.Event()\n\n\ndef spinner_animation(message=\"Loading...\"):\n    spinner_chars = ['|', '/', '-', '\\\\']\n    idx = 0\n    while not stop_spinner.is_set():\n        print(f\"\\r{message} \\U0001F914 {spinner_chars[idx % len(spinner_chars)]}\", end='')\n        idx += 1\n        time.sleep(0.1)\n    print('\\r', end='')\n\ndef create_spinner():\n    global stop_spinner\n    stop_spinner.clear()\n    spinner_thread = threading.Thread(target=spinner_animation, args=(\"Thinking...\",))\n    spinner_thread.start()\n    return spinner_thread\n\ndef stop_spinner_animation(spinner_thread):\n    stop_spinner.set()\n    spinner_thread.join()\n\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"W\")\n    parser.add_argument('-p', '--port', type=int, help='The temporary file generated by pytest-leaping', required=True)\n\n    args = parser.parse_args()\n    if not args.port:\n        raise ValueError(\"Port number not provided. Exiting...\")\n\n    global stop_spinner\n\n    print(\"\"\" \n _                     _             \n| |    ___  __ _ _ __ (_)_ __   __ _ \n| |   / _ \\\\/ _` | '_ \\\\| | '_ \\\\ / _` |\n| |__|  __/ (_| | |_) | | | | | (_| |\n|_____\\\\___|\\\\__,_| .__/|_|_| |_|\\\\__, |\n                |_|            |___/ \n\"\"\")\n\n    sock = socket(AF_INET, SOCK_STREAM)\n    sock.connect(('localhost', args.port))\n\n    sigint_received = False\n\n\n    def signal_handler(sig, frame):\n        global sigint_received\n        sigint_received = True\n        sys.exit(0)\n        sys.exit(0)\n        # You can also initiate cleanup here if needed\n\n    spinner = create_spinner()\n    stop_sent = False\n    sock.setblocking(False)\n    signal.signal(signal.SIGINT, signal_handler)\n\n    def receive_output_from_server():\n        while not stop_sent and not sigint_received:\n            # Check if the socket is ready for reading\n            ready_to_read, _, _ = select.select([sock], [], [], 0.1)\n            if ready_to_read:\n                response = sock.recv(2048)\n                if response:\n                    stop_spinner_animation(spinner)\n                    if response == b\"LEAPING_STOP\":\n                        break\n                    print(f\"\\033[61m{response.decode('utf-8')}\\033[0m\", end=\"\")\n\n    receive_output_from_server()\n    print(\"\\n\")\n\n    while True:\n        user_input = input(\"\\n If the explanation is wrong, say why and we'll try again. Press q to exit:  \\n> \")\n\n        if user_input.strip() == \"q\" or user_input.strip() == \"exit\":\n            sock.sendall(b\"exit\")\n            break\n        elif user_input.strip() == \"\":  # Check if the input is just an Enter key press (empty string)\n            continue  # Skip the rest of the loop and prompt again\n        sock.sendall(user_input.encode(\"utf-8\"))\n        spinner = create_spinner()\n        receive_output_from_server()\n"}
{"type": "source_file", "path": "leaping/setup.py", "content": "from setuptools import setup\n\nsetup(\n    name=\"leaping\",\n    version=\"0.1.14\",\n    entry_points={\n        'console_scripts': [\n            'leaping=leaping:main',\n        ],\n    },\n    python_requires='>=3.0',\n    install_requires=[\n        \"pytest-leaping==0.1.14\",\n        \"prompt_toolkit==3.0.20\",\n        \"openai==1.12.0\"\n    ],\n)\n"}
