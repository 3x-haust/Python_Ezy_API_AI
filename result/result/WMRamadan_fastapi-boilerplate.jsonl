{"repo_info": {"repo_name": "fastapi-boilerplate", "repo_owner": "WMRamadan", "repo_url": "https://github.com/WMRamadan/fastapi-boilerplate"}}
{"type": "test_file", "path": "api/tests/__init__.py", "content": ""}
{"type": "test_file", "path": "api/tests/test_main.py", "content": "\"\"\"Tests for main.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom api.database import Base, get_db\nfrom api import main\nfrom api.tests.db import engine, override_get_db\n\n@pytest.fixture()\ndef test_db():\n    \"\"\"\n    Test database.\n    \"\"\"\n    Base.metadata.create_all(bind=engine)\n    yield\n    Base.metadata.drop_all(bind=engine)\n\nmain.app.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(main.app)\n\ndef _create_user(test_db):\n    \"\"\"\n    Create user.\n    \"\"\"\n    response = client.post(\n        \"/users/\",\n        # headers={\"X-Token\": \"coneofsilence\"},\n        json={\"email\": \"testing@email.com\", \"password\": \"testpwd123\"},\n    )\n    return response\n\ndef test_root():\n    \"\"\"\n    Test root route.\n    \"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello from the FastAPI Boilerplate!\"}\n\ndef test_health():\n    \"\"\"\n    Test health route.\n    \"\"\"\n    response = client.get(\"/health\")\n    assert response.status_code == 200\n    assert response.json() == {\n        \"status\": \"ok\",\n        \"info\": main.get_info()\n        }\n\ndef test_create_user(test_db):\n    \"\"\"\n    Test create user.\n    \"\"\"\n    response = _create_user(test_db)\n    assert response.status_code == 200\n    assert response.json() == {\n    \"email\": \"testing@email.com\",\n    \"id\": 1,\n    \"is_active\": True,\n    \"items\": [ ],\n    \"tasks\": [ ]\n    }\n\ndef test_get_users(test_db):\n    \"\"\"\n    Test get users.\n    \"\"\"\n    _create_user(test_db)\n    response = client.get(\"/users/\")\n    assert response.status_code == 200\n    assert response.json() == [{\n    \"email\": \"testing@email.com\",\n    \"id\": 1,\n    \"is_active\": True,\n    \"items\": [ ],\n    \"tasks\": [ ]\n    }]\n"}
{"type": "test_file", "path": "api/tests/db.py", "content": "\"\"\"Test Database configuration.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\n\n\nSQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\ndef override_get_db():\n    \"\"\"\n    Override database with test database.\n    \"\"\"\n    try:\n        db = TestingSessionLocal()\n        yield db\n    finally:\n        db.close()\n"}
{"type": "source_file", "path": "api/database.py", "content": "\"\"\"Database configuration.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom functools import lru_cache\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom pymongo import MongoClient\nfrom . import config\n\n\n@lru_cache()\ndef get_settings():\n    \"\"\"\n    Config settings function.\n    \"\"\"\n    return config.Settings()\n\nconf_settings = get_settings()\n\nSQLALCHEMY_DATABASE_URL = conf_settings.SQLALCHEMY_DATABASE_URL\n\nMONGODB_URL = conf_settings.MONGODB_URL\nMONGODB_NAME = conf_settings.MONGODB_NAME\n\nmongodb_client = MongoClient(MONGODB_URL)\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\n# Dependency\ndef get_db():\n    \"\"\"\n    Gets database session.\n    \"\"\"\n    db_session = SessionLocal()\n    try:\n        yield db_session\n    finally:\n        db_session.close()\n\ndef get_mongodb():\n    \"\"\"\n    Init MongoDB Database.\n    \"\"\"\n    mongo_db = mongodb_client[MONGODB_NAME]\n    return mongo_db\n"}
{"type": "source_file", "path": "api/config.py", "content": "\"\"\"App configuration.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom typing import List\nfrom pydantic import BaseSettings\n\n\nclass Settings(BaseSettings):\n    \"\"\"\n    Settings class.\n    \"\"\"\n    SQLALCHEMY_DATABASE_URL: str\n    MONGODB_URL: str\n    MONGODB_NAME: str\n    CELERY_CONF_BROKER_URL: str\n    CELERY_CONF_RESULT_BACKEND: str\n    ALLOWED_ORIGINS: List[str]\n    ALLOW_CREDENTIALS: bool\n    ALLOW_METHODS: List[str]\n    ALLOW_HEADERS: List[str]\n    APP_DEBUG: bool\n\n    class Config:\n        \"\"\"\n        Config class.\n        \"\"\"\n        env_file = \".env.example\"\n        env_file_encoding = 'utf-8'\n"}
{"type": "source_file", "path": "api/__init__.py", "content": ""}
{"type": "source_file", "path": "api/helpers/crud.py", "content": "\"\"\"This module is the helper for all crud operations.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom typing import List\nfrom sqlalchemy.orm import Session\nfrom api.collections import questions_collection\nfrom api.models import user_model, item_model, task_model\nfrom api.schemas import items_schema, tasks_schema, users_schema, questions_schema\nfrom api.worker import celery, run_task\n\n\ndef get_user(db_session: Session, user_id: int):\n    \"\"\"\n    Get user by User ID helper.\n    :param db_session: The database session.\n    :param user_id: The User ID.\n    \"\"\"\n    return db_session.query(user_model.User).filter(user_model.User.id == user_id).first()\n\ndef update_user(db_session: Session, user_id: int, user: users_schema.UserCreate):\n    \"\"\"\n    Update user by User ID helper.\n    :param db_session: The database session.\n    :param user_id: The User ID.\n    \"\"\"\n    user_obj = get_user(db_session=db_session, user_id=user_id)\n    if user_obj:\n        user_obj.email = user.email\n        db_session.add(user_obj)\n        db_session.commit()\n    return user_obj\n\ndef delete_user(db_session: Session, user_id: int):\n    \"\"\"\n    Delete user by User ID helper.\n    :param db_session: The database session.\n    :param user_id: The User ID.\n    \"\"\"\n    user_obj = get_user(db_session=db_session, user_id=user_id)\n    if user_obj:\n        db_session.delete(user_obj)\n        db_session.commit()\n    return user_obj\n\n\ndef get_user_by_email(db_session: Session, email: str):\n    \"\"\"\n    Get user by User email helper.\n    :param db_session: The database session.\n    :param email: The User Email.\n    \"\"\"\n    return db_session.query(user_model.User).filter(user_model.User.email == email).first()\n\n\ndef get_users(db_session: Session, skip: int = 0, limit: int = 100) -> List:\n    \"\"\"\n    Get all users helper.\n    :param db_session: The database session.\n    :param skip: The offset used when paging.\n    :param limit: The number of users to retrieve per query.\n    \"\"\"\n    return db_session.query(user_model.User).offset(skip).limit(limit).all()\n\n\ndef create_user(db_session: Session, user: users_schema.UserCreate):\n    \"\"\"\n    Create user helper.\n    :param db_session: The database session.\n    :param user: The user schema.\n    \"\"\"\n    fake_hashed_password = user.password + \"notreallyhashed\"\n    db_user = user_model.User(email=user.email, hashed_password=fake_hashed_password)\n    db_session.add(db_user)\n    db_session.commit()\n    db_session.refresh(db_user)\n    return db_user\n\n\ndef get_items(db_session: Session, skip: int = 0, limit: int = 100):\n    \"\"\"\n    Get all items helper.\n    :param db_session: The database session.\n    :param skip: The offset used when paging.\n    :param limit: The number of items to retrieve per query.\n    \"\"\"\n    return db_session.query(item_model.Item).offset(skip).limit(limit).all()\n\n\ndef create_user_item(db_session: Session, item: items_schema.ItemCreate, user_id: int):\n    \"\"\"\n    Create the user item helper.\n    :param db_session: The database session.\n    :param item: The item schema.\n    :param user_id: The User ID to add the item to.\n    \"\"\"\n    db_item = item_model.Item(**item.dict(), owner_id=user_id)\n    db_session.add(db_item)\n    db_session.commit()\n    db_session.refresh(db_item)\n    return db_item\n\ndef delete_user_item(db_session: Session, item_id: int, user_id: int):\n    \"\"\"\n    Delete the user item helper.\n    :param db_session: The database session.\n    :param item_id: The item ID to be deleted.\n    :param user_id: The User ID of the item to be deleted.\n    \"\"\"\n    db_item = db_session.query(item_model.Item).filter(item_model.Item.id == item_id, item_model.Item.owner_id == user_id).first()\n    if db_item:\n        db_session.delete(db_item)\n        db_session.commit()\n    return db_item\n\n\ndef create_user_task(db_session: Session, task: tasks_schema.TaskCreate, user_id: int):\n    \"\"\"\n    Create the user task helper.\n    :param db_session: The database session.\n    :param task: The task schema.\n    :param user_id: The User ID to add the item to.\n    \"\"\"\n    task_run = run_task.delay(task.time)\n    db_task = task_model.Task(**task.dict(), task_id=task_run.id, owner_id=user_id)\n    db_session.add(db_task)\n    db_session.commit()\n    db_session.refresh(db_task)\n    return db_task\n\ndef get_tasks(db_session: Session, skip: int = 0, limit: int = 100) -> List:\n    \"\"\"\n    Get all tasks helper.\n    :param db_session: The database session.\n    :param skip: The offset used when paging.\n    :param limit: The number of tasks to retrieve per query.\n    \"\"\"\n    return db_session.query(task_model.Task).offset(skip).limit(limit).all()\n\ndef get_task(task_id: str):\n    \"\"\"\n    Get task by ID helper.\n    :param task_id: The of the task.\n    \"\"\"\n    task_result = celery.AsyncResult(task_id)\n    result = {\n        \"task_id\": task_id,\n        \"task_status\": task_result.status,\n        \"task_result\": task_result.result\n    }\n    return result\n\ndef get_questions(skip: int = 0, limit: int = 10):\n    \"\"\"\n    Get all questions helper.\n    :param skip: The offset used when paging.\n    :param limit: The number of items to retrieve per query.\n    \"\"\"\n    questions = []\n    question_results = questions_collection.collection.find().limit(limit).skip(skip)\n    for question in question_results:\n        questions.append(question)\n    return questions\n\ndef create_question(question: questions_schema.QuestionBase):\n    \"\"\"\n    Create question helper.\n    :question: The question schema.\n    \"\"\"\n    insert_res = questions_collection.collection.insert_one(question.dict(exclude_none=True))\n    new_question = questions_collection.collection.find_one({'_id': insert_res.inserted_id})\n    return new_question\n"}
{"type": "source_file", "path": "api/collections.py", "content": "\"\"\"MongoDB collections.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom .database import get_mongodb\n\n\ndb = get_mongodb()\nquestions_collection = db['questions']\n"}
{"type": "source_file", "path": "api/helpers/__init__.py", "content": ""}
{"type": "source_file", "path": "api/helpers/async_helper.py", "content": "\"\"\"This module is the helper for all async operations.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nimport asyncio\n\n\nasync def async_func_a(exec_time: int):\n    \"\"\"\n    Asynchronous function a\n    :param exec_time: Execution time in seconds.\n    \"\"\"\n    await asyncio.sleep(exec_time)\n    return f\"Result returned in {exec_time} seconds!\"\n\nasync def async_func_b(exec_time: int):\n    \"\"\"\n    Asynchronous function a\n    :param exec_time: Execution time in seconds.\n    \"\"\"\n    await asyncio.sleep(exec_time)\n    return f\"Result returned in {exec_time} seconds!\"\n"}
{"type": "source_file", "path": "api/models/item_model.py", "content": "\"\"\"Item model.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\nfrom api.database import Base\n\n\nclass Item(Base):\n    \"\"\"\n    Item model.\n    \"\"\"\n    __tablename__ = \"items\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    description = Column(String, index=True)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"items\")\n"}
{"type": "source_file", "path": "api/routers/users.py", "content": "\"\"\"This module is for the users router.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom typing import List\nfrom fastapi import APIRouter, HTTPException, Depends\nfrom sqlalchemy.orm import Session\nfrom api.helpers import crud\nfrom api.schemas import items_schema, tasks_schema, users_schema, status_schema\nfrom .. import database\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/users/\", response_model=users_schema.User)\ndef create_user(user: users_schema.UserCreate, db_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Create user router.\n    :param user: The user schema.\n    :param db_session: The database session.\n    \"\"\"\n    db_user = crud.get_user_by_email(db_session, email=user.email)\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n    return crud.create_user(db_session=db_session, user=user)\n\n\n@router.get(\"/users/\", response_model=List[users_schema.User])\ndef read_users(skip: int = 0, limit: int = 100,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Get all users router.\n    :param skip: The offset used when paging.\n    :param limit: The number of users to retrieve per query.\n    :param db_session: The database session.\n    \"\"\"\n    users = crud.get_users(db_session, skip=skip, limit=limit)\n    if not users:\n        raise HTTPException(status_code=404, detail=\"No users found\")\n    return users\n\n\n@router.get(\"/users/{user_id}\", response_model=users_schema.User)\ndef read_user(user_id: int, db_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Get user by User ID router.\n    :param user_id: The User ID.\n    :param db_session: The database session.\n    \"\"\"\n    db_user = crud.get_user(db_session, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n@router.patch(\"/users/{user_id}\", response_model=users_schema.User)\ndef update_user(user_id: int, user: users_schema.UserCreate, db_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Update user by User ID router.\n    :param user_id: The User ID.\n    :param db_session: The database session.\n    \"\"\"\n    db_user = crud.update_user(db_session, user_id=user_id, user=user)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return db_user\n\n@router.delete(\"/users/{user_id}\", response_model=status_schema.Status)\ndef delete_user(user_id: int, db_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Delete user by User ID router.\n    :param user_id: The User ID.\n    :param db_session: The database session.\n    \"\"\"\n\n    db_user = crud.delete_user(db_session, user_id=user_id)\n    if db_user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return status_schema.Status(status=f\"Deleted user {user_id}\")\n\n\n@router.post(\"/users/{user_id}/items/\", response_model=items_schema.Item)\ndef create_item_for_user(user_id: int, item: items_schema.ItemCreate,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Create the user item router.\n    :param user_id: The ID of the user.\n    :param item: The item schema.\n    :param db_session: The database session.\n    \"\"\"\n    return crud.create_user_item(db_session=db_session, item=item, user_id=user_id)\n\n@router.delete(\"/users/{user_id}/items/{item_id}\", response_model=status_schema.Status)\ndef delete_item_for_user(user_id: int, item_id: int,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Delete the user item router.\n    :param user_id: The ID of the user.\n    :param item_id: The ID of the item.\n    :param db_session: The database session.\n    \"\"\"\n    db_item = crud.delete_user_item(db_session=db_session, item_id=item_id, user_id=user_id)\n    if db_item is None:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return status_schema.Status(status=f\"Deleted Item {item_id} for user {user_id}\")\n\n@router.post(\"/users/{user_id}/tasks/\", response_model=tasks_schema.Task)\ndef create_task_for_user(user_id: int, task: tasks_schema.TaskCreate,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Create the user task router.\n    :param user_id: The ID of the user.\n    :param task: The task schema.\n    :param db_session: The database session.\n    \"\"\"\n    return crud.create_user_task(db_session=db_session, task=task, user_id=user_id)\n"}
{"type": "source_file", "path": "api/routers/__init__.py", "content": ""}
{"type": "source_file", "path": "api/models/user_model.py", "content": "\"\"\"User model.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom sqlalchemy import Boolean, Column, Integer, String\nfrom sqlalchemy.orm import relationship\nfrom api.database import Base\n\n\nclass User(Base):\n    \"\"\"\n    User model.\n    \"\"\"\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    hashed_password = Column(String)\n    is_active = Column(Boolean, default=True)\n\n    items = relationship(\"Item\", back_populates=\"owner\")\n    tasks = relationship(\"Task\", back_populates=\"owner\")\n"}
{"type": "source_file", "path": "api/models/task_model.py", "content": "\"\"\"Task model.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import relationship\nfrom api.database import Base\n\n\nclass Task(Base):\n    \"\"\"\n    Task model.\n    \"\"\"\n    __tablename__ = \"tasks\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    time = Column(Integer, index=False)\n    task_id = Column(String, index=False)\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n\n    owner = relationship(\"User\", back_populates=\"tasks\")\n"}
{"type": "source_file", "path": "api/main.py", "content": "\"\"\"Application main.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nimport os\nfrom functools import lru_cache\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom loguru import logger\nfrom api.routers import async_router, users, items, tasks, stream, questions\nfrom . import database, config\n\ndatabase.Base.metadata.create_all(bind=database.engine)\n\n@lru_cache()\ndef get_settings():\n    \"\"\"\n    Config settings function.\n    \"\"\"\n    return config.Settings()\n\nconf_settings = get_settings()\n\napp = FastAPI(debug=conf_settings.APP_DEBUG)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=conf_settings.ALLOWED_ORIGINS,\n    allow_credentials=conf_settings.ALLOW_CREDENTIALS,\n    allow_methods=conf_settings.ALLOW_METHODS,\n    allow_headers=conf_settings.ALLOW_HEADERS,\n)\napp.include_router(async_router.router)\napp.include_router(users.router)\napp.include_router(items.router)\napp.include_router(tasks.router)\napp.include_router(stream.router)\napp.include_router(questions.router)\n\nlogger.add(\"log_api.log\", rotation=\"100 MB\")    # Automatically rotate log file\n\ndef get_info():\n    \"\"\"\n    Info function.\n    \"\"\"\n    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    with open(os.path.join(BASE_DIR, 'VERSION'), 'r') as fh:\n        version = fh.read().strip()\n    info = {\n        \"boilerplate_version\": version,\n        \"fastapi_debug\": app.debug\n    }\n    return info\n\n@app.get(\"/\")\nasync def root():\n    \"\"\"\n    Root router.\n    \"\"\"\n    logger.info(\"this is root\")\n    result = {\n        \"message\": \"Hello from the FastAPI Boilerplate!\"\n    }\n    return result\n\n@app.get(\"/health\")\ndef health():\n    \"\"\"\n    Health router.\n    \"\"\"\n    logger.info(\"this is health\")\n    result = {\n        \"status\": \"ok\",\n        \"info\": get_info()\n    }\n    return result\n"}
{"type": "source_file", "path": "api/routers/async_router.py", "content": "\"\"\"This module is for the async router.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nimport time\nimport asyncio\nfrom fastapi import APIRouter\nfrom api.helpers import async_helper\n\n\nrouter = APIRouter()\n\n@router.get(\"/async\")\nasync def root():\n    \"\"\"\n    Async router.\n    \"\"\"\n    start = time.time()\n    async_a, async_b = await asyncio.gather(*[async_helper.async_func_a(2), async_helper.async_func_b(4)])\n    end = time.time()\n    result = {\n        \"async_func_a\": async_a,\n        \"async_func_b\": async_b,\n        \"async_total_time\": \"All functions took {} seconds.\".format(round(end-start))\n    }\n    return result\n"}
{"type": "source_file", "path": "api/routers/items.py", "content": "\"\"\"This module is for the items router.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom typing import List\nfrom fastapi import APIRouter, HTTPException, Depends\nfrom sqlalchemy.orm import Session\nfrom api.helpers import crud\nfrom api.schemas import items_schema\nfrom .. import database\n\n\nrouter = APIRouter()\n\n\n@router.get(\"/items/\", response_model=List[items_schema.Item])\ndef read_items(skip: int = 0, limit: int = 100,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Get all items router.\n    :param skip: The offset used when paging.\n    :param limit: The number of items to retrieve per query.\n    :param db: The database session.\n    \"\"\"\n    items = crud.get_items(db_session, skip=skip, limit=limit)\n    if not items:\n        raise HTTPException(status_code=404, detail=\"No items found\")\n    return items\n"}
{"type": "source_file", "path": "api/routers/tasks.py", "content": "\"\"\"This module is for the tasks router.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom typing import List\nfrom fastapi import APIRouter, HTTPException, Depends\nfrom sqlalchemy.orm import Session\nfrom api.helpers import crud\nfrom api.schemas import tasks_schema\nfrom .. import database\n\n\nrouter = APIRouter()\n\n\n@router.get(\"/tasks/\", response_model=List[tasks_schema.Task])\ndef read_tasks(skip: int = 0, limit: int = 100,\ndb_session: Session = Depends(database.get_db)):\n    \"\"\"\n    Get all tasks router.\n    :param skip: The offset used when paging.\n    :param limit: The number of items to retrieve per query.\n    :param db: The database session.\n    \"\"\"\n    tasks = crud.get_tasks(db_session, skip=skip, limit=limit)\n    if not tasks:\n        raise HTTPException(status_code=404, detail=\"No tasks found\")\n    return tasks\n\n@router.get(\"/tasks/{task_id}\")\ndef read_task(task_id: str):\n    \"\"\"\n    Get task by User ID router.\n    :param task_id: The Task ID.\n    \"\"\"\n    task_result = crud.get_task(task_id=task_id)\n    return task_result\n"}
{"type": "source_file", "path": "api/routers/questions.py", "content": "\"\"\"This module is for the questions router.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom typing import List\nfrom fastapi import APIRouter, HTTPException, Depends\nfrom api.helpers import crud\nfrom api.schemas import questions_schema\n\nrouter = APIRouter()\n\n@router.get(\"/questions/\", response_model=questions_schema.ListQuestionResponse)\ndef read_questions(skip: int = 0, limit: int = 10):\n    \"\"\"\n    Get all questions router.\n    :param skip: The offset used when paging.\n    :param limit: The number of items to retrieve per query.\n    :param mongo_db: The database client.\n    \"\"\"\n    questions = crud.get_questions(skip=skip, limit=limit)\n    if not questions:\n        raise HTTPException(status_code=404, detail=\"No questions found\")\n    return {'status': 'success', 'results': len(questions), 'questions': questions}\n\n@router.post(\"/questions/\", response_model=questions_schema.QuestionResponse)\ndef create_question(question: questions_schema.QuestionBase):\n    \"\"\"\n    Post questions router.\n    :param question: The question schema.\n    \"\"\"\n    res = crud.create_question(question=question)\n    return {\"status\": \"success\", \"question\": res}"}
{"type": "source_file", "path": "api/models/__init__.py", "content": ""}
{"type": "source_file", "path": "api/routers/stream.py", "content": "\"\"\"This module is for the stream router.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nimport asyncio\nfrom sse_starlette.sse import EventSourceResponse\nfrom fastapi import APIRouter, Request\n\n\nSTREAM_DELAY = 1  # second\nRETRY_TIMEOUT = 15000  # milisecond\n\nrouter = APIRouter()\n\n@router.get('/stream')\nasync def message_stream(request: Request):\n    def new_messages():\n        # Add logic here to check for new messages\n        yield 'Message'\n    async def event_generator():\n        while True:\n            # If client closes connection, stop sending events\n            if await request.is_disconnected():\n                break\n\n            # Checks for new messages and return them to client if any\n            if new_messages():\n                yield {\n                        \"event\": \"new_message\",\n                        \"id\": \"message_id\",\n                        \"retry\": RETRY_TIMEOUT,\n                        \"data\": \"message_content\"\n                }\n\n            await asyncio.sleep(STREAM_DELAY)\n\n    return EventSourceResponse(event_generator())\n"}
{"type": "source_file", "path": "api/schemas/questions_schema.py", "content": "\"\"\"Pydantic Question schemas.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom typing import List\nfrom pydantic import BaseModel, Field\nfrom bson.objectid import ObjectId\n\n\nclass PydanticObjectId(ObjectId):\n    \"\"\"\n    MongoDB ObjectId.\n    \"\"\"\n    @classmethod\n    def __get_validators__(cls):\n        yield cls.validate\n\n    @classmethod\n    def validate(cls, v):\n        if not isinstance(v, ObjectId):\n            raise TypeError('ObjectId required')\n        return str(v)\n\n    @classmethod\n    def __modify_schema__(cls, field_schema):\n        field_schema.update(type=\"string\", example=\"63ac23ab8c79ddb40f9cad2f\")\n\n\nclass QuestionBase(BaseModel):\n    \"\"\"\n    Question Base Schema.\n    \"\"\"\n    id: PydanticObjectId = Field(None, alias=\"_id\")\n    question: str\n    answer: str\n\n    class Config:\n        \"\"\"\n        Object Relational Mapping Mode.\n        \"\"\"\n        orm_mode = True\n        allow_population_by_field_name = True\n        arbitrary_types_allowed = True\n        json_encoders = {ObjectId: str}\n\n\nclass QuestionResponse(BaseModel):\n    \"\"\"\n    Question Response Schema.\n    \"\"\"\n    status: str\n    question: QuestionBase\n\n\nclass ListQuestionResponse(BaseModel):\n    \"\"\"\n    Question Response List Schema.\n    \"\"\"\n    status: str\n    results: int\n    questions: List[QuestionBase]\n"}
{"type": "source_file", "path": "api/schemas/tasks_schema.py", "content": "\"\"\"Pydantic Task schemas.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom pydantic import BaseModel\n\n\nclass TaskBase(BaseModel):\n    \"\"\"\n    Task Base Schema.\n    \"\"\"\n    time: int\n\n\nclass TaskCreate(TaskBase):\n    \"\"\"\n    Task Create Schema.\n    \"\"\"\n    pass\n\n\nclass Task(TaskBase):\n    \"\"\"\n    Task Schema.\n    \"\"\"\n    id: int\n    task_id: str\n    owner_id: int\n\n    class Config:\n        \"\"\"\n        Object Relational Mapping Mode.\n        \"\"\"\n        orm_mode = True\n"}
{"type": "source_file", "path": "api/schemas/status_schema.py", "content": "\"\"\"Pydantic Stauts schemas.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom pydantic import BaseModel\n\n\nclass Status(BaseModel):\n    status: str\n"}
{"type": "source_file", "path": "api/schemas/__init__.py", "content": ""}
{"type": "source_file", "path": "api/schemas/items_schema.py", "content": "\"\"\"Pydantic Item schemas.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom pydantic import BaseModel\n\n\nclass ItemBase(BaseModel):\n    \"\"\"\n    Item Base Schema.\n    \"\"\"\n    title: str\n    description: str\n\n\nclass ItemCreate(ItemBase):\n    \"\"\"\n    Item Create Schema.\n    \"\"\"\n    pass\n\n\nclass Item(ItemBase):\n    \"\"\"\n    Item Schema.\n    \"\"\"\n    id: int\n    owner_id: int\n\n    class Config:\n        \"\"\"\n        Object Relational Mapping Mode.\n        \"\"\"\n        orm_mode = True\n"}
{"type": "source_file", "path": "api/worker.py", "content": "\"\"\"Celery worker.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nimport time\nfrom functools import lru_cache\nfrom celery import Celery\nfrom . import config\n\n\n@lru_cache()\ndef get_settings():\n    \"\"\"\n    Config settings function.\n    \"\"\"\n    return config.Settings()\n\nconf_settings = get_settings()\n\ncelery = Celery(__name__)\ncelery.conf.broker_url = conf_settings.CELERY_CONF_BROKER_URL\ncelery.conf.result_backend = conf_settings.CELERY_CONF_RESULT_BACKEND\n\n\n@celery.task(name=\"run_task\")\ndef run_task(task_time :int):\n    \"\"\"\n    Run task.\n    :param task_time: Time give to sleep.\n    \"\"\"\n    time.sleep(task_time)\n    return True\n"}
{"type": "source_file", "path": "api/schemas/users_schema.py", "content": "\"\"\"Pydantic schemas.\"\"\"\n#--------------------------------------------#\n# PEP-8 Imports Priority.\n# 1.Standard Library Imports\n# 2.Related Library Imports\n# 3.Local application/library imports\n#--------------------------------------------#\nfrom typing import List\nfrom pydantic import BaseModel\nfrom api.schemas import items_schema, tasks_schema\n\n\nclass UserBase(BaseModel):\n    \"\"\"\n    User Base Schema.\n    \"\"\"\n    email: str\n\n\nclass UserCreate(UserBase):\n    \"\"\"\n    User Create Schema.\n    \"\"\"\n    password: str\n\n\nclass User(UserBase):\n    \"\"\"\n    User Schema.\n    \"\"\"\n    id: int\n    is_active: bool\n    items: List[items_schema.Item] = []\n    tasks: List[tasks_schema.Task] = []\n\n    class Config:\n        \"\"\"\n        Object Relational Mapping Mode.\n        \"\"\"\n        orm_mode = True\n"}
