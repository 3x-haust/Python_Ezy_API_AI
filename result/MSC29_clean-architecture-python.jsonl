{"repo_info": {"repo_name": "clean-architecture-python", "repo_owner": "MSC29", "repo_url": "https://github.com/MSC29/clean-architecture-python"}}
{"type": "test_file", "path": "tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/integration_tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/integration_tests/request_utils.py", "content": "from injector import Injector\nfrom fastapi.testclient import TestClient\n\nfrom src.infrastructure.app import create_app\n\napp = create_app(Injector())\n\n\nclass RequestsUtils:\n\n    @staticmethod\n    def client() -> TestClient:\n        return TestClient(app)\n"}
{"type": "test_file", "path": "tests/integration_tests/conftest.py", "content": "from peewee import Database\nimport pytest\n\nfrom src.infrastructure.config_mapper import ConfigurationMapper\nfrom src.adapter.spi.db.db_connection import DbConnection\nfrom src.adapter.spi.db.db_models import DogFact\nfrom src.domain.configuration_entity import ConfigurationEntity\n\n\n@pytest.fixture\ndef session() -> Database:\n    config: ConfigurationEntity = ConfigurationMapper(\"test\").get_config()\n    db_connection: DbConnection = DbConnection(config)\n    yield db_connection.get_db()\n    db_connection.database.close()\n\n\n@pytest.fixture\n# pylint: disable=redefined-outer-name\ndef setup_db(session: Database):\n    session.create_tables([DogFact])\n    DogFact.truncate_table()\n    DogFact.create(id=1, fact=\"Forty-five percent of U.S. dogs sleep in their owner's bed\")\n    DogFact.create(id=2, fact=\"Seventy percent of people sign their dog's name on their holiday cards\")\n    DogFact.create(id=3, fact=\"Dogs have about 1,700 taste buds. We humans have between 2,000-10,000\")\n"}
{"type": "test_file", "path": "tests/integration_tests/response_utils.py", "content": "import json\nfrom types import SimpleNamespace as Namespace\nfrom typing import Any\nfrom injector import Injector\nimport requests\n\nfrom src.infrastructure.app import create_app\n\napp = create_app(Injector())\n\n\nclass ResponseUtils:\n\n    @staticmethod\n    def ok_and_parse(response: requests.Response) -> Any:\n        assert response.status_code == 200\n        return json.loads(response.text, object_hook=lambda d: Namespace(**d))\n"}
{"type": "test_file", "path": "tests/integration_tests/test_cat_facts.py", "content": "import vcr\n\nfrom src.adapter.api.cat_facts.cat_facts_presenters import CatFactPresenter\nfrom tests.integration_tests.request_utils import RequestsUtils\nfrom tests.integration_tests.response_utils import ResponseUtils\n\n\nclass TestCatFacts:\n\n    CAT_URL = 'http://localhost:8080/api/v1/cats/'\n\n    @vcr.use_cassette('tests/integration_tests/fixtures/vcr_cassettes/cat_facts_facts.yaml')\n    def test_should_return_multiple_results(self):\n        # given the \"all cat facts\" route\n        url = TestCatFacts.CAT_URL\n\n        # when getting\n        response = RequestsUtils.client().get(url)\n\n        # then expect entire list, as per vcr cassette\n        data: list[CatFactPresenter] = ResponseUtils.ok_and_parse(response)\n\n        assert len(data) == 10\n        assert data[0].fact == \"The first true cats came into existence about 12 million years ago and were the Proailurus.\"\n        assert data[0].nb_chars == 91\n\n    @vcr.use_cassette('tests/integration_tests/fixtures/vcr_cassettes/cat_facts_fact.yaml')\n    def test_should_return_one_result_only(self):\n        # given the \"random cat fact\" route\n        url = \"{}random\".format(TestCatFacts.CAT_URL)\n\n        # when getting\n        response = RequestsUtils.client().get(url)\n\n        # then expect 1 only, as per vcr cassette\n        data: CatFactPresenter = ResponseUtils.ok_and_parse(response)\n        assert data.fact == \"In the 1930s, two Russian biologists discovered that color change in Siamese kittens depend on their body temperature. Siamese cats carry albino genes that work only when the body temperature is above 98° F. If these kittens are left in a very warm room, their points won’t darken and they will stay a creamy white.\"\n        assert data.nb_chars == 315\n"}
{"type": "test_file", "path": "tests/integration_tests/test_dog_facts.py", "content": "import pytest\n\nfrom src.adapter.api.dog_facts.dog_facts_presenters import DogFactPresenter\nfrom tests.integration_tests.request_utils import RequestsUtils\nfrom tests.integration_tests.response_utils import ResponseUtils\n\n\nclass TestDogFacts:\n\n    DOG_URL = 'http://localhost:8080/api/v1/dogs/'\n\n    @pytest.mark.usefixtures(\"setup_db\")\n    def test_should_return_multiple_results(self):\n        # given the \"all dog facts\" route\n        url = TestDogFacts.DOG_URL\n\n        # when getting\n        response = RequestsUtils.client().get(url)\n\n        # then expect 3 results (inserted in db)\n        data: list[DogFactPresenter] = ResponseUtils.ok_and_parse(response)\n\n        assert len(data) == 3\n        assert data[0].txt == \"Forty-five percent of U.S. dogs sleep in their owner's bed\"\n        assert data[0].fact_id == 1\n\n    @pytest.mark.usefixtures(\"setup_db\")\n    def test_should_return_one_result_only(self):\n        # given the \"single dog facts\" route\n        url = \"{}2\".format(TestDogFacts.DOG_URL)\n\n        # when getting\n        response = RequestsUtils.client().get(url)\n\n        # then expect 1 result (id 2 inserted in db)\n        data: DogFactPresenter = ResponseUtils.ok_and_parse(response)\n        assert data.txt == \"Seventy percent of people sign their dog's name on their holiday cards\"\n        assert data.fact_id == 2\n"}
{"type": "test_file", "path": "tests/unit_tests/__init__.py", "content": ""}
{"type": "test_file", "path": "tests/unit_tests/test_get_all_dog_facts_usecase.py", "content": "from unittest.mock import MagicMock\nimport unittest\n\nfrom src.adapter.spi.db.dog_fact_repository import DogFactRepository\nfrom src.application.usecases.get_all_dog_facts_usecase import GetAllDogFactsUseCase\nfrom src.domain.api_exception import ApiException\nfrom src.domain.dog_fact import DogFactEntity\n\n\nclass GetAllDogFactsUseCaseTest(unittest.TestCase):\n    def test_should_return_generic_message_when_unexpected_repo_exception(self):\n        # given the \"all dog facts\" usecase repo with an unexpected exception\n        dog_fact_repository = DogFactRepository(None)\n        dog_fact_repository.get_all_dog_facts = MagicMock(side_effect=Exception(\"random exception\"))\n\n        # when calling usecase\n        get_all_dog_facts_usecase: GetAllDogFactsUseCase = GetAllDogFactsUseCase(dog_fact_repository)\n\n        # then exception\n        with self.assertRaises(ApiException) as context:\n            get_all_dog_facts_usecase.execute()\n        self.assertEqual('Cannot get all dog facts', str(context.exception.message))\n\n    def test_should_return_custom_message_when_expected_repo_exception(self):\n        # given the \"all dog facts\" usecase repo raising with an expected ApiException\n        dog_fact_repository = DogFactRepository(None)\n        dog_fact_repository.get_all_dog_facts = MagicMock(side_effect=ApiException(\"exception in repo\"))\n\n        # when calling usecase\n        get_all_dog_facts_usecase: GetAllDogFactsUseCase = GetAllDogFactsUseCase(dog_fact_repository)\n\n        # then exception\n        with self.assertRaises(ApiException) as context:\n            get_all_dog_facts_usecase.execute()\n        self.assertEqual('exception in repo', str(context.exception.message))\n\n    def test_should_return_empty_list(self):\n        # given the \"all dog facts\" usecase repo returning an empty list\n        dog_fact_repository = DogFactRepository(None)\n        dog_fact_repository.get_all_dog_facts = MagicMock(return_value=[])\n\n        # when calling usecase\n        get_all_dog_facts_usecase: GetAllDogFactsUseCase = GetAllDogFactsUseCase(dog_fact_repository)\n        data = get_all_dog_facts_usecase.execute()\n\n        # then assert the result is an empty list\n        self.assertEqual(len(data), 0)\n\n    def test_should_return_list(self):\n        # given the \"all dog facts\" usecase repo returning a list of 2 entities\n        dog_fact_repository = DogFactRepository(None)\n        dog_fact_repository.get_all_dog_facts = MagicMock(return_value=[DogFactEntity(1, \"fact1\"), DogFactEntity(2,\"fact2\")])\n\n        # when calling usecase\n        get_all_dog_facts_usecase: GetAllDogFactsUseCase = GetAllDogFactsUseCase(dog_fact_repository)\n        data = get_all_dog_facts_usecase.execute()\n\n        # then assert the result is an empty list\n        self.assertEqual(len(data), 2)\n"}
{"type": "test_file", "path": "tests/unit_tests/test_get_one_dog_fact_by_id_usecase.py", "content": "from unittest.mock import MagicMock\nimport unittest\n\nfrom src.adapter.spi.db.dog_fact_repository import DogFactRepository\nfrom src.application.usecases.get_one_dog_fact_by_id_usecase import GetOneDogFactByIdUseCase\nfrom src.domain.api_exception import ApiException\nfrom src.domain.dog_fact import DogFactEntity\n\n\nclass GetOneDogFactByIdUseCaseTest(unittest.TestCase):\n    def test_should_return_generic_message_when_unexpected_repo_exception(self):\n        # given the \"one dog fact by id\" usecase repo with an unexpected exception\n        dog_fact_repository = DogFactRepository(None)\n        dog_fact_repository.get_dog_fact_by_id = MagicMock(side_effect=Exception(\"random exception\"))\n\n        # when calling usecase\n        get_one_dog_fact_by_id_usecase: GetOneDogFactByIdUseCase = GetOneDogFactByIdUseCase(1, dog_fact_repository)\n\n        # then exception\n        with self.assertRaises(ApiException) as context:\n            get_one_dog_fact_by_id_usecase.execute()\n        self.assertEqual('Cannot get single dog fact', str(context.exception.message))\n\n    def test_should_return_custom_message_when_expected_repo_exception(self):\n        # given the \"one dog fact by id\" usecase repo raising with an expected ApiException\n        dog_fact_repository = DogFactRepository(None)\n        dog_fact_repository.get_dog_fact_by_id = MagicMock(side_effect=ApiException(\"exception in repo\"))\n\n        # when calling usecase\n        get_one_dog_fact_by_id_usecase: GetOneDogFactByIdUseCase = GetOneDogFactByIdUseCase(1, dog_fact_repository)\n\n        # then exception\n        with self.assertRaises(ApiException) as context:\n            get_one_dog_fact_by_id_usecase.execute()\n        self.assertEqual('exception in repo', str(context.exception.message))\n\n    def test_should_return_one_result(self):\n        # given the \"one dog fact by id\" usecase repo returning one result\n        dog_fact_repository = DogFactRepository(None)\n        dog_fact_repository.get_dog_fact_by_id = MagicMock(return_value=DogFactEntity(1, \"fact1\"))\n\n        # when calling usecase\n        get_one_dog_fact_by_id_usecase: GetOneDogFactByIdUseCase = GetOneDogFactByIdUseCase(1, dog_fact_repository)\n        data = get_one_dog_fact_by_id_usecase.execute()\n\n        # then assert the result is the expected entity\n        self.assertEqual(data.fact_id, 1)\n        self.assertEqual(data.fact_txt, \"fact1\")\n"}
{"type": "test_file", "path": "tests/unit_tests/test_get_all_cat_facts_usecase.py", "content": "from unittest.mock import MagicMock\nimport unittest\n\nfrom src.adapter.spi.http.cat_fact_repository import CatFactsRepository\nfrom src.application.usecases.get_all_cat_facts_usecase import GetAllCatFactsUseCase\nfrom src.domain.api_exception import ApiException\nfrom src.domain.cat_fact import CatFactEntity\n\n\nclass GetAllCatFactsUseCaseTest(unittest.TestCase):\n    def test_should_return_generic_message_when_unexpected_repo_exception(self):\n        # given the \"all cat facts\" usecase repo with an unexpected exception\n        cat_fact_repository = CatFactsRepository(None, \"\")\n        cat_fact_repository.get_all_cat_facts = MagicMock(side_effect=Exception(\"random exception\"))\n\n        # when calling usecase\n        get_all_cat_facts_usecase: GetAllCatFactsUseCase = GetAllCatFactsUseCase(cat_fact_repository)\n\n        # then exception\n        with self.assertRaises(ApiException) as context:\n            get_all_cat_facts_usecase.execute()\n        self.assertEqual('Cannot get all cat facts', str(context.exception.message))\n\n    def test_should_return_custom_message_when_expected_repo_exception(self):\n        # given the \"all cat facts\" usecase repo raising with an expected ApiException\n        cat_fact_repository = CatFactsRepository(None, \"\")\n        cat_fact_repository.get_all_cat_facts = MagicMock(side_effect=ApiException(\"exception in repo\"))\n\n        # when calling usecase\n        get_all_cat_facts_usecase: GetAllCatFactsUseCase = GetAllCatFactsUseCase(cat_fact_repository)\n\n        # then exception\n        with self.assertRaises(ApiException) as context:\n            get_all_cat_facts_usecase.execute()\n        self.assertEqual('exception in repo', str(context.exception.message))\n\n    def test_should_return_empty_list(self):\n        # given the \"all cat facts\" usecase repo returning an empty list\n        cat_fact_repository = CatFactsRepository(None, \"\")\n        cat_fact_repository.get_all_cat_facts = MagicMock(return_value=[])\n\n        # when calling usecase\n        get_all_cat_facts_usecase: GetAllCatFactsUseCase = GetAllCatFactsUseCase(cat_fact_repository)\n        data = get_all_cat_facts_usecase.execute()\n\n        # then assert the result is an empty list\n        self.assertEqual(len(data), 0)\n\n    def test_should_return_list(self):\n        # given the \"all cat facts\" usecase repo returning a list of 2 entities\n        cat_fact_repository = CatFactsRepository(None, \"\")\n        cat_fact_repository.get_all_cat_facts = MagicMock(return_value=[CatFactEntity(\"fact1\", 1), CatFactEntity(\"fact2\", 2)])\n\n        # when calling usecase\n        get_all_cat_facts_usecase: GetAllCatFactsUseCase = GetAllCatFactsUseCase(cat_fact_repository)\n        data = get_all_cat_facts_usecase.execute()\n\n        # then assert the result is an empty list\n        self.assertEqual(len(data), 2)\n"}
{"type": "test_file", "path": "tests/unit_tests/test_get_one_random_cat_fact_usecase.py", "content": "from unittest.mock import MagicMock\nimport unittest\n\nfrom src.adapter.spi.http.cat_fact_repository import CatFactsRepository\nfrom src.application.usecases.get_one_random_cat_fact_usecase import GetOneRandomCatFactUseCase\nfrom src.domain.api_exception import ApiException\nfrom src.domain.cat_fact import CatFactEntity\n\n\nclass GetOneRandomCatFactUseCaseTest(unittest.TestCase):\n    def test_should_return_generic_message_when_unexpected_repo_exception(self):\n        # given the \"one random cat fact\" usecase repo with an unexpected exception\n        cat_fact_repository = CatFactsRepository(None, \"\")\n        cat_fact_repository.get_random_cat_fact = MagicMock(side_effect=Exception(\"random exception\"))\n\n        # when calling usecase\n        get_one_random_cat_fact_usecase: GetOneRandomCatFactUseCase = GetOneRandomCatFactUseCase(cat_fact_repository)\n\n        # then exception\n        with self.assertRaises(ApiException) as context:\n            get_one_random_cat_fact_usecase.execute()\n        self.assertEqual('Cannot get random cat fact', str(context.exception.message))\n\n    def test_should_return_custom_message_when_expected_repo_exception(self):\n        # given the \"one random cat fact\" usecase repo raising with an expected ApiException\n        cat_fact_repository = CatFactsRepository(None, \"\")\n        cat_fact_repository.get_random_cat_fact = MagicMock(side_effect=ApiException(\"exception in repo\"))\n\n        # when calling usecase\n        get_one_random_cat_fact_usecase: GetOneRandomCatFactUseCase = GetOneRandomCatFactUseCase(cat_fact_repository)\n\n        # then exception\n        with self.assertRaises(ApiException) as context:\n            get_one_random_cat_fact_usecase.execute()\n        self.assertEqual('exception in repo', str(context.exception.message))\n\n    def test_should_return_one_result(self):\n        # given the \"one random cat fact\" usecase repo returning one result\n        cat_fact_repository = CatFactsRepository(None, \"\")\n        cat_fact_repository.get_random_cat_fact = MagicMock(return_value=CatFactEntity(\"fact1\", 1))\n\n        # when calling usecase\n        get_one_random_cat_fact_usecase: GetOneRandomCatFactUseCase = GetOneRandomCatFactUseCase(cat_fact_repository)\n        data = get_one_random_cat_fact_usecase.execute()\n\n        # then assert the result is the expected entity\n        self.assertEqual(data.fact_txt, \"fact1\")\n        self.assertEqual(data.fact_length, 1)\n"}
{"type": "source_file", "path": "main.py", "content": "from injector import Injector\nimport uvicorn\n\nfrom src.infrastructure.app import create_app\n\napp = create_app(Injector())\n\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\")\n"}
{"type": "source_file", "path": "src/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/api/cat_facts/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/api/cat_facts/cat_facts_controllers.py", "content": "import typing\nfrom fastapi import APIRouter\nfrom fastapi_injector import Injected\n\nfrom src.adapter.api.cat_facts.cat_facts_mappers import CatFactPresenterMapper\nfrom src.adapter.api.cat_facts.cat_facts_presenters import CatFactPresenter\nfrom src.adapter.api.shared.api_error_handling import ApiErrorHandling\nfrom src.adapter.spi.repositories_factory import RepositoriesFactory\n\nfrom src.application.repositories.cat_facts_repository_abstract import CatFactsRepositoryAbstract\nfrom src.application.usecases.get_all_cat_facts_usecase import GetAllCatFactsUseCase\nfrom src.application.usecases.get_one_random_cat_fact_usecase import GetOneRandomCatFactUseCase\n\nrouter = APIRouter()\n\n\n@router.get(\"/\")\nasync def get_all_cat_facts(factory: RepositoriesFactory = Injected(RepositoriesFactory)):\n    try:\n        cat_fact_repository: CatFactsRepositoryAbstract = factory.get_repository(\n            \"cat_fact_repository\")\n        cat_fact_presenter_mapper: CatFactPresenterMapper = CatFactPresenterMapper()\n\n        get_all_cat_facts_usecase: GetAllCatFactsUseCase = GetAllCatFactsUseCase(\n            cat_fact_repository)\n        cat_facts = get_all_cat_facts_usecase.execute()\n\n        facts: typing.List[CatFactPresenter] = []\n        for data in cat_facts:\n            facts.append(cat_fact_presenter_mapper.to_api(data))\n\n        return facts\n    except Exception as exception:\n        raise ApiErrorHandling.http_error(\"Unexpected error getting all cat facts\", exception)\n\n\n@router.get(\"/random\")\nasync def get_one_random_cat_fact(factory: RepositoriesFactory = Injected(RepositoriesFactory)):\n    try:\n        cat_fact_repository: CatFactsRepositoryAbstract = factory.get_repository(\n            \"cat_fact_repository\")\n        cat_fact_presenter_mapper: CatFactPresenterMapper = CatFactPresenterMapper()\n\n        get_one_random_cat_fact_usecase: GetOneRandomCatFactUseCase = GetOneRandomCatFactUseCase(\n            cat_fact_repository)\n        cat_fact = get_one_random_cat_fact_usecase.execute()\n\n        return cat_fact_presenter_mapper.to_api(cat_fact)\n    except Exception as exception:\n        raise ApiErrorHandling.http_error(\"Unexpected error getting a random cat fact\", exception)\n"}
{"type": "source_file", "path": "src/adapter/api/cat_facts/cat_facts_mappers.py", "content": "from typing import Any\nfrom src.adapter.api.cat_facts.cat_facts_presenters import CatFactPresenter\nfrom src.application.mappers.api_mapper import ApiMapper\nfrom src.domain.cat_fact import CatFactEntity\n\n\nclass CatFactPresenterMapper(ApiMapper):\n\n    def to_api(self, entity: CatFactEntity) -> CatFactPresenter:\n        return CatFactPresenter(entity.fact_txt, entity.fact_length)\n\n    def to_entity(self, payload: Any) -> CatFactEntity:\n        raise Exception(\"not implemented\")\n"}
{"type": "source_file", "path": "src/adapter/api/cat_facts/cat_facts_presenters.py", "content": "class CatFactPresenter:\n    def __init__(self, fact: str, nb_chars: int) -> None:\n        self.fact = fact\n        self.nb_chars = nb_chars\n"}
{"type": "source_file", "path": "src/adapter/api/dog_facts/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/api/shared/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/spi/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/api/shared/api_error_handling.py", "content": "from fastapi import HTTPException\n\nfrom src.domain.api_exception import ApiException\n\n\nclass ApiErrorHandling:\n\n    @staticmethod\n    def http_error(error_message: str, exception: Exception) -> HTTPException:\n        if isinstance(exception, ApiException):\n            return HTTPException(status_code=400, detail=str(exception.message))\n        else:\n            return HTTPException(status_code=400, detail=error_message)\n"}
{"type": "source_file", "path": "src/adapter/spi/db/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/api/dog_facts/dog_facts_mappers.py", "content": "from typing import Any\nfrom src.adapter.api.dog_facts.dog_facts_presenters import DogFactPresenter\nfrom src.application.mappers.api_mapper import ApiMapper\nfrom src.domain.dog_fact import DogFactEntity\n\n\nclass DogFactPresenterMapper(ApiMapper):\n\n    def to_api(self, entity: DogFactEntity) -> DogFactPresenter:\n        return DogFactPresenter(entity.fact_id, entity.fact_txt)\n\n    def to_entity(self, payload: Any) -> DogFactEntity:\n        raise Exception(\"not implemented\")\n"}
{"type": "source_file", "path": "src/adapter/spi/db/db_models.py", "content": "from peewee import CharField, IntegerField, Model\n\n\nclass DogFact(Model):\n    id = IntegerField(primary_key=True)\n    fact = CharField(max_length=255)\n"}
{"type": "source_file", "path": "src/adapter/spi/db/mappers.py", "content": "from src.adapter.spi.db.db_models import DogFact\nfrom src.application.mappers.db_mapper import DbMapper, DbModel\nfrom src.domain.dog_fact import DogFactEntity\n\n\nclass DogFactDbMapper(DbMapper):\n\n    def to_db(self, entity: DogFactEntity) -> DbModel:\n        raise Exception(\"not implemented\")\n\n    def to_entity(self, model: DogFact) -> DogFactEntity:\n        return DogFactEntity(model.id, model.fact)\n"}
{"type": "source_file", "path": "src/adapter/spi/http/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/spi/http/http_connection.py", "content": "import requests\nfrom requests import Response\n\nfrom src.application.spi.http_interface import HttpInterface\n\n\nclass HttpConnection(HttpInterface):\n    def __init__(self) -> None:\n        pass\n\n    def get(self, url: str, params=None, **kwargs) -> Response:\n        return requests.get(url, params, **kwargs)\n"}
{"type": "source_file", "path": "src/adapter/spi/http/cat_fact_repository.py", "content": "import typing\nfrom src.adapter.spi.http.http_connection import HttpConnection\nfrom src.adapter.spi.http.mappers import CatFactHttpMapper\nfrom src.application.repositories.cat_facts_repository_abstract import CatFactsRepositoryAbstract\nfrom src.domain.api_exception import ApiException\nfrom src.domain.cat_fact import CatFactEntity\n\n\nclass CatFactsRepository(CatFactsRepositoryAbstract):\n    def __init__(self, http_connection: HttpConnection, source: str) -> None:\n        self.mapper = CatFactHttpMapper()\n        self.source = source\n        self.http_connection = http_connection\n\n    def get_random_cat_fact(self) -> CatFactEntity:\n        res = self.http_connection.get(\"{}/fact\".format(self.source))\n        if not res.ok:\n            raise ApiException(\"couldn't retrieve random cat fact\")\n\n        res_json = res.json()\n        if not res_json:\n            raise ApiException(\"couldn't process json response\")\n\n        return self.mapper.to_entity(res_json)\n\n    def get_all_cat_facts(self) -> typing.List[CatFactEntity]:\n        res = self.http_connection.get(\"{}/facts\".format(self.source))\n        if not res.ok:\n            raise ApiException(\"couldn't retrieve cat facts\")\n\n        res_json = res.json()\n        if not res_json:\n            raise ApiException(\"couldn't process json response\")\n\n        facts: typing.List[CatFactEntity] = []\n        for data in res_json[\"data\"]:\n            facts.append(self.mapper.to_entity(data))\n\n        return facts\n"}
{"type": "source_file", "path": "src/adapter/spi/http/mappers.py", "content": "from typing import Any\nfrom src.application.mappers.http_mapper import HttpMapper\nfrom src.domain.cat_fact import CatFactEntity\n\n\nclass CatFactHttpMapper(HttpMapper):\n\n    def to_http(self, entity: CatFactEntity) -> Any:\n        raise Exception(\"not implemented\")\n\n    def to_entity(self, http_obj: Any) -> CatFactEntity:\n        return CatFactEntity(http_obj[\"fact\"], http_obj[\"length\"])\n"}
{"type": "source_file", "path": "src/application/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/spi/repositories_factory.py", "content": "from src.adapter.spi.db.db_connection import DbConnection\nfrom src.adapter.spi.db.dog_fact_repository import DogFactRepository\nfrom src.adapter.spi.http.cat_fact_repository import CatFactsRepository\nfrom src.adapter.spi.http.http_connection import HttpConnection\nfrom src.domain.configuration_entity import ConfigurationEntity\n\n\nclass RepositoriesFactory:\n\n    def __init__(self, config: ConfigurationEntity, db_connection: DbConnection, http_connection: HttpConnection) -> None:\n        self.__repositories: dict = {\n            \"cat_fact_repository\": CatFactsRepository(http_connection, config.cats_source),\n            \"dog_fact_repository\": DogFactRepository(db_connection)\n        }\n\n    def get_repository(self, repository_name: str):\n        if repository_name in self.__repositories:\n            return self.__repositories[repository_name]\n        else:\n            raise Exception(\"Repository does not exist\")\n"}
{"type": "source_file", "path": "src/application/mappers/api_mapper.py", "content": "from abc import ABC, abstractmethod\nfrom typing import Generic, TypeVar\n\nEntity = TypeVar(\"Entity\")\nPresenter = TypeVar(\"Presenter\")\nPayload = TypeVar(\"Payload\")\n\n\nclass ApiMapper(ABC, Generic[Entity, Presenter, Payload]):\n\n    @abstractmethod\n    def to_api(self, entity: Entity) -> Presenter:\n        \"\"\"Map an Entity to a Presenter\"\"\"\n\n    @abstractmethod\n    def to_entity(self, payload: Payload) -> Entity:\n        \"\"\"Map a Payload to an Entity\"\"\"\n"}
{"type": "source_file", "path": "src/adapter/api/dog_facts/dog_facts_presenters.py", "content": "class DogFactPresenter:\n    def __init__(self, fact_id: int, txt: str) -> None:\n        self.fact_id = fact_id\n        self.txt = txt\n"}
{"type": "source_file", "path": "src/adapter/spi/db/db_connection.py", "content": "from peewee import SqliteDatabase, Database\n\nfrom src.adapter.spi.db.db_models import DogFact\nfrom src.application.spi.db_interface import DbInterface\nfrom src.domain.api_exception import ApiException\nfrom src.domain.configuration_entity import ConfigurationEntity\n\n\nclass DbConnection(DbInterface):\n    def __init__(self, config: ConfigurationEntity) -> None:\n        try:\n            self.connection(config)\n\n            if config.env != \"test\":\n                self.migration()\n        except Exception as error:\n            raise ApiException(\n                \"error initializing connection to DB: {}\".format(str(error))) from error\n\n    def connection(self, config: ConfigurationEntity) -> None:\n        self.database = SqliteDatabase(config.dogs_source)\n        self.database.bind([DogFact])\n        self.database.connect()\n\n    def migration(self):\n        try:\n            self.database.create_tables([DogFact])\n            DogFact.truncate_table()\n            DogFact.create(id=1, fact=\"a first fact\")\n            DogFact.create(id=2, fact=\"a second fact\")\n            DogFact.create(id=3, fact=\"a third fact\")\n        except Exception as error:\n            raise ApiException(\"error running migration to DB: {}\".format(str(error))) from error\n\n    def get_db(self) -> Database:\n        return self.database\n"}
{"type": "source_file", "path": "src/adapter/api/__init__.py", "content": ""}
{"type": "source_file", "path": "src/adapter/spi/db/dog_fact_repository.py", "content": "import typing\nfrom src.adapter.spi.db.db_connection import DbConnection\nfrom src.adapter.spi.db.db_models import DogFact\nfrom src.adapter.spi.db.mappers import DogFactDbMapper\nfrom src.application.repositories.dog_facts_repository_abstract import DogFactsRepositoryAbstract\nfrom src.domain.api_exception import ApiException\nfrom src.domain.dog_fact import DogFactEntity\n\n\nclass DogFactRepository(DogFactsRepositoryAbstract):\n    def __init__(self, db_connection: DbConnection) -> None:\n        self.mapper = DogFactDbMapper()\n        self.db_connection = db_connection\n\n    def get_dog_fact_by_id(self, dog_fact_id: int) -> DogFactEntity:\n        res = DogFact.select().where(DogFact.id == dog_fact_id).get()\n\n        if not res:\n            raise ApiException(\"couldn't retrieve Dog fact from id\")\n\n        return self.mapper.to_entity(res)\n\n    def get_all_dog_facts(self) -> typing.List[DogFactEntity]:\n        res = DogFact.select()\n\n        if not res:\n            raise ApiException(\"couldn't retrieve Dog facts\")\n\n        facts: typing.List[DogFactEntity] = []\n        for data in res:\n            facts.append(self.mapper.to_entity(data))\n\n        return facts\n"}
{"type": "source_file", "path": "src/adapter/api/dog_facts/dog_facts_controllers.py", "content": "import typing\nfrom fastapi import APIRouter\nfrom fastapi_injector import Injected\n\nfrom src.adapter.api.dog_facts.dog_facts_mappers import DogFactPresenterMapper\nfrom src.adapter.api.dog_facts.dog_facts_presenters import DogFactPresenter\nfrom src.adapter.api.shared.api_error_handling import ApiErrorHandling\nfrom src.adapter.spi.repositories_factory import RepositoriesFactory\nfrom src.application.repositories.dog_facts_repository_abstract import DogFactsRepositoryAbstract\nfrom src.application.usecases.get_all_dog_facts_usecase import GetAllDogFactsUseCase\nfrom src.application.usecases.get_one_dog_fact_by_id_usecase import GetOneDogFactByIdUseCase\n\nrouter = APIRouter()\n\n\n@router.get(\"/\")\nasync def get_all_dog_facts(factory: RepositoriesFactory = Injected(RepositoriesFactory)):\n    try:\n        dog_facts_repository: DogFactsRepositoryAbstract = factory.get_repository(\n            \"dog_fact_repository\")\n        dog_fact_presenter_mapper: DogFactPresenterMapper = DogFactPresenterMapper()\n\n        get_all_dog_facts_usecase: GetAllDogFactsUseCase = GetAllDogFactsUseCase(\n            dog_facts_repository)\n        dog_facts = get_all_dog_facts_usecase.execute()\n\n        facts: typing.List[DogFactPresenter] = []\n        for data in dog_facts:\n            facts.append(dog_fact_presenter_mapper.to_api(data))\n\n        return facts\n    except Exception as exception:\n        raise ApiErrorHandling.http_error(\"Unexpected error getting all dog facts\", exception)\n\n\n@router.get(\"/{dog_fact_id}\")\nasync def get_one_dog_fact_by_id(dog_fact_id: int, factory: RepositoriesFactory = Injected(RepositoriesFactory)):\n    try:\n        dog_facts_repository: DogFactsRepositoryAbstract = factory.get_repository(\n            \"dog_fact_repository\")\n        dog_fact_presenter_mapper: DogFactPresenterMapper = DogFactPresenterMapper()\n\n        get_one_dog_fact_by_id_usecase: GetOneDogFactByIdUseCase = GetOneDogFactByIdUseCase(\n            dog_fact_id, dog_facts_repository)\n        dog_fact = get_one_dog_fact_by_id_usecase.execute()\n\n        return dog_fact_presenter_mapper.to_api(dog_fact)\n    except Exception as exception:\n        raise ApiErrorHandling.http_error(\"Unexpected error getting one dog fact by id\", exception)\n"}
{"type": "source_file", "path": "src/application/spi/__init__.py", "content": ""}
{"type": "source_file", "path": "src/application/repositories/dog_facts_repository_abstract.py", "content": "from abc import ABC, abstractmethod\nimport typing\n\nfrom src.domain.dog_fact import DogFactEntity\n\n\nclass DogFactsRepositoryAbstract(ABC):\n    @abstractmethod\n    def get_dog_fact_by_id(self, dog_fact_id: int) -> DogFactEntity:\n        \"\"\"Get fact by id\"\"\"\n\n    @abstractmethod\n    def get_all_dog_facts(self) -> typing.List[DogFactEntity]:\n        \"\"\"Get a list of facts\"\"\"\n"}
{"type": "source_file", "path": "src/application/mappers/db_mapper.py", "content": "from abc import ABC, abstractmethod\nfrom typing import Generic, TypeVar\n\nEntity = TypeVar(\"Entity\")\nDbModel = TypeVar(\"DbModel\")\n\n\nclass DbMapper(ABC, Generic[Entity, DbModel]):\n\n    @abstractmethod\n    def to_db(self, entity: Entity) -> DbModel:\n        \"\"\"Map an Entity to a DbModel\"\"\"\n\n    @abstractmethod\n    def to_entity(self, model: DbModel) -> Entity:\n        \"\"\"Map a DbModel to an Entity\"\"\"\n"}
{"type": "source_file", "path": "src/application/usecases/interfaces.py", "content": "from abc import ABC, abstractmethod\nfrom typing import Generic, Iterable, TypeVar\n\nfrom src.domain.base_entity import BaseEntity\n\nEntity = TypeVar(\"Entity\")\n\n\nclass GenericUseCase(ABC, Generic[Entity]):\n    @abstractmethod\n    def execute(self) -> Entity:\n        \"\"\"Execute a use case & return an generic type\"\"\"\n\n\nclass UseCaseOneEntity(GenericUseCase):\n    @abstractmethod\n    def execute(self) -> BaseEntity:\n        \"\"\"Execute a use case & return an entity object\"\"\"\n\n\nclass UseCaseMultipleEntities(GenericUseCase):\n    @abstractmethod\n    def execute(self) -> Iterable[BaseEntity]:\n        \"\"\"Execute a use case & return multiple entity objects\"\"\"\n"}
{"type": "source_file", "path": "src/application/utils/error_handling_utils.py", "content": "from src.domain.api_exception import ApiException\n\n\nclass ErrorHandlingUtils:\n\n    @staticmethod\n    def application_error(error_message: str, exception: Exception) -> ApiException:\n        if isinstance(exception, ApiException):\n            return ApiException(exception.message)\n        else:\n            return ApiException(error_message)\n"}
{"type": "source_file", "path": "src/application/utils/__init__.py", "content": ""}
{"type": "source_file", "path": "src/application/usecases/get_one_random_cat_fact_usecase.py", "content": "from src.application.repositories.cat_facts_repository_abstract import CatFactsRepositoryAbstract\nfrom src.application.usecases.interfaces import UseCaseOneEntity\nfrom src.application.utils.error_handling_utils import ErrorHandlingUtils\nfrom src.domain.cat_fact import CatFactEntity\n\n\nclass GetOneRandomCatFactUseCase(UseCaseOneEntity):\n    def __init__(self, repository: CatFactsRepositoryAbstract) -> None:\n        self.repository = repository\n\n    def execute(self) -> CatFactEntity:\n        try:\n            return self.repository.get_random_cat_fact()\n        except Exception as exception:\n            raise ErrorHandlingUtils.application_error(\"Cannot get random cat fact\", exception)\n"}
{"type": "source_file", "path": "src/application/mappers/http_mapper.py", "content": "from abc import ABC, abstractmethod\nfrom typing import Generic, TypeVar\n\nEntity = TypeVar(\"Entity\")\nHttpObj = TypeVar(\"HttpObj\")\n\n\nclass HttpMapper(ABC, Generic[Entity, HttpObj]):\n\n    @abstractmethod\n    def to_http(self, entity: Entity) -> HttpObj:\n        \"\"\"Map an Entity to an HttpObj\"\"\"\n\n    @abstractmethod\n    def to_entity(self, http_obj: HttpObj) -> Entity:\n        \"\"\"Map an HttpObj to an Entity\"\"\"\n"}
{"type": "source_file", "path": "src/application/spi/db_interface.py", "content": "from abc import ABC, abstractmethod\n\nfrom src.domain.configuration_entity import ConfigurationEntity\n\n\nclass DbInterface(ABC):\n    @abstractmethod\n    def connection(self, config: ConfigurationEntity) -> None:\n        \"\"\"Execute a database connecton\"\"\"\n\n    @abstractmethod\n    def migration(self) -> None:\n        \"\"\"Execute a database migration\"\"\"\n"}
{"type": "source_file", "path": "src/application/spi/http_interface.py", "content": "from abc import ABC, abstractmethod\nfrom typing import Generic, TypeVar\n\nHttpResponse = TypeVar(\"HttpResponse\")\n\n\nclass HttpInterface(ABC, Generic[HttpResponse]):\n    @abstractmethod\n    def get(self, url: str, params=None, **kwargs) -> HttpResponse:\n        \"\"\"Execute an Http get request\"\"\"\n"}
{"type": "source_file", "path": "src/application/repositories/__init__.py", "content": ""}
{"type": "source_file", "path": "src/application/repositories/cat_facts_repository_abstract.py", "content": "from abc import ABC, abstractmethod\nimport typing\n\nfrom src.domain.cat_fact import CatFactEntity\n\n\nclass CatFactsRepositoryAbstract(ABC):\n    @abstractmethod\n    def get_random_cat_fact(self) -> CatFactEntity:\n        \"\"\"Get random Fact\"\"\"\n\n    @abstractmethod\n    def get_all_cat_facts(self) -> typing.List[CatFactEntity]:\n        \"\"\"Get a list of facts\"\"\"\n"}
{"type": "source_file", "path": "src/domain/__init__.py", "content": ""}
{"type": "source_file", "path": "src/domain/base_entity.py", "content": "class BaseEntity:\n    def __init__(self) -> None:\n        pass\n"}
{"type": "source_file", "path": "src/domain/cat_fact.py", "content": "from src.domain.base_entity import BaseEntity\n\n\nclass CatFactEntity(BaseEntity):\n    def __init__(self, fact_txt: str, fact_length: int, ) -> None:\n        super().__init__()\n        self.fact_txt = fact_txt\n        self.fact_length = fact_length\n"}
{"type": "source_file", "path": "src/application/usecases/get_one_dog_fact_by_id_usecase.py", "content": "from src.application.repositories.dog_facts_repository_abstract import DogFactsRepositoryAbstract\nfrom src.application.usecases.interfaces import UseCaseOneEntity\nfrom src.application.utils.error_handling_utils import ErrorHandlingUtils\nfrom src.domain.dog_fact import DogFactEntity\n\n\nclass GetOneDogFactByIdUseCase(UseCaseOneEntity):\n    def __init__(self, dog_fact_id: int, repository: DogFactsRepositoryAbstract) -> None:\n        self.repository = repository\n        self.dog_fact_id = dog_fact_id\n\n    def execute(self) -> DogFactEntity:\n        try:\n            return self.repository.get_dog_fact_by_id(self.dog_fact_id)\n        except Exception as exception:\n            raise ErrorHandlingUtils.application_error(\"Cannot get single dog fact\", exception)\n"}
{"type": "source_file", "path": "src/domain/configuration_entity.py", "content": "class ConfigurationEntity:\n    def __init__(self, dogs_source: str, cats_source: str, env: str) -> None:\n        self.dogs_source = dogs_source\n        self.cats_source = cats_source\n        self.env = env\n"}
{"type": "source_file", "path": "src/application/usecases/get_all_dog_facts_usecase.py", "content": "import typing\nfrom src.application.repositories.dog_facts_repository_abstract import DogFactsRepositoryAbstract\nfrom src.application.usecases.interfaces import UseCaseMultipleEntities\nfrom src.application.utils.error_handling_utils import ErrorHandlingUtils\nfrom src.domain.dog_fact import DogFactEntity\n\n\nclass GetAllDogFactsUseCase(UseCaseMultipleEntities):\n    def __init__(self, repository: DogFactsRepositoryAbstract) -> None:\n        self.repository = repository\n\n    def execute(self) -> typing.Iterable[DogFactEntity]:\n        try:\n            return self.repository.get_all_dog_facts()\n        except Exception as exception:\n            raise ErrorHandlingUtils.application_error(\"Cannot get all dog facts\", exception)\n"}
{"type": "source_file", "path": "src/application/usecases/__init__.py", "content": ""}
{"type": "source_file", "path": "src/domain/api_exception.py", "content": "class ApiException(Exception):\n    def __init__(self, message: str) -> None:\n        super().__init__()\n        self.message = message\n"}
{"type": "source_file", "path": "src/application/usecases/get_all_cat_facts_usecase.py", "content": "import typing\nfrom src.application.repositories.cat_facts_repository_abstract import CatFactsRepositoryAbstract\nfrom src.application.usecases.interfaces import UseCaseMultipleEntities\nfrom src.application.utils.error_handling_utils import ErrorHandlingUtils\nfrom src.domain.cat_fact import CatFactEntity\n\n\nclass GetAllCatFactsUseCase(UseCaseMultipleEntities):\n    def __init__(self, repository: CatFactsRepositoryAbstract) -> None:\n        self.repository = repository\n\n    def execute(self) -> typing.Iterable[CatFactEntity]:\n        try:\n            return self.repository.get_all_cat_facts()\n        except Exception as exception:\n            raise ErrorHandlingUtils.application_error(\"Cannot get all cat facts\", exception)\n"}
{"type": "source_file", "path": "src/domain/dog_fact.py", "content": "from src.domain.base_entity import BaseEntity\n\n\nclass DogFactEntity(BaseEntity):\n    def __init__(self, fact_id: int, fact: str) -> None:\n        super().__init__()\n        self.fact_id = fact_id\n        self.fact_txt = fact\n"}
{"type": "source_file", "path": "src/infrastructure/__init__.py", "content": ""}
