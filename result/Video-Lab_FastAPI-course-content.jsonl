{"repo_info": {"repo_name": "FastAPI-course-content", "repo_owner": "Video-Lab", "repo_url": "https://github.com/Video-Lab/FastAPI-course-content"}}
{"type": "source_file", "path": "2_advanced_python_and_concepts/coding_ex_1.py", "content": "\"\"\"\nYour goal is to create a social media post model using pydantic. The model should have:\nAn author, which is a string\nAn optional co-author, which is a string\nA date, which is a string\nA title, which is a string\nThe content, which is a string\nAn ID, which is an integer\nLikes, which is a list of strings\n\nThe post should also have a field for comments, which is a list of comment models. The model should have:\nAn author, which is a string\nThe comment, which is a string\nLikes, which is an integer\n\nPractice creating a social media post with whatever data you like, so long as it compiles.\n\"\"\""}
{"type": "source_file", "path": "2_advanced_python_and_concepts/pydantic_models.py", "content": "from pydantic import BaseModel\nfrom typing import List, Dict, Optional\n\nclass Comment(BaseModel):\n    author: str\n    \nclass User(BaseModel):\n    username: str\n    password: Optional[str] = None\n    likes: Dict[str, int]\n    comments: List[Comment]\n\n\nclass AdminUser(User):\n    admin_password: str"}
{"type": "source_file", "path": "2_advanced_python_and_concepts/coding_ex_1_solution.py", "content": "\"\"\"\nYour goal is to create a social media post model using pydantic. The model should have:\nAn author, which is a string\nAn optional co-author, which is a string\nA date, which is a string\nA title, which is a string\nThe content, which is a string\nAn ID, which is an integer\nLikes, which is a list of strings\n\nThe post should also have a field for comments, which is a list of comment models. The model should have:\nAn author, which is a string\nThe comment, which is a string\nLikes, which is an integer\n\nPractice creating a social media post with whatever data you like, so long as it compiles.\n\"\"\"\n\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\nclass Comment(BaseModel):\n    author: str\n    comment: str\n    likes: int\n\nclass Post(BaseModel):\n    author: str\n    co_author: Optional[str] = None\n    date: str\n    title: str\n    content: str\n    id: int\n    likes: List[str]\n    comments: List[Comment]\n\ncomments = [\n    Comment(author=\"johndoe\",\n    comment=\"This is a comment!\",\n    likes=2)]\n\npost = Post(author=\"johndoe\",\nco_author=\"janedoe\",\ndate=\"1/1/1970\",\ntitle=\"Cool post\",\ncontent=\"Cool content\",\nid=10101,\nlikes=[\"johndoe\",\"janedoe\"],\ncomments=comments)"}
{"type": "source_file", "path": "2_advanced_python_and_concepts/type_hints.py", "content": "def add_integers(i: int, j: int): # Format | parameter: type (type can be int, str, bool, ...)\n    return i + j # Editor support added\n\nprint(add_integers('ab','cd')) # Doesn't actually restrict anything"}
{"type": "source_file", "path": "5_todo_list/alembic/versions/7ecc4160ed28_dropped_name_index.py", "content": "\"\"\"Dropped name index\n\nRevision ID: 7ecc4160ed28\nRevises: d38ec0ffd059\nCreate Date: 2021-11-09 17:34:48.429581\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = '7ecc4160ed28'\ndown_revision = 'd38ec0ffd059'\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index('ix_user_name', table_name='user')\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_index('ix_user_name', 'user', ['name'], unique=False)\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "4_social_media_feed/db.py", "content": "users = {\n    \"jadkhalili\": {\n        \"name\": \"Jad Khalili\",\n        \"username\": \"jadkhalili\",\n        \"email\": \"jad@email.com\",\n        \"birthday\": \"1st January 1970\",\n        \"friends\": [\"johndoe\", \"janedoe1\", \"doe.jim95\"],\n        \"notifications\": [\n            {\n                \"author\": \"janedoe1\",\n                \"description\": \"liked a post you made.\"\n            },\n            {\n                \"author\": \"doe.jim95\",\n                \"description\": \"Messaged you: \\\"Wanna meet up this weekend?\\\"\"\n            },\n            {\n                \"author\": \"johndoe\",\n                \"description\": \"turns a year older today. Wish them a happy birthday!\"\n            },\n        ],\n        \"hashed_password\": \"$2b$12$qklRsJyj.PAVzezU7vfj5uBjaelr7lSIFqrNT.7CnJEPkRi7nstxO\"\n    },\n    \"johndoe\": {\n        \"name\": \"John Doe\",\n        \"username\": \"johndoe\",\n        \"email\": \"johndoe@email.com\",\n        \"birthday\": \"31st December 1999\",\n        \"friends\": [\"jadkhalili\", \"lip.sum\"],\n        \"notifications\": [\n            {\n                \"author\": \"jadkhalili\",\n                \"description\": \"Messaged you: \\\"k\\\"\"\n            },\n            {\n                \"author\": \"lip.sum\",\n                \"description\": \"tagged you in a post.\"\n            },\n            {\n                \"author\": \"kwurtea\",\n                \"description\": \"Messaged you: \\\"you there???\\\"\"\n            },\n        ],\n        \"hashed_password\": \"$2b$12$4SqrDVzv6w2wRAbcdVxCdu.zrDJjk/TVWYeStP2V8odpKNDtHqgA.\"\n    }\n}"}
{"type": "source_file", "path": "5_todo_list/alembic/env.py", "content": "from logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\n\nfrom alembic import context\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom models import Base\ntarget_metadata = Base.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n"}
{"type": "source_file", "path": "3_car_information_viewer/database.py", "content": "cars = {\n    1: {\n        \"make\": \"CarBrand\",\n        \"model\": \"Fast\",\n        \"year\": 1998,\n        \"price\": 25000.0,\n        \"engine\": \"V8\",\n        \"autonomous\": False,\n        \"sold\": [\"NA\",\"EU\"]\n    },\n\n    2: {\n        \"make\": \"Speedy\",\n        \"model\": \"FourWheeler SUV\",\n        \"year\": 2021,\n        \"price\": 55400.0,\n        \"engine\": \"V4\",\n        \"autonomous\": False,\n        \"sold\": [\"AF\",\"AN\",\"AS\",\"EU\",\"NA\",\"OC\",\"SA\"]\n    },\n\n    3: {\n        \"make\": \"Elektrik\",\n        \"model\": \"AutoCar\",\n        \"year\": 2019,\n        \"price\": 45000.0,\n        \"engine\": \"V8\",\n        \"autonomous\": True,\n        \"sold\": [\"AS\"]\n    },\n\n    4: {\n        \"make\": \"CarBrand\",\n        \"model\": \"Beetle\",\n        \"year\": 2004,\n        \"price\": 21299.99,\n        \"engine\": \"V4\",\n        \"autonomous\": False,\n        \"sold\": []\n    },\n\n    5: {\n        \"make\": \"CarPro\",\n        \"model\": \"Supersonic\",\n        \"year\": 2015,\n        \"price\": 215000.0,\n        \"engine\": \"V12\",\n        \"autonomous\": False,\n        \"sold\": [\"NA\",\"AF\",\"OC\",\"SA\"]\n    }\n}"}
{"type": "source_file", "path": "5_todo_list/alembic/versions/d38ec0ffd059_first_revision.py", "content": "\"\"\"First revision\n\nRevision ID: d38ec0ffd059\nRevises: \nCreate Date: 2021-11-09 17:31:12.752338\n\n\"\"\"\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision = 'd38ec0ffd059'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\n\n\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('user',\n    sa.Column('id', sa.String(), nullable=False),\n    sa.Column('email', sa.String(), nullable=False),\n    sa.Column('name', sa.String(), nullable=True),\n    sa.Column('username', sa.String(), nullable=False),\n    sa.Column('hashed_password', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)\n    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)\n    op.create_index(op.f('ix_user_name'), 'user', ['name'], unique=False)\n    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)\n    op.create_table('item',\n    sa.Column('id', sa.String(), nullable=False),\n    sa.Column('text', sa.String(), nullable=False),\n    sa.Column('user_id', sa.String(), nullable=False),\n    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_item_id'), 'item', ['id'], unique=False)\n    op.create_index(op.f('ix_item_text'), 'item', ['text'], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_item_text'), table_name='item')\n    op.drop_index(op.f('ix_item_id'), table_name='item')\n    op.drop_table('item')\n    op.drop_index(op.f('ix_user_username'), table_name='user')\n    op.drop_index(op.f('ix_user_name'), table_name='user')\n    op.drop_index(op.f('ix_user_id'), table_name='user')\n    op.drop_index(op.f('ix_user_email'), table_name='user')\n    op.drop_table('user')\n    # ### end Alembic commands ###\n"}
{"type": "source_file", "path": "3_car_information_viewer/main.py", "content": "from fastapi import FastAPI, Query, Path, HTTPException, status, Body, Request, Form\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import RedirectResponse\nfrom fastapi.templating import Jinja2Templates\nfrom fastapi.staticfiles import StaticFiles\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, List, Dict\nfrom starlette.responses import HTMLResponse\nfrom starlette.status import HTTP_400_BAD_REQUEST\nfrom database import cars\n\ntemplates = Jinja2Templates(directory=\"templates\")\n\nclass Car(BaseModel):\n    make: Optional[str]\n    model: Optional[str]\n    year: Optional[int] = Field(...,ge=1970,lt=2022)\n    price: Optional[float]\n    engine: Optional[str] = \"V4\"\n    autonomous: Optional[bool]\n    sold: Optional[List[str]]\n\napp = FastAPI()\n\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n@app.get(\"/\", response_class=RedirectResponse)\ndef root(request: Request):\n    return RedirectResponse(url=\"/cars\")\n\n@app.get(\"/cars\", response_class=HTMLResponse)\ndef get_cars(request: Request, number: Optional[str] = Query(\"10\",max_length=3)):\n    response = []\n    for id, car in list(cars.items())[:int(number)]:\n        response.append((id,car))\n    return templates.TemplateResponse(\"index.html\", {\"request\": request, \"cars\": response, \"title\": \"Home\"})\n\n@app.post(\"/search\", response_class=RedirectResponse)\ndef search_cars(id: str = Form(...)):\n    return RedirectResponse(\"/cars/\" + id, status_code=302)\n\n@app.get(\"/cars/{id}\", response_class=HTMLResponse)\ndef get_car_by_id(request: Request, id: int = Path(...,ge=0,lt=1000)):\n    car = cars.get(id)\n    response = templates.TemplateResponse(\"search.html\", {\"request\": request, \"car\": car, \"id\": id, \"title\": \"Search Car\"})\n    if not car:\n        response.status_code = status.HTTP_404_NOT_FOUND\n    return response\n\n@app.get(\"/create\", response_class=HTMLResponse)\ndef create_car(request: Request):\n    return templates.TemplateResponse(\"create.html\", {\"request\": request, \"title\": \"Create Car\"})\n\n@app.post(\"/cars\", status_code=status.HTTP_201_CREATED)\ndef add_cars(\n    make: Optional[str] = Form(...),\n    model: Optional[str] = Form(...),\n    year: Optional[str] = Form(...),\n    price: Optional[float] = Form(...),\n    engine: Optional[str] = Form(...),\n    autonomous: Optional[bool] = Form(...),\n    sold: Optional[List[str]] = Form(None),\n    min_id: Optional[int] = Body(0)):\n    body_cars = [Car(make=make,model=model,year=year,price=price,engine=engine,autonomous=autonomous,sold=sold)]\n    if len(body_cars) < 1:\n        raise HTTPException(status_code=HTTP_400_BAD_REQUEST,detail=\"No cars to add.\")\n    min_id = len(cars.values()) + min_id\n    for car in body_cars:\n        while cars.get(min_id):\n            min_id += 1\n        cars[min_id] = car\n        min_id += 1\n    return RedirectResponse(url=\"/cars\", status_code=302)\n\n@app.get(\"/edit\", response_class=HTMLResponse)\ndef edit_car(request: Request, id: int = Query(...)):\n    car = cars.get(id)\n    if not car:\n        return templates.TemplateResponse(\"search.html\", {\"request\": request, \"id\": id, \"car\": car, \"title\": \"Edit Car\"}, status_code=status.HTTP_404_NOT_FOUND)\n    return templates.TemplateResponse(\"edit.html\", {\"request\": request, \"id\": id, \"car\": car, \"title\": \"Edit Car\"})\n\n@app.post(\"/cars/{id}\")\ndef update_car(request: Request, id: int,\n    make: Optional[str] = Form(None),\n    model: Optional[str] = Form(None),\n    year: Optional[str] = Form(None),\n    price: Optional[float] = Form(None),\n    engine: Optional[str] = Form(None),\n    autonomous: Optional[bool] = Form(None),\n    sold: Optional[List[str]] = Form(None),):\n    stored = cars.get(id)\n    if not stored:\n        return templates.TemplateResponse(\"search.html\", {\"request\": request, \"id\": id, \"car\": stored, \"title\": \"Edit Car\"}, status_code=status.HTTP_404_NOT_FOUND)\n    stored = Car(**dict(stored))\n    car = Car(make=make,model=model,year=year,price=price,engine=engine,autonomous=autonomous,sold=sold)\n    new = car.dict(exclude_unset=True)\n    new = stored.copy(update=new)\n    cars[id] = jsonable_encoder(new)\n    response = {}\n    response[id] = cars[id]\n    return RedirectResponse(url=\"/cars\", status_code=302)\n\n@app.get(\"/delete/{id}\", response_class=RedirectResponse)\ndef delete_car(request: Request, id: int = Path(...)):\n    if not cars.get(id):\n        return templates.TemplateResponse(\"search.html\", {\"request\": request, \"id\": id, \"title\": \"Edit Car\"}, status_code=status.HTTP_404_NOT_FOUND)\n    del cars[id]\n    return RedirectResponse(url=\"/cars\")"}
{"type": "source_file", "path": "4_social_media_feed/main.py", "content": "from fastapi import FastAPI, Request, Response, Depends, status, Form\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nfrom fastapi.templating import Jinja2Templates\nfrom fastapi.staticfiles import StaticFiles\nfrom pydantic import BaseModel\nfrom typing import List, Optional\nfrom db import users\nfrom passlib.context import CryptContext\nfrom fastapi_login import LoginManager\nimport os\nfrom dotenv import load_dotenv\nfrom datetime import datetime, timedelta\n\nload_dotenv()\nSECRET_KEY = os.getenv('SECRET_KEY')\nACCESS_TOKEN_EXPIRES_MINUTES = 60\n\nmanager = LoginManager(secret=SECRET_KEY,token_url=\"/login\", use_cookie=True)\nmanager.cookie_name = \"auth\"\n\n@manager.user_loader()\ndef get_user_from_db(username: str):\n    if username in users.keys():\n        return UserDB(**users[username])\n\ndef authenticate_user(username: str, password: str):\n    user = get_user_from_db(username=username)\n    if not user:\n        return None\n    if not verify_password(plain_password=password, hashed_password=user.hashed_password):\n        return None\n    return user\n\npwd_ctx = CryptContext(schemes=[\"bcrypt\"],deprecated=\"auto\")\n\ndef get_hashed_password(plain_password):\n    return pwd_ctx.hash(plain_password)\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_ctx.verify(plain_password,hashed_password)\n\nclass Notification(BaseModel):\n    author: str\n    description: str\n\nclass User(BaseModel):\n    name: str\n    username: str\n    email: str\n    birthday: Optional[str] = \"\"\n    friends: Optional[List[str]] = []\n    notifications: Optional[List[Notification]] = []\n\nclass UserDB(User):\n    hashed_password: str\n\napp = FastAPI()\ntemplates = Jinja2Templates(directory=\"templates\")\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\n@app.get(\"/\", response_class=HTMLResponse)\ndef root(request: Request):\n    return templates.TemplateResponse(\"index.html\", {\"request\": request, \"title\": \"FriendConnect - Home\"})\n\n@app.get(\"/login\", response_class=HTMLResponse)\ndef get_login(request: Request):\n    return templates.TemplateResponse(\"login.html\", {\"request\": request, \"title\": \"FriendConnect - Login\"})\n\n@app.post(\"/login\")\ndef login(request: Request, form_data: OAuth2PasswordRequestForm = Depends()):\n    user = authenticate_user(username=form_data.username, password=form_data.password)\n    if not user:\n        return templates.TemplateResponse(\"login.html\", {\"request\": request, \"title\": \"FriendConnect - Login\", \"invalid\": True}, status_code=status.HTTP_401_UNAUTHORIZED)\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRES_MINUTES)\n    access_token = manager.create_access_token(\n        data={\"sub\": user.username},\n        expires=access_token_expires\n    )\n    resp = RedirectResponse(\"/home\", status_code=status.HTTP_302_FOUND)\n    manager.set_cookie(resp,access_token)\n    return resp\n\nclass NotAuthenticatedException(Exception):\n    pass\n\ndef not_authenticated_exception_handler(request, exception):\n    return RedirectResponse(\"/login\")\n\nmanager.not_authenticated_exception = NotAuthenticatedException\napp.add_exception_handler(NotAuthenticatedException, not_authenticated_exception_handler)\n\n@app.get(\"/home\")\ndef home(request: Request, user: User = Depends(manager)):\n    user = User(**dict(user))\n    return templates.TemplateResponse(\"home.html\", {\"request\": request, \"title\": \"FriendConnect - Home\", \"user\": user})\n\n@app.get(\"/logout\", response_class=RedirectResponse)\ndef logout():\n    response = RedirectResponse(\"/\")\n    manager.set_cookie(response, None)\n    return response\n\n@app.get(\"/register\", response_class=HTMLResponse)\ndef get_register(request: Request):\n    return templates.TemplateResponse(\"register.html\",{\"request\": request, \"title\": \"FriendConnect - Register\"})\n\n@app.post(\"/register\")\ndef register(request: Request, username: str = Form(...), name: str = Form(...), password: str = Form(...), email: str = Form(...)):\n    hashed_password = get_hashed_password(password)\n    invalid = False\n    for db_username in users.keys():\n        if username == db_username:\n            invalid = True\n        elif users[db_username][\"email\"] == email:\n            invalid = True\n    \n    if invalid:\n        return templates.TemplateResponse(\"register.html\",{\"request\": request, \"title\": \"FriendConnect - Register\", \"invalid\": True},status_code=status.HTTP_400_BAD_REQUEST)\n    \n    users[username] = jsonable_encoder(UserDB(username=username,email=email,name=name,hashed_password=hashed_password))\n    response = RedirectResponse(\"/login\",status_code=status.HTTP_302_FOUND)\n    manager.set_cookie(response,None)\n    return response"}
{"type": "source_file", "path": "5_todo_list/crud.py", "content": "from sqlalchemy.orm import Session\nimport models, schemas\nimport uuid\n\ndef get_user(db: Session, id: str):\n    return db.query(models.User).filter(models.User.id == id).first()\n\ndef get_user_by_username(db: Session, username: str):\n    return db.query(models.User).filter(models.User.username == username).first()\n\ndef get_user_by_email(db: Session, email: str):\n    return db.query(models.User).filter(models.User.email == email).first()\n\ndef create_user(db: Session, user: schemas.UserCreate):\n    id = uuid.uuid4()\n    while get_user(db=db,id=str(id)):\n        id = uuid.uuid4()\n    db_user = models.User(id=str(id),username=user.username,name=user.name,email=user.email,hashed_password=user.hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\n\ndef get_tasks_by_user_id(db: Session, id: str, skip: int = 0, limit: int = 100):\n    return db.query(models.Task).filter(models.Task.user_id == id).offset(skip).limit(limit).all()\n\n\ndef get_task_by_id(db: Session, id: str):\n    return db.query(models.Task).filter(models.Task.id == id).first()\n\ndef add_task(db: Session, task: schemas.TaskCreate, id: str):\n    if not get_user(db=db,id=str(id)):\n        return None\n    task_id = uuid.uuid4()\n    while get_task_by_id(db=db,id=str(task_id)):\n        task_id = uuid.uuid4()\n    \n    db_task = models.Task(id=str(task_id),text=task.text,user_id=id)\n    db.add(db_task)\n    db.commit() \n    db.refresh(db_task)\n    return db_task\n\ndef delete_task(db: Session, id: str):\n    db.query(models.Task).filter(models.Task.id == id).delete()\n    db.commit()"}
{"type": "source_file", "path": "5_todo_list/db.py", "content": "from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import session, sessionmaker\n\nSQLALCHEMY_DATABASE_URI = \"sqlite:///./todo_app.db\"\n\nengine = create_engine(\n    SQLALCHEMY_DATABASE_URI,\n    connect_args={\"check_same_thread\": False}\n)\n\nSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=engine\n)\n\nBase = declarative_base()\n\nclass DBContext:\n    def __init__(self):\n        self.db = SessionLocal()\n\n    def __enter__(self):\n        return self.db\n\n    def __exit__(self, et, ev, traceback):\n        self.db.close()"}
{"type": "source_file", "path": "5_todo_list/schemas.py", "content": "from pydantic import BaseModel\nfrom typing import List, Optional\n\nclass TaskBase(BaseModel):\n    text: str\n\nclass Task(TaskBase):\n    id: str\n    user_id: str\n\n    class Config:\n        orm_mode = True\n\nclass TaskCreate(TaskBase):\n    pass\n\nclass UserBase(BaseModel):\n    username: str\n    email: str\n    name: str\n    hashed_password: str\n\nclass User(UserBase):\n    id: str\n    tasks: List[Task] = []\n\n    class Config:\n        orm_mode = True\n\nclass UserCreate(UserBase):\n    pass"}
{"type": "source_file", "path": "5_todo_list/main.py", "content": "from datetime import timedelta\nfrom fastapi import FastAPI, Request, Depends, status, Form, Response, Path\nfrom fastapi.templating import Jinja2Templates\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.encoders import jsonable_encoder\nfrom starlette.status import HTTP_400_BAD_REQUEST\nfrom db import SessionLocal, engine, DBContext\nimport models, crud, schemas\nfrom sqlalchemy.orm import Session\nfrom fastapi_login import LoginManager\nfrom dotenv import load_dotenv\nimport os\nfrom passlib.context import CryptContext\nfrom fastapi.responses import RedirectResponse\nfrom fastapi.security import OAuth2PasswordRequestForm\n\nload_dotenv()\nSECRET_KEY = os.getenv('SECRET_KEY')\nACCESS_TOKEN_EXPIRE_MINUTES=60\n\nmanager = LoginManager(SECRET_KEY, token_url=\"/login\", use_cookie=True)\nmanager.cookie_name = \"auth\"\n\npwd_ctx = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\napp = FastAPI()\ntemplates = Jinja2Templates(directory=\"templates\")\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n\ndef get_db():\n    with DBContext() as db:\n        yield db\n\ndef get_hashed_password(plain_password):\n    return pwd_ctx.hash(plain_password)\n\ndef verify_password(plain_password, hashed_password):\n    return pwd_ctx.verify(plain_password,hashed_password)\n\n@manager.user_loader()\ndef get_user(username: str, db: Session = None):\n    if db is None:\n        with DBContext() as db:\n            return crud.get_user_by_username(db=db,username=username)\n    return crud.get_user_by_username(db=db,username=username)\n\ndef authenticate_user(username: str, password: str, db: Session = Depends(get_db)):\n    user = crud.get_user_by_username(db=db,username=username)\n    if not user:\n        return None\n    if not verify_password(plain_password=password,hashed_password=user.hashed_password):\n        return None\n    return user\n\nclass NotAuthenticatedException(Exception):\n    pass\n\ndef not_authenticated_exception_handler(request, exception):\n    return RedirectResponse(\"/login\")\n\nmanager.not_authenticated_exception = NotAuthenticatedException\napp.add_exception_handler(NotAuthenticatedException, not_authenticated_exception_handler)\n\n@app.get(\"/\")\ndef root(request: Request):\n    return templates.TemplateResponse(\"index.html\", {\"request\": request, \"title\": \"Home\"})\n\n@app.get(\"/tasks\")\ndef get_tasks(request: Request, db: Session = Depends(get_db), user: schemas.User = Depends(manager)):\n    return templates.TemplateResponse(\"tasks.html\", {\"request\": request, \n    \"title\": \"Tasks\", \n    \"user\": user, \n    \"tasks\": crud.get_tasks_by_user_id(db=db,id=user.id)})\n\n@app.post(\"/tasks\")\ndef add_task(request: Request, text: str = Form(...), db: Session = Depends(get_db), user: schemas.User = Depends(manager)):\n    added = crud.add_task(db=db,task=schemas.TaskCreate(text=text),id=user.id)\n    if not added:\n        return templates.TemplateResponse(\"tasks.html\", {\"request\": request,\n        \"title\": \"Tasks\",\n        \"user\": user,\n        \"tasks\": crud.get_tasks_by_user_id(db=db,id=user.id),\n        \"invalid\": True}, status_code=status.HTTP_400_BAD_REQUEST)\n    else:\n        return RedirectResponse(\"/tasks\", status_code=status.HTTP_302_FOUND)\n\n@app.get(\"/tasks/delete/{id}\", response_class=RedirectResponse)\ndef delete_task(id: str = Path(...), db: Session = Depends(get_db), user: schemas.User = Depends(manager)):\n    crud.delete_task(db=db,id=id)\n    return RedirectResponse(\"/tasks\")\n    \n@app.get(\"/login\")\ndef get_login(request: Request):\n    return templates.TemplateResponse(\"login.html\", {\"request\": request, \"title\": \"Login\"})\n\n@app.post(\"/login\")\ndef login(request: Request, form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    user = authenticate_user(username=form_data.username,password=form_data.password,db=db)\n    if not user:\n        return templates.TemplateResponse(\"login.html\", {\"request\": request,\n        \"title\": \"Login\",\n        \"invalid\": True}, status_code=status.HTTP_401_UNAUTHORIZED)\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    access_token = manager.create_access_token(\n        data={\"sub\": user.username},\n        expires=access_token_expires\n    )\n    resp = RedirectResponse(\"/tasks\", status_code=status.HTTP_302_FOUND)\n    manager.set_cookie(resp,access_token)\n    return resp\n\n@app.get(\"/register\")\ndef get_register(request: Request):\n    return templates.TemplateResponse(\"register.html\", {\"request\": request, \"title\": \"Register\"})\n\n@app.post(\"/register\")\ndef register(request: Request,\nusername: str = Form(...),\nemail: str = Form(...),\nname: str = Form(...),\npassword: str = Form(...),\ndb: Session = Depends(get_db)):\n    hashed_password = get_hashed_password(password)\n    invalid = False\n    if crud.get_user_by_username(db=db,username=username):\n        invalid = True\n    if crud.get_user_by_email(db=db,email=email):\n        invalid = True\n    \n    if not invalid:\n        crud.create_user(db=db, user=schemas.UserCreate(username=username,email=email,name=name,hashed_password=hashed_password))\n        response = RedirectResponse(\"/login\", status_code=status.HTTP_302_FOUND)\n        return response\n    else:\n        return templates.TemplateResponse(\"register.html\",{\"request\": request, \"title\": \"Register\", \"invalid\": True},\n        status_code=HTTP_400_BAD_REQUEST)\n\n@app.get(\"/logout\")\ndef logout(response: Response):\n    response = RedirectResponse(\"/\")\n    manager.set_cookie(response,None)\n    return response"}
{"type": "source_file", "path": "5_todo_list/models.py", "content": "from sqlalchemy import String, Column, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom db import Base\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = Column(String, primary_key=True, index=True,nullable=False)\n    email = Column(String, unique=True, index=True,nullable=False)\n    name = Column(String, index=True)\n    username = Column(String, unique=True, index=True,nullable=False)\n    hashed_password = Column(String,nullable=False)\n\n    items = relationship(\"Task\", back_populates=\"user\")\n\nclass Task(Base):\n    __tablename__ = \"task\"\n\n    id = Column(String, primary_key=True, index=True, nullable=False)\n    text = Column(String, index=True, nullable=False)\n    user_id = Column(String, ForeignKey(\"user.id\"), nullable=False)\n\n    user = relationship(\"User\", back_populates=\"items\")"}
