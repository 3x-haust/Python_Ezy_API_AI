{"repo_info": {"repo_name": "white-obfuscate", "repo_owner": "whxitte", "repo_url": "https://github.com/whxitte/white-obfuscate"}}
{"type": "source_file", "path": "white-obfs.py", "content": "import os\nimport marshal\nimport logging\n\n# ANSI color codes\nyellow = '\\033[93m'\nlgreen = '\\033[92m'\nclear = '\\033[0m'\nred = '\\033[91m'\n\n# Clear the terminal and display the banner\nos.system(\"clear\")\nbanner = yellow + \"\"\"\n\\t\n+-------------------------------------------------------------------+\n│                                                                   │\n│  █ █ █ █▄█ ▀█▀ ▀█▀ █▀▀   █▀█ █▄▄ █▀▀ █ █ █▀▀ █▀▀ ▄▀▄ ▀█▀ █▀▀      │\n│  ▀▄▀▄▀ █ █ ▄█▄  █  ██▄   █▄█ █▄█ █▀  █▄█ ▄██ █▄▄ █▀█  █  ██▄      │\n│                                                                   │\n│ Author : whxite       Instagram : @whxitte\n│                                                                   │\n+-------------------------------------------------------------------+\n\\t\\twhite obfuscate\n\n\"\"\" + clear\n\nprint(banner)\n\ndef mode1(files, string):\n    try:\n        with open(files, 'r') as f:\n            s = f.read()\n        z = [ord(i) for i in s]\n        pea = [string.replace(\"'\", \"\").replace('\"', '') * i for i in z]\n        obfuscated_code = \"\"\"\n# coding=utf-8\n# obfuscated with white obfuscate : https://github.com/WH1T3-E4GL3/white-obfuscate\n\nd={};exec(\"\".join([chr(len(i)) for i in d]))\n        \"\"\".format(pea)\n        with open(files.replace(\".py\", \"encrypted.py\"), \"w\") as f:\n            f.write(obfuscated_code)\n        logging.info(\"Saved as \" + files.replace(\".py\", \"encrypted.py\"))\n        print(\"File encrypted successfully as '{}'\".format(files.replace(\".py\", \"encrypted.py\")))\n    except Exception as e:\n        print(red + \"[ERROR]\" + clear + \" An error occurred: {}\".format(e))\n\ndef mode2(file):\n    try:\n        with open(file, 'r') as f:\n            x = f.read()\n        m = compile(x, '', 'exec')\n        k = marshal.dumps(m)\n        encoded_filename = 'encoded-' + file\n        with open(encoded_filename, 'w') as l:\n            l.write('import marshal\\n')\n            l.write('exec(marshal.loads(' + repr(k) + \"))\")\n        print(\"File encoded successfully as '{}'\".format(encoded_filename))\n    except Exception as e:\n        print(red + \"[ERROR]\" + clear + \" An error occurred: {}\".format(e))\n\ndef main_menu():\n    while True:\n        print(lgreen + \"\"\"\n+-------------------------------------------------------------------+\n│                                                                   │\n│               1. Mode-1 (string substitution)                     │\n│                                                                   │\n│               2. Mode-2 (marshal encoding)                        │\n│                                                                   │\n│               3. Exit                                             │\n│                                                                   │\n+-------------------------------------------------------------------+\n\"\"\" + clear)\n        try:\n            number = int(input(\"Enter the number you want from above > \"))\n            if number == 1:\n                file = input(\"Enter the name of the file to be encrypted: \")\n                string = input(\"Enter the string to be used for substitution cipher: \")\n                mode1(file, string)\n            elif number == 2:\n                file = input(\"Enter the name of the file to be encoded: \")\n                mode2(file)\n            elif number == 3:\n                break\n            else:\n                print(red + \"[ERROR]\" + clear + \" Invalid input, please try again.\")\n        except ValueError:\n            print(red + \"[ERROR]\" + clear + \" Please enter a valid number.\")\n\nif __name__ == \"__main__\":\n    main_menu()\n"}
