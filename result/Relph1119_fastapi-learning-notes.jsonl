{"repo_info": {"repo_name": "fastapi-learning-notes", "repo_owner": "Relph1119", "repo_url": "https://github.com/Relph1119/fastapi-learning-notes"}}
{"type": "test_file", "path": "codes/ch09/test/test_login.py", "content": "from fastapi.testclient import TestClient\nfrom motor.motor_asyncio import AsyncIOMotorClient\nfrom odmantic import AIOEngine\n\nfrom config.db import create_db_engine\nfrom main import app\nfrom models.data.orrs import Login\nfrom util.auth_session import get_current_user\n\nclient = TestClient(app)\n\n\ndef db_connect():\n    client_od = AsyncIOMotorClient(f\"mongodb://localhost:27017/\")\n    engine = AIOEngine(motor_client=client_od, database=\"orrs_test\")\n    return engine\n\n\nasync def get_user():\n    return Login(\n        **{\"username\": \"sjctrags\", \"login_id\": 101, \"password\": \"sjctrags\", \"passphrase\": None, \"profile\": None})\n\n\napp.dependency_overrides[get_current_user] = get_user\napp.dependency_overrides[create_db_engine] = db_connect\n\n\ndef test_list_login():\n    response = client.get(\"/ch09/login/list/all\")\n    assert response.status_code == 201\n"}
{"type": "test_file", "path": "codes/ch09/test/test_route_extract.py", "content": "from fastapi.testclient import TestClient\n\nfrom main import app\nfrom models.data.orrs import Login\nfrom util.auth_session import get_current_user\n\nclient = TestClient(app)\n\n\nasync def get_user():\n    return Login(\n        **{\"username\": \"sjctrags\", \"login_id\": 101, \"password\": \"sjctrags\", \"passphrase\": None, \"profile\": None})\n\n\napp.dependency_overrides[get_current_user] = get_user\n\n\ndef test_rating_top_three():\n    response = client.post(\"/ch09/rating/top/three\", json={\n        \"rate1\": 10.0,\n        \"rate2\": 20.0,\n        \"rate3\": 30.0\n\n    })\n    assert response.status_code == 200\n    assert response.json() == {\"stats\": {\n        \"sum\": 60.0,\n        \"average\": 20.0\n    }\n    }\n"}
{"type": "test_file", "path": "codes/ch09/test/test_restaurants.py", "content": "from fastapi.testclient import TestClient\n\nfrom api import restaurant\n\nclient = TestClient(restaurant.router)\n\n\ndef test_restaurant_index():\n    response = client.get(\"/restaurant/index\")\n    assert response.status_code == 200\n    assert response.text == \"The Restaurants\"\n"}
{"type": "source_file", "path": "codes/ch04/ch04/faculty_mgt/controllers/admin.py", "content": "from uuid import uuid4\n\nfrom fastapi import APIRouter\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\n\nfrom faculty_mgt.models.data.faculty import Signup, Login, Faculty\nfrom faculty_mgt.models.request.faculty import SignupReq, FacultyReq, FacultyDetails\nfrom faculty_mgt.services.faculty import FacultyService\nfrom faculty_mgt.services.login import FacultyLoginService\nfrom faculty_mgt.services.signup import FacultySignupService\n\nrouter = APIRouter()\n\n\n@router.post('/account/signup')\ndef signup_faculty(signup: SignupReq):\n    account: Signup = Signup(faculty_id=signup.faculty_id, username=signup.username, password=signup.password,\n                             sign_id=uuid4().int)\n    signup_service = FacultySignupService()\n    result = signup_service.add_signup(account)\n    if result == True:\n        return jsonable_encoder(account)\n    else:\n        return JSONResponse(content={'message': 'insertion problem encountered'}, status_code=500)\n\n\n@router.get('/account/signup/approved')\ndef approved_signup(sign_id: int):\n    signup_service: FacultySignupService = FacultySignupService()\n    account = signup_service.get_signup(sign_id)\n    if not account == None:\n        login = Login(user_id=account.sign_id, faculty_id=account.faculty_id, username=account.username,\n                      password=account.password)\n        login_service: FacultyLoginService = FacultyLoginService()\n        login_service.add_faculty_login(login)\n        signup_service.remove_signup(sign_id)\n        return jsonable_encoder(account)\n    else:\n        return JSONResponse(content={'message': 'signup account does not exist'}, status_code=500)\n\n\n@router.post('/login/account')\ndef login_app(username: str, password: str):\n    login_service: FacultyLoginService = FacultyLoginService()\n    login = login_service.get_faculty_login(username)\n    if login.password == password:\n        return jsonable_encoder(login)\n    else:\n        return JSONResponse(content={'message': 'login account does not exist'}, status_code=500)\n\n\n@router.post('/login/password/change')\ndef change_password(user_id: int, newpass: str):\n    login_service: FacultyLoginService = FacultyLoginService()\n    result = login_service.update_login_password(user_id, newpass)\n    if result:\n        return JSONResponse(content={'message': 'password changed successfully'}, status_code=201)\n    else:\n        return JSONResponse(content={'message': 'change password error'}, status_code=500)\n\n\n@router.post('/profile/add')\ndef create_profile(profile: FacultyReq):\n    faculty = Faculty(faculty_id=profile.faculty_id, fname=profile.fname, lname=profile.lname, \\\n                      mname=profile.mname, age=profile.age, major=profile.major, department=profile.department)\n    faculty_service: FacultyService = FacultyService()\n    result = faculty_service.add_faculty(faculty)\n    if result:\n        return jsonable_encoder(faculty)\n    else:\n        return JSONResponse(content={'message': 'student profile not created'}, status_code=500)\n\n\n@router.patch('/profile/update')\ndef update_profile(faculty_id: int, profile_details: FacultyDetails):\n    profile_dict = profile_details.dict(exclude_unset=True)\n    faculty_service: FacultyService = FacultyService()\n    result = faculty_service.update_faculty(faculty_id, profile_dict)\n    if result:\n        return JSONResponse(content={'message': 'profile updated successfully'}, status_code=201)\n    else:\n        return JSONResponse(content={'message': 'update profile error'}, status_code=500)\n\n\n@router.get('/profile/list/all')\ndef list_faculty():\n    faculty_service: FacultyService = FacultyService()\n    faculty_list = faculty_service.list_faculty()\n    return jsonable_encoder(faculty_list)\n"}
{"type": "source_file", "path": "codes/ch02/background.py", "content": "from datetime import datetime\n\n\ndef audit_log_transaction(touristId: str, message=\"\"):\n    with open(\"audit_log.txt\", mode=\"a\") as logfile:\n        content = f\"tourist {touristId} executed {message} at {datetime.now()}\\t\\n\"\n        logfile.write(content)\n"}
{"type": "source_file", "path": "codes/ch04/ch04/controller/university.py", "content": "from fastapi import APIRouter\n\nrouter = APIRouter()\n\n\n@router.get(\"/university/{portal_id}\")\ndef access_portal(portal_id: int):\n    return {'message': 'University ERP Systems'}\n"}
{"type": "source_file", "path": "codes/ch01/main.py", "content": "#!/usr/bin/env python\n# encoding: utf-8\n\"\"\"\n@author: HuRuiFeng\n@file: main.py\n@time: 2023/10/23 12:21\n@project: fastapi-learning-notes\n@desc: P5 初始化FastAPI框架\n\"\"\"\nimport random\nfrom datetime import date, datetime\nfrom enum import Enum\nfrom string import ascii_lowercase\nfrom typing import Optional, List, Dict\nfrom uuid import UUID, uuid1\n\nimport uvicorn\nfrom bcrypt import checkpw, hashpw, gensalt\nfrom fastapi import FastAPI, Form, Cookie, Response, Header\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nvalid_users = dict()\nvalid_profiles = dict()\npending_users = dict()\ndiscussion_posts = dict()\nrequest_headers = dict()\ncookies = dict()\n\n\nclass User(BaseModel):\n    username: str\n    password: str\n\n\nclass ValidUser(BaseModel):\n    id: UUID\n    username: str\n    password: str\n    passphrase: str\n\n\nclass UserType(str, Enum):\n    admin = \"admin\"\n    teacher = \"teacher\"\n    alumni = \"alumni\"\n    student = \"student\"\n\n\nclass UserProfile(BaseModel):\n    firstname: str\n    lastname: str\n    middle_initial: str\n    age: Optional[int] = 0\n    salary: Optional[int] = 0\n    birthday: date\n    user_type: UserType\n\n\nclass PostType(str, Enum):\n    information = \"information\"\n    inquiry = \"inquiry\"\n    quote = \"quote\"\n    twit = \"twit\"\n\n\nclass Post(BaseModel):\n    topic: Optional[str] = None\n    message: str\n    date_posted: datetime\n\n\nclass ForumPost(BaseModel):\n    id: UUID\n    topic: Optional[str] = None\n    message: str\n    post_type: PostType\n    date_posted: datetime\n    username: str\n\n\nclass ForumDiscussion(BaseModel):\n    id: UUID\n    main_post: ForumPost\n    replies: Optional[List[ForumPost]] = None\n    author: UserProfile\n\n\n# first sample API\n@app.get(\"/ch01/index\")\ndef index():\n    return {\"message\": \"Welcome FastAPI Nerds\"}\n\n\n@app.post(\"/ch01/login/signup\", description=\"注册服务\")\ndef signup(uname: str, passwd: str):\n    if uname is None and passwd is None:\n        return {\"message\": \"invalid user\"}\n    elif not valid_users.get(uname) is None:\n        return {\"message\": \"user exists\"}\n    else:\n        user = User(username=uname, password=passwd)\n        pending_users[uname] = user\n        return user\n\n\n@app.post(\"/ch01/list/users/pending\")\ndef list_pending_users():\n    return pending_users\n\n\n@app.delete(\"/ch01/delete/users/pending\")\ndef delete_pending_users(accounts=None):\n    if accounts is None:\n        accounts = []\n    for user in accounts:\n        del pending_users[user]\n    return {\"message\": \"deleted pending users\"}\n\n\n@app.post(\"/ch01/login/validate\", response_model=ValidUser)\ndef approve_user(user: User):\n    if not valid_users.get(user.username) is None:\n        return ValidUser(id=None, username=None, password=None, passphrase=None)\n    else:\n        valid_user = ValidUser(id=uuid1(), username=user.username, password=user.password,\n                               passphrase=hashpw(user.password.encode(), gensalt()))\n        valid_users[user.username] = valid_user\n        del pending_users[user.username]\n        return valid_user\n\n\n@app.delete(\"/ch01/login/remove/all\")\ndef delete_users(usernames: List[str]):\n    for user in usernames:\n        del valid_users[user]\n    return {\"message\": \"deleted users\"}\n\n\n@app.delete(\"/ch01/login/remove/{username}\")\ndef delete_user(username: str):\n    if username is None:\n        return {\"message\": \"invalid user\"}\n    else:\n        del valid_users[username]\n        return {\"message\": \"deleted user\"}\n\n\n@app.get(\"/ch01/list/users/valid\")\ndef list_valid_users():\n    return valid_users\n\n\n@app.get(\"/ch01/login/\", description=\"登录服务\")\ndef login(username: str, password: str):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users.get(username)\n        if checkpw(password.encode(), user.passphrase.encode()):\n            return user\n        else:\n            return {\"message\": \"invalid user\"}\n\n\n# should be above /ch01/login/{username}/{password}\n@app.get(\"/ch01/login/details/info\")\ndef login_info():\n    return {\"message\": \"username and password are needed\"}\n\n\n# should be above /ch01/login/{username}/{password}\n@app.get(\"/ch01/login/password/change\")\ndef change_password(username: str, old_passw: str = '', new_passw: str = ''):\n    passwd_len = 8\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    elif old_passw == '' or new_passw == '':\n        characters = ascii_lowercase\n        temporary_passwd = ''.join(random.choice(characters) for _ in range(passwd_len))\n        user = valid_users.get(username)\n        user.password = temporary_passwd\n        user.passphrase = hashpw(temporary_passwd.encode(), gensalt())\n        return user\n    else:\n        user = valid_users.get(username)\n        if user.password == old_passw:\n            user.password = new_passw\n            user.passphrase = hashpw(new_passw.encode(), gensalt())\n            return user\n        else:\n            return {\"message\": \"invalid user\"}\n\n\n# should be above /ch01/login/{username}/{password}\n@app.post(\"/ch01/login/username/unlock\")\ndef unlock_username(id: Optional[UUID] = None):\n    if id is None:\n        return {\"message\": \"token needed\"}\n    else:\n        for key, val in valid_users.items():\n            if val.id == id:\n                return {\"username\": val.username}\n        return {\"message\": \"user does not exist\"}\n\n\n# should be above /ch01/login/{username}/{password}\n@app.post(\"/ch01/login/password/unlock\")\ndef unlock_password(username: Optional[str] = None, id: Optional[UUID] = None):\n    if username is None:\n        return {\"message\": \"username is required\"}\n    elif valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        if id is None:\n            return {\"message\": \"token needed\"}\n        else:\n            user = valid_users.get(username)\n            if user.id == id:\n                return {\"password\": user.password}\n            else:\n                return {\"message\": \"invalid token\"}\n\n\n@app.get(\"/ch01/login/{username}/{password}\")\ndef login_with_token(username: str, password: str, id: UUID):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users[username]\n        if user.id == id and checkpw(password.encode(), user.passphrase):\n            return user\n        else:\n            return {\"message\": \"invalid user\"}\n\n\n@app.post(\"/ch01/account/profile/add\", response_model=UserProfile)\ndef add_profile(uname: str,\n                fname: str = Form(...),\n                lname: str = Form(...),\n                mid_init: str = Form(...),\n                user_age: int = Form(...),\n                sal: float = Form(...),\n                bday: str = Form(...),\n                utype: UserType = Form(...)):\n    if valid_users.get(uname) is None:\n        return UserProfile(firstname=None, lastname=None, middle_initial=None, age=None, birthday=None, salary=None,\n                           user_type=None)\n    else:\n        profile = UserProfile(firstname=fname, lastname=lname, middle_initial=mid_init, age=user_age,\n                              birthday=datetime.strptime(bday, '%m/%d/%Y'), salary=sal, user_type=utype)\n        valid_profiles[uname] = profile\n        return profile\n\n\n@app.put(\"/ch01/account/profile/update/{username}\", description=\"个人资料管理更新服务\")\ndef update_profile(username: str, id: UUID, new_profile: UserProfile):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users.get(username)\n        if user.id == id:\n            valid_profiles[username] = new_profile\n            return {\"message\": \"successfully updated\"}\n        else:\n            return {\"message\": \"user does not exist\"}\n\n\n@app.patch(\"/ch01/account/profile/update/names/{username}\", description=\"个人资料管理更新服务\")\ndef update_profile_names(id: UUID, username: str = '', new_names: Optional[Dict[str, str]] = None):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    elif new_names is None:\n        return {\"message\": \"new names are required\"}\n    else:\n        user = valid_users.get(username)\n        if user.id == id:\n            profile = valid_profiles[username]\n            profile.firstname = new_names['fname']\n            profile.lastname = new_names['lname']\n            profile.middle_initial = new_names['mi']\n            valid_profiles[username] = profile\n            return {\"message\": \"successfully updated\"}\n        else:\n            return {\"message\": \"user does not exist\"}\n\n\n@app.get(\"/ch01/account/profile/view/{username}\")\ndef access_profile(username: str, id: UUID):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users.get(username)\n        if user.id == id:\n            return valid_profiles[username]\n        else:\n            return {\"message\": \"user does not exist\"}\n\n\n@app.post(\"/ch01/discussion/posts/add/{username}\")\ndef post_discussion(username: str, post: Post, post_type: PostType):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    elif not (discussion_posts.get(id) is None):\n        return {\"message\": \"post already exists\"}\n    else:\n        forum_post = ForumPost(id=uuid1(), topic=post.topic, message=post.message, post_type=post_type,\n                               date_posted=post.date_posted, username=username)\n        user = valid_profiles[username]\n        forum = ForumDiscussion(id=uuid1(), main_post=forum_post, author=user, replies=list())\n        discussion_posts[forum.id] = forum\n        return forum\n\n\n@app.post(\"/ch01/discussion/posts/reply/{username}\")\ndef post_reply(username: str, id: UUID, post_type: PostType, post_reply: Post):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    elif discussion_posts.get(id) is None:\n        return {\"message\": \"post does not exist\"}\n    else:\n        reply = ForumPost(id=uuid1(), topic=post_reply.topic, message=post_reply.message, post_type=post_type,\n                          date_posted=post_reply.date_posted, username=username)\n        main_post = discussion_posts[id]\n        main_post.replies.append(reply)\n        return reply\n\n\n@app.put(\"/ch01/discussion/posts/update/{username}\")\ndef update_discussion(username: str, id: UUID, post_type: PostType, post: Post):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    elif discussion_posts.get(id) is None:\n        return {\"message\": \"post does not exist\"}\n    else:\n        forum_post = ForumPost(id=uuid1(), topic=post.topic, message=post.message, post_type=post_type,\n                               date_posted=post.date_posted, username=username)\n        forum = discussion_posts[id]\n        forum.main_post = forum_post\n        return {\"message\": \"main post update\"}\n\n\n@app.delete(\"/ch01/discussion/posts/remove/{username}\", description=\"删除评论服务\")\ndef delete_discussion(username: str, id: UUID):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    elif discussion_posts.get(id) is None:\n        return {\"message\": \"post does not exist\"}\n    else:\n        del discussion_posts[id]\n        return {\"message\": \"main post deleted\"}\n\n\n@app.get(\"/ch01/discussion/posts/view/{username}\")\ndef view_discussion(username: str, id: UUID):\n    if valid_users.get(username) is None:\n        return {\"message\": \"user does not exist\"}\n    elif discussion_posts.get(id) is None:\n        return {\"message\": \"post does not exist\"}\n    else:\n        forum = discussion_posts[id]\n        return forum\n\n\n@app.get(\"/ch01/headers/verify\")\ndef verify_headers(host: Optional[str] = Header(None),\n                   accept: Optional[str] = Header(None),\n                   accept_language: Optional[str] = Header(None),\n                   accept_encoding: Optional[str] = Header(None),\n                   user_agent: Optional[str] = Header(None)):\n    request_headers[\"Host\"] = host\n    request_headers[\"Accept\"] = accept\n    request_headers[\"Accept-Language\"] = accept_language\n    request_headers[\"Accept-Encoding\"] = accept_encoding\n    request_headers[\"User-Agent\"] = user_agent\n    return request_headers\n\n\n@app.get(\"/ch01/login/cookies\")\ndef access_cookie(userkey: Optional[str] = Cookie(None), identity: Optional[str] = Cookie(None)):\n    cookies[\"userkey\"] = userkey\n    cookies[\"identity\"] = identity\n    return cookies\n\n\n@app.post(\"/ch01/login/rememberme/create/\")\ndef create_cookies(resp: Response, id: UUID, username: str = ''):\n    resp.set_cookie(key=\"userkey\", value=username)\n    resp.set_cookie(key=\"identity\", value=str(id))\n    return {\"message\": \"remember-me tokens created\"}\n\n\nif __name__ == '__main__':\n    uvicorn.run(app='main:app', reload=True)\n"}
{"type": "source_file", "path": "codes/ch02/tourist/visit.py", "content": "from fastapi import APIRouter, HTTPException, status\nfrom typing import List\nfrom pydantic import BaseModel\n\nfrom datetime import datetime\nfrom uuid import UUID, uuid1\n\nfrom places.destination import TourBasicInfo, TourPreference, tours, tours_locations\nfrom login.user import approved_users\n\nrouter = APIRouter()\n\ntour_preferences = set()\n\n\nclass Visit(BaseModel):\n    id: UUID\n    destination: List[TourBasicInfo]\n    last_tour: datetime\n\n\nclass Booking(BaseModel):\n    id: UUID\n    destination: TourBasicInfo\n    booking_date: datetime\n    tourist_id: UUID\n\n\n@router.get(\"/ch02/tourist/tour/preference\")\ndef make_tour_preferences(preference: TourPreference):\n    tour_preferences.add(preference)\n    return tour_preferences\n\n\n@router.post(\"/ch02/tourist/tour/booking/add\")\ndef create_booking(tour: TourBasicInfo, touristId: UUID):\n    if approved_users.get(touristId) is None:\n        raise HTTPException(status_code=500, detail=\"details are missing\")\n    booking = Booking(id=uuid1(), destination=tour, booking_date=datetime.now(), tourist_id=touristId)\n    print(approved_users[touristId])\n    approved_users[touristId]['tours'].append(tour)\n    approved_users[touristId]['booked'] += 1\n    tours[tour.id].isBooked = True\n    tours[tour.id].visits += 1\n    return booking\n\n\n@router.delete(\"/ch02/tourist/tour/booking/delete\")\ndef remove_booking(bid: UUID, touristId: UUID):\n    if approved_users.get(touristId) is None:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=\"details are missing\")\n    new_booking_list = [booked for booked in approved_users[touristId]['tours'] if booked.id == bid]\n    approved_users[touristId]['tours'] = new_booking_list\n    return approved_users[touristId]\n\n\n@router.get(\"/ch02/tourist/tour/booked\")\ndef show_booked_tours(touristId: UUID):\n    if approved_users.get(touristId) is None:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                            detail=\"details are missing\", headers={\"X-InputError\": \"missing tourist ID\"})\n    return approved_users[touristId]['tours']\n\n\n@router.get(\"/ch02/tourist/tour/location\")\ndef show_location(tid: UUID):\n    return tours_locations[tid]\n\n\n@router.get(\"/ch02/tourist/tour/available\")\ndef show_available_tours():\n    available_tours = [t for t in tours.values() if t.isBooked is False]\n    return available_tours\n"}
{"type": "source_file", "path": "codes/ch04/ch04/faculty_mgt/controllers/assignments.py", "content": "from datetime import datetime\n\nfrom fastapi import APIRouter\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\n\nfrom faculty_mgt.models.data.faculty import Assignment\nfrom faculty_mgt.models.request.assignment import AssignmentRequest\nfrom faculty_mgt.services.assignments import AssignmentSubmissionService, AssignmentService\n\nrouter = APIRouter()\n\n\n@router.get(\"/assignments/list\")\nasync def provide_assignments():\n    assignment_service: AssignmentService = AssignmentService()\n    return assignment_service.list_assignment()\n\n\n@router.post(\"/assignments/faculty\")\ndef create_assignment(assignment: AssignmentRequest):\n    item = Assignment(title=assignment.title, date_due=assignment.date_due, course=assignment.course,\n                      assgn_id=assignment.assgn_id)\n    assignment_service: AssignmentService = AssignmentService()\n    result = assignment_service.add_assignment(item)\n    if result == True:\n        return jsonable_encoder(item)\n    else:\n        return JSONResponse(content={'message': 'create assignment problem encountered'}, status_code=500)\n\n\n@router.post('/assignments/student/submit')\ndef submit_assignment(assignment: AssignmentRequest):\n    item = Assignment(title=assignment.title, date_due=assignment.date_due, course=assignment.course,\n                      assgn_id=assignment.assgn_id)\n    item.date_completed = datetime.now()\n    assignment_submission_service: AssignmentSubmissionService = AssignmentSubmissionService()\n    result = assignment_submission_service.add_assigment(assignment.bin_id, item)\n    if result == True:\n        return jsonable_encoder(item)\n    else:\n        return JSONResponse(content={'message': 'submission problem encountered'}, status_code=500)\n\n\n@router.post('/assignments/student/workbin')\ndef create_workbin(stud_id: int, faculty_id: int):\n    assignment_submission_service: AssignmentSubmissionService = AssignmentSubmissionService()\n    result, bin_id = assignment_submission_service.create_workbin(stud_id, faculty_id)\n    if result == True:\n        return JSONResponse(content={'message': 'workbin %s is created successful' % (bin_id)}, status_code=201)\n    else:\n        return JSONResponse(content={'message': 'submission problem encountered'}, status_code=500)\n\n\n@router.post('/assignments/view/workbins')\ndef view_workbins(bin_id: int):\n    assignment_submission_service: AssignmentSubmissionService = AssignmentSubmissionService()\n    return assignment_submission_service.list_assignments(bin_id)\n"}
{"type": "source_file", "path": "codes/ch04/ch04/faculty_mgt/controllers/books.py", "content": "from json import dumps\n\nimport requests\nfrom fastapi import APIRouter\nfrom fastapi.encoders import jsonable_encoder\n\nfrom faculty_mgt.models.request.library import BookRequestReq, BookReturnReq\n\nrouter = APIRouter()\n\n\n@router.get('/books/access/list')\ndef list_all_books():\n    with requests.Session() as sess:\n        response = sess.get('http://localhost:8000/ch04/library/book/list')\n        return response.json()\n\n\n@router.get('/books/request/list')\ndef list_all_request():\n    with requests.Session() as sess:\n        response = sess.get('http://localhost:8000/ch04/library/book/request/list', )\n        return response.json()\n\n\n@router.post('/books/request/borrow')\ndef request_borrow_book(request: BookRequestReq):\n    with requests.Session() as sess:\n        response = sess.post('http://localhost:8000/ch04/library/book/request', data=dumps(jsonable_encoder(request)))\n        return response.content\n\n\n@router.get('/books/issuance/list')\ndef list_all_issuance():\n    with requests.Session() as sess:\n        response = sess.get('http://localhost:8000/ch04/library/book/issuance/list')\n        return response.json()\n\n\n@router.post('/books/returning')\ndef return_book(returning: BookReturnReq):\n    with requests.Session() as sess:\n        response = sess.post('http://localhost:8000/ch04/library/book/issuance/return',\n                             data=dumps(jsonable_encoder(returning)))\n        return response.json()\n"}
{"type": "source_file", "path": "codes/ch03/api/keywords.py", "content": "import sys\nfrom typing import List\nfrom uuid import UUID\n\nfrom dependency_injector.wiring import inject, Provide\nfrom fastapi import APIRouter, Depends\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\n\nfrom containers.single_container import Container\nfrom repository.keywords import KeywordRepository\n\nrouter = APIRouter()\n\n\n@router.post(\"/keyword/insert\")\n@inject\ndef insert_recipe_keywords(rid: UUID, keywords: List[str],\n                           keywordservice: KeywordRepository = Depends(Provide[Container.keywordservice])):\n    if keywords is not None:\n        keywords_list = list(keywords)\n        keywordservice.insert_keywords(rid, keywords_list)\n        return JSONResponse(content={\"message\": \"inserted recipe keywords\"}, status_code=201)\n    else:\n        return JSONResponse(content={\"message\": \"invalid operation\"}, status_code=403)\n\n\n@router.post(\"/keyword/add\")\n@inject\ndef add_recipe_keyword(rid: UUID, keyword: str,\n                       keywordservice: KeywordRepository = Depends(Provide[Container.keywordservice])):\n    keywordservice.add_keywords(rid, keyword)\n    return JSONResponse(content={\"message\": \"inserted recipe keywords\"}, status_code=201)\n\n\n@router.post(\"/keyword/get\")\n@inject\ndef get_recipe_keywords(rid: UUID, keywordservice: KeywordRepository = Depends(Provide[Container.keywordservice])):\n    keywords_json = jsonable_encoder(keywordservice.query_keywords(rid))\n    return keywords_json\n\n\n@router.get(\"/keyword/list\")\n@inject\ndef get_all_keywords(keywordservice: KeywordRepository = Depends(Provide[Container.keywordservice])):\n    keywords_json = jsonable_encoder(keywordservice.query_all_keywords())\n    return keywords_json\n\n\ncontainer = Container()\ncontainer.wire(modules=[sys.modules[__name__]])\n"}
{"type": "source_file", "path": "codes/ch02/handler_exceptions.py", "content": "from fastapi import HTTPException\n\n\nclass PostFeedbackException(HTTPException):\n    def __init__(self, detail: str, status_code: int):\n        self.status_code = status_code\n        self.detail = detail\n\n\nclass PostRatingException(HTTPException):\n    def __init__(self, detail: str, status_code: int):\n        self.status_code = status_code\n        self.detail = detail\n"}
{"type": "source_file", "path": "codes/ch03/service/complaints.py", "content": "from fastapi import Depends\nfrom repository.factory import get_bad_recipes\nfrom uuid import UUID\n\n\nclass BadRecipeService:\n\n    def __init__(self, recipes=Depends(get_bad_recipes)):\n        self.recipes = recipes\n\n    def report_bad_recipe(self, id: UUID):\n        self.recipes.add_bad_recipe(id)\n\n    def get_bad_recipes(self):\n        return self.recipes.query_bad_recipes()\n"}
{"type": "source_file", "path": "codes/ch02/feedback/post.py", "content": "from fastapi import APIRouter, BackgroundTasks\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\nfrom fastapi.responses import JSONResponse\n\nfrom uuid import UUID, uuid1\nfrom handler_exceptions import PostRatingException, PostFeedbackException\n\nfrom places.destination import tours, StarRating, Post\nfrom login.user import approved_users\nfrom background import audit_log_transaction\nfrom utility import check_post_owner\n\nrouter = APIRouter()\n\nfeedback_tour = dict()\n\n\nclass Assessment(BaseModel):\n    id: UUID\n    post: Post\n    tour_id: UUID\n    tourist_id: UUID\n\n\n@router.post(\"/feedback/add\")\ndef post_tourist_feedback(touristId: UUID, tid: UUID, post: Post, bg_task: BackgroundTasks):\n    if approved_users.get(touristId) is None and tours.get(tid) is None:\n        raise PostFeedbackException(detail='tourist and tour details invalid', status_code=403)\n    assessId = uuid1()\n    assessment = Assessment(id=assessId, post=post, tour_id=tid, tourist_id=touristId)\n    feedback_tour[assessId] = assessment\n    tours[tid].ratings = (tours[tid].ratings + post.rating) / 2\n\n    assess_json = jsonable_encoder(assessment)\n    # 埋点：添加评论\n    bg_task.add_task(audit_log_transaction, str(touristId), message=\"post_tourist_feedback\")\n    return JSONResponse(content=assess_json, status_code=200)\n\n\n@router.post(\"/feedback/update/rating\")\ndef update_tour_rating(assessId: UUID, new_rating: StarRating):\n    print(new_rating)\n    if feedback_tour.get(assessId) is None:\n        raise PostRatingException(detail='tour assessment invalid', status_code=403)\n    tid = feedback_tour[assessId].tour_id\n    tours[tid].ratings = (tours[tid].ratings + new_rating) / 2\n    tour_json = jsonable_encoder(tours[tid])\n    return JSONResponse(content=tour_json, status_code=200)\n\n\n@router.delete(\"/feedback/delete\")\nasync def delete_tourist_feedback(assessId: UUID, touristId: UUID):\n    if approved_users.get(touristId) is None and feedback_tour.get(assessId):\n        raise PostFeedbackException(detail='tourist and tour details invalid', status_code=403)\n    post_delete = [access for access in feedback_tour.values() if access.id == assessId]\n    for access in post_delete:\n        is_owner = await check_post_owner(feedback_tour, access.id, touristId)\n        if is_owner:\n            del feedback_tour[access.id]\n    return JSONResponse(content={\"message\": f\"deleted posts of {touristId}\"}, status_code=200)\n\n\n@router.get(\"/feedback/list\")\nasync def show_tourist_post(touristId: UUID):\n    print(feedback_tour)\n    tourist_posts = [assess for assess in feedback_tour.values() if assess.tourist_id == touristId]\n    tourist_posts_json = jsonable_encoder(tourist_posts)\n    return JSONResponse(content=tourist_posts_json, status_code=200)\n"}
{"type": "source_file", "path": "codes/ch03/api/admin_mcontainer.py", "content": "from fastapi import APIRouter, Depends\nfrom fastapi.encoders import jsonable_encoder\n\nimport sys\nfrom dependency_injector.wiring import inject, Provide\n\nfrom repository.admin import AdminRepository\nfrom containers.multiple_containers import RecipeAppContainer\n\nrouter = APIRouter()\n\n\n@router.get(\"/admin/logs/visitors/list\")\n@inject\ndef list_logs_visitors(\n        adminservice: AdminRepository = Depends(Provide[RecipeAppContainer.admincontainer.adminservice])):\n    logs_visitors_json = jsonable_encoder(adminservice.query_logs_visitor())\n    return logs_visitors_json\n\n\ncontainer = RecipeAppContainer()\ncontainer.wire(modules=[sys.modules[__name__]])\n"}
{"type": "source_file", "path": "codes/ch02/admin/manager.py", "content": "from uuid import UUID, uuid1\n\nfrom fastapi import APIRouter, status\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\n\nfrom login.user import pending_users, approved_users\nfrom places.destination import Tour, TourBasicInfo, TourInput, TourLocation, tours, tours_basic_info, tours_locations\n\nrouter = APIRouter()\n\n\n@router.post(\"/ch02/admin/destination/add\")\ndef add_tour_destination(input: TourInput):\n    try:\n        tid = uuid1()\n        tour = Tour(id=tid, name=input.name, city=input.city, country=input.country, type=input.type,\n                    location=input.location,\n                    amenities=input.amenities, feedbacks=list(), ratings=0.0, visits=0, isBooked=False)\n        tour_basic_info = TourBasicInfo(id=tid, name=input.name, type=input.type, amenities=input.amenities,\n                                        ratings=0.0)\n        tour_location = TourLocation(id=tid, name=input.name, city=input.city, country=input.country,\n                                     location=input.location)\n        tours[tid] = tour\n        tours_basic_info[tid] = tour_basic_info\n        tours_locations[tid] = tour_location\n        tour_json = jsonable_encoder(tour)\n        return JSONResponse(content=tour_json, status_code=status.HTTP_201_CREATED)\n    except:\n        return JSONResponse(content={\"message\": \"invalid tour\"}, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@router.delete(\"/ch02/admin/destination/remove/{id}\")\ndef remove_tour_destination(id: UUID):\n    try:\n        del tours[id]\n        del tours_basic_info[id]\n        del tours_locations[id]\n        return JSONResponse(content={\"message\": \"tour deleted\"}, status_code=status.HTTP_202_ACCEPTED)\n    except:\n        return JSONResponse(content={\"message\": \"tour does not exist\"},\n                            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@router.put(\"/ch02/admin/destination/update\", status_code=status.HTTP_202_ACCEPTED)\ndef update_tour_destination(tour: Tour):\n    try:\n        tid = tour.id\n        tours[tid] = tour\n        tour_basic_info = TourBasicInfo(id=tid, name=tour.name, type=tour.type, amenities=tour.amenities,\n                                        ratings=tour.ratings)\n        tour_location = TourLocation(id=tid, name=tour.name, city=tour.city, country=tour.country,\n                                     location=tour.location)\n        tours_basic_info[tid] = tour_basic_info\n        tours_locations[tid] = tour_location\n        return {\"message\": \"tour updated\"}\n    except:\n        return {\"message\": \"tour does not exist\"}\n\n\n@router.get(\"/ch02/admin/destination/list\", status_code=status.HTTP_200_OK)\ndef list_all_tours():\n    return tours\n\n\n@router.get(\"/ch02/admin/tourists/list\")\ndef list_all_tourists():\n    return approved_users\n\n\n@router.get(\"/ch02/admin/tourists/pending/list\")\ndef list_all_pending():\n    return pending_users\n\n\n@router.get(\"/ch02/admin/tourists/vip\")\ndef list_valuable_visitors():\n    try:\n        sort_orders = sorted(approved_users.items(), key=lambda x: x[1].booked, reverse=True)\n        sorted_orders_json = jsonable_encoder(sort_orders)\n        return JSONResponse(content=sorted_orders_json, status_code=status.HTTP_200_OK)\n    except:\n        return JSONResponse(content={\"message\": \"invalid operation\"}, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@router.post(\"/ch02/admin/user/login/approve\")\ndef approve_login(userid: UUID):\n    try:\n        approved_users[userid] = pending_users[userid]\n        del pending_users[userid]\n        return JSONResponse(content={\"message\": \"user approved\"}, status_code=status.HTTP_200_OK)\n    except:\n        return JSONResponse(content={\"message\": \"invalid operation\"}, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)\n"}
{"type": "source_file", "path": "codes/ch03/dependencies/posts.py", "content": "from fastapi import Request, HTTPException\n\n\ndef check_feedback_length(request: Request):\n    feedback = request.query_params[\"feedback\"]\n    if len(feedback) < 20:\n        raise HTTPException(status_code=403, detail=\"length of feedback should not be lower than 20\")\n"}
{"type": "source_file", "path": "codes/ch03/repository/factory.py", "content": "from fastapi import Depends\nfrom repository.recipes import RecipeRepository\nfrom repository.posts import PostRepository\nfrom repository.admin import AdminRepository\nfrom repository.keywords import KeywordRepository\nfrom repository.complaints import BadRecipeRepository\n\n\ndef get_recipe_repo(repo=Depends(RecipeRepository)):\n    return repo\n\n\ndef get_post_repo(repo=Depends(PostRepository)):\n    return repo\n\n\ndef get_users_repo(repo=Depends(AdminRepository)):\n    return repo\n\n\ndef get_keywords(keywords=Depends(KeywordRepository)):\n    return keywords\n\n\ndef get_bad_recipes(repo=Depends(BadRecipeRepository)):\n    return repo\n"}
{"type": "source_file", "path": "codes/ch03/repository/users.py", "content": "login_details = dict()\nuser_profiles = dict()\n\n"}
{"type": "source_file", "path": "codes/ch03/api/admin.py", "content": "from fastapi import APIRouter, Depends\nfrom fastapi.encoders import jsonable_encoder\n\nimport sys\nfrom dependency_injector.wiring import inject, Provide\n\nfrom repository.admin import AdminRepository\nfrom containers.single_container import Container\n\nrouter = APIRouter()\n\n\n@router.get(\"/admin/login/details/list\")\n@inject\ndef list_login_details(adminservice: AdminRepository = Depends(Provide[Container.adminservice])):\n    login_details_json = jsonable_encoder(adminservice.query_login_details())\n    return login_details_json\n\n\n@router.get(\"/admin/user/profiles/list\")\n@inject\ndef list_user_profiles(adminservice: AdminRepository = Depends(Provide[Container.adminservice])):\n    user_profiles_json = jsonable_encoder(adminservice.query_user_profiles())\n    return user_profiles_json\n\n\ncontainer = Container()\ncontainer.wire(modules=[sys.modules[__name__]])\n"}
{"type": "source_file", "path": "codes/ch03/dependencies/users.py", "content": "from fastapi import Request, HTTPException\nfrom repository.aggregates import stats_user_type\nimport json\n\n\ndef count_user_by_type(request: Request):\n    # 创建用户的更新频率\n    try:\n        count = stats_user_type[request.query_params.get(\"type\")]\n        count += 1\n        stats_user_type[request.query_params.get(\"type\")] = count\n        print(json.dumps(stats_user_type))\n    except:\n        stats_user_type[request.query_params.get(\"type\")] = 1\n\n\ndef check_credential_error(request: Request):\n    try:\n        username = request.query_params.get(\"username\")\n        password = request.query_params.get(\"password\")\n        if username == password:\n            raise HTTPException(status_code=403, detail=\"username should not be equal to password\")\n    except:\n        raise HTTPException(status_code=500, detail=\"encountered internal problems\")\n"}
{"type": "source_file", "path": "codes/ch03/main.py", "content": "import uvicorn\nfrom fastapi import FastAPI, Depends\n\nfrom api import recipes, users, posts, login, admin, keywords, admin_mcontainer, complaints\nfrom dependencies.global_transactions import log_transaction\n\napp = FastAPI(dependencies=[Depends(log_transaction)])\n\napp.include_router(recipes.router, prefix=\"/ch03\")\napp.include_router(users.router, prefix=\"/ch03\")\napp.include_router(posts.router, prefix=\"/ch03\")\napp.include_router(login.router, prefix=\"/ch03\")\napp.include_router(admin.router, prefix=\"/ch03\")\napp.include_router(keywords.router, prefix=\"/ch03\")\napp.include_router(admin_mcontainer.router, prefix=\"/ch03\")\napp.include_router(complaints.router, prefix=\"/ch03\")\n\n\n@app.get(\"/ch03\")\ndef index():\n    return {\"message\": \"Cooking Recipe Rating Prototype!\"}\n\n\nif __name__ == '__main__':\n    uvicorn.run(app='main:app', reload=True)\n"}
{"type": "source_file", "path": "codes/ch04/ch04/faculty_mgt/faculty_main.py", "content": "from fastapi import FastAPI, Depends\n\nfrom configuration.config import FacultySettings, ServerSettings\nfrom faculty_mgt.controllers import admin, assignments, books\n\nfaculty_app = FastAPI()\nfaculty_app.include_router(admin.router)\nfaculty_app.include_router(assignments.router)\nfaculty_app.include_router(books.router)\n\n\ndef build_config():\n    return FacultySettings()\n\n\ndef fetch_config():\n    return ServerSettings()\n\n\n@faculty_app.get('/index')\ndef index_faculty(config: FacultySettings = Depends(build_config), fconfig: ServerSettings = Depends(fetch_config)):\n    return {\n        'project_name': config.application,\n        'webmaster': config.webmaster,\n        'created': config.created,\n        'production_server': fconfig.production_server,\n        'prod_port': fconfig.prod_port\n    }\n"}
{"type": "source_file", "path": "codes/ch04/ch04/configuration/config.py", "content": "import os\nfrom datetime import date\n\nfrom pydantic_settings import BaseSettings\n\n\nclass FacultySettings(BaseSettings):\n    application: str = 'Faculty Management System'\n    webmaster: str = 'sjctrags@university.com'\n    created: date = '2021-11-10'\n\n\nclass LibrarySettings(BaseSettings):\n    application: str = 'Library Management System'\n    webmaster: str = 'sjctrags@university.com'\n    created: date = '2021-11-10'\n\n\nclass StudentSettings(BaseSettings):\n    application: str = 'Student Management System'\n    webmaster: str = 'sjctrags@university.com'\n    created: date = '2021-11-10'\n\n\nclass ServerSettings(BaseSettings):\n    production_server: str\n    prod_port: int\n    development_server: str\n    dev_port: int\n\n    class Config:\n        env_file = os.getcwd() + '/configuration/erp_settings.properties'\n"}
{"type": "source_file", "path": "codes/ch03/model/posts.py", "content": "from uuid import UUID\nfrom datetime import date\nfrom model.classifications import RecipeRating\n\n\nclass Post:\n    def __init__(self, id: UUID, feedback: str, rating: RecipeRating, userId: UUID, date_posted: date):\n        self.id = id\n        self.feedback = feedback\n        self.rating = rating\n        self.userId = userId\n        self.date_posted = date_posted\n"}
{"type": "source_file", "path": "codes/ch03/service/recipe_utilities.py", "content": "from repository.recipes import recipes\nfrom uuid import UUID\n\n\ndef get_recipe_names():\n    recipes_list = [val.name for val in recipes.values()]\n    return recipes_list\n\n\ndef get_recipe_ingredients(rid: UUID):\n    ingredients = recipes[rid].ingredients\n    return ingredients\n"}
{"type": "source_file", "path": "codes/ch03/api/complaints.py", "content": "from uuid import UUID\n\nfrom fastapi import APIRouter\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\nfrom lagom import Container\nfrom lagom.integrations.fast_api import FastApiIntegration\n\nfrom repository.complaints import BadRecipeRepository\n\ncontainer = Container()\ncontainer[BadRecipeRepository] = BadRecipeRepository()\n# container[BadRecipeRepository] = Singleton(BadRecipeRepository) #another way\n\nrouter = APIRouter()\ndeps = FastApiIntegration(container, request_singletons=[BadRecipeRepository])\n\n\n@router.post(\"/complaint/recipe\")\ndef report_recipe(rid: UUID, complaintservice=deps.depends(BadRecipeRepository)):\n    complaintservice.add_bad_recipe(rid)\n    return JSONResponse(content={\"message\": \"reported bad recipe\"}, status_code=201)\n\n\n@router.get(\"/complaint/list/all\")\ndef list_defective_recipes(complaintservice=deps.depends(BadRecipeRepository)):\n    defects_list = jsonable_encoder(complaintservice.query_bad_recipes())\n    return defects_list\n"}
{"type": "source_file", "path": "codes/ch03/repository/recipes.py", "content": "from model.recipes import Recipe\nfrom model.recipes import Ingredient\nfrom model.classifications import Category, Origin\nfrom uuid import uuid1\n\nrecipes = dict()\n\n\nclass RecipeRepository:\n    def __init__(self):\n        ingrA1 = Ingredient(measure='cup', qty=1, name='grape tomatoes', id=uuid1())\n        ingrA2 = Ingredient(measure='teaspoon', qty=0.5, name='salt', id=uuid1())\n        ingrA3 = Ingredient(measure='pepper', qty=0.25, name='pepper', id=uuid1())\n        ingrA4 = Ingredient(measure='pound', qty=0.5, name='asparagus', id=uuid1())\n        ingrA5 = Ingredient(measure='teaspoon', qty=2, name='olive oil', id=uuid1())\n        ingrA6 = Ingredient(measure='pieces', qty=4, name='large eggs', id=uuid1())\n        ingrA7 = Ingredient(measure='cup', qty=1, name='milk', id=uuid1())\n        ingrA8 = Ingredient(measure='cup', qty=0.5, name='whipped cream cheese', id=uuid1())\n        ingrA9 = Ingredient(measure='cup', qty=0.25, name='Parmesan cheese', id=uuid1())\n\n        recipeA = Recipe(orig=Origin.european,\n                         ingredients=[ingrA1, ingrA2, ingrA3, ingrA4, ingrA5, ingrA6, ingrA7, ingrA8, ingrA9],\n                         cat=Category.breakfast, name='Crustless quiche bites with asparagus and oven-dried tomatoes',\n                         id=uuid1())\n\n        ingrB1 = Ingredient(measure='tablespoon', qty=1, name='oil', id=uuid1())\n        ingrB2 = Ingredient(measure='cup', qty=0.5, name='chopped tomatoes', id=uuid1())\n        ingrB3 = Ingredient(measure='minced', qty=1, name='pepper', id=uuid1())\n        ingrB4 = Ingredient(measure='drop', qty=1, name='salt', id=uuid1())\n        ingrB5 = Ingredient(measure='pieces', qty=2, name='large eggs', id=uuid1())\n\n        recipeB = Recipe(orig=Origin.carribean, ingredients=[ingrB1, ingrB2, ingrB3, ingrB4, ingrB5],\n                         cat=Category.breakfast, name='Fried eggs, Caribbean style', id=uuid1())\n\n        ingrC1 = Ingredient(measure='pounds', qty=2.25, name='sweet yellow onions', id=uuid1())\n        ingrC2 = Ingredient(measure='cloves', qty=10, name='garlic', id=uuid1())\n        ingrC3 = Ingredient(measure='minced', qty=1, name='blackpepper', id=uuid1())\n        ingrC4 = Ingredient(measure='drop', qty=1, name='kasher salt', id=uuid1())\n        ingrC5 = Ingredient(measure='cup', qty=4, name='low-sodium chicken brothlarge eggs', id=uuid1())\n        ingrC6 = Ingredient(measure='tablespoon', qty=4, name='sherry', id=uuid1())\n        ingrC7 = Ingredient(measure='sprig', qty=7, name='thyme', id=uuid1())\n        ingrC8 = Ingredient(measure='cup', qty=0.5, name='heavy cream', id=uuid1())\n\n        recipeC = Recipe(orig=Origin.mediterranean,\n                         ingredients=[ingrC1, ingrC2, ingrC3, ingrC4, ingrC5, ingrC6, ingrC7, ingrC8],\n                         cat=Category.soup, name='Creamy roasted onion soup', id=uuid1())\n\n        recipes[recipeA.id] = recipeA\n        recipes[recipeB.id] = recipeB\n        recipes[recipeC.id] = recipeC\n\n    def insert_recipe(self, recipe: Recipe):\n        recipes[recipe.id] = recipe\n\n    def query_recipes(self):\n        return recipes\n"}
{"type": "source_file", "path": "codes/ch03/service/factory.py", "content": "from fastapi import Depends\nfrom service.recipes import RecipeService\nfrom service.posts import PostService\nfrom service.complaints import BadRecipeService\n\n\ndef get_recipe_service(repo=Depends(RecipeService)):\n    return repo\n\n\ndef get_post_service(repo=Depends(PostService)):\n    return repo\n\n\ndef get_complaint_service(repo=Depends(BadRecipeService)):\n    return repo\n"}
{"type": "source_file", "path": "codes/ch03/repository/admin.py", "content": "from repository.users import login_details, user_profiles\nfrom repository.login import logs_visitor\n\n\nclass AdminRepository:\n\n    def __init__(self):\n        pass\n\n    def query_login_details(self):\n        return list(login_details.values())\n\n    def query_user_profiles(self):\n        return list(user_profiles.values())\n\n    def query_logs_visitor(self):\n        return list(logs_visitor.values())\n"}
{"type": "source_file", "path": "codes/ch03/service/recipes.py", "content": "from fastapi import Depends\nfrom model.recipes import Recipe\nfrom repository.factory import get_recipe_repo\n\n\nclass RecipeService:\n\n    def __init__(self, repo=Depends(get_recipe_repo)):\n        self.repo = repo\n\n    def get_recipes(self):\n        return self.repo.query_recipes()\n\n    def add_recipe(self, recipe: Recipe):\n        self.repo.insert_recipe(recipe)\n"}
{"type": "source_file", "path": "codes/ch03/repository/keywords.py", "content": "from uuid import UUID\nfrom typing import List\n\nkeywords_recipe = dict()\n\n\nclass KeywordRepository:\n\n    def __init__(self):\n        pass\n\n    def insert_keywords(self, id: UUID, keywords: List[str]):\n        keywords_recipe[id] = keywords\n\n    def add_keywords(self, id: UUID, keyword: str):\n        if keywords_recipe.get(id) is None:\n            keywords = list()\n            keywords.append(keyword)\n            keywords_recipe[id] = keywords\n        else:\n            keywords = keywords_recipe[id]\n            keywords.append(keyword)\n            keywords_recipe[id] = keywords\n\n    def query_keywords(self, id: UUID):\n        return keywords_recipe[id]\n\n    def query_all_keywords(self):\n        return dict(keywords_recipe.items())\n"}
{"type": "source_file", "path": "codes/ch03/repository/login.py", "content": "from datetime import date\n\nlogs_visitor = dict()\n\n\nclass LoginRepository:\n    def __init__(self):\n        pass\n\n    def login_audit(self, username: str, password: str):\n        logs_visitor[username] = date.today()\n"}
{"type": "source_file", "path": "codes/ch03/containers/single_container.py", "content": "from dependency_injector import containers, providers\n\nfrom repository.users import login_details\nfrom repository.login import LoginRepository\nfrom repository.admin import AdminRepository\nfrom repository.keywords import KeywordRepository\nfrom service.recipe_utilities import get_recipe_names\n\n\nclass Container(containers.DeclarativeContainer):\n    loginservice = providers.Factory(LoginRepository)\n    adminservice = providers.Singleton(AdminRepository)\n    keywordservice = providers.Factory(KeywordRepository)\n    recipe_util = providers.Callable(get_recipe_names)\n    login_repo = providers.Dict(login_details)\n"}
{"type": "source_file", "path": "codes/ch03/model/classifications.py", "content": "from enum import Enum\n\n\nclass Category(str, Enum):\n    breakfast = \"breakfast\"\n    lunch = \"lunch\"\n    dinner = \"dinner\"\n    appetizer = \"appetizer\"\n    salad = \"salad\"\n    entree = \"entree\"\n    side_dish = \"side_dish\"\n    pastry = \"pastry\"\n    dessert = \"dessert\"\n    snack = \"snack\"\n    soup = \"soup\"\n    holiday = \"holiday\"\n    vegetarian = \"vegetarian\"\n    cookbook = \"cookbook\"\n\n\nclass Origin(str, Enum):\n    asian = \"asian\"\n    mediterranean = \"mediterranean\"\n    mid_eastern = \"mid_eastern\"\n    african = \"african\"\n    pacific = \"pacific\"\n    south_american = \"south_american\"\n    north_american = \"south_american\"\n    european = \"european\"\n    jewish = \"jewish\"\n    carribean = \"carribean\"\n\n\nclass UserType(str, Enum):\n    admin = \"admin\"\n    user = \"user\"\n    guest = \"guest\"\n\n\nclass RecipeRating(str, Enum):\n    one = \"1\"\n    two = \"2\"\n    three = \"3\"\n    four = \"4\"\n    five = \"5\"\n"}
{"type": "source_file", "path": "codes/ch03/api/users.py", "content": "from fastapi import APIRouter, Depends\nfrom pydantic import BaseModel\nfrom fastapi.encoders import jsonable_encoder\n\nfrom model.classifications import UserType\nfrom model.users import Login, User, Profile, UserDetails\nfrom repository.users import login_details, user_profiles\nfrom uuid import UUID\nfrom datetime import date\n\nfrom dependencies.users import count_user_by_type, check_credential_error\n\n\nclass LoginReq(BaseModel):\n    id: UUID\n    username: str\n    password: str\n    type: UserType\n\n\nrouter = APIRouter(dependencies=[Depends(count_user_by_type), Depends(check_credential_error)])\n\n\ndef create_login(id: UUID, username: str, password: str, type: UserType):\n    account = {\"id\": id, \"username\": username, \"password\": password, \"type\": type}\n    return account\n\n\nasync def create_user_details(id: UUID, firstname: str, lastname: str, middle: str, bday: date, pos: str,\n                              login=Depends(create_login), ):\n    user = {\"id\": id, \"firstname\": firstname, \"lastname\": lastname, \"middle\": middle, \"bday\": bday, \"pos\": pos,\n            \"login\": login}\n    return user\n\n\n@router.get(\"/users/function/add\")\ndef populate_user_accounts(user_account: Login = Depends(create_login)):\n    account_dict = jsonable_encoder(user_account)\n    login = Login(**account_dict)\n    login_details[login.id] = login\n    return login\n\n\n@router.post(\"/users/datamodel/add\")\ndef populate_login_without_service(user_account=Depends(Login)):\n    account_dict = jsonable_encoder(user_account)\n    login = Login(**account_dict)\n    login_details[login.id] = login\n    return login\n\n\n@router.post(\"/users/add/profile\")\nasync def add_profile_login(profile=Depends(create_user_details)):\n    user_profile = jsonable_encoder(profile)\n    user = User(**user_profile)\n    login = user.login\n    login = Login(**login)\n    user_profiles[user.id] = user\n    login_details[login.id] = login\n    return user_profile\n\n\n@router.post(\"/users/add/model/profile\")\nasync def add_profile_login_models(profile: Profile = Depends(Profile, use_cache=False)):\n    user_details = jsonable_encoder(profile.user)\n    login_details = jsonable_encoder(profile.login)\n    user = UserDetails(**user_details)\n    login = Login(**login_details)\n    user_profiles[user.id] = user\n    login_details[login.id] = login\n    return {\"profile_created\": profile.date_created}\n"}
{"type": "source_file", "path": "codes/ch03/repository/posts.py", "content": "from model.posts import Post\n\nposts = dict()\n\n\nclass PostRepository:\n    def __init__(self):\n        pass\n\n    def insert_post(self, post: Post):\n        posts[post.id] = post\n\n    def query_posts(self):\n        return list(posts.values())\n"}
{"type": "source_file", "path": "codes/ch03/containers/multiple_containers.py", "content": "from dependency_injector import containers, providers\n\nfrom repository.login import LoginRepository\nfrom repository.admin import AdminRepository\nfrom repository.keywords import KeywordRepository\n\n\nclass KeywordsContainer(containers.DeclarativeContainer):\n    keywordservice = providers.Factory(KeywordRepository)\n\n\nclass AdminContainer(containers.DeclarativeContainer):\n    adminservice = providers.Singleton(AdminRepository)\n\n\nclass LoginContainer(containers.DeclarativeContainer):\n    loginservice = providers.Factory(LoginRepository)\n\n\nclass RecipeAppContainer(containers.DeclarativeContainer):\n    keywordcontainer = providers.Container(KeywordsContainer)\n    admincontainer = providers.Container(AdminContainer)\n    logincontainer = providers.Container(LoginContainer)\n"}
{"type": "source_file", "path": "codes/ch03/dependencies/global_transactions.py", "content": "from fastapi import Request\nfrom uuid import uuid1\n\nservice_paths_log = dict()\n\n\ndef log_transaction(request: Request):\n    service_paths_log[uuid1()] = request.url.path\n"}
{"type": "source_file", "path": "codes/ch03/api/posts.py", "content": "from fastapi import APIRouter, Depends\nfrom fastapi.encoders import jsonable_encoder\n\nfrom dependencies.posts import check_feedback_length\nfrom model.classifications import RecipeRating\nfrom model.posts import Post\nfrom service.factory import get_post_service\nfrom uuid import UUID\nfrom datetime import date\n\nrouter = APIRouter()\n\n\nasync def create_post(id: UUID, feedback: str, rating: RecipeRating, userId: UUID, date_posted: date):\n    post = {\"id\": id, \"feedback\": feedback, \"rating\": rating, \"userId\": userId, \"date_posted\": date_posted}\n    return post\n\n\n@router.post(\"/posts/insert\", dependencies=[Depends(check_feedback_length)])\nasync def insert_post_feedback(post=Depends(create_post), handler=Depends(get_post_service)):\n    print('hello')\n    post_dict = jsonable_encoder(post)\n\n    post_obj = Post(**post_dict)\n\n    handler.add_post(post_obj)\n    return post\n"}
{"type": "source_file", "path": "codes/ch03/service/posts.py", "content": "from fastapi import Depends\nfrom model.posts import Post\nfrom repository.factory import get_post_repo\n\n\nclass PostService:\n\n    def __init__(self, repo=Depends(get_post_repo)):\n        self.repo = repo\n\n    def add_post(self, post: Post):\n        self.repo.insert_post(post)\n\n    def get_posts(self):\n        return self.repo.query_posts()\n"}
{"type": "source_file", "path": "codes/ch03/repository/aggregates.py", "content": "stats_user_type = dict()\n"}
{"type": "source_file", "path": "codes/ch02/main.py", "content": "import uvicorn\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import PlainTextResponse\nfrom starlette.exceptions import HTTPException as GlobalStarletteHTTPException\nfrom fastapi.exceptions import RequestValidationError\nfrom handler_exceptions import PostFeedbackException, PostRatingException\nfrom fastapi.responses import JSONResponse\n\nfrom admin import manager\nfrom login import user\nfrom feedback import post\nfrom places import destination\nfrom tourist import visit\nfrom datetime import datetime\n\napp = FastAPI()\n\napp.include_router(manager.router)\napp.include_router(user.router)\napp.include_router(destination.router)\napp.include_router(visit.router)\napp.include_router(\n    post.router,\n    prefix=\"/ch02/post\"\n)\n\n\n@app.middleware(\"http\")\nasync def log_transaction_filter(request: Request, call_next):\n    start_time = datetime.now()\n    method_name = request.method\n    qp_map = request.query_params\n    pp_map = request.path_params\n    with open(\"request_log.txt\", mode=\"a\") as reqfile:\n        content = f\"method: {method_name}, query param: {qp_map}, path params: {pp_map} received at {datetime.now()}\"\n        reqfile.write(content)\n        reqfile.write(\"\\n\")\n    response = await call_next(request)\n    process_time = datetime.now() - start_time\n    response.headers[\"X-Time-Elapsed\"] = str(process_time)\n    return response\n\n\n@app.get(\"/ch02\")\ndef index():\n    return {\"message\": \"Intelligent Tourist System Prototype!\"}\n\n\n@app.exception_handler(PostFeedbackException)\ndef feedback_exception_handler(req: Request, ex: PostFeedbackException):\n    return JSONResponse(\n        status_code=ex.status_code,\n        content={\"message\": f\"error: {ex.detail}\"}\n    )\n\n\n@app.exception_handler(PostRatingException)\ndef rating_exception_handler(req: Request, ex: PostRatingException):\n    return JSONResponse(\n        status_code=ex.status_code,\n        content={\"message\": f\"error: {ex.detail}\"}\n    )\n\n\n@app.exception_handler(GlobalStarletteHTTPException)\ndef global_exception_handler(req: Request, ex: str):\n    return PlainTextResponse(f\"Error message: {ex}\", status_code=400)\n\n\n@app.exception_handler(RequestValidationError)\ndef validationerror_exception_handler(req: Request, ex: str):\n    return PlainTextResponse(f\"Error message: {ex}\", status_code=400)\n\n\nif __name__ == '__main__':\n    uvicorn.run(app='main:app', reload=True)\n"}
{"type": "source_file", "path": "codes/ch03/api/login.py", "content": "from fastapi import APIRouter, Depends, status\nfrom pydantic import BaseModel\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\n\nimport sys\nfrom dependency_injector.wiring import inject, Provide\n\nfrom repository.users import login_details\nfrom repository.login import LoginRepository\nfrom containers.single_container import Container\n\nrouter = APIRouter()\n\n\nclass LoginReq(BaseModel):\n    username: str\n    password: str\n\n\n@router.get(\"/login/query\")\n@inject\ndef login_with_query(username: str, password: str,\n                     loginservice: LoginRepository = Depends(Provide[Container.loginservice])):\n    login = [account for account in login_details.values() if account.username == username]\n    if login is not None:\n        loginservice.login_audit(username, password)\n        login_json = jsonable_encoder(login[0])\n        return JSONResponse(content=login_json, status_code=status.HTTP_201_CREATED)\n    else:\n        return JSONResponse(content={\"message\": \"user does not exists\"}, status_code=status.HTTP_403_FORBIDDEN)\n\n\n@router.post(\"/login/model\")\n@inject\ndef login_with_model(user: LoginReq, loginservice: LoginRepository = Depends(Provide[Container.loginservice])):\n    login = [account for account in login_details.values() if account.username == user.username]\n    if login is not None:\n        loginservice.login_audit(user.username, user.password)\n        login_json = jsonable_encoder(login[0])\n        return JSONResponse(content=login_json, status_code=status.HTTP_201_CREATED)\n    else:\n        return JSONResponse(content={\"message\": \"user does not exists\"}, status_code=status.HTTP_403_FORBIDDEN)\n\n\ncontainer = Container()\ncontainer.wire(modules=[sys.modules[__name__]])\n"}
{"type": "source_file", "path": "codes/ch04/ch04/faculty_mgt/models/data/faculty.py", "content": "from datetime import datetime\nfrom enum import Enum\nfrom typing import List\n\n\nclass Major(str, Enum):\n    CS = 'Computer Science'\n    IT = 'Information Technology'\n    Math = 'Mathematics'\n    Chem = 'Chemistry'\n    Agri = 'Agriculture'\n    AgChem = 'Agricultural Chemistry'\n    Phy = 'Physics'\n    Stat = 'Statistics'\n    CommArts = 'Communication Arts'\n    FArts = 'Fine Arts'\n    Archi = 'Architecture'\n    Kinetics = 'Human Kinetics'\n    Physio = 'Physiology'\n    Psych = 'Psychology'\n    Hist = 'History'\n    Archeo = 'Archeology'\n    ChemEng = 'Chemical Engineering'\n    EEng = 'Electrical Engineering'\n    BioChem = 'BioChemistry'\n    MathEduc = 'Math Education'\n\n\nclass Faculty:\n    def __init__(self, faculty_id: int, fname: str, lname: str, mname: str, age: int, major: Major, department: str):\n        self.faculty_id: int = faculty_id\n        self.fname: str = fname\n        self.lname: str = lname\n        self.mname: str = mname\n        self.age: int = age\n        self.major: Major = major\n        self.department: str = department\n\n    def __repr__(self):\n        return ' '.join(\n            [str(self.faculty_id), self.fname, self.lname, self.mname, str(self.age), self.major, self.department])\n\n    def __str__(self):\n        return ' '.join(\n            [str(self.faculty_id), self.fname, self.lname, self.mname, str(self.age), self.major, self.department])\n\n\nclass Signup:\n    def __init__(self, sign_id: int, faculty_id: int, username: str, password: str):\n        self.sign_id: int = sign_id\n        self.faculty_id: int = faculty_id\n        self.username: str = username\n        self.password: str = password\n\n    def __repr__(self):\n        return ' '.join([str(self.sign_id), str(self.stud_id), self.username, self.password])\n\n    def __str__(self):\n        return ' '.join([str(self.sign_id), str(self.stud_id), self.username, self.password])\n\n\nclass Login:\n    def __init__(self, user_id: int, username: str, password: str, faculty_id: int):\n        self.user_id: int = user_id\n        self.username: str = username\n        self.password: str = password\n        self.faculty_id = faculty_id\n\n    def __repr__(self):\n        return ' '.join([str(self.user_id), self.username, self.password])\n\n    def __str__(self):\n        return ' '.join([str(self.user_id), self.username, self.password])\n\n\nclass Attendance:\n    def __init__(self, attend_id: int, stud_id: int, attend_date: datetime, subject: str, faculty: str):\n        self.attend_id: int = attend_id\n        self.stud_id: int = stud_id\n        self.attend_date: datetime = attend_date\n        self.subject: str = subject\n        self.faculty: str = faculty\n\n    def __repr__(self):\n        return ' '.join(\n            [str(self.attend_id), str(self.stud_id), self.attend_date.strftime(\"%m/%d/%Y, %H:%M:%S\"), self.subject,\n             self.faculty])\n\n    def __str__(self):\n        return ' '.join(\n            [str(self.attend_id), str(self.stud_id), self.attend_date.strftime(\"%m/%d/%Y, %H:%M:%S\"), self.subject,\n             self.faculty])\n\n\nclass Assignment:\n    def __init__(self, assgn_id: int, title: str, date_due: datetime, course: str):\n        self.assgn_id: int = assgn_id\n        self.title: str = title\n        self.date_completed: datetime = None\n        self.date_due: datetime = date_due\n        self.rating: float = 0.0\n        self.course: str = course\n\n    def __repr__(self):\n        return ' '.join([str(self.assgn_id), self.title, self.date_completed.strftime(\"%m/%d/%Y, %H:%M:%S\"),\n                         self.date_due.strftime(\"%m/%d/%Y, %H:%M:%S\"), str(self.rating)])\n\n    def __expr__(self):\n        return ' '.join([str(self.assgn_id), self.title, self.date_completed.strftime(\"%m/%d/%Y, %H:%M:%S\"),\n                         self.date_due.strftime(\"%m/%d/%Y, %H:%M:%S\"), str(self.rating)])\n\n\nclass StudentBin:\n    def __init__(self, bin_id: int, stud_id: int, faculty_id: int):\n        self.bin_id: int = bin_id\n        self.stud_id: int = stud_id\n        self.faculty_id: int = faculty_id\n        self.assignment: List[Assignment] = list()\n\n    def __repr__(self):\n        return ' '.join([str(self.bin_id), str(self.stud_id), str(self.faculty_id)])\n\n    def __expr__(self):\n        return ' '.join([str(self.bin_id), str(self.stud_id), str(self.faculty_id)])\n"}
{"type": "source_file", "path": "codes/ch03/api/recipes.py", "content": "from fastapi import APIRouter, Depends\nfrom service.factory import get_recipe_service\nfrom pydantic import BaseModel\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\n\nfrom model.recipes import Recipe\nfrom model.classifications import Category, Origin\nfrom typing import List\nfrom uuid import UUID\n\n\nclass IngredientReq(BaseModel):\n    id: UUID\n    name: str\n    qty: int\n    measure: str\n\n\nclass RecipeReq(BaseModel):\n    id: UUID\n    name: str\n    ingredients: List[IngredientReq]\n    cat: Category\n    orig: Origin\n\n\nrouter = APIRouter()\n\n\n@router.post(\"/recipes/insert\")\ndef insert_recipe(recipe: RecipeReq, handler=Depends(get_recipe_service)):\n    json_dict = jsonable_encoder(recipe)\n    rec = Recipe(**json_dict)\n    handler.add_recipe(rec)\n    return JSONResponse(content=json_dict, status_code=200)\n\n\n@router.get(\"/recipes/list/all\")\ndef get_all_recipes(handler=Depends(get_recipe_service)):\n    return handler.get_recipes()\n"}
{"type": "source_file", "path": "codes/ch03/model/users.py", "content": "from model.classifications import UserType\nfrom uuid import UUID\nfrom datetime import date\nfrom fastapi import Depends\n\n\nclass Login:\n    def __init__(self, id: UUID, username: str, password: str, type: UserType):\n        self.id = id\n        self.username = username\n        self.password = password\n        self.type = type\n\n\nclass User:\n    def __init__(self, id: UUID, login: Login, firstname: str, lastname: str, middle: str, bday: date, pos: str):\n        self.id = id\n        self.login = login\n        self.firstname = firstname\n        self.lastname = lastname\n        self.middle = middle\n        self.bday = bday\n        self.pos = pos\n\n\nclass UserDetails():\n    def __init__(self, id: UUID, firstname: str, lastname: str, middle: str, bday: date, pos: str):\n        self.id = id\n        self.firstname = firstname\n        self.lastname = lastname\n        self.middle = middle\n        self.bday = bday\n        self.pos = pos\n\n\nclass Profile:\n    def __init__(self, id: UUID, date_created: date, login=Depends(Login), user=Depends(UserDetails)):\n        self.id = id\n        self.date_created = date_created\n        self.login = login\n        self.user = user\n"}
{"type": "source_file", "path": "codes/ch02/utility.py", "content": "async def check_post_owner(feedbacks, fid, touristId):\n    return feedbacks[fid].tourist_id == touristId\n"}
{"type": "source_file", "path": "codes/ch03/repository/complaints.py", "content": "from uuid import UUID\nfrom repository.recipes import recipes\n\nrecipe_bad = dict()\n\n\nclass BadRecipeRepository:\n    def __init__(self):\n        pass\n\n    def add_bad_recipe(self, id: UUID):\n        recipe_bad[id] = id\n\n    def query_bad_recipes(self):\n        return list(recipe_bad.values())\n"}
{"type": "source_file", "path": "codes/ch04/ch04/faculty_mgt/models/data/facultydb.py", "content": "from typing import Dict\n\nfrom faculty_mgt.models.data.faculty import Faculty, Assignment, Login, Signup, StudentBin\n\nfaculty_tbl: Dict[int, Faculty] = dict()\nfaculty_assignments_tbl: Dict[int, Assignment] = dict()\nfaculty_login_tbl: Dict[int, Login] = dict()\nfaculty_signup_tbl: Dict[int, Signup] = dict()\nstudent_bin_tbl: Dict[int, StudentBin] = dict()\n"}
{"type": "source_file", "path": "codes/ch02/places/destination.py", "content": "from fastapi import APIRouter, Response\nfrom typing import List, NamedTuple\nfrom pydantic import BaseModel\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\n\nfrom datetime import datetime\nfrom uuid import UUID\nfrom enum import Enum, IntEnum\n\nrouter = APIRouter()\n\ntours = dict()\ntours_basic_info = dict()\ntours_locations = dict()\n\n\nclass StarRating(IntEnum):\n    onw = 1\n    two = 2\n    three = 3\n    four = 4\n    five = 5\n\n\nclass Post(BaseModel):\n    feedback: str\n    rating: StarRating\n    date_posted: datetime\n\n\nclass Location(NamedTuple):\n    latitude: float\n    longitude: float = 0.0\n\n\nclass TourType(str, Enum):\n    resort = \"resort\"\n    hotel = \"hotel\"\n    bungalow = \"bungalow\"\n    tent = \"tent\"\n    exclusive = \"exclusive\"\n\n\nclass AmenitiesTypes(str, Enum):\n    restaurant = \"restaurant\"\n    pool = \"pool\"\n    beach = \"beach\"\n    shops = \"shops\"\n    bars = \"bars\"\n    activities = \"activities\"\n\n\nclass TourInput(BaseModel):\n    name: str\n    city: str\n    country: str\n    type: TourType\n    location: Location\n    amenities: List[AmenitiesTypes]\n\n\nclass Tour(BaseModel):\n    id: UUID\n    name: str\n    city: str\n    country: str\n    type: TourType\n    location: Location\n    amenities: List[AmenitiesTypes]\n    feedbacks: List[Post]\n    ratings: float\n    visits: int\n    isBooked: bool\n\n\nclass TourBasicInfo(BaseModel):\n    id: UUID\n    name: str\n    type: TourType\n    amenities: List[AmenitiesTypes]\n    ratings: float\n\n\nclass TourLocation(BaseModel):\n    id: UUID\n    name: str\n    city: str\n    country: str\n    location: Location\n\n\nclass TourPreference(str, Enum):\n    party = \"party\"\n    extreme = \"hiking\"\n    staycation = \"staycation\"\n    groups = \"groups\"\n    solo = \"solo\"\n\n\n@router.get(\"/ch02/destinations/list/all\")\ndef list_tour_destinations():\n    tours_json = jsonable_encoder(tours)\n    resp_headers = {'X-Access-Tours': 'Try Us', 'X-Contact-Details': '1-900-888-TOLL',\n                    'Set-Cookie': 'AppName=ITS; Max-Age=3600; Version=1'}\n    return JSONResponse(content=tours_json, headers=resp_headers)\n\n\n@router.get(\"/ch02/destinations/details/{id}\")\ndef check_tour_profile(id: UUID):\n    tour_info_json = jsonable_encoder(tours[id])\n    return JSONResponse(content=tour_info_json)\n\n\n@router.get(\"/ch02/destinations/amenities/tour/{id}\")\ndef show_amenities(id: UUID):\n    if tours[id].amenities is not None:\n        amenities = tours[id].amenities\n        amenities_json = jsonable_encoder(amenities)\n        return JSONResponse(content=amenities_json)\n    else:\n        return {\"message\": \"no amenities\"}\n\n\n@router.get(\"/ch02/destinations/mostbooked\")\ndef check_recommended_tour(resp: Response):\n    resp.headers['X-Access-Tours'] = 'TryUs'\n    resp.headers['X-Contact-Details'] = '1900888TOLL'\n    resp.headers['Content-Language'] = 'en-US'\n    ranked_desc_rates = sort_orders = sorted(tours.items(), key=lambda x: x[1].ratings, reverse=True)\n    return ranked_desc_rates\n"}
{"type": "source_file", "path": "codes/ch03/model/recipes.py", "content": "from uuid import UUID\nfrom model.classifications import Category, Origin\nfrom typing import List\n\n\nclass Ingredient:\n    def __init__(self, id: UUID, name: str, qty: float, measure: str):\n        self.id = id\n        self.name = name\n        self.qty = qty\n        self.measure = measure\n\n\nclass Recipe:\n    def __init__(self, id: UUID, name: str, ingredients: List[Ingredient], cat: Category, orig: Origin):\n        self.id = id\n        self.name = name\n        self.ingredients = ingredients\n        self.cat = cat\n        self.orig = orig\n"}
{"type": "source_file", "path": "codes/ch02/login/user.py", "content": "from fastapi import APIRouter, status, BackgroundTasks\nfrom typing import List\nfrom pydantic import BaseModel\nfrom fastapi.encoders import jsonable_encoder\nfrom fastapi.responses import JSONResponse\nfrom background import audit_log_transaction\n\nfrom places.destination import TourBasicInfo\n\nfrom datetime import datetime\nfrom uuid import UUID, uuid1\n\nrouter = APIRouter()\n\npending_users = dict()\napproved_users = dict()\n\n\nclass Signup(BaseModel):\n    username: str\n    password: str\n    firstname: str\n    lastname: str\n    birthday: datetime\n\n\nclass User(BaseModel):\n    id: UUID\n    username: str\n    password: str\n\n\nclass Tourist(BaseModel):\n    id: UUID\n    login: User\n    date_signed: datetime\n    booked: int\n    tours: List[TourBasicInfo]\n\n\n@router.post(\"/ch02/user/signup/\")\ndef signup(signup: Signup):\n    try:\n        userid = uuid1()\n        login = User(id=userid, username=signup.username, password=signup.password)\n        tourist = Tourist(id=userid, login=login, date_signed=datetime.now(), booked=0, tours=list())\n        tourist_json = jsonable_encoder(tourist)\n        pending_users[userid] = tourist_json\n        return JSONResponse(content=tourist_json, status_code=status.HTTP_201_CREATED)\n    except:\n        return JSONResponse(content={\"message\": \"invalid operation\"}, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@router.post(\"/ch02/user/login/\")\ndef login(login: User, bg_task: BackgroundTasks):\n    try:\n        signup_json = jsonable_encoder(approved_users[login.id])\n        # 埋点：登录\n        bg_task.add_task(audit_log_transaction, touristId=str(login.id), message=\"login\")\n        return JSONResponse(content=signup_json, status_code=status.HTTP_200_OK)\n    except:\n        return JSONResponse(content={\"message\": \"invalid operation\"}, status_code=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@router.get(\"/ch02/user/login/{username}/{password}\")\ndef login(username: str, password: str, bg_task: BackgroundTasks):\n    tourist_list = [tourist for tourist in approved_users.values() if\n                    tourist['login']['username'] == username and tourist['login']['password'] == password]\n    if len(tourist_list) == 0 or tourist_list is None:\n        return JSONResponse(content={\"message\": \"invalid operation\"}, status_code=status.HTTP_403_FORBIDDEN)\n    else:\n        tourist = tourist_list[0]\n        tour_json = jsonable_encoder(tourist)\n        # 埋点：登录\n        bg_task.add_task(audit_log_transaction, touristId=str(tourist['login']['id']), message=\"login\")\n        return JSONResponse(content=tour_json, status_code=status.HTTP_200_OK)\n"}
