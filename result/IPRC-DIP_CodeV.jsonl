{"repo_info": {"repo_name": "CodeV", "repo_owner": "IPRC-DIP", "repo_url": "https://github.com/IPRC-DIP/CodeV"}}
{"type": "source_file", "path": "src/Instruction_generation/changeDatasetFormat.py", "content": "import json\nimport random\nrandom.seed(6)\njsonl_file = r''\noutput_file = r\"\"\ndef read_jsonl(file_path):\n    data = []\n    with open(file_path, 'r') as file:\n        for line in file:\n            try:\n                json_data = json.loads(line)\n                data.append(json_data)\n            except:\n                pass\n    return data\n\nimport re\ndef find_module_end(text):\n    pattern = r'module[\\s\\S]+?\\s*\\);'\n    match = re.search(pattern, text)\n    if match:\n        module_end_pos = match.end()\n        return module_end_pos\n    else:\n        return 0\n    \njson_data_list = read_jsonl(jsonl_file)\n# random.shuffle(json_data_list)\nwith open(output_file, \"w\") as f:\n    for json_data in json_data_list:\n        instruction = json_data['describe']+\"\\n\"+json_data['code'][:find_module_end(json_data['code'])]\n        response = f\"{json_data['code']}\"\n        zy08_0to10k_data = {\"instruction\": instruction,  \"response\":response}\n        f.write(json.dumps(zy08_0to10k_data)+\"\\n\")"}
{"type": "source_file", "path": "src/Instruction_generation/gpt.py", "content": "import requests\nimport json\nimport os\nimport time\nimport random\nimport shutil\nimport threading\nimport time\nimport copy\n\nimport openai\n\nsemaphore = threading.Semaphore(100)# \nwrite_lock = threading.Lock()\n\ndef getTheFormatData(code):\n    with open(r\"\", \"r\") as f:\n        template = f.read()\n    \n    data = template.replace(\"{our_code}\",code)\n    #print(data)\n    return data\n\n\n\ndef getAnswerGPT(code, progress_bar_func, content_func,task_id):\n    global api_key\n    client = openai.OpenAI(api_key = api_key)\n    with semaphore:\n        while True:#not signal:#\n            try:\n                # print(\"generate\")\n                dic = {}\n                with open(output_path, \"a\", encoding=\"utf-8\") as nl_file:\n                    messages = [\n                                    {\n                                    \"role\": \"user\",\n                                    \"content\":getTheFormatData(code)\n                                    }\n                                ]\n                    response = client.chat.completions.create(\n                        model=\"\",#\"deepseek-chat\", #\n                        messages = messages,\n                        temperature = 0.7\n                    )\n\n                    response_exe =  response.choices[0].message.content\n                    dic['task_id'] = task_id\n                    dic[\"describe\"] = response_exe\n                    dic[\"prompt\"] = getTheFormatData(code)\n                    dic['code'] = code\n                    #dic['table'] = table\n                    json_data = json.dumps(dic)  \n                    write_lock.acquire()\n                    nl_file.write(json_data + '\\n')\n                    write_lock.release()\n                    print(\"generate success!\")\n                    break\n            except Exception as e:\n                print(\"error:\",e)\n                time.sleep(60)\n\n        return 1\n\n\n\ndef get_describe_from_gpt(descri_path ,\n                          output_path, \n                          id_begin=0, ):\n\n    progress_bar = 0#\n    id = 0\n    content = \"\"\n    threads = []\n\n    verilog_list = []\n    if os.path.exists(output_path):\n        with open(output_path, \"r\", encoding=\"utf-8\") as nl_file:\n            for line in nl_file:\n                line = line.strip()\n                if line:\n                    try:\n                        data = json.loads(line)\n                        verilog_list.append(data['code'].replace(\"\\n\",' ').replace(\"\\t\",' '))\n                    except:\n                        continue\n                    \n    \n    # print(\"step\")\n    with open(descri_path, 'r') as file:\n        for line in file:\n            line = line.strip()\n            if line:\n                try:\n                    data = json.loads(line)\n                except:\n                    continue\n                data_func = copy.deepcopy(data)\n                code = data.get(\"verilog\")\n                task_id = data.get('task_id')\n                #table = data.get(\"instruction\")\n                if code:\n                    if id < id_begin:\n                        id += 1\n                        progress_bar+=1\n                        continue\n                    else:\n                        id = id + 1\n                        progress_bar+=1\n                        print(progress_bar)\n                if code.replace(\"\\n\",' ').replace(\"\\t\",' ') in verilog_list:\n                    verilog_list.remove(code.replace(\"\\n\",' ').replace(\"\\t\",' '))\n                    print(\"skip\")\n                    continue\n                getAnswerGPT(code, progress_bar, data_func, task_id)\n\nif __name__ == \"__main__\":\n    descri_path=\"\"\n    output_path=\"\"\n    get_describe_from_gpt(descri_path,output_path)"}
